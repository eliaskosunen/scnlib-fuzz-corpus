_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.06M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.06M|  chars_format const fmt = options.format;
  277|  1.06M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.06M|  parsed_number_string_t<UC> answer;
  280|  1.06M|  answer.valid = false;
  281|  1.06M|  answer.too_many_digits = false;
  282|  1.06M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.06M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.06M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.06M|  UC const * const start_digits = p;
  303|       |
  304|  1.06M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  6.48M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 6.17M, False: 305k]
  |  Branch (306:25): [True: 5.41M, False: 762k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  5.41M|    i = 10 * i +
  310|  5.41M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  5.41M|    ++p;
  312|  5.41M|  }
  313|  1.06M|  UC const * const end_of_integer_part = p;
  314|  1.06M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.06M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.06M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  1.06M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.06M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.06M|  int64_t exponent = 0;
  324|  1.06M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 762k, False: 305k]
  |  Branch (324:49): [True: 153k, False: 609k]
  ------------------
  325|  1.06M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 153k, False: 914k]
  ------------------
  326|   153k|    ++p;
  327|   153k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   153k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   658k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 607k, False: 50.9k]
  |  Branch (332:27): [True: 504k, False: 102k]
  ------------------
  333|   504k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   504k|      ++p;
  335|   504k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   504k|    }
  337|   153k|    exponent = before - p;
  338|   153k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   153k|    digit_count -= exponent;
  340|   153k|  }
  341|  1.06M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  1.06M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.06M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.06M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.06M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.06M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.06M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 924k, False: 142k]
  ------------------
  352|  1.06M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 711k, False: 213k]
  ------------------
  353|  1.06M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 87.9k, False: 623k]
  |  Branch (353:29): [True: 27.4k, False: 595k]
  ------------------
  354|  1.06M|       ||
  355|  1.06M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|   952k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 952k]
  ------------------
  356|   952k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   952k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   115k|    UC const * location_of_e = p;
  359|   115k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 87.9k, False: 27.4k]
  |  Branch (359:28): [True: 27.4k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   115k|      ++p;
  361|   115k|    }
  362|   115k|    bool neg_exp = false;
  363|   115k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 115k, False: 265]
  |  Branch (363:24): [True: 9.96k, False: 105k]
  ------------------
  364|  9.96k|      neg_exp = true;
  365|  9.96k|      ++p;
  366|   105k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 105k, False: 265]
  |  Branch (366:31): [True: 22.8k, False: 82.3k]
  ------------------
  367|  22.8k|      ++p;
  368|  22.8k|    }
  369|   115k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 295, False: 115k]
  |  Branch (369:24): [True: 735, False: 114k]
  ------------------
  370|  1.03k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.03k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.03k|      p = location_of_e;
  376|   114k|    } else {
  377|   383k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 345k, False: 37.9k]
  |  Branch (377:29): [True: 269k, False: 76.4k]
  ------------------
  378|   269k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   269k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 245k, False: 23.8k]
  ------------------
  380|   245k|          exp_number = 10 * exp_number + digit;
  381|   245k|        }
  382|   269k|        ++p;
  383|   269k|      }
  384|   114k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 9.92k, False: 104k]
  ------------------
  385|   114k|      exponent += exp_number;
  386|   114k|    }
  387|   952k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   952k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 809k, False: 142k]
  |  Branch (389:44): [True: 0, False: 809k]
  ------------------
  390|   952k|  }
  391|  1.06M|  answer.lastmatch = p;
  392|  1.06M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.06M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 165k, False: 902k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   165k|    UC const * start = start_digits;
  405|  1.51M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.51M, False: 1.29k]
  |  Branch (405:32): [True: 1.32M, False: 194k]
  |  Branch (405:53): [True: 31.2k, False: 163k]
  ------------------
  406|  1.35M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 1.32M, False: 31.2k]
  ------------------
  407|  1.35M|      start++;
  408|  1.35M|    }
  409|       |
  410|   165k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 150k, False: 14.1k]
  ------------------
  411|   150k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   150k|      i = 0;
  416|   150k|      p = answer.integer.ptr;
  417|   150k|      UC const* int_end = p + answer.integer.len();
  418|   150k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.39M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.33M, False: 64.0k]
  |  Branch (419:54): [True: 2.24M, False: 86.8k]
  ------------------
  420|  2.24M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.24M|        ++p;
  422|  2.24M|      }
  423|   150k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 64.0k, False: 86.8k]
  ------------------
  424|  64.0k|        exponent = end_of_integer_part - p + exp_number;
  425|  64.0k|      }
  426|  86.8k|      else { // We have a value with a fractional component.
  427|  86.8k|        p = answer.fraction.ptr;
  428|  86.8k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.79M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.71M, False: 86.8k]
  |  Branch (429:56): [True: 1.71M, False: 0]
  ------------------
  430|  1.71M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.71M|          ++p;
  432|  1.71M|        }
  433|  86.8k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  86.8k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   150k|    }
  437|   165k|  }
  438|  1.06M|  answer.exponent = exponent;
  439|  1.06M|  answer.mantissa = i;
  440|  1.06M|  return answer;
  441|  1.06M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  7.24M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  7.24M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 159k, False: 7.08M]
  |  Branch (36:27): [True: 782k, False: 6.30M]
  ------------------
   37|  7.24M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   153k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   685k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 628k, False: 56.1k]
  |  Branch (249:43): [True: 531k, False: 97.0k]
  ------------------
  250|   531k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   531k|    p += 8;
  252|   531k|  }
  253|   153k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   628k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   628k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   628k|     0x8080808080808080));
  172|   628k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.35M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.35M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.35M|  uint64_t val;
   63|  1.35M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.35M|  return val;
   69|  1.35M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   837k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   837k|  const uint64_t mask = 0x000000FF000000FF;
  148|   837k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   837k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   837k|  val -= 0x3030303030303030;
  151|   837k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   837k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   837k|  return uint32_t(val);
  154|   837k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   191k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   191k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   191k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   191k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   191k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   933k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   933k|  chars_format const fmt = options.format;
  277|   933k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   933k|  parsed_number_string_t<UC> answer;
  280|   933k|  answer.valid = false;
  281|   933k|  answer.too_many_digits = false;
  282|   933k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   933k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 933k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   933k|  UC const * const start_digits = p;
  303|       |
  304|   933k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.20M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.86M, False: 333k]
  |  Branch (306:25): [True: 4.26M, False: 599k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.26M|    i = 10 * i +
  310|  4.26M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.26M|    ++p;
  312|  4.26M|  }
  313|   933k|  UC const * const end_of_integer_part = p;
  314|   933k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   933k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   933k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|   933k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 933k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   933k|  int64_t exponent = 0;
  324|   933k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 599k, False: 333k]
  |  Branch (324:49): [True: 106k, False: 493k]
  ------------------
  325|   933k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 106k, False: 827k]
  ------------------
  326|   106k|    ++p;
  327|   106k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   106k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  2.89M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 2.86M, False: 35.4k]
  |  Branch (332:27): [True: 2.79M, False: 70.8k]
  ------------------
  333|  2.79M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  2.79M|      ++p;
  335|  2.79M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  2.79M|    }
  337|   106k|    exponent = before - p;
  338|   106k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   106k|    digit_count -= exponent;
  340|   106k|  }
  341|   933k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|   933k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 933k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   933k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 933k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   933k|  int64_t exp_number = 0;            // explicit exponential part
  351|   933k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 799k, False: 134k]
  ------------------
  352|   933k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 564k, False: 234k]
  ------------------
  353|   933k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 71.4k, False: 492k]
  |  Branch (353:29): [True: 24.2k, False: 468k]
  ------------------
  354|   933k|       ||
  355|   933k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|   837k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 837k]
  ------------------
  356|   837k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   837k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  95.7k|    UC const * location_of_e = p;
  359|  95.7k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 71.4k, False: 24.2k]
  |  Branch (359:28): [True: 24.2k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  95.7k|      ++p;
  361|  95.7k|    }
  362|  95.7k|    bool neg_exp = false;
  363|  95.7k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 95.4k, False: 265]
  |  Branch (363:24): [True: 8.93k, False: 86.5k]
  ------------------
  364|  8.93k|      neg_exp = true;
  365|  8.93k|      ++p;
  366|  86.7k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 86.5k, False: 265]
  |  Branch (366:31): [True: 19.3k, False: 67.1k]
  ------------------
  367|  19.3k|      ++p;
  368|  19.3k|    }
  369|  95.7k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 295, False: 95.4k]
  |  Branch (369:24): [True: 665, False: 94.7k]
  ------------------
  370|    960|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 960]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    960|      p = location_of_e;
  376|  94.7k|    } else {
  377|   319k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 287k, False: 31.9k]
  |  Branch (377:29): [True: 224k, False: 62.7k]
  ------------------
  378|   224k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   224k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 204k, False: 20.7k]
  ------------------
  380|   204k|          exp_number = 10 * exp_number + digit;
  381|   204k|        }
  382|   224k|        ++p;
  383|   224k|      }
  384|  94.7k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 8.90k, False: 85.8k]
  ------------------
  385|  94.7k|      exponent += exp_number;
  386|  94.7k|    }
  387|   837k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   837k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 703k, False: 134k]
  |  Branch (389:44): [True: 0, False: 703k]
  ------------------
  390|   837k|  }
  391|   933k|  answer.lastmatch = p;
  392|   933k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   933k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 112k, False: 820k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   112k|    UC const * start = start_digits;
  405|   790k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 789k, False: 766]
  |  Branch (405:32): [True: 664k, False: 124k]
  |  Branch (405:53): [True: 12.9k, False: 111k]
  ------------------
  406|   677k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 664k, False: 12.9k]
  ------------------
  407|   677k|      start++;
  408|   677k|    }
  409|       |
  410|   112k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 103k, False: 8.62k]
  ------------------
  411|   103k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   103k|      i = 0;
  416|   103k|      p = answer.integer.ptr;
  417|   103k|      UC const* int_end = p + answer.integer.len();
  418|   103k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.68M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.63M, False: 48.6k]
  |  Branch (419:54): [True: 1.58M, False: 55.3k]
  ------------------
  420|  1.58M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.58M|        ++p;
  422|  1.58M|      }
  423|   103k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 48.6k, False: 55.3k]
  ------------------
  424|  48.6k|        exponent = end_of_integer_part - p + exp_number;
  425|  48.6k|      }
  426|  55.3k|      else { // We have a value with a fractional component.
  427|  55.3k|        p = answer.fraction.ptr;
  428|  55.3k|        UC const* frac_end = p + answer.fraction.len();
  429|   975k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 919k, False: 55.3k]
  |  Branch (429:56): [True: 919k, False: 0]
  ------------------
  430|   919k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|   919k|          ++p;
  432|   919k|        }
  433|  55.3k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  55.3k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   103k|    }
  437|   112k|  }
  438|   933k|  answer.exponent = exponent;
  439|   933k|  answer.mantissa = i;
  440|   933k|  return answer;
  441|   933k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  8.11M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  8.11M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 135k, False: 7.97M]
  |  Branch (36:27): [True: 597k, False: 7.37M]
  ------------------
   37|  8.11M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|   106k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|   106k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|   106k|    return;
  240|   106k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|   113k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   113k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   113k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   113k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   113k|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|   113k|uint64_t read8_to_u64(const UC *chars) {
   54|   113k|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|   113k|    uint64_t val = 0;
   56|  1.02M|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 910k, False: 113k]
  ------------------
   57|   910k|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|   910k|      ++chars;
   59|   910k|    }
   60|   113k|    return val;
   61|   113k|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|   113k|}

_ZN10fast_float6bigintC2Ev:
  412|  69.2k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   145k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   230k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   230k|    return small_mul(vec, y);
  565|   230k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   358k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   358k|  limb carry = 0;
  284|  1.52M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.16M, False: 358k]
  ------------------
  285|  1.16M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.16M|  }
  287|   358k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 235k, False: 123k]
  ------------------
  288|   235k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  174|   235k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
  289|   235k|  }
  290|   358k|  return true;
  291|   358k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.86M|  constexpr size_t len() const noexcept {
   77|  2.86M|    return length;
   78|  2.86M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.16M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.16M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.16M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.16M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.16M|  carry = limb(z >> limb_bits);
  235|  1.16M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.16M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  3.14M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  3.14M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|  3.14M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  3.14M|    return data[index];
   60|  3.14M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   321k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   321k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 321k, False: 0]
  ------------------
   93|   321k|      push_unchecked(value);
   94|   321k|      return true;
   95|   321k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   321k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   388k|  constexpr size_t capacity() const noexcept {
   83|   388k|    return size;
   84|   388k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   375k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   375k|    data[length] = value;
   88|   375k|    length++;
   89|   375k|  }
_ZN10fast_float6bigint3addEm:
  567|   230k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   230k|    return small_add(vec, y);
  569|   230k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   230k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   230k|  return small_add_from(vec, y, 0);
  277|   230k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   230k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   230k|  size_t index = start;
  259|   230k|  limb carry = y;
  260|   230k|  bool overflow;
  261|   335k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 174k, False: 161k]
  |  Branch (261:24): [True: 104k, False: 69.2k]
  ------------------
  262|   104k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   104k|    carry = limb(overflow);
  264|   104k|    index += 1;
  265|   104k|  }
  266|   230k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 69.2k, False: 161k]
  ------------------
  267|  69.2k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  174|  69.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 69.2k]
  |  |  ------------------
  ------------------
  268|  69.2k|  }
  269|   230k|  return true;
  270|   230k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   318k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   318k|  limb z;
  211|       |// gcc and clang
  212|   318k|#if defined(__has_builtin)
  213|   318k|  #if __has_builtin(__builtin_add_overflow)
  214|   318k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   318k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   318k|      return z;
  217|   318k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   318k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  15.2k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  15.2k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  174|  15.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 15.2k]
  |  |  ------------------
  ------------------
  611|  15.2k|    return pow2(exp);
  612|  15.2k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  69.2k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  69.2k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  69.2k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  74.7k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 5.45k, False: 69.2k]
  ------------------
  582|  5.45k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  174|  5.45k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 5.45k]
  |  |  ------------------
  ------------------
  583|  5.45k|      exp -= large_step;
  584|  5.45k|    }
  585|  69.2k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  69.2k|    uint32_t small_step = 27;
  587|  69.2k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   120k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 51.2k, False: 69.2k]
  ------------------
  593|  51.2k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  174|  51.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 51.2k]
  |  |  ------------------
  ------------------
  594|  51.2k|      exp -= small_step;
  595|  51.2k|    }
  596|  69.2k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 49.2k, False: 19.9k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  49.2k|      FASTFLOAT_TRY(
  ------------------
  |  |  174|  49.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 49.2k]
  |  |  ------------------
  ------------------
  601|  49.2k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  49.2k|      );
  603|  49.2k|    }
  604|       |
  605|  69.2k|    return true;
  606|  69.2k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  5.45k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  5.45k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 5.45k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  174|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  5.45k|  } else {
  368|  5.45k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  174|  5.45k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 5.45k]
  |  |  ------------------
  ------------------
  369|  5.45k|  }
  370|  5.45k|  return true;
  371|  5.45k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  5.45k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  5.45k|  limb_span xs = limb_span(x.data, x.len());
  337|  5.45k|  stackvec<size> z(xs);
  338|  5.45k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  5.45k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 5.45k, False: 0]
  ------------------
  341|  5.45k|    limb y0 = y[0];
  342|  5.45k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  174|  5.45k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 5.45k]
  |  |  ------------------
  ------------------
  343|  27.2k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 21.8k, False: 5.45k]
  ------------------
  344|  21.8k|      limb yi = y[index];
  345|  21.8k|      stackvec<size> zi;
  346|  21.8k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 21.8k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  21.8k|        zi.set_len(0);
  349|  21.8k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  174|  21.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
  350|  21.8k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  174|  21.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
  351|  21.8k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  21.8k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  174|  21.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
  353|  21.8k|      }
  354|  21.8k|    }
  355|  5.45k|  }
  356|       |
  357|  5.45k|  x.normalize();
  358|  5.45k|  return true;
  359|  5.45k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  5.45k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  5.45k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  166|  5.45k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  5.45k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  88.2k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  88.2k|    length = uint16_t(len);
   75|  88.2k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  27.2k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  27.2k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 27.2k, False: 0]
  ------------------
  108|  27.2k|      extend_unchecked(s);
  109|  27.2k|      return true;
  110|  27.2k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  27.2k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  27.2k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  27.2k|    limb* ptr = data + length;
  102|  27.2k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  27.2k|    set_len(len() + s.len());
  104|  27.2k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  21.8k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  21.8k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 21.8k]
  |  Branch (300:26): [True: 21.5k, False: 272]
  ------------------
  301|  21.5k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  174|  21.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
  302|  21.5k|  }
  303|       |
  304|  21.8k|  bool carry = false;
  305|   180k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 158k, False: 21.8k]
  ------------------
  306|   158k|    limb xi = x[index + start];
  307|   158k|    limb yi = y[index];
  308|   158k|    bool c1 = false;
  309|   158k|    bool c2 = false;
  310|   158k|    xi = scalar_add(xi, yi, c1);
  311|   158k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 54.8k, False: 103k]
  ------------------
  312|  54.8k|      xi = scalar_add(xi, 1, c2);
  313|  54.8k|    }
  314|   158k|    x[index + start] = xi;
  315|   158k|    carry = c1 | c2;
  316|   158k|  }
  317|       |
  318|       |  // handle overflow
  319|  21.8k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 21.8k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  174|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  21.8k|  return true;
  323|  21.8k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  21.5k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  21.5k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 21.5k]
  ------------------
  132|      0|      return false;
  133|  21.5k|    } else {
  134|  21.5k|      resize_unchecked(new_len, value);
  135|  21.5k|      return true;
  136|  21.5k|    }
  137|  21.5k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  21.5k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  21.5k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 21.5k, False: 0]
  ------------------
  120|  21.5k|      size_t count = new_len - len();
  121|  21.5k|      limb* first = data + len();
  122|  21.5k|      limb* last = first + count;
  123|  21.5k|      ::std::fill(first, last, value);
  124|  21.5k|      set_len(new_len);
  125|  21.5k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  21.5k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  59.4k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  59.4k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 59.4k, False: 0]
  |  Branch (152:25): [True: 0, False: 59.4k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  59.4k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   104k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   104k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   104k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   104k|    size_t rindex = length - index - 1;
   69|   104k|    return data[rindex];
   70|   104k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  69.0k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  69.0k|    return shl(exp);
  574|  69.0k|  }
_ZN10fast_float6bigint3shlEm:
  530|  69.0k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  69.0k|    size_t rem = n % limb_bits;
  532|  69.0k|    size_t div = n / limb_bits;
  533|  69.0k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 53.4k, False: 15.6k]
  ------------------
  534|  53.4k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  174|  53.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 53.4k]
  |  |  ------------------
  ------------------
  535|  53.4k|    }
  536|  69.0k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 17.6k, False: 51.4k]
  ------------------
  537|  17.6k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  174|  17.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
  538|  17.6k|    }
  539|  69.0k|    return true;
  540|  69.0k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  53.4k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  53.4k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  170|  53.4k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  53.4k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  170|  53.4k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  53.4k|    size_t shl = n;
  493|  53.4k|    size_t shr = limb_bits - shl;
  494|  53.4k|    limb prev = 0;
  495|   194k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 140k, False: 53.4k]
  ------------------
  496|   140k|      limb xi = vec[index];
  497|   140k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   140k|      prev = xi;
  499|   140k|    }
  500|       |
  501|  53.4k|    limb carry = prev >> shr;
  502|  53.4k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 17.4k, False: 35.9k]
  ------------------
  503|  17.4k|      return vec.try_push(carry);
  504|  17.4k|    }
  505|  35.9k|    return true;
  506|  53.4k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  17.6k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  17.6k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  170|  17.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  17.6k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 17.6k]
  ------------------
  512|      0|      return false;
  513|  17.6k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 17.6k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  17.6k|      limb* dst = vec.data + n;
  516|  17.6k|      const limb* src = vec.data;
  517|  17.6k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  17.6k|      limb* first = vec.data;
  520|  17.6k|      limb* last = first + n;
  521|  17.6k|      ::std::fill(first, last, 0);
  522|  17.6k|      vec.set_len(n + vec.len());
  523|  17.6k|      return true;
  524|  17.6k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  17.6k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  32.8k|  constexpr bool is_empty() const noexcept {
   80|  32.8k|    return length == 0;
   81|  32.8k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  15.2k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  15.2k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  15.2k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 15.2k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  15.2k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.69k, False: 13.5k]
  ------------------
  435|  1.69k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.5k|    } else {
  437|  13.5k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.5k|      truncated |= vec.nonzero(2);
  439|  13.5k|      return result;
  440|  13.5k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  15.2k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.69k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.69k|  truncated = false;
  167|  1.69k|  int shl = leading_zeroes(r0);
  168|  1.69k|  return r0 << shl;
  169|  1.69k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.5k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.5k|  int shl = leading_zeroes(r0);
  174|  13.5k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 13.5k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  13.5k|  } else {
  178|  13.5k|    int shr = 64 - shl;
  179|  13.5k|    truncated = (r1 << shl) != 0;
  180|  13.5k|    return (r0 << shl) | (r1 >> shr);
  181|  13.5k|  }
  182|  13.5k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.5k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.6k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 683, False: 12.9k]
  ------------------
  143|    683|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 647, False: 36]
  ------------------
  144|    647|        return true;
  145|    647|      }
  146|     36|      index++;
  147|     36|    }
  148|  12.9k|    return false;
  149|  13.5k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  15.2k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  15.2k|    int lz = ctlz();
  560|  15.2k|    return int(limb_bits * vec.len()) - lz;
  561|  15.2k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  15.2k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  15.2k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 15.2k]
  ------------------
  545|      0|      return 0;
  546|  15.2k|    } else {
  547|  15.2k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  15.2k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  15.2k|    }
  555|  15.2k|  }
_ZN10fast_float6bigintC2Em:
  418|  53.9k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  53.9k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  53.9k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  53.9k|    vec.normalize();
  426|  53.9k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  53.9k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  53.9k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 53.9k]
  ------------------
  464|      0|      return 1;
  465|  53.9k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 53.9k]
  ------------------
  466|      0|      return -1;
  467|  53.9k|    } else {
  468|   108k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 99.3k, False: 8.84k]
  ------------------
  469|  99.3k|        limb xi = vec[index - 1];
  470|  99.3k|        limb yi = other.vec[index - 1];
  471|  99.3k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 4.73k, False: 94.6k]
  ------------------
  472|  4.73k|          return 1;
  473|  94.6k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 40.4k, False: 54.2k]
  ------------------
  474|  40.4k|          return -1;
  475|  40.4k|        }
  476|  99.3k|      }
  477|  8.84k|      return 0;
  478|  53.9k|    }
  479|  53.9k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   198k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   198k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   198k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   198k|    return data[index];
   64|   198k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   360k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   360k|  adjusted_mantissa answer;
   96|   360k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.89k, False: 356k]
  |  Branch (96:19): [True: 1.59k, False: 355k]
  ------------------
   97|  5.48k|    answer.power2 = 0;
   98|  5.48k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.48k|    return answer;
  101|  5.48k|  }
  102|   355k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 5.90k, False: 349k]
  ------------------
  103|       |    // we want to get infinity:
  104|  5.90k|    answer.power2 = binary::infinite_power();
  105|  5.90k|    answer.mantissa = 0;
  106|  5.90k|    return answer;
  107|  5.90k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   349k|  int lz = leading_zeroes(w);
  112|   349k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   349k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   349k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   349k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   349k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   349k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 621, False: 348k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    621|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 585]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    585|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    585|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    585|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    585|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 585, False: 0]
  ------------------
  156|    585|    return answer;
  157|    621|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   348k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 132k, False: 215k]
  |  Branch (162:30): [True: 132k, False: 419]
  |  Branch (162:77): [True: 128k, False: 3.59k]
  ------------------
  163|   348k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 25.0k, False: 103k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  25.0k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 10.7k, False: 14.3k]
  ------------------
  168|  10.7k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  10.7k|    }
  170|  25.0k|  }
  171|       |
  172|   348k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   348k|  answer.mantissa >>= 1;
  174|   348k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 20.3k, False: 328k]
  ------------------
  175|  20.3k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  20.3k|    answer.power2++; // undo previous addition
  177|  20.3k|  }
  178|       |
  179|   348k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   348k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.50k, False: 346k]
  ------------------
  181|  2.50k|    answer.power2 = binary::infinite_power();
  182|  2.50k|    answer.mantissa = 0;
  183|  2.50k|  }
  184|   348k|  return answer;
  185|   349k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   379k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   379k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   379k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   379k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   379k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   379k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   379k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 52.1k, False: 327k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  52.1k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  52.1k|    firstproduct.low += secondproduct.high;
   35|  52.1k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 46.6k, False: 5.45k]
  ------------------
   36|  46.6k|      firstproduct.high++;
   37|  46.6k|    }
   38|  52.1k|  }
   39|   379k|  return firstproduct;
   40|   379k|}
_ZN10fast_float6detail5powerEi:
   58|   750k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   750k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   750k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  30.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  30.3k|  int lz = leading_zeroes(w);
   82|  30.3k|  w <<= lz;
   83|  30.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  30.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  30.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  30.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  30.3k|  int hilz = int(w >> 63) ^ 1;
   69|  30.3k|  adjusted_mantissa answer;
   70|  30.3k|  answer.mantissa = w << hilz;
   71|  30.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  30.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  30.3k|  return answer;
   74|  30.3k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   339k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   339k|  adjusted_mantissa answer;
   96|   339k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.67k, False: 335k]
  |  Branch (96:19): [True: 341, False: 334k]
  ------------------
   97|  4.01k|    answer.power2 = 0;
   98|  4.01k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.01k|    return answer;
  101|  4.01k|  }
  102|   334k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.29k, False: 331k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.29k|    answer.power2 = binary::infinite_power();
  105|  3.29k|    answer.mantissa = 0;
  106|  3.29k|    return answer;
  107|  3.29k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   331k|  int lz = leading_zeroes(w);
  112|   331k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   331k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   331k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   331k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   331k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   331k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 14.1k, False: 317k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  14.1k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 50, False: 14.1k]
  ------------------
  137|     50|      answer.power2 = 0;
  138|     50|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     50|      return answer;
  141|     50|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  14.1k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  14.1k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  14.1k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  14.1k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 14.1k, False: 0]
  ------------------
  156|  14.1k|    return answer;
  157|  14.1k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   317k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 98.6k, False: 218k]
  |  Branch (162:30): [True: 62.5k, False: 36.0k]
  |  Branch (162:77): [True: 60.9k, False: 1.61k]
  ------------------
  163|   317k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 19.3k, False: 41.5k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  19.3k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 13.3k, False: 6.01k]
  ------------------
  168|  13.3k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  13.3k|    }
  170|  19.3k|  }
  171|       |
  172|   317k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   317k|  answer.mantissa >>= 1;
  174|   317k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 18.8k, False: 298k]
  ------------------
  175|  18.8k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  18.8k|    answer.power2++; // undo previous addition
  177|  18.8k|  }
  178|       |
  179|   317k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   317k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 334, False: 317k]
  ------------------
  181|    334|    answer.power2 = binary::infinite_power();
  182|    334|    answer.mantissa = 0;
  183|    334|  }
  184|   317k|  return answer;
  185|   331k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   370k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   370k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   370k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   370k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   370k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   370k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   370k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 68.5k, False: 302k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  68.5k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  68.5k|    firstproduct.low += secondproduct.high;
   35|  68.5k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 42.7k, False: 25.7k]
  ------------------
   36|  42.7k|      firstproduct.high++;
   37|  42.7k|    }
   38|  68.5k|  }
   39|   370k|  return firstproduct;
   40|   370k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  38.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  38.8k|  int lz = leading_zeroes(w);
   82|  38.8k|  w <<= lz;
   83|  38.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  38.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  38.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  38.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  38.8k|  int hilz = int(w >> 63) ^ 1;
   69|  38.8k|  adjusted_mantissa answer;
   70|  38.8k|  answer.mantissa = w << hilz;
   71|  38.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  38.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  38.8k|  return answer;
   74|  38.8k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  17.6k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  17.6k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  17.6k|  int32_t sci_exp = scientific_exponent(num);
  411|  17.6k|  size_t max_digits = binary_format<T>::max_digits();
  412|  17.6k|  size_t digits = 0;
  413|  17.6k|  bigint bigmant;
  414|  17.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  17.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  17.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 540, False: 17.0k]
  ------------------
  418|    540|    return positive_digit_comp<T>(bigmant, exponent);
  419|  17.0k|  } else {
  420|  17.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  17.0k|  }
  422|  17.6k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  42.4k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  42.4k|  uint64_t mantissa = num.mantissa;
   30|  42.4k|  int32_t exponent = int32_t(num.exponent);
   31|   212k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 169k, False: 42.4k]
  ------------------
   32|   169k|    mantissa /= 10000;
   33|   169k|    exponent += 4;
   34|   169k|  }
   35|  84.8k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 42.4k, False: 42.4k]
  ------------------
   36|  42.4k|    mantissa /= 100;
   37|  42.4k|    exponent += 2;
   38|  42.4k|  }
   39|  42.4k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 42.4k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  42.4k|  return exponent;
   44|  42.4k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  42.4k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  42.4k|  size_t counter = 0;
  245|  42.4k|  digits = 0;
  246|  42.4k|  limb value = 0;
  247|  42.4k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  42.4k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  42.4k|  UC const * p = num.integer.ptr;
  255|  42.4k|  UC const * pend = p + num.integer.len();
  256|  42.4k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  82.4k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 40.0k, False: 42.4k]
  ------------------
  259|  72.9k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 38.5k, False: 34.3k]
  |  Branch (259:45): [True: 32.8k, False: 5.65k]
  |  Branch (259:70): [True: 32.8k, False: 0]
  ------------------
  260|  32.8k|      parse_eight_digits(p, value, counter, digits);
  261|  32.8k|    }
  262|   162k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 152k, False: 9.23k]
  |  Branch (262:30): [True: 122k, False: 30.8k]
  |  Branch (262:43): [True: 122k, False: 0]
  ------------------
  263|   122k|      parse_one_digit(p, value, counter, digits);
  264|   122k|    }
  265|  40.0k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 40.0k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  40.0k|    } else {
  277|  40.0k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  40.0k|      counter = 0;
  279|  40.0k|      value = 0;
  280|  40.0k|    }
  281|  40.0k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  42.4k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 34.1k, False: 8.31k]
  ------------------
  285|  34.1k|    p = num.fraction.ptr;
  286|  34.1k|    pend = p + num.fraction.len();
  287|  34.1k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 11.6k, False: 22.4k]
  ------------------
  288|  11.6k|      skip_zeros(p, pend);
  289|  11.6k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   132k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 101k, False: 31.3k]
  ------------------
  292|   260k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 221k, False: 38.8k]
  |  Branch (292:47): [True: 160k, False: 61.2k]
  |  Branch (292:72): [True: 158k, False: 1.42k]
  ------------------
  293|   158k|        parse_eight_digits(p, value, counter, digits);
  294|   158k|      }
  295|   430k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 362k, False: 68.4k]
  |  Branch (295:32): [True: 331k, False: 31.0k]
  |  Branch (295:45): [True: 329k, False: 1.89k]
  ------------------
  296|   329k|        parse_one_digit(p, value, counter, digits);
  297|   329k|      }
  298|   101k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.73k, False: 98.7k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.73k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.73k|        bool truncated = is_truncated(p, pend);
  302|  2.73k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.32k, False: 1.41k]
  ------------------
  303|  1.32k|          round_up_bigint(result, digits);
  304|  1.32k|        }
  305|  2.73k|        return;
  306|  98.7k|      } else {
  307|  98.7k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  98.7k|        counter = 0;
  309|  98.7k|        value = 0;
  310|  98.7k|      }
  311|   101k|    }
  312|  34.1k|  }
  313|       |
  314|  39.6k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 39.6k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  39.6k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  54.0k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  54.0k|  uint64_t val;
  161|   105k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 84.2k, False: 20.8k]
  ------------------
  162|  84.2k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  84.2k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 33.1k, False: 51.0k]
  ------------------
  164|  33.1k|      break;
  165|  33.1k|    }
  166|  51.0k|    first += int_cmp_len<UC>();
  167|  51.0k|  }
  168|   151k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 139k, False: 11.6k]
  ------------------
  169|   139k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 42.4k, False: 97.0k]
  ------------------
  170|  42.4k|      break;
  171|  42.4k|    }
  172|  97.0k|    first++;
  173|  97.0k|  }
  174|  54.0k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   191k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   191k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   191k|  p += 8;
  210|   191k|  counter += 8;
  211|   191k|  count += 8;
  212|   191k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   451k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   451k|  value = value * 10 + limb(*p - UC('0'));
  218|   451k|  p++;
  219|   451k|  counter++;
  220|   451k|  count++;
  221|   451k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   230k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   230k|  big.mul(power);
  226|   230k|  big.add(value);
  227|   230k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  2.73k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  2.73k|  uint64_t val;
  183|  5.39k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 3.67k, False: 1.71k]
  ------------------
  184|  3.67k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  3.67k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.01k, False: 2.66k]
  ------------------
  186|  1.01k|      return true;
  187|  1.01k|    }
  188|  2.66k|    first += int_cmp_len<UC>();
  189|  2.66k|  }
  190|  3.44k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.03k, False: 1.41k]
  ------------------
  191|  2.03k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 304, False: 1.73k]
  ------------------
  192|    304|      return true;
  193|    304|    }
  194|  1.73k|    ++first;
  195|  1.73k|  }
  196|  1.41k|  return false;
  197|  1.71k|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.33k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.33k|  add_native(big, 10, 1);
  234|  2.33k|  count++;
  235|  2.33k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  1.03k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  1.03k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  166|  1.03k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  1.03k|  adjusted_mantissa answer;
  324|  1.03k|  bool truncated;
  325|  1.03k|  answer.mantissa = bigmant.hi64(truncated);
  326|  1.03k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  1.03k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  1.03k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  1.03k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  1.03k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  1.03k|    });
  333|  1.03k|  });
  334|       |
  335|  1.03k|  return answer;
  336|  1.03k|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  1.03k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  1.03k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  1.03k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 1.03k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  1.03k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  1.03k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 1.03k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  1.03k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  1.03k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 1.03k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  1.03k|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  1.03k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  1.03k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  1.03k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  1.03k|    });
  333|  1.03k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  1.03k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  1.03k|  const uint64_t mask
  125|  1.03k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 1.03k]
  ------------------
  126|  1.03k|    ? UINT64_MAX
  127|  1.03k|    : (uint64_t(1) << shift) - 1;
  128|  1.03k|  const uint64_t halfway
  129|  1.03k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 1.03k]
  ------------------
  130|  1.03k|    ? 0
  131|  1.03k|    : uint64_t(1) << (shift - 1);
  132|  1.03k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  1.03k|  bool is_above = truncated_bits > halfway;
  134|  1.03k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  1.03k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 1.03k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  1.03k|  } else {
  140|  1.03k|    am.mantissa >>= shift;
  141|  1.03k|  }
  142|  1.03k|  am.power2 += shift;
  143|       |
  144|  1.03k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  1.03k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  1.03k|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  1.03k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  1.03k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 77, False: 958]
  |  Branch (331:27): [True: 846, False: 112]
  |  Branch (331:41): [True: 0, False: 846]
  |  Branch (331:56): [True: 76, False: 882]
  |  Branch (331:66): [True: 25, False: 51]
  ------------------
  332|  1.03k|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  29.3k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  29.3k|  bigint& real_digits = bigmant;
  347|  29.3k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  29.3k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  29.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  29.3k|  T b;
  354|  29.3k|  to_float(false, am_b, b);
  355|  29.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  29.3k|  bigint theor_digits(theor.mantissa);
  357|  29.3k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  29.3k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  29.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  29.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 29.3k, False: 0]
  ------------------
  363|  29.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  166|  29.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  29.3k|  }
  365|  29.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 29.3k, False: 0]
  ------------------
  366|  29.3k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  166|  29.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  29.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  166|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  29.3k|  int ord = real_digits.compare(theor_digits);
  373|  29.3k|  adjusted_mantissa answer = am;
  374|  29.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.3k|      (void)_;  // not needed, since we've done our comparison
  377|  29.3k|      (void)__; // not needed, since we've done our comparison
  378|  29.3k|      if (ord > 0) {
  379|  29.3k|        return true;
  380|  29.3k|      } else if (ord < 0) {
  381|  29.3k|        return false;
  382|  29.3k|      } else {
  383|  29.3k|        return is_odd;
  384|  29.3k|      }
  385|  29.3k|    });
  386|  29.3k|  });
  387|       |
  388|  29.3k|  return answer;
  389|  29.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  29.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 29.3k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  29.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  53.9k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  53.9k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 53.9k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  53.9k|  } else {
  153|  53.9k|    am.mantissa >>= shift;
  154|  53.9k|  }
  155|  53.9k|  am.power2 += shift;
  156|  53.9k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  29.3k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  29.3k|  adjusted_mantissa am = to_extended(value);
   84|  29.3k|  am.mantissa <<= 1;
   85|  29.3k|  am.mantissa += 1;
   86|  29.3k|  am.power2 -= 1;
   87|  29.3k|  return am;
   88|  29.3k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  29.3k|adjusted_mantissa to_extended(T value) noexcept {
   50|  29.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  29.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  29.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  29.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  29.3k|  adjusted_mantissa am;
   56|  29.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  29.3k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  29.3k|  ::memcpy(&bits, &value, sizeof(T));
   62|  29.3k|#endif
   63|  29.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 29.3k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  29.3k|  } else {
   68|       |    // normal
   69|  29.3k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  29.3k|    am.power2 -= bias;
   71|  29.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  29.3k|  }
   73|       |
   74|  29.3k|  return am;
   75|  29.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  29.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 29.3k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  29.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.3k|      (void)_;  // not needed, since we've done our comparison
  377|  29.3k|      (void)__; // not needed, since we've done our comparison
  378|  29.3k|      if (ord > 0) {
  379|  29.3k|        return true;
  380|  29.3k|      } else if (ord < 0) {
  381|  29.3k|        return false;
  382|  29.3k|      } else {
  383|  29.3k|        return is_odd;
  384|  29.3k|      }
  385|  29.3k|    });
  386|  29.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  29.3k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  29.3k|  const uint64_t mask
  125|  29.3k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 29.3k]
  ------------------
  126|  29.3k|    ? UINT64_MAX
  127|  29.3k|    : (uint64_t(1) << shift) - 1;
  128|  29.3k|  const uint64_t halfway
  129|  29.3k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 29.3k]
  ------------------
  130|  29.3k|    ? 0
  131|  29.3k|    : uint64_t(1) << (shift - 1);
  132|  29.3k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  29.3k|  bool is_above = truncated_bits > halfway;
  134|  29.3k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  29.3k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 29.3k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  29.3k|  } else {
  140|  29.3k|    am.mantissa >>= shift;
  141|  29.3k|  }
  142|  29.3k|  am.power2 += shift;
  143|       |
  144|  29.3k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  29.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  29.3k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  29.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.3k|      (void)_;  // not needed, since we've done our comparison
  377|  29.3k|      (void)__; // not needed, since we've done our comparison
  378|  29.3k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 155, False: 29.1k]
  ------------------
  379|    155|        return true;
  380|  29.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 21.1k, False: 8.04k]
  ------------------
  381|  21.1k|        return false;
  382|  21.1k|      } else {
  383|  8.04k|        return is_odd;
  384|  8.04k|      }
  385|  29.3k|    });
_ZN10fast_float10digit_compIfDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  12.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  12.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  12.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  12.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  12.7k|  size_t digits = 0;
  413|  12.7k|  bigint bigmant;
  414|  12.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  12.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  12.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 495, False: 12.2k]
  ------------------
  418|    495|    return positive_digit_comp<T>(bigmant, exponent);
  419|  12.2k|  } else {
  420|  12.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  12.2k|  }
  422|  12.7k|}
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|  26.8k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  26.8k|  uint64_t mantissa = num.mantissa;
   30|  26.8k|  int32_t exponent = int32_t(num.exponent);
   31|   134k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 107k, False: 26.8k]
  ------------------
   32|   107k|    mantissa /= 10000;
   33|   107k|    exponent += 4;
   34|   107k|  }
   35|  53.7k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 26.8k, False: 26.8k]
  ------------------
   36|  26.8k|    mantissa /= 100;
   37|  26.8k|    exponent += 2;
   38|  26.8k|  }
   39|  26.8k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 26.8k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  26.8k|  return exponent;
   44|  26.8k|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  26.8k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  26.8k|  size_t counter = 0;
  245|  26.8k|  digits = 0;
  246|  26.8k|  limb value = 0;
  247|  26.8k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  26.8k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  26.8k|  UC const * p = num.integer.ptr;
  255|  26.8k|  UC const * pend = p + num.integer.len();
  256|  26.8k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  56.7k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 29.9k, False: 26.8k]
  ------------------
  259|  54.6k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 29.7k, False: 24.8k]
  |  Branch (259:45): [True: 24.7k, False: 5.07k]
  |  Branch (259:70): [True: 24.7k, False: 0]
  ------------------
  260|  24.7k|      parse_eight_digits(p, value, counter, digits);
  261|  24.7k|    }
  262|   122k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 115k, False: 7.28k]
  |  Branch (262:30): [True: 92.4k, False: 22.6k]
  |  Branch (262:43): [True: 92.4k, False: 0]
  ------------------
  263|  92.4k|      parse_one_digit(p, value, counter, digits);
  264|  92.4k|    }
  265|  29.9k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 29.9k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  29.9k|    } else {
  277|  29.9k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  29.9k|      counter = 0;
  279|  29.9k|      value = 0;
  280|  29.9k|    }
  281|  29.9k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  26.8k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 20.4k, False: 6.42k]
  ------------------
  285|  20.4k|    p = num.fraction.ptr;
  286|  20.4k|    pend = p + num.fraction.len();
  287|  20.4k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 4.21k, False: 16.2k]
  ------------------
  288|  4.21k|      skip_zeros(p, pend);
  289|  4.21k|    }
  290|       |    // process all digits, in increments of step per loop
  291|  75.3k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 57.1k, False: 18.2k]
  ------------------
  292|   146k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 123k, False: 22.3k]
  |  Branch (292:47): [True: 90.1k, False: 33.7k]
  |  Branch (292:72): [True: 89.1k, False: 1.06k]
  ------------------
  293|  89.1k|        parse_eight_digits(p, value, counter, digits);
  294|  89.1k|      }
  295|   239k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 202k, False: 37.3k]
  |  Branch (295:32): [True: 183k, False: 18.3k]
  |  Branch (295:45): [True: 182k, False: 1.42k]
  ------------------
  296|   182k|        parse_one_digit(p, value, counter, digits);
  297|   182k|      }
  298|  57.1k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.21k, False: 54.9k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.21k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.21k|        bool truncated = is_truncated(p, pend);
  302|  2.21k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.01k, False: 1.20k]
  ------------------
  303|  1.01k|          round_up_bigint(result, digits);
  304|  1.01k|        }
  305|  2.21k|        return;
  306|  54.9k|      } else {
  307|  54.9k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  54.9k|        counter = 0;
  309|  54.9k|        value = 0;
  310|  54.9k|      }
  311|  57.1k|    }
  312|  20.4k|  }
  313|       |
  314|  24.6k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 24.6k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  24.6k|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|  31.0k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  31.0k|  uint64_t val;
  161|   145k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 139k, False: 6.03k]
  ------------------
  162|   139k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   139k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 25.0k, False: 114k]
  ------------------
  164|  25.0k|      break;
  165|  25.0k|    }
  166|   114k|    first += int_cmp_len<UC>();
  167|   114k|  }
  168|  41.4k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 37.2k, False: 4.21k]
  ------------------
  169|  37.2k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 26.8k, False: 10.4k]
  ------------------
  170|  26.8k|      break;
  171|  26.8k|    }
  172|  10.4k|    first++;
  173|  10.4k|  }
  174|  31.0k|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|   113k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   113k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   113k|  p += 8;
  210|   113k|  counter += 8;
  211|   113k|  count += 8;
  212|   113k|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|   274k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   274k|  value = value * 10 + limb(*p - UC('0'));
  218|   274k|  p++;
  219|   274k|  counter++;
  220|   274k|  count++;
  221|   274k|}
_ZN10fast_float12is_truncatedIDiEEbPKT_S3_:
  180|  2.21k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  2.21k|  uint64_t val;
  183|  13.6k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 12.3k, False: 1.30k]
  ------------------
  184|  12.3k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  12.3k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 916, False: 11.4k]
  ------------------
  186|    916|      return true;
  187|    916|    }
  188|  11.4k|    first += int_cmp_len<UC>();
  189|  11.4k|  }
  190|  1.51k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 307, False: 1.20k]
  ------------------
  191|    307|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 96, False: 211]
  ------------------
  192|     96|      return true;
  193|     96|    }
  194|    211|    ++first;
  195|    211|  }
  196|  1.20k|  return false;
  197|  1.30k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  24.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  24.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  24.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  24.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  24.7k|  size_t digits = 0;
  413|  24.7k|  bigint bigmant;
  414|  24.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  24.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  24.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 8.04k, False: 16.7k]
  ------------------
  418|  8.04k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  16.7k|  } else {
  420|  16.7k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  16.7k|  }
  422|  24.7k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.2k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.2k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  166|  14.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.2k|  adjusted_mantissa answer;
  324|  14.2k|  bool truncated;
  325|  14.2k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.2k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.2k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.2k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.2k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.2k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.2k|    });
  333|  14.2k|  });
  334|       |
  335|  14.2k|  return answer;
  336|  14.2k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 555, False: 13.6k]
  ------------------
  109|    555|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    555|    am.power2++;
  111|    555|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.2k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.2k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.2k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.2k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.2k|    });
  333|  14.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.2k|  const uint64_t mask
  125|  14.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.2k]
  ------------------
  126|  14.2k|    ? UINT64_MAX
  127|  14.2k|    : (uint64_t(1) << shift) - 1;
  128|  14.2k|  const uint64_t halfway
  129|  14.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.2k]
  ------------------
  130|  14.2k|    ? 0
  131|  14.2k|    : uint64_t(1) << (shift - 1);
  132|  14.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.2k|  bool is_above = truncated_bits > halfway;
  134|  14.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.2k|  } else {
  140|  14.2k|    am.mantissa >>= shift;
  141|  14.2k|  }
  142|  14.2k|  am.power2 += shift;
  143|       |
  144|  14.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.2k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.2k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.2k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 713, False: 13.5k]
  |  Branch (331:27): [True: 12.8k, False: 673]
  |  Branch (331:41): [True: 3.68k, False: 9.17k]
  |  Branch (331:56): [True: 195, False: 9.64k]
  |  Branch (331:66): [True: 71, False: 124]
  ------------------
  332|  14.2k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  24.6k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  24.6k|  bigint& real_digits = bigmant;
  347|  24.6k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  24.6k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  24.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  24.6k|  T b;
  354|  24.6k|  to_float(false, am_b, b);
  355|  24.6k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  24.6k|  bigint theor_digits(theor.mantissa);
  357|  24.6k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  24.6k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  24.6k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  24.6k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 24.6k, False: 0]
  ------------------
  363|  24.6k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  166|  24.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  24.6k|  }
  365|  24.6k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 4.46k, False: 20.1k]
  ------------------
  366|  4.46k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  166|  4.46k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  20.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 19.9k, False: 195]
  ------------------
  368|  19.9k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  166|  19.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  19.9k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  24.6k|  int ord = real_digits.compare(theor_digits);
  373|  24.6k|  adjusted_mantissa answer = am;
  374|  24.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  24.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  24.6k|      (void)_;  // not needed, since we've done our comparison
  377|  24.6k|      (void)__; // not needed, since we've done our comparison
  378|  24.6k|      if (ord > 0) {
  379|  24.6k|        return true;
  380|  24.6k|      } else if (ord < 0) {
  381|  24.6k|        return false;
  382|  24.6k|      } else {
  383|  24.6k|        return is_odd;
  384|  24.6k|      }
  385|  24.6k|    });
  386|  24.6k|  });
  387|       |
  388|  24.6k|  return answer;
  389|  24.6k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  24.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  24.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  24.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 129, False: 24.5k]
  ------------------
   96|       |    // have a denormal float
   97|    129|    int32_t shift = -am.power2 + 1;
   98|    129|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    129|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 129, False: 0]
  ------------------
  101|    129|    return;
  102|    129|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  24.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  24.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 24.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  24.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  24.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 24.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  24.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  24.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  24.6k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  24.6k|  adjusted_mantissa am = to_extended(value);
   84|  24.6k|  am.mantissa <<= 1;
   85|  24.6k|  am.mantissa += 1;
   86|  24.6k|  am.power2 -= 1;
   87|  24.6k|  return am;
   88|  24.6k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  24.6k|adjusted_mantissa to_extended(T value) noexcept {
   50|  24.6k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  24.6k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  24.6k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  24.6k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  24.6k|  adjusted_mantissa am;
   56|  24.6k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  24.6k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  24.6k|  ::memcpy(&bits, &value, sizeof(T));
   62|  24.6k|#endif
   63|  24.6k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 129, False: 24.5k]
  ------------------
   64|       |    // denormal
   65|    129|    am.power2 = 1 - bias;
   66|    129|    am.mantissa = bits & mantissa_mask;
   67|  24.5k|  } else {
   68|       |    // normal
   69|  24.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  24.5k|    am.power2 -= bias;
   71|  24.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  24.5k|  }
   73|       |
   74|  24.6k|  return am;
   75|  24.6k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  24.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  24.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  24.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 129, False: 24.5k]
  ------------------
   96|       |    // have a denormal float
   97|    129|    int32_t shift = -am.power2 + 1;
   98|    129|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    129|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 129, False: 0]
  ------------------
  101|    129|    return;
  102|    129|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  24.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  24.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 72, False: 24.4k]
  ------------------
  109|     72|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     72|    am.power2++;
  111|     72|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  24.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  24.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 24.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  24.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  24.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  24.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  24.6k|      (void)_;  // not needed, since we've done our comparison
  377|  24.6k|      (void)__; // not needed, since we've done our comparison
  378|  24.6k|      if (ord > 0) {
  379|  24.6k|        return true;
  380|  24.6k|      } else if (ord < 0) {
  381|  24.6k|        return false;
  382|  24.6k|      } else {
  383|  24.6k|        return is_odd;
  384|  24.6k|      }
  385|  24.6k|    });
  386|  24.6k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  24.6k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  24.6k|  const uint64_t mask
  125|  24.6k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 24.6k]
  ------------------
  126|  24.6k|    ? UINT64_MAX
  127|  24.6k|    : (uint64_t(1) << shift) - 1;
  128|  24.6k|  const uint64_t halfway
  129|  24.6k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 24.6k]
  ------------------
  130|  24.6k|    ? 0
  131|  24.6k|    : uint64_t(1) << (shift - 1);
  132|  24.6k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  24.6k|  bool is_above = truncated_bits > halfway;
  134|  24.6k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  24.6k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 24.6k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  24.6k|  } else {
  140|  24.6k|    am.mantissa >>= shift;
  141|  24.6k|  }
  142|  24.6k|  am.power2 += shift;
  143|       |
  144|  24.6k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  24.6k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  24.6k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  24.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  24.6k|      (void)_;  // not needed, since we've done our comparison
  377|  24.6k|      (void)__; // not needed, since we've done our comparison
  378|  24.6k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 4.57k, False: 20.0k]
  ------------------
  379|  4.57k|        return true;
  380|  20.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 19.2k, False: 797]
  ------------------
  381|  19.2k|        return false;
  382|  19.2k|      } else {
  383|    797|        return is_odd;
  384|    797|      }
  385|  24.6k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  14.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  14.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  14.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  14.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  14.1k|  size_t digits = 0;
  413|  14.1k|  bigint bigmant;
  414|  14.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  14.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  14.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 6.20k, False: 7.91k]
  ------------------
  418|  6.20k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  7.91k|  } else {
  420|  7.91k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  7.91k|  }
  422|  14.1k|}

_ZN10fast_float4spanIKcEC2Ev:
  224|  2.13M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  223|  1.22M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  226|   314k|  constexpr size_t len() const noexcept {
  227|   314k|    return length;
  228|   314k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  453|   951k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  454|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  455|       |  return 0;
  456|       |#else
  457|   951k|  return -10;
  458|   951k|#endif
  459|   951k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  504|   911k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  505|   911k|  return 10;
  506|   911k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  518|   782k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  519|   782k|  return uint64_t(2) << mantissa_explicit_bits();
  520|   782k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  464|  2.41M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  465|  2.41M|  return 23;
  466|  2.41M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  535|   709k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  536|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  537|   709k|  return (void)powers_of_ten[0], powers_of_ten[power];
  538|   709k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  336|   838k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  555|   356k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  556|   356k|  return -65;
  557|   356k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  546|   355k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  547|   355k|  return 38;
  548|   355k|}
_ZN10fast_float14leading_zeroesEm:
  257|   780k|int leading_zeroes(uint64_t input_num) {
  258|   780k|  assert(input_num > 0);
  259|   780k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (259:7): [Folded - Ignored]
  ------------------
  260|      0|    return leading_zeroes_generic(input_num);
  261|      0|  }
  262|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  263|       |  #if defined(_M_X64) || defined(_M_ARM64)
  264|       |  unsigned long leading_zero = 0;
  265|       |  // Search the mask data from most significant bit (MSB)
  266|       |  // to least significant bit (LSB) for a set bit (1).
  267|       |  _BitScanReverse64(&leading_zero, input_num);
  268|       |  return (int)(63 - leading_zero);
  269|       |  #else
  270|       |  return leading_zeroes_generic(input_num);
  271|       |  #endif
  272|       |#else
  273|   780k|  return __builtin_clzll(input_num);
  274|   780k|#endif
  275|   780k|}
_ZN10fast_float19full_multiplicationEmm:
  309|   870k|value128 full_multiplication(uint64_t a, uint64_t b) {
  310|   870k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (310:7): [Folded - Ignored]
  ------------------
  311|      0|    value128 answer;
  312|      0|    answer.low = umul128_generic(a, b, &answer.high);
  313|      0|    return answer;
  314|      0|  }
  315|   870k|  value128 answer;
  316|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  317|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  318|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  319|       |  answer.high = __umulh(a, b);
  320|       |  answer.low = a * b;
  321|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  322|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  323|       |#elif defined(FASTFLOAT_64BIT)
  324|   870k|  __uint128_t r = ((__uint128_t)a) * b;
  325|   870k|  answer.low = uint64_t(r);
  326|   870k|  answer.high = uint64_t(r >> 64);
  327|       |#else
  328|       |  answer.low = umul128_generic(a, b, &answer.high);
  329|       |#endif
  330|   870k|  return answer;
  331|   870k|}
_ZN10fast_float8value128C2Ev:
  240|   870k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  487|   409k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  488|   409k|  return -127;
  489|   409k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  480|   132k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  481|   132k|  return -17;
  482|   132k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  472|   132k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  473|   132k|  return 10;
  474|   132k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  340|   254k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  341|   254k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (341:12): [True: 69.2k, False: 185k]
  |  Branch (341:38): [True: 0, False: 185k]
  ------------------
  342|   254k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  562|  30.3k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  563|  30.3k|  return 114;
  564|  30.3k|}
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  638|   164k|{
  639|   164k|    return sizeof(uint64_t) / sizeof(UC);
  640|   164k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  632|  87.9k|{
  633|  87.9k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  634|  87.9k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (634:12): [Folded - Ignored]
  |  Branch (634:53): [Folded - Ignored]
  ------------------
  635|  87.9k|}
_ZN10fast_float4spanImEC2EPKmm:
  223|   102k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  226|   344k|  constexpr size_t len() const noexcept {
  227|   344k|    return length;
  228|   344k|  }
_ZNK10fast_float4spanImEixEm:
  230|   186k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  231|   186k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   186k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  232|   186k|    return ptr[index];
  233|   186k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  595|   270k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|   270k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|   270k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|   270k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|   270k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|   270k|  ::memcpy(&value, &word, sizeof(T));
  604|   270k|#endif
  605|   270k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  499|   270k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  494|   656k|template <> inline constexpr int binary_format<float>::infinite_power() {
  495|   656k|  return 0xFF;
  496|   656k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   42|  1.06M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  224|  1.86M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  223|  1.03M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  226|   206k|  constexpr size_t len() const noexcept {
  227|   206k|    return length;
  228|   206k|  }
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  638|   285k|{
  639|   285k|    return sizeof(uint64_t) / sizeof(UC);
  640|   285k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  632|   152k|{
  633|   152k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  634|   152k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (634:12): [Folded - Ignored]
  |  Branch (634:53): [Folded - Ignored]
  ------------------
  635|   152k|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   42|   933k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  445|  1.05M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  446|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  447|       |  return 0;
  448|       |#else
  449|  1.05M|  return -22;
  450|  1.05M|#endif
  451|  1.05M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  501|  1.02M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  502|  1.02M|  return 22;
  503|  1.02M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  508|   866k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  509|   866k|  return uint64_t(2) << mantissa_explicit_bits();
  510|   866k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  461|  2.40M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  462|  2.40M|  return 52;
  463|  2.40M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  530|   847k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  531|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  532|   847k|  return (void)powers_of_ten[0], powers_of_ten[power];
  533|   847k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  551|   335k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  552|   335k|  return -342;
  553|   335k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  542|   334k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  543|   334k|  return 308;
  544|   334k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  484|   409k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  485|   409k|  return -1023;
  486|   409k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  476|  98.6k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  477|  98.6k|  return -4;
  478|  98.6k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  468|  62.5k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  469|  62.5k|  return 23;
  470|  62.5k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  559|  38.8k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  560|  38.8k|  return 769;
  561|  38.8k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  595|   227k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|   227k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|   227k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|   227k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|   227k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|   227k|  ::memcpy(&value, &word, sizeof(T));
  604|   227k|#endif
  605|   227k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  498|   227k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  491|   587k|template <> inline constexpr int binary_format<double>::infinite_power() {
  492|   587k|  return 0x7FF;
  493|   587k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   506k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   506k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   506k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   506k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   506k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   506k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   506k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   506k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 506k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   506k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   506k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 506k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   506k|  answer.ec = std::errc(); // be optimistic
  174|   506k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   506k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 481k, False: 25.3k]
  |  Branch (180:69): [True: 456k, False: 24.3k]
  |  Branch (180:131): [True: 408k, False: 48.6k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   408k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 408k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   408k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 368k, False: 39.4k]
  ------------------
  192|   368k|        value = T(pns.mantissa);
  193|   368k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 2.99k, False: 365k]
  ------------------
  194|   365k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   368k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 368k]
  ------------------
  196|   368k|        return answer;
  197|   368k|      }
  198|   408k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   408k|  }
  215|   137k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   137k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 70.5k, False: 67.2k]
  |  Branch (216:29): [True: 70.5k, False: 0]
  ------------------
  217|  70.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 17.6k, False: 52.9k]
  ------------------
  218|  17.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  17.6k|    }
  220|  70.5k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   137k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 17.6k, False: 120k]
  ------------------
  224|   137k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   137k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 135k, False: 2.03k]
  |  Branch (226:29): [True: 11.2k, False: 124k]
  |  Branch (226:49): [True: 657, False: 10.5k]
  |  Branch (226:68): [True: 3.49k, False: 133k]
  ------------------
  227|  4.14k|    answer.ec = std::errc::result_out_of_range;
  228|  4.14k|  }
  229|   137k|  return answer;
  230|   506k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   75|  1.64M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   76|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   77|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   78|       |  return false;
   79|       |#endif
   80|       |  // See
   81|       |  // A fast function to check your floating-point rounding mode
   82|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   83|       |  //
   84|       |  // This function is meant to be equivalent to :
   85|       |  // prior: #include <cfenv>
   86|       |  //  return fegetround() == FE_TONEAREST;
   87|       |  // However, it is expected to be much faster than the fegetround()
   88|       |  // function call.
   89|       |  //
   90|       |  // The volatile keywoard prevents the compiler from computing the function
   91|       |  // at compile-time.
   92|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   93|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   94|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   95|       |  // precision, as in 387 instructions).
   96|  1.64M|  static volatile float fmin = std::numeric_limits<float>::min();
   97|  1.64M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   98|       |  //
   99|       |  // Explanation:
  100|       |  // Only when fegetround() == FE_TONEAREST do we have that
  101|       |  // fmin + 1.0f == 1.0f - fmin.
  102|       |  //
  103|       |  // FE_UPWARD:
  104|       |  //  fmin + 1.0f > 1
  105|       |  //  1.0f - fmin == 1
  106|       |  //
  107|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  108|       |  //  fmin + 1.0f == 1
  109|       |  //  1.0f - fmin < 1
  110|       |  //
  111|       |  // Note: This may fail to be accurate if fast-math has been
  112|       |  // enabled, as rounding conventions may not apply.
  113|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  114|       |  #   pragma warning(push)
  115|       |  //  todo: is there a VS warning?
  116|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  117|       |  #elif defined(__clang__)
  118|  1.64M|  #   pragma clang diagnostic push
  119|  1.64M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  120|       |  #elif defined(__GNUC__)
  121|       |  #   pragma GCC diagnostic push
  122|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  123|       |  #endif
  124|  1.64M|  return (fmini + 1.0f == 1.0f - fmini);
  125|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  126|       |  #   pragma warning(pop)
  127|       |  #elif defined(__clang__)
  128|  1.64M|  #   pragma clang diagnostic pop
  129|       |  #elif defined(__GNUC__)
  130|       |  #   pragma GCC diagnostic pop
  131|       |  #endif
  132|  1.64M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   444k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   444k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   444k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   444k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   444k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   444k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   444k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   444k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 444k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   444k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   444k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 444k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   444k|  answer.ec = std::errc(); // be optimistic
  174|   444k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   444k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 430k, False: 14.5k]
  |  Branch (180:69): [True: 410k, False: 19.8k]
  |  Branch (180:131): [True: 374k, False: 36.1k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   374k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 374k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   374k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 340k, False: 33.2k]
  ------------------
  192|   340k|        value = T(pns.mantissa);
  193|   340k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 2.47k, False: 338k]
  ------------------
  194|   338k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   340k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 340k]
  ------------------
  196|   340k|        return answer;
  197|   340k|      }
  198|   374k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   374k|  }
  215|   103k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   103k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 48.4k, False: 55.4k]
  |  Branch (216:29): [True: 48.4k, False: 0]
  ------------------
  217|  48.4k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 12.7k, False: 35.6k]
  ------------------
  218|  12.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  12.7k|    }
  220|  48.4k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   103k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 12.7k, False: 91.0k]
  ------------------
  224|   103k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   103k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 101k, False: 1.86k]
  |  Branch (226:29): [True: 9.25k, False: 92.7k]
  |  Branch (226:49): [True: 569, False: 8.68k]
  |  Branch (226:68): [True: 2.76k, False: 100k]
  ------------------
  227|  3.33k|    answer.ec = std::errc::result_out_of_range;
  228|  3.33k|  }
  229|   103k|  return answer;
  230|   444k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   561k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   561k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   561k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   561k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   561k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   561k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   561k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   561k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 561k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   561k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   561k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 561k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   561k|  answer.ec = std::errc(); // be optimistic
  174|   561k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   561k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 542k, False: 19.5k]
  |  Branch (180:69): [True: 518k, False: 23.9k]
  |  Branch (180:131): [True: 454k, False: 63.1k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   454k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 454k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   454k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 444k, False: 10.5k]
  ------------------
  192|   444k|        value = T(pns.mantissa);
  193|   444k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 18.1k, False: 426k]
  ------------------
  194|   426k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   444k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 444k]
  ------------------
  196|   444k|        return answer;
  197|   444k|      }
  198|   454k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   454k|  }
  215|   117k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   117k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 80.3k, False: 36.8k]
  |  Branch (216:29): [True: 80.3k, False: 0]
  ------------------
  217|  80.3k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 24.7k, False: 55.5k]
  ------------------
  218|  24.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  24.7k|    }
  220|  80.3k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   117k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 24.7k, False: 92.4k]
  ------------------
  224|   117k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   117k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 115k, False: 1.88k]
  |  Branch (226:29): [True: 7.28k, False: 108k]
  |  Branch (226:49): [True: 165, False: 7.12k]
  |  Branch (226:68): [True: 1.77k, False: 115k]
  ------------------
  227|  1.94k|    answer.ec = std::errc::result_out_of_range;
  228|  1.94k|  }
  229|   117k|  return answer;
  230|   561k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   488k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   488k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   488k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   488k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   488k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   488k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   488k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   488k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 488k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   488k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   488k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 488k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   488k|  answer.ec = std::errc(); // be optimistic
  174|   488k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   488k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 478k, False: 10.4k]
  |  Branch (180:69): [True: 458k, False: 19.4k]
  |  Branch (180:131): [True: 411k, False: 47.1k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   411k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 411k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   411k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 402k, False: 8.88k]
  ------------------
  192|   402k|        value = T(pns.mantissa);
  193|   402k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 14.5k, False: 388k]
  ------------------
  194|   388k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   402k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 402k]
  ------------------
  196|   402k|        return answer;
  197|   402k|      }
  198|   411k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   411k|  }
  215|  85.8k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|  85.8k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 55.5k, False: 30.2k]
  |  Branch (216:29): [True: 55.5k, False: 0]
  ------------------
  217|  55.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 14.1k, False: 41.4k]
  ------------------
  218|  14.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  14.1k|    }
  220|  55.5k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|  85.8k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 14.1k, False: 71.7k]
  ------------------
  224|  85.8k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|  85.8k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 84.0k, False: 1.78k]
  |  Branch (226:29): [True: 6.16k, False: 77.9k]
  |  Branch (226:49): [True: 158, False: 6.00k]
  |  Branch (226:68): [True: 1.46k, False: 84.2k]
  ------------------
  227|  1.62k|    answer.ec = std::errc::result_out_of_range;
  228|  1.62k|  }
  229|  85.8k|  return answer;
  230|   488k|}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|   878k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|   196k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   100k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   115k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   115k|  return idx < lenminusstep;
   70|   115k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  15.0k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  15.0k|  return &buf[idx];
   75|  15.0k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   115k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   115k|  idx += STEP_SIZE;
   88|   115k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   100k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   100k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 100k]
  ------------------
   80|   100k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   100k|  std::memcpy(dst, buf + idx, len - idx);
   82|   100k|  return len - idx;
   83|   100k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   100k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   100k|    size_t pos = 0;
   12|   100k|    size_t count = 0;
   13|   110k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 10.2k, False: 100k]
  ------------------
   14|  10.2k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  10.2k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  10.2k|      count += count_ones(utf8_continuation_mask);
   17|  10.2k|    }
   18|   100k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   100k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   675k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   576k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   576k|      size_t pos = 0;
  131|   576k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   576k|      size_t leading_byte = 0;
  139|   576k|      size_t margin = size;
  140|  1.28M|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 704k, False: 576k]
  |  Branch (140:27): [True: 704k, False: 0]
  ------------------
  141|   704k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   704k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   576k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   576k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 576k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   576k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 576k]
  ------------------
  195|   576k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 576k, False: 0]
  ------------------
  196|   576k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   576k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 38.3k, False: 538k]
  ------------------
  198|   538k|        utf32_output += howmany;
  199|   538k|      }
  200|   538k|      return utf32_output - start;
  201|   576k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   675k|    simdutf_really_inline bool errors() const {
  291|   675k|      return this->error.any_bits_set_anywhere();
  292|   675k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|  98.3k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|  98.3k|      size_t pos = 0;
  205|  98.3k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|  98.3k|      size_t leading_byte = 0;
  213|  98.3k|      size_t margin = size;
  214|   196k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 98.3k, False: 98.3k]
  |  Branch (214:27): [True: 98.3k, False: 0]
  ------------------
  215|  98.3k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|  98.3k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|  98.3k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|  98.3k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 98.3k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|  98.3k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 98.3k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|  98.3k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 98.3k, False: 0]
  ------------------
  279|  98.3k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|  98.3k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 98.3k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|  98.3k|        } else {    // In case of success, we want the number of word written
  284|  98.3k|          utf32_output += res.count;
  285|  98.3k|        }
  286|  98.3k|      }
  287|  98.3k|      return result(error_code::SUCCESS, utf32_output - start);
  288|  98.3k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.97k|    char32_t* utf32_output) noexcept {
   13|  1.97k|  size_t pos = 0;
   14|  1.97k|  char32_t* start{utf32_output};
   15|  1.97k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  12.0k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 10.1k, False: 1.97k]
  ------------------
   17|  10.1k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  10.1k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 9.11k, False: 981]
  ------------------
   19|  9.11k|      in.store_ascii_as_utf32(utf32_output);
   20|  9.11k|      utf32_output += 64;
   21|  9.11k|      pos += 64;
   22|  9.11k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    981|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    981|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    981|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    981|    size_t max_starting_point = (pos + 64) - 12;
   28|  7.14k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 6.16k, False: 981]
  ------------------
   29|  6.16k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  6.16k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  6.16k|      pos += consumed;
   32|  6.16k|      utf8_end_of_code_point_mask >>= consumed;
   33|  6.16k|      }
   34|    981|    }
   35|  10.1k|  }
   36|  1.97k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.97k|  return utf32_output - start;
   38|  1.97k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   115k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   115k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   115k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 114k, False: 1.83k]
  |  |  ------------------
  ------------------
  154|   114k|        this->error |= this->prev_incomplete;
  155|   114k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.83k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.83k|            "We support either two or four chunks per 64-byte block.");
  159|  1.83k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.83k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.83k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.83k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.83k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.83k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.83k|      }
  172|   115k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.67k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.67k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.67k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.67k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.67k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.67k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.67k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.67k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.67k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.67k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.67k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.67k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.67k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.67k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.67k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.67k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.67k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.67k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.67k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.67k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.67k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.67k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.67k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.67k|    );
   51|  3.67k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.67k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.67k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.67k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.67k|      CARRY,
   59|  3.67k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.67k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.67k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.67k|    );
   80|  3.67k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.67k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.67k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.67k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.67k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.67k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.67k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.67k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.67k|    );
   96|  3.67k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.67k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.67k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.67k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.67k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.67k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.67k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.67k|    return must23_80 ^ sc;
  105|  3.67k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.83k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.83k|    static const uint8_t max_array[32] = {
  115|  1.83k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.83k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.83k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.83k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.83k|    };
  120|  1.83k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.83k|    return input.gt_bits(max_value);
  122|  1.83k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   100k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   100k|      this->error |= this->prev_incomplete;
  150|   100k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   100k|    simdutf_really_inline bool errors() const {
  176|   100k|      return this->error.any_bits_set_anywhere();
  177|   100k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   100k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   100k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   100k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   100k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   100k|    checker c{};
   12|   100k|    buf_block_reader<64> reader(input, length);
   13|   115k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 15.0k, False: 100k]
  ------------------
   14|  15.0k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  15.0k|      c.check_next_input(in);
   16|  15.0k|      reader.advance();
   17|  15.0k|    }
   18|   100k|    uint8_t block[64]{};
   19|   100k|    reader.get_remainder(block);
   20|   100k|    simd::simd8x64<uint8_t> in(block);
   21|   100k|    c.check_next_input(in);
   22|   100k|    reader.advance();
   23|   100k|    c.check_eof();
   24|   100k|    return !c.errors();
   25|   100k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  6.16k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  6.16k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  6.16k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  6.16k|      utf8_end_of_code_point_mask & 0xfff;
   24|  6.16k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.48k, False: 4.68k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.48k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.48k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.48k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.48k|    return 16; // We consumed 16 bytes.
   30|  1.48k|  }
   31|  4.68k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 4.61k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  4.61k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 105, False: 4.51k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|    105|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|    105|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|    105|    const __m128i ascii =
   49|    105|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|    105|    const __m128i middlebyte =
   51|    105|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|    105|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|    105|    const __m128i highbyte =
   54|    105|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|    105|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|    105|    const __m128i composed =
   57|    105|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|    105|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|    105|    utf32_output += 4;
   60|    105|    return 12;
   61|    105|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  4.51k|  const uint8_t idx =
   65|  4.51k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  4.51k|  const uint8_t consumed =
   67|  4.51k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  4.51k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 3.02k, False: 1.48k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  3.02k|    const __m128i sh =
   75|  3.02k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  3.02k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  3.02k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  3.02k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  3.02k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  3.02k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  3.02k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  3.02k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 704, False: 784]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    704|    const __m128i sh =
   86|    704|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    704|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    704|    const __m128i ascii =
   89|    704|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    704|    const __m128i middlebyte =
   91|    704|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    704|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    704|    const __m128i highbyte =
   94|    704|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    704|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    704|    const __m128i composed =
   97|    704|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    704|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    704|    utf32_output += 4;
  100|    784|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 784, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    784|    const __m128i sh =
  103|    784|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    784|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    784|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    784|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    784|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    784|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    784|    const __m128i correct =
  111|    784|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    784|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    784|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    784|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    784|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    784|    const __m128i composed =
  117|    784|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    784|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    784|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    784|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    784|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  4.51k|  return consumed;
  125|  4.61k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|   100k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|   100k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|   100k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   576k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   576k|  utf8_to_utf32::validating_transcoder converter;
  276|   576k|  return converter.convert(buf, len, utf32_output);
  277|   576k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|  98.3k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|  98.3k|  utf8_to_utf32::validating_transcoder converter;
  281|  98.3k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|  98.3k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.97k|    char32_t* utf32_output) const noexcept {
  286|  1.97k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.97k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|   100k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|   100k|  return utf8::count_code_points(input, length);
  778|   100k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   115k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   115k|  return input.reduce_or().is_ascii();
   25|   115k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.67k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.67k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.67k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.67k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.67k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|   878k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|   878k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|   878k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|   878k|    return active_implementation;
  815|   878k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|   100k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|   100k|  return get_active_implementation()->validate_utf8(buf, len);
  819|   100k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   576k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   576k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   576k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|  98.3k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|  98.3k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|  98.3k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.97k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.97k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.97k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|   100k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|   100k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|   100k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   100k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   100k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   100k|    size_t counter{0};
  171|   249k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 149k, False: 100k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   149k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 148k, False: 565]
  ------------------
  174|   149k|    }
  175|   100k|    return counter;
  176|   100k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   576k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   576k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   576k|  size_t pos = 0;
   12|   576k|  char32_t* start{utf32_output};
   13|  1.11M|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 576k, False: 538k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   576k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 576k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   576k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   576k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 486k, False: 90.6k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   486k|      *utf32_output++ = char32_t(leading_byte);
   34|   486k|      pos++;
   35|   486k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 66.2k, False: 24.3k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  66.2k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 66.2k]
  ------------------
   38|  66.2k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 20.0k, False: 46.2k]
  ------------------
   39|       |      // range check
   40|  46.2k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  46.2k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 982, False: 45.2k]
  |  Branch (41:32): [True: 0, False: 45.2k]
  ------------------
   42|  45.2k|      *utf32_output++ = char32_t(code_point);
   43|  45.2k|      pos += 2;
   44|  45.2k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 11.9k, False: 12.4k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  11.9k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 11.9k]
  ------------------
   47|       |
   48|  11.9k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 4.51k, False: 7.47k]
  ------------------
   49|  7.47k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.01k, False: 6.45k]
  ------------------
   50|       |      // range check
   51|  6.45k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  6.45k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  6.45k|                   (data[pos + 2] & 0b00111111);
   54|  6.45k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 986, False: 5.46k]
  |  Branch (54:33): [True: 0, False: 5.46k]
  ------------------
   55|  6.45k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 3.79k, False: 1.67k]
  |  Branch (55:35): [True: 1.19k, False: 2.59k]
  ------------------
   56|  2.18k|        return 0;
   57|  2.18k|      }
   58|  4.26k|      *utf32_output++ = char32_t(code_point);
   59|  4.26k|      pos += 3;
   60|  12.4k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 12.4k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  12.4k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 12.4k]
  ------------------
   63|  12.4k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 2.58k, False: 9.83k]
  ------------------
   64|  9.83k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 946, False: 8.88k]
  ------------------
   65|  8.88k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 3.54k, False: 5.33k]
  ------------------
   66|       |
   67|       |      // range check
   68|  5.33k|      uint32_t code_point =
   69|  5.33k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  5.33k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  5.33k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 1.00k, False: 4.33k]
  |  Branch (71:35): [True: 1.51k, False: 2.81k]
  ------------------
   72|  2.81k|      *utf32_output++ = char32_t(code_point);
   73|  2.81k|      pos += 4;
   74|  2.81k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   576k|  }
   78|   538k|  return utf32_output - start;
   79|   576k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|  98.3k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|  98.3k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|  98.3k|  size_t pos = 0;
   84|  98.3k|  char32_t* start{utf32_output};
   85|   196k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 98.3k, False: 98.3k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|  98.3k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 98.3k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|  98.3k|    uint8_t leading_byte = data[pos]; // leading byte
  103|  98.3k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 98.3k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|  98.3k|      *utf32_output++ = char32_t(leading_byte);
  106|  98.3k|      pos++;
  107|  98.3k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|  98.3k|  }
  151|  98.3k|  return result(error_code::SUCCESS, utf32_output - start);
  152|  98.3k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|  98.3k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|  98.3k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|  98.3k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|  98.3k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 98.3k, False: 0]
  ------------------
  172|  98.3k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|  98.3k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 98.3k, False: 0]
  ------------------
  175|  98.3k|    unsigned char byte = buf[0-i];
  176|  98.3k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|  98.3k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 98.3k, False: 0]
  ------------------
  178|  98.3k|      buf -= i;
  179|  98.3k|      extra_len = i;
  180|  98.3k|      break;
  181|  98.3k|    }
  182|  98.3k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|  98.3k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 98.3k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|  98.3k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|  98.3k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 98.3k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|  98.3k|  return res;
  202|  98.3k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.97k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.97k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.97k|  size_t pos = 0;
   12|  1.97k|  char32_t* start{utf32_output};
   13|  17.6k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 15.6k, False: 1.97k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  15.6k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 8.82k, False: 6.85k]
  ------------------
   16|  8.82k|      uint64_t v;
   17|  8.82k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  8.82k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 7.50k, False: 1.32k]
  ------------------
   19|  7.50k|        size_t final_pos = pos + 8;
   20|  67.5k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 60.0k, False: 7.50k]
  ------------------
   21|  60.0k|          *utf32_output++ = char32_t(buf[pos]);
   22|  60.0k|          pos++;
   23|  60.0k|        }
   24|  7.50k|        continue;
   25|  7.50k|      }
   26|  8.82k|    }
   27|  8.17k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  8.17k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 7.62k, False: 551]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  7.62k|      *utf32_output++ = char32_t(leading_byte);
   31|  7.62k|      pos++;
   32|  7.62k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 387, False: 164]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    387|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 387]
  ------------------
   35|    387|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    387|      pos += 2;
   37|    387|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 115, False: 49]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    115|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 115]
  ------------------
   40|    115|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    115|      pos += 3;
   42|    115|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 49, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     49|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 49]
  ------------------
   45|     49|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     49|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     49|      *utf32_output++ = char32_t(code_word);
   48|     49|      pos += 4;
   49|     49|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  8.17k|  }
   54|  1.97k|  return utf32_output - start;
   55|  1.97k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  10.2k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  10.2k|  return _popcnt64(input_num);
   16|  10.2k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   302k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   302k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   302k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   302k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   115k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   233k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   233k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   233k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  1.34M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  1.34M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  1.34M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  1.34M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   115k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   115k|      return this->chunks[0] | this->chunks[1];
  297|   115k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|   338k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  2.46M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   115k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   218k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.67k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.67k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.67k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.34k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  11.0k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  11.0k|      return lookup_16(simd8<L>::repeat_16(
  140|  11.0k|        replace0,  replace1,  replace2,  replace3,
  141|  11.0k|        replace4,  replace5,  replace6,  replace7,
  142|  11.0k|        replace8,  replace9,  replace10, replace11,
  143|  11.0k|        replace12, replace13, replace14, replace15
  144|  11.0k|      ));
  145|  11.0k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  11.0k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  11.0k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  11.0k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  14.6k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  11.0k|    ) {
  218|  11.0k|      return simd8<uint8_t>(
  219|  11.0k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  11.0k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  11.0k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  11.0k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  11.0k|      );
  224|  11.0k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  11.0k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  22.0k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   697k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   697k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.67k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.67k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.67k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.67k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.67k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.67k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  9.17k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  69.3k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  69.3k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  69.3k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  69.3k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  24.1k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   155k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  26.1k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  26.1k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  26.1k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.67k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  14.9k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.67k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.67k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.83k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.83k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   775k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   775k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  20.3k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  40.7k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  40.7k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  40.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  10.1k|    simdutf_really_inline bool is_ascii() const {
  300|  10.1k|      return this->reduce_or().is_ascii();
  301|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  10.1k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  10.1k|      return this->chunks[0] | this->chunks[1];
  297|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  10.1k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  10.1k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    981|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    981|      const simd8<T> mask = simd8<T>::splat(m);
  364|    981|      return  simd8x64<bool>(
  365|    981|        this->chunks[0] < mask,
  366|    981|        this->chunks[1] < mask
  367|    981|      ).to_bitmask();
  368|    981|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.96k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  11.2k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  11.2k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  11.2k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  11.2k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  11.2k|      return r_lo | (r_hi << 32);
  287|  11.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  22.4k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  22.4k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  9.11k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  9.11k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  9.11k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  9.11k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  18.2k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  18.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  18.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  18.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  18.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  18.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  10.2k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  10.2k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  10.2k|      return  simd8x64<bool>(
  373|  10.2k|        this->chunks[0] > mask,
  374|  10.2k|        this->chunks[1] > mask
  375|  10.2k|      ).to_bitmask();
  376|  10.2k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   693k|{
  619|   693k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   693k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   693k|    static_cast<    \
  |  |  247|   693k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   693k|}
_ZN3scn2v26detail20check_scan_arg_typesIJfEEEvv:
  386|  1.50M|{
  387|  1.50M|    static_assert(
  388|  1.50M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.50M|        "Scan argument types must be default constructible");
  390|  1.50M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.50M|                  "Scan argument types must be Destructible");
  392|  1.50M|    static_assert(
  393|  1.50M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.50M|        "Scan argument types must not be references");
  395|  1.50M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2EONSt3__15tupleIJfEEE:
  563|   693k|    {
  564|   693k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   693k|    {
  574|   693k|        return {
  575|   693k|            detail::make_arg<base::is_packed, Context,
  576|   693k|                             detail::mapped_type_constant<
  577|   693k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   693k|                args)...};
  579|   693k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|   693k|{
  415|   693k|    return make_value<Context>(value);
  416|   693k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
  371|   768k|{
  372|   768k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   768k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   768k|                                  needs_context_tag>) {
  376|   768k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   768k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   768k|    }
  378|   768k|    else {
  379|   768k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   768k|            value, context_tag<Context>{}));
  381|   768k|    }
  382|   768k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERf:
  216|   768k|    {                                                                        \
  217|   768k|        return val;                                                          \
  218|   768k|    }
_ZN3scn2v26detail15make_value_implIRfEEDaOT_:
  340|  1.50M|{
  341|  1.50M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.50M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.50M|    constexpr bool scannable_char =
  345|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.50M|    static_assert(scannable_char,
  347|  1.50M|                  "Cannot scan an argument of an unsupported character "
  348|  1.50M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.50M|    constexpr bool scannable_const =
  351|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.50M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.50M|    constexpr bool scannable_disabled =
  355|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.50M|    static_assert(scannable_disabled,
  357|  1.50M|                  "Cannot scan an argument that has been disabled by "
  358|  1.50M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.50M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.50M|    static_assert(
  362|  1.50M|        scannable,
  363|  1.50M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.50M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.50M|    return arg_value{arg};
  367|  1.50M|}
_ZN3scn2v26detail9arg_valueC2IfEERT_:
  159|  1.50M|    {
  160|  1.50M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   693k|    {
  647|   693k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  2.24M|    {
  694|  2.24M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
  553|   632k|    {
  554|   632k|        return m_args;
  555|   632k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  75.3k|{
  400|  75.3k|    check_scan_arg_types<T>();
  401|       |
  402|  75.3k|    basic_scan_arg<Context> arg;
  403|  75.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  75.3k|    arg.m_value = make_value<Context>(value);
  405|  75.3k|    return arg;
  406|  75.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  2.49M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  4.82M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   769k|{
  619|   769k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   769k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   769k|    static_cast<    \
  |  |  247|   769k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   769k|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  386|  1.65M|{
  387|  1.65M|    static_assert(
  388|  1.65M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.65M|        "Scan argument types must be default constructible");
  390|  1.65M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.65M|                  "Scan argument types must be Destructible");
  392|  1.65M|    static_assert(
  393|  1.65M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.65M|        "Scan argument types must not be references");
  395|  1.65M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  563|   769k|    {
  564|   769k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   769k|    {
  574|   769k|        return {
  575|   769k|            detail::make_arg<base::is_packed, Context,
  576|   769k|                             detail::mapped_type_constant<
  577|   769k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   769k|                args)...};
  579|   769k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|   769k|{
  415|   769k|    return make_value<Context>(value);
  416|   769k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  371|   854k|{
  372|   854k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   854k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   854k|                                  needs_context_tag>) {
  376|   854k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   854k|    }
  378|   854k|    else {
  379|   854k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   854k|            value, context_tag<Context>{}));
  381|   854k|    }
  382|   854k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  216|   854k|    {                                                                        \
  217|   854k|        return val;                                                          \
  218|   854k|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  340|  1.65M|{
  341|  1.65M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.65M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.65M|    constexpr bool scannable_char =
  345|  1.65M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.65M|    static_assert(scannable_char,
  347|  1.65M|                  "Cannot scan an argument of an unsupported character "
  348|  1.65M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.65M|    constexpr bool scannable_const =
  351|  1.65M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.65M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.65M|    constexpr bool scannable_disabled =
  355|  1.65M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.65M|    static_assert(scannable_disabled,
  357|  1.65M|                  "Cannot scan an argument that has been disabled by "
  358|  1.65M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.65M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.65M|    static_assert(
  362|  1.65M|        scannable,
  363|  1.65M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.65M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.65M|    return arg_value{arg};
  367|  1.65M|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  1.65M|    {
  160|  1.65M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   769k|    {
  647|   769k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
  553|   709k|    {
  554|   709k|        return m_args;
  555|   709k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  84.7k|{
  400|  84.7k|    check_scan_arg_types<T>();
  401|       |
  402|  84.7k|    basic_scan_arg<Context> arg;
  403|  84.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  84.7k|    arg.m_value = make_value<Context>(value);
  405|  84.7k|    return arg;
  406|  84.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   780k|{
  619|   780k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   780k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   780k|    static_cast<    \
  |  |  247|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   780k|}
_ZN3scn2v26detail20check_scan_arg_typesIJeEEEvv:
  386|  1.67M|{
  387|  1.67M|    static_assert(
  388|  1.67M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.67M|        "Scan argument types must be default constructible");
  390|  1.67M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.67M|                  "Scan argument types must be Destructible");
  392|  1.67M|    static_assert(
  393|  1.67M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.67M|        "Scan argument types must not be references");
  395|  1.67M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2EONSt3__15tupleIJeEEE:
  563|   780k|    {
  564|   780k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   780k|    {
  574|   780k|        return {
  575|   780k|            detail::make_arg<base::is_packed, Context,
  576|   780k|                             detail::mapped_type_constant<
  577|   780k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   780k|                args)...};
  579|   780k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|   780k|{
  415|   780k|    return make_value<Context>(value);
  416|   780k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
  371|   867k|{
  372|   867k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   867k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   867k|                                  needs_context_tag>) {
  376|   867k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   867k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   867k|    }
  378|   867k|    else {
  379|   867k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   867k|            value, context_tag<Context>{}));
  381|   867k|    }
  382|   867k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERe:
  216|   867k|    {                                                                        \
  217|   867k|        return val;                                                          \
  218|   867k|    }
_ZN3scn2v26detail15make_value_implIReEEDaOT_:
  340|  1.67M|{
  341|  1.67M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.67M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.67M|    constexpr bool scannable_char =
  345|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.67M|    static_assert(scannable_char,
  347|  1.67M|                  "Cannot scan an argument of an unsupported character "
  348|  1.67M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.67M|    constexpr bool scannable_const =
  351|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.67M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.67M|    constexpr bool scannable_disabled =
  355|  1.67M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.67M|    static_assert(scannable_disabled,
  357|  1.67M|                  "Cannot scan an argument that has been disabled by "
  358|  1.67M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.67M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.67M|    static_assert(
  362|  1.67M|        scannable,
  363|  1.67M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.67M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.67M|    return arg_value{arg};
  367|  1.67M|}
_ZN3scn2v26detail9arg_valueC2IeEERT_:
  159|  1.67M|    {
  160|  1.67M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   780k|    {
  647|   780k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
  553|   720k|    {
  554|   720k|        return m_args;
  555|   720k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  86.5k|{
  400|  86.5k|    check_scan_arg_types<T>();
  401|       |
  402|  86.5k|    basic_scan_arg<Context> arg;
  403|  86.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  86.5k|    arg.m_value = make_value<Context>(value);
  405|  86.5k|    return arg;
  406|  86.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   662k|{
  619|   662k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   662k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   662k|    static_cast<    \
  |  |  247|   662k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   662k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2EONSt3__15tupleIJfEEE:
  563|   662k|    {
  564|   662k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   662k|    {
  574|   662k|        return {
  575|   662k|            detail::make_arg<base::is_packed, Context,
  576|   662k|                             detail::mapped_type_constant<
  577|   662k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   662k|                args)...};
  579|   662k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|   662k|{
  415|   662k|    return make_value<Context>(value);
  416|   662k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
  371|   731k|{
  372|   731k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   731k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   731k|                                  needs_context_tag>) {
  376|   731k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   731k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   731k|    }
  378|   731k|    else {
  379|   731k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   731k|            value, context_tag<Context>{}));
  381|   731k|    }
  382|   731k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERf:
  216|   731k|    {                                                                        \
  217|   731k|        return val;                                                          \
  218|   731k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   662k|    {
  647|   662k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  2.11M|    {
  694|  2.11M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
  553|   554k|    {
  554|   554k|        return m_args;
  555|   554k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
  399|  69.3k|{
  400|  69.3k|    check_scan_arg_types<T>();
  401|       |
  402|  69.3k|    basic_scan_arg<Context> arg;
  403|  69.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  69.3k|    arg.m_value = make_value<Context>(value);
  405|  69.3k|    return arg;
  406|  69.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  2.33M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   721k|{
  619|   721k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   721k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   721k|    static_cast<    \
  |  |  247|   721k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   721k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  563|   721k|    {
  564|   721k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   721k|    {
  574|   721k|        return {
  575|   721k|            detail::make_arg<base::is_packed, Context,
  576|   721k|                             detail::mapped_type_constant<
  577|   721k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   721k|                args)...};
  579|   721k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|   721k|{
  415|   721k|    return make_value<Context>(value);
  416|   721k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  371|   798k|{
  372|   798k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   798k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   798k|                                  needs_context_tag>) {
  376|   798k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   798k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   798k|    }
  378|   798k|    else {
  379|   798k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   798k|            value, context_tag<Context>{}));
  381|   798k|    }
  382|   798k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  216|   798k|    {                                                                        \
  217|   798k|        return val;                                                          \
  218|   798k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   721k|    {
  647|   721k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
  553|   614k|    {
  554|   614k|        return m_args;
  555|   614k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
  399|  76.8k|{
  400|  76.8k|    check_scan_arg_types<T>();
  401|       |
  402|  76.8k|    basic_scan_arg<Context> arg;
  403|  76.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  76.8k|    arg.m_value = make_value<Context>(value);
  405|  76.8k|    return arg;
  406|  76.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   730k|{
  619|   730k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   730k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   730k|    static_cast<    \
  |  |  247|   730k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   730k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2EONSt3__15tupleIJeEEE:
  563|   730k|    {
  564|   730k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   730k|    {
  574|   730k|        return {
  575|   730k|            detail::make_arg<base::is_packed, Context,
  576|   730k|                             detail::mapped_type_constant<
  577|   730k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   730k|                args)...};
  579|   730k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|   730k|{
  415|   730k|    return make_value<Context>(value);
  416|   730k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
  371|   808k|{
  372|   808k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   808k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   808k|                                  needs_context_tag>) {
  376|   808k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   808k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   808k|    }
  378|   808k|    else {
  379|   808k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   808k|            value, context_tag<Context>{}));
  381|   808k|    }
  382|   808k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERe:
  216|   808k|    {                                                                        \
  217|   808k|        return val;                                                          \
  218|   808k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   730k|    {
  647|   730k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
  553|   622k|    {
  554|   622k|        return m_args;
  555|   622k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
  399|  78.2k|{
  400|  78.2k|    check_scan_arg_types<T>();
  401|       |
  402|  78.2k|    basic_scan_arg<Context> arg;
  403|  78.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  78.2k|    arg.m_value = make_value<Context>(value);
  405|  78.2k|    return arg;
  406|  78.2k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  2.24M|    {
  682|  2.24M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.24M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  2.24M|        return static_cast<std::size_t>(m_desc &
  687|  2.24M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  2.24M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  4.48M|    {
  702|  4.48M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  4.48M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  2.24M|    {
  655|  2.24M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.24M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  2.24M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.24M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  2.24M|        const auto t = type(id);
  667|  2.24M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  2.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.24M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  2.24M|        basic_scan_arg<Context> arg;
  672|  2.24M|        arg.m_type = t;
  673|  2.24M|        arg.m_value = m_values[id];
  674|  2.24M|        return arg;
  675|  2.24M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  2.24M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  2.24M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  2.24M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  2.24M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  2.24M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  4.24M|    {
  483|  4.24M|        return m_type != detail::arg_type::none_type;
  484|  4.24M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  3.50M|    {
  488|  3.50M|        return m_type;
  489|  3.50M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  2.11M|    {
  682|  2.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  2.11M|        return static_cast<std::size_t>(m_desc &
  687|  2.11M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  2.11M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  4.22M|    {
  702|  4.22M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  4.22M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  2.11M|    {
  655|  2.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  2.11M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  2.11M|        const auto t = type(id);
  667|  2.11M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  2.11M|        basic_scan_arg<Context> arg;
  672|  2.11M|        arg.m_type = t;
  673|  2.11M|        arg.m_value = m_values[id];
  674|  2.11M|        return arg;
  675|  2.11M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  2.11M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  2.11M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  2.11M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  2.11M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  2.11M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  4.00M|    {
  483|  4.00M|        return m_type != detail::arg_type::none_type;
  484|  4.00M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  3.33M|    {
  488|  3.33M|        return m_type;
  489|  3.33M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   246k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   224k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|  75.6k|    {
  109|  75.6k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  1.75M|    {
   60|  1.75M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   151k|    {
  124|   151k|        return m_current;
  125|   151k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  1.75M|    {
   43|  1.75M|        return m_args.get(id);
   44|  1.75M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  1.75M|    {
   53|  1.75M|        return m_locale;
   54|  1.75M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|  75.6k|    {
  132|  75.6k|        return ranges_std::default_sentinel;
  133|  75.6k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|  75.6k|    {
  140|  75.6k|        return ranges::subrange{begin(), end()};
  141|  75.6k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   242k|    {
  109|   242k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  1.66M|    {
   60|  1.66M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   592k|    {
  124|   592k|        return m_current;
  125|   592k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  1.66M|    {
   43|  1.66M|        return m_args.get(id);
   44|  1.66M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  1.66M|    {
   53|  1.66M|        return m_locale;
   54|  1.66M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   242k|    {
  132|   242k|        return ranges_std::default_sentinel;
  133|   242k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   107k|    {
  146|   107k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   107k|    static_cast<    \
  |  |  247|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   107k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   242k|    {
  140|   242k|        return ranges::subrange{begin(), end()};
  141|   242k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  5.06M|    {
   69|  5.06M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  5.06M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  5.06M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  19.1M|    {
   75|  19.1M|        return m_code == good;
   76|  19.1M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   420k|    {
   86|   420k|        return m_code;
   87|   420k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   420k|{
  111|   420k|    return a.code() == b;
  112|   420k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   420k|{
  116|   420k|    return !(a == b);
  117|   420k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  12.2M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   663k|    {
  675|   663k|        return m_str;
  676|   663k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  2.24M|{
  385|  2.24M|    return s;
  386|  2.24M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  2.24M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   663k|    {
  671|   663k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   739k|    {
  675|   739k|        return m_str;
  676|   739k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   739k|    {
  671|   739k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   750k|    {
  675|   750k|        return m_str;
  676|   750k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   750k|    {
  671|   750k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  30.2k|    {
  675|  30.2k|        return m_str;
  676|  30.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  30.2k|    {
  671|  30.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  30.2k|    {
  675|  30.2k|        return m_str;
  676|  30.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  30.2k|    {
  671|  30.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  30.2k|    {
  675|  30.2k|        return m_str;
  676|  30.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  30.2k|    {
  671|  30.2k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   563k|    {
  675|   563k|        return m_str;
  676|   563k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  2.11M|{
  390|  2.11M|    return s;
  391|  2.11M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  2.11M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   563k|    {
  671|   563k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   623k|    {
  675|   623k|        return m_str;
  676|   623k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   623k|    {
  671|   623k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   631k|    {
  675|   631k|        return m_str;
  676|   631k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   631k|    {
  671|   631k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  98.8k|    {
  675|  98.8k|        return m_str;
  676|  98.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  98.8k|    {
  671|  98.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  98.8k|    {
  675|  98.8k|        return m_str;
  676|  98.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  98.8k|    {
  671|  98.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  98.8k|    {
  675|  98.8k|        return m_str;
  676|  98.8k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  98.8k|    {
  671|  98.8k|    }

_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  3.41M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|   942k|    {
  245|   942k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|   942k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|   942k|            m_specs.localized = true;
  247|   942k|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|   942k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  2.47M|    {
  260|  2.47M|        m_specs.type = type;
  261|  2.47M|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  3.41M|    {
  333|  3.41M|        return static_cast<bool>(m_error);
  334|  3.41M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|   942k|{
  987|   942k|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 942k]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 0, False: 942k]
  ------------------
  992|      0|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 942k]
  ------------------
  993|      0|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 942k]
  ------------------
  994|      0|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 942k]
  ------------------
  995|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 942k]
  ------------------
  996|      0|            return arg_type_category::integer;
  997|       |
  998|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 0, False: 942k]
  ------------------
  999|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 942k]
  ------------------
 1000|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 0, False: 942k]
  ------------------
 1001|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 942k]
  ------------------
 1002|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 0, False: 942k]
  ------------------
 1003|      0|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 942k]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 942k]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 942k]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 942k]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 942k]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|   289k|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 289k, False: 652k]
  ------------------
 1015|   612k|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 323k, False: 618k]
  ------------------
 1016|   942k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 329k, False: 612k]
  ------------------
 1017|   942k|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 942k]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 942k]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 942k]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 942k]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 942k]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 942k]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|   942k|            SCN_CLANG_POP
 1034|   942k|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|   942k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.67M|{
  968|  1.67M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.67M|    handler.check_args_exhausted();
  970|  1.67M|    return handler.get_error();
  971|  1.67M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.67M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.67M|    auto begin = format.data();
  937|  1.67M|    auto it = begin;
  938|  1.67M|    const auto end = format.data() + format.size();
  939|       |
  940|  3.27M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.67M, False: 1.59M]
  ------------------
  941|  1.67M|        const auto ch = *it++;
  942|  1.67M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.67M, False: 0]
  ------------------
  943|  1.67M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.67M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.67M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 75.6k, False: 1.59M]
  ------------------
  947|  75.6k|                return;
  948|  75.6k|            }
  949|  1.67M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.67M|    }
  960|       |
  961|  1.59M|    handler.on_literal_text(begin, end);
  962|  1.59M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  1.67M|{
  866|  1.67M|    struct id_adapter {
  867|  1.67M|        constexpr void operator()()
  868|  1.67M|        {
  869|  1.67M|            arg_id = handler.on_arg_id();
  870|  1.67M|        }
  871|  1.67M|        constexpr void operator()(std::size_t id)
  872|  1.67M|        {
  873|  1.67M|            arg_id = handler.on_arg_id(id);
  874|  1.67M|        }
  875|       |
  876|  1.67M|        constexpr void on_error(const char* msg)
  877|  1.67M|        {
  878|  1.67M|            SCN_UNLIKELY_ATTR
  879|  1.67M|            handler.on_error(msg);
  880|  1.67M|        }
  881|       |
  882|  1.67M|        Handler& handler;
  883|  1.67M|        std::size_t arg_id;
  884|  1.67M|    };
  885|       |
  886|  1.67M|    ++begin;
  887|  1.67M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.67M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.67M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.67M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.67M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.67M|    else {
  899|  1.67M|        auto adapter = id_adapter{handler, 0};
  900|  1.67M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.67M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.67M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.67M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.67M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.67M, False: 0]
  ------------------
  911|  1.67M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.67M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.67M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  3.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.67M]
  |  |  |  Branch (153:45): [True: 0, False: 1.67M]
  |  |  |  Branch (153:45): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.67M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.67M|    }
  927|  1.67M|    return begin + 1;
  928|  1.67M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.67M|{
  400|  1.67M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.67M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.67M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.67M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.67M|    handler();
  406|  1.67M|    return begin;
  407|  1.67M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.67M|        {
  869|  1.67M|            arg_id = handler.on_arg_id();
  870|  1.67M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.67M|    {
 1046|  1.67M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.67M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.67M|{
  795|  1.67M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.67M|        if (*begin == CharT{'['}) {
  797|  1.67M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.67M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.67M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.67M|                return begin;
  803|  1.67M|            }
  804|  1.67M|            handler.on_character_set_string(set);
  805|  1.67M|            return begin;
  806|  1.67M|        }
  807|  1.67M|        if (*begin == CharT{'/'}) {
  808|  1.67M|            return parse_presentation_regex(begin, end, handler);
  809|  1.67M|        }
  810|  1.67M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.67M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.67M|            handler.on_error("Invalid type specifier in format string");
  813|  1.67M|            return begin;
  814|  1.67M|        }
  815|  1.67M|        handler.on_type(type);
  816|  1.67M|        return begin;
  817|  1.67M|    };
  818|       |
  819|  1.67M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.67M, False: 0]
  |  Branch (819:28): [True: 1.67M, False: 0]
  ------------------
  820|  1.67M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.67M, False: 0]
  |  Branch (820:36): [True: 1.19M, False: 478k]
  ------------------
  821|  1.19M|        return do_presentation();
  822|  1.19M|    }
  823|       |
  824|   478k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   478k|    begin = parse_align(begin, end, handler);
  830|   478k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   478k|    begin = parse_width(begin, end, handler);
  836|   478k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   478k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 478k, False: 0]
  ------------------
  842|   478k|        handler.on_localized();
  843|   478k|        ++begin;
  844|   478k|    }
  845|   478k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   478k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 478k, False: 0]
  |  Branch (850:25): [True: 0, False: 478k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   478k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   478k|    return begin;
  859|   478k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  1.75M|{
  464|  1.75M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.25M, False: 493k]
  |  Branch (464:33): [True: 1.25M, False: 0]
  ------------------
  465|  1.75M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 493k, False: 0]
  |  Branch (465:33): [True: 493k, False: 0]
  ------------------
  466|  1.75M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.19M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.19M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.19M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.19M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.19M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.19M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.19M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.19M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.19M|        handler.on_type(type);
  816|  1.19M|        return begin;
  817|  1.19M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  1.25M|{
  412|  1.25M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.25M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.25M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.25M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.25M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.25M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.25M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.25M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.25M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.25M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.25M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   538k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 538k, False: 719k]
  ------------------
  431|   538k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.25M]
  ------------------
  432|   538k|            return presentation_type::float_hex;
  433|  40.9k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 40.9k, False: 1.21M]
  ------------------
  434|  40.9k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.25M]
  ------------------
  435|  40.9k|            return presentation_type::float_scientific;
  436|   255k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 255k, False: 1.00M]
  ------------------
  437|   255k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.25M]
  ------------------
  438|   255k|            return presentation_type::float_fixed;
  439|   422k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 422k, False: 834k]
  ------------------
  440|   422k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.25M]
  ------------------
  441|   422k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.25M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.25M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.25M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.25M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.25M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.25M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.25M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.25M|    }
  459|  1.25M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   478k|{
  489|   478k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   478k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   478k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   478k|        switch (ch) {
  493|   478k|            case L'<':
  494|   478k|                return align_type::left;
  495|   478k|            case L'>':
  496|   478k|                return align_type::right;
  497|   478k|            case L'^':
  498|   478k|                return align_type::center;
  499|   478k|            default:
  500|   478k|                return align_type::none;
  501|   478k|        }
  502|   478k|    };
  503|       |
  504|   478k|    auto potential_fill_len = code_point_length(begin, end);
  505|   478k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   956k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 478k]
  |  |  |  Branch (153:45): [True: 0, False: 478k]
  |  |  |  Branch (153:45): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
  506|   478k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   478k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   478k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   478k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   478k|    const auto begin_before_fill = begin;
  516|   478k|    begin += potential_fill_len;
  517|       |
  518|   478k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 478k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   478k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   478k|    const auto begin_after_fill = begin;
  524|   478k|    ++begin;
  525|       |
  526|   478k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 478k, False: 0]
  ------------------
  527|   478k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   478k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 478k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   478k|    }
  535|       |
  536|   478k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 478k, False: 0]
  ------------------
  537|   478k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 478k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   478k|        return begin_before_fill;
  542|   478k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   478k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   493k|{
  471|   493k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   493k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   493k|        return 1;
  474|   493k|    }
  475|   493k|    else {
  476|   493k|        const auto lengths =
  477|   493k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   493k|            "\3\4";
  479|   493k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   493k|        return len;
  481|   493k|    }
  482|   493k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   956k|    auto check_align = [](wchar_t ch) {
  492|   956k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 956k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 956k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 956k]
  ------------------
  498|      0|                return align_type::center;
  499|   956k|            default:
  ------------------
  |  Branch (499:13): [True: 956k, False: 0]
  ------------------
  500|   956k|                return align_type::none;
  501|   956k|        }
  502|   956k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   478k|{
  554|   478k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   478k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   478k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   478k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 478k, False: 0]
  |  Branch (556:33): [True: 0, False: 478k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   478k|    return begin;
  567|   478k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   478k|    {
 1051|   478k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   478k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 478k, False: 0]
  ------------------
 1053|   478k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 478k, False: 0]
  ------------------
 1054|   478k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 478k]
  ------------------
 1055|   478k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   478k|        Handler::on_localized();
 1063|   478k|    }
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1116|  3.41M|{
 1117|  3.41M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1117:9): [True: 2.47M, False: 942k]
  ------------------
 1118|  3.41M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1118:10): [True: 0, False: 2.47M]
  ------------------
 1119|  2.47M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1119:10): [True: 0, False: 2.47M]
  ------------------
 1120|      0|        SCN_UNLIKELY_ATTR
 1121|      0|        return handler.on_error("Invalid type specifier for float type");
 1122|      0|    }
 1123|  3.41M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  75.6k|{
  968|  75.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  75.6k|    handler.check_args_exhausted();
  970|  75.6k|    return handler.get_error();
  971|  75.6k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  75.6k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  75.6k|    auto begin = format.data();
  937|  75.6k|    auto it = begin;
  938|  75.6k|    const auto end = format.data() + format.size();
  939|       |
  940|  75.6k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 75.6k, False: 0]
  ------------------
  941|  75.6k|        const auto ch = *it++;
  942|  75.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 75.6k, False: 0]
  ------------------
  943|  75.6k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  75.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  75.6k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 75.6k, False: 0]
  ------------------
  947|  75.6k|                return;
  948|  75.6k|            }
  949|  75.6k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  75.6k|    }
  960|       |
  961|      0|    handler.on_literal_text(begin, end);
  962|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|  75.6k|{
  866|  75.6k|    struct id_adapter {
  867|  75.6k|        constexpr void operator()()
  868|  75.6k|        {
  869|  75.6k|            arg_id = handler.on_arg_id();
  870|  75.6k|        }
  871|  75.6k|        constexpr void operator()(std::size_t id)
  872|  75.6k|        {
  873|  75.6k|            arg_id = handler.on_arg_id(id);
  874|  75.6k|        }
  875|       |
  876|  75.6k|        constexpr void on_error(const char* msg)
  877|  75.6k|        {
  878|  75.6k|            SCN_UNLIKELY_ATTR
  879|  75.6k|            handler.on_error(msg);
  880|  75.6k|        }
  881|       |
  882|  75.6k|        Handler& handler;
  883|  75.6k|        std::size_t arg_id;
  884|  75.6k|    };
  885|       |
  886|  75.6k|    ++begin;
  887|  75.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  75.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 75.6k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  75.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 75.6k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  75.6k|    else {
  899|  75.6k|        auto adapter = id_adapter{handler, 0};
  900|  75.6k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  75.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  75.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 75.6k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  75.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 75.6k, False: 0]
  ------------------
  911|  75.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  75.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  75.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.6k]
  |  |  |  Branch (153:45): [True: 0, False: 75.6k]
  |  |  |  Branch (153:45): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  75.6k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  75.6k|    }
  927|  75.6k|    return begin + 1;
  928|  75.6k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  75.6k|{
  400|  75.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  75.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  75.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  75.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 75.6k, False: 0]
  |  Branch (401:26): [True: 0, False: 75.6k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  75.6k|    handler();
  406|  75.6k|    return begin;
  407|  75.6k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  75.6k|        {
  869|  75.6k|            arg_id = handler.on_arg_id();
  870|  75.6k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|  75.6k|    {
 1046|  75.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  75.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  75.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  75.6k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|  75.6k|{
  795|  75.6k|    auto do_presentation = [&]() -> const CharT* {
  796|  75.6k|        if (*begin == CharT{'['}) {
  797|  75.6k|            auto set = parse_presentation_set(begin, end, handler);
  798|  75.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  75.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  75.6k|                return begin;
  803|  75.6k|            }
  804|  75.6k|            handler.on_character_set_string(set);
  805|  75.6k|            return begin;
  806|  75.6k|        }
  807|  75.6k|        if (*begin == CharT{'/'}) {
  808|  75.6k|            return parse_presentation_regex(begin, end, handler);
  809|  75.6k|        }
  810|  75.6k|        presentation_type type = parse_presentation_type(*begin++);
  811|  75.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  75.6k|            handler.on_error("Invalid type specifier in format string");
  813|  75.6k|            return begin;
  814|  75.6k|        }
  815|  75.6k|        handler.on_type(type);
  816|  75.6k|        return begin;
  817|  75.6k|    };
  818|       |
  819|  75.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 75.6k, False: 0]
  |  Branch (819:28): [True: 75.6k, False: 0]
  ------------------
  820|  75.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 75.6k, False: 0]
  |  Branch (820:36): [True: 60.5k, False: 15.1k]
  ------------------
  821|  60.5k|        return do_presentation();
  822|  60.5k|    }
  823|       |
  824|  15.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  15.1k|    begin = parse_align(begin, end, handler);
  830|  15.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  15.1k|    begin = parse_width(begin, end, handler);
  836|  15.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  15.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 15.1k, False: 0]
  ------------------
  842|  15.1k|        handler.on_localized();
  843|  15.1k|        ++begin;
  844|  15.1k|    }
  845|  15.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  15.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 15.1k, False: 0]
  |  Branch (850:25): [True: 0, False: 15.1k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  15.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  15.1k|    return begin;
  859|  15.1k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|  60.5k|    auto do_presentation = [&]() -> const CharT* {
  796|  60.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 60.5k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  60.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 60.5k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  60.5k|        presentation_type type = parse_presentation_type(*begin++);
  811|  60.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  60.5k|        handler.on_type(type);
  816|  60.5k|        return begin;
  817|  60.5k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  15.1k|{
  489|  15.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  15.1k|        switch (ch) {
  493|  15.1k|            case L'<':
  494|  15.1k|                return align_type::left;
  495|  15.1k|            case L'>':
  496|  15.1k|                return align_type::right;
  497|  15.1k|            case L'^':
  498|  15.1k|                return align_type::center;
  499|  15.1k|            default:
  500|  15.1k|                return align_type::none;
  501|  15.1k|        }
  502|  15.1k|    };
  503|       |
  504|  15.1k|    auto potential_fill_len = code_point_length(begin, end);
  505|  15.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  |  Branch (153:45): [True: 0, False: 15.1k]
  |  |  |  Branch (153:45): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  506|  15.1k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  15.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  15.1k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  15.1k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  15.1k|    const auto begin_before_fill = begin;
  516|  15.1k|    begin += potential_fill_len;
  517|       |
  518|  15.1k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 15.1k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  15.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  15.1k|    const auto begin_after_fill = begin;
  524|  15.1k|    ++begin;
  525|       |
  526|  15.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 15.1k, False: 0]
  ------------------
  527|  15.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  15.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 15.1k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  15.1k|    }
  535|       |
  536|  15.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 15.1k, False: 0]
  ------------------
  537|  15.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 15.1k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  15.1k|        return begin_before_fill;
  542|  15.1k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  15.1k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  30.2k|    auto check_align = [](wchar_t ch) {
  492|  30.2k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 30.2k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 30.2k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 30.2k]
  ------------------
  498|      0|                return align_type::center;
  499|  30.2k|            default:
  ------------------
  |  Branch (499:13): [True: 30.2k, False: 0]
  ------------------
  500|  30.2k|                return align_type::none;
  501|  30.2k|        }
  502|  30.2k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  15.1k|{
  554|  15.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  15.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 15.1k, False: 0]
  |  Branch (556:33): [True: 0, False: 15.1k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  15.1k|    return begin;
  567|  15.1k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  15.1k|    {
 1051|  15.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  15.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 15.1k, False: 0]
  ------------------
 1053|  15.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 15.1k, False: 0]
  ------------------
 1054|  15.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 15.1k]
  ------------------
 1055|  15.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  15.1k|        Handler::on_localized();
 1063|  15.1k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  1.42M|{
  968|  1.42M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  1.42M|    handler.check_args_exhausted();
  970|  1.42M|    return handler.get_error();
  971|  1.42M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  1.42M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  1.42M|    auto begin = format.data();
  937|  1.42M|    auto it = begin;
  938|  1.42M|    const auto end = format.data() + format.size();
  939|       |
  940|  2.71M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 1.42M, False: 1.28M]
  ------------------
  941|  1.42M|        const auto ch = *it++;
  942|  1.42M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 1.42M, False: 0]
  ------------------
  943|  1.42M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  1.42M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  1.42M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 134k, False: 1.28M]
  ------------------
  947|   134k|                return;
  948|   134k|            }
  949|  1.42M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  1.42M|    }
  960|       |
  961|  1.28M|    handler.on_literal_text(begin, end);
  962|  1.28M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  1.42M|{
  866|  1.42M|    struct id_adapter {
  867|  1.42M|        constexpr void operator()()
  868|  1.42M|        {
  869|  1.42M|            arg_id = handler.on_arg_id();
  870|  1.42M|        }
  871|  1.42M|        constexpr void operator()(std::size_t id)
  872|  1.42M|        {
  873|  1.42M|            arg_id = handler.on_arg_id(id);
  874|  1.42M|        }
  875|       |
  876|  1.42M|        constexpr void on_error(const char* msg)
  877|  1.42M|        {
  878|  1.42M|            SCN_UNLIKELY_ATTR
  879|  1.42M|            handler.on_error(msg);
  880|  1.42M|        }
  881|       |
  882|  1.42M|        Handler& handler;
  883|  1.42M|        std::size_t arg_id;
  884|  1.42M|    };
  885|       |
  886|  1.42M|    ++begin;
  887|  1.42M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  1.42M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 1.42M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  1.42M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 1.42M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  1.42M|    else {
  899|  1.42M|        auto adapter = id_adapter{handler, 0};
  900|  1.42M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  1.42M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  1.42M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 1.42M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  1.42M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 1.42M, False: 0]
  ------------------
  911|  1.42M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  1.42M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  1.42M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42M]
  |  |  |  Branch (153:45): [True: 0, False: 1.42M]
  |  |  |  Branch (153:45): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|  1.42M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  1.42M|    }
  927|  1.42M|    return begin + 1;
  928|  1.42M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  1.42M|{
  400|  1.42M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  1.42M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 1.42M, False: 0]
  |  Branch (401:26): [True: 0, False: 1.42M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  1.42M|    handler();
  406|  1.42M|    return begin;
  407|  1.42M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  1.42M|        {
  869|  1.42M|            arg_id = handler.on_arg_id();
  870|  1.42M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  1.42M|    {
 1046|  1.42M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  1.42M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  1.42M|{
  795|  1.42M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.42M|        if (*begin == CharT{'['}) {
  797|  1.42M|            auto set = parse_presentation_set(begin, end, handler);
  798|  1.42M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  1.42M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.42M|                return begin;
  803|  1.42M|            }
  804|  1.42M|            handler.on_character_set_string(set);
  805|  1.42M|            return begin;
  806|  1.42M|        }
  807|  1.42M|        if (*begin == CharT{'/'}) {
  808|  1.42M|            return parse_presentation_regex(begin, end, handler);
  809|  1.42M|        }
  810|  1.42M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.42M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  1.42M|            handler.on_error("Invalid type specifier in format string");
  813|  1.42M|            return begin;
  814|  1.42M|        }
  815|  1.42M|        handler.on_type(type);
  816|  1.42M|        return begin;
  817|  1.42M|    };
  818|       |
  819|  1.42M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 1.42M, False: 0]
  |  Branch (819:28): [True: 1.42M, False: 0]
  ------------------
  820|  1.42M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.42M, False: 0]
  |  Branch (820:36): [True: 1.02M, False: 394k]
  ------------------
  821|  1.02M|        return do_presentation();
  822|  1.02M|    }
  823|       |
  824|   394k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   394k|    begin = parse_align(begin, end, handler);
  830|   394k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   394k|    begin = parse_width(begin, end, handler);
  836|   394k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   394k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 394k, False: 0]
  ------------------
  842|   394k|        handler.on_localized();
  843|   394k|        ++begin;
  844|   394k|    }
  845|   394k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   394k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 394k, False: 0]
  |  Branch (850:25): [True: 0, False: 394k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|   394k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   394k|    return begin;
  859|   394k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  1.66M|{
  464|  1.66M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 1.21M, False: 448k]
  |  Branch (464:33): [True: 1.21M, False: 0]
  ------------------
  465|  1.66M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 448k, False: 0]
  |  Branch (465:33): [True: 448k, False: 0]
  ------------------
  466|  1.66M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  1.02M|    auto do_presentation = [&]() -> const CharT* {
  796|  1.02M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 1.02M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  1.02M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 1.02M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  1.02M|        presentation_type type = parse_presentation_type(*begin++);
  811|  1.02M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|  1.02M|        handler.on_type(type);
  816|  1.02M|        return begin;
  817|  1.02M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  1.21M|{
  412|  1.21M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 1.21M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 1.21M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 1.21M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 1.21M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.21M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 1.21M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 1.21M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.21M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.21M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.21M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|   490k|        case 'a':
  ------------------
  |  Branch (430:9): [True: 490k, False: 726k]
  ------------------
  431|   490k|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.21M]
  ------------------
  432|   490k|            return presentation_type::float_hex;
  433|  62.3k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 62.3k, False: 1.15M]
  ------------------
  434|  62.3k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.21M]
  ------------------
  435|  62.3k|            return presentation_type::float_scientific;
  436|   264k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 264k, False: 951k]
  ------------------
  437|   264k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.21M]
  ------------------
  438|   264k|            return presentation_type::float_fixed;
  439|   399k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 399k, False: 817k]
  ------------------
  440|   399k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.21M]
  ------------------
  441|   399k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.21M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.21M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.21M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.21M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.21M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.21M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 1.21M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  1.21M|    }
  459|  1.21M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   394k|{
  489|   394k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   394k|        switch (ch) {
  493|   394k|            case L'<':
  494|   394k|                return align_type::left;
  495|   394k|            case L'>':
  496|   394k|                return align_type::right;
  497|   394k|            case L'^':
  498|   394k|                return align_type::center;
  499|   394k|            default:
  500|   394k|                return align_type::none;
  501|   394k|        }
  502|   394k|    };
  503|       |
  504|   394k|    auto potential_fill_len = code_point_length(begin, end);
  505|   394k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  |  Branch (153:45): [True: 0, False: 394k]
  |  |  |  Branch (153:45): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  506|   394k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   394k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   394k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   394k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   394k|    const auto begin_before_fill = begin;
  516|   394k|    begin += potential_fill_len;
  517|       |
  518|   394k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 394k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   394k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   394k|    const auto begin_after_fill = begin;
  524|   394k|    ++begin;
  525|       |
  526|   394k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 394k, False: 0]
  ------------------
  527|   394k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   394k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 394k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   394k|    }
  535|       |
  536|   394k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 394k, False: 0]
  ------------------
  537|   394k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 394k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   394k|        return begin_before_fill;
  542|   394k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   394k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   448k|{
  471|   448k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   448k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   448k|        return 1;
  474|   448k|    }
  475|   448k|    else {
  476|   448k|        const auto lengths =
  477|   448k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   448k|            "\3\4";
  479|   448k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   448k|        return len;
  481|   448k|    }
  482|   448k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   789k|    auto check_align = [](wchar_t ch) {
  492|   789k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 789k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 789k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 789k]
  ------------------
  498|      0|                return align_type::center;
  499|   789k|            default:
  ------------------
  |  Branch (499:13): [True: 789k, False: 0]
  ------------------
  500|   789k|                return align_type::none;
  501|   789k|        }
  502|   789k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   394k|{
  554|   394k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   394k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 394k, False: 0]
  |  Branch (556:33): [True: 0, False: 394k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   394k|    return begin;
  567|   394k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   394k|    {
 1051|   394k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   394k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 394k, False: 0]
  ------------------
 1053|   394k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 394k, False: 0]
  ------------------
 1054|   394k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 394k]
  ------------------
 1055|   394k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   394k|        Handler::on_localized();
 1063|   394k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   242k|{
  968|   242k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   242k|    handler.check_args_exhausted();
  970|   242k|    return handler.get_error();
  971|   242k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   242k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   242k|    auto begin = format.data();
  937|   242k|    auto it = begin;
  938|   242k|    const auto end = format.data() + format.size();
  939|       |
  940|   350k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 242k, False: 107k]
  ------------------
  941|   242k|        const auto ch = *it++;
  942|   242k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 242k, False: 0]
  ------------------
  943|   242k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   242k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   242k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 134k, False: 107k]
  ------------------
  947|   134k|                return;
  948|   134k|            }
  949|   242k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   242k|    }
  960|       |
  961|   107k|    handler.on_literal_text(begin, end);
  962|   107k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   242k|{
  866|   242k|    struct id_adapter {
  867|   242k|        constexpr void operator()()
  868|   242k|        {
  869|   242k|            arg_id = handler.on_arg_id();
  870|   242k|        }
  871|   242k|        constexpr void operator()(std::size_t id)
  872|   242k|        {
  873|   242k|            arg_id = handler.on_arg_id(id);
  874|   242k|        }
  875|       |
  876|   242k|        constexpr void on_error(const char* msg)
  877|   242k|        {
  878|   242k|            SCN_UNLIKELY_ATTR
  879|   242k|            handler.on_error(msg);
  880|   242k|        }
  881|       |
  882|   242k|        Handler& handler;
  883|   242k|        std::size_t arg_id;
  884|   242k|    };
  885|       |
  886|   242k|    ++begin;
  887|   242k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 242k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   242k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 242k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   242k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 242k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   242k|    else {
  899|   242k|        auto adapter = id_adapter{handler, 0};
  900|   242k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   242k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 242k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   242k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 242k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   242k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 242k, False: 0]
  ------------------
  911|   242k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 242k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   242k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   242k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 242k]
  |  |  |  Branch (153:45): [True: 0, False: 242k]
  |  |  |  Branch (153:45): [True: 0, False: 242k]
  |  |  ------------------
  ------------------
  917|      0|                handler.on_error("Unknown format specifier");
  918|      0|                return begin;
  919|      0|            }
  920|   242k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   242k|    }
  927|   242k|    return begin + 1;
  928|   242k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   242k|{
  400|   242k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   242k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   242k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   242k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 242k, False: 0]
  |  Branch (401:26): [True: 0, False: 242k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   242k|    handler();
  406|   242k|    return begin;
  407|   242k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   242k|        {
  869|   242k|            arg_id = handler.on_arg_id();
  870|   242k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   242k|    {
 1046|   242k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   242k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   242k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   242k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   242k|{
  795|   242k|    auto do_presentation = [&]() -> const CharT* {
  796|   242k|        if (*begin == CharT{'['}) {
  797|   242k|            auto set = parse_presentation_set(begin, end, handler);
  798|   242k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   242k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   242k|                return begin;
  803|   242k|            }
  804|   242k|            handler.on_character_set_string(set);
  805|   242k|            return begin;
  806|   242k|        }
  807|   242k|        if (*begin == CharT{'/'}) {
  808|   242k|            return parse_presentation_regex(begin, end, handler);
  809|   242k|        }
  810|   242k|        presentation_type type = parse_presentation_type(*begin++);
  811|   242k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   242k|            handler.on_error("Invalid type specifier in format string");
  813|   242k|            return begin;
  814|   242k|        }
  815|   242k|        handler.on_type(type);
  816|   242k|        return begin;
  817|   242k|    };
  818|       |
  819|   242k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 242k, False: 0]
  |  Branch (819:28): [True: 242k, False: 0]
  ------------------
  820|   242k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 242k, False: 0]
  |  Branch (820:36): [True: 188k, False: 53.8k]
  ------------------
  821|   188k|        return do_presentation();
  822|   188k|    }
  823|       |
  824|  53.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  53.8k|    begin = parse_align(begin, end, handler);
  830|  53.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  53.8k|    begin = parse_width(begin, end, handler);
  836|  53.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  53.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 53.8k, False: 0]
  ------------------
  842|  53.8k|        handler.on_localized();
  843|  53.8k|        ++begin;
  844|  53.8k|    }
  845|  53.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  53.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 53.8k, False: 0]
  |  Branch (850:25): [True: 0, False: 53.8k]
  ------------------
  851|      0|        do_presentation();
  852|      0|    }
  853|  53.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  53.8k|    return begin;
  859|  53.8k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   188k|    auto do_presentation = [&]() -> const CharT* {
  796|   188k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 188k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   188k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 188k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   188k|        presentation_type type = parse_presentation_type(*begin++);
  811|   188k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 188k]
  |  |  ------------------
  ------------------
  812|      0|            handler.on_error("Invalid type specifier in format string");
  813|      0|            return begin;
  814|      0|        }
  815|   188k|        handler.on_type(type);
  816|   188k|        return begin;
  817|   188k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|  53.8k|{
  489|  53.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  53.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  53.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  53.8k|        switch (ch) {
  493|  53.8k|            case L'<':
  494|  53.8k|                return align_type::left;
  495|  53.8k|            case L'>':
  496|  53.8k|                return align_type::right;
  497|  53.8k|            case L'^':
  498|  53.8k|                return align_type::center;
  499|  53.8k|            default:
  500|  53.8k|                return align_type::none;
  501|  53.8k|        }
  502|  53.8k|    };
  503|       |
  504|  53.8k|    auto potential_fill_len = code_point_length(begin, end);
  505|  53.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.8k]
  |  |  |  Branch (153:45): [True: 0, False: 53.8k]
  |  |  |  Branch (153:45): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  506|  53.8k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  53.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  53.8k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  53.8k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  53.8k|    const auto begin_before_fill = begin;
  516|  53.8k|    begin += potential_fill_len;
  517|       |
  518|  53.8k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 53.8k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  53.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  53.8k|    const auto begin_after_fill = begin;
  524|  53.8k|    ++begin;
  525|       |
  526|  53.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 53.8k, False: 0]
  ------------------
  527|  53.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  53.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 53.8k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  53.8k|    }
  535|       |
  536|  53.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 53.8k, False: 0]
  ------------------
  537|  53.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 53.8k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  53.8k|        return begin_before_fill;
  542|  53.8k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  53.8k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   107k|    auto check_align = [](wchar_t ch) {
  492|   107k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 107k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 107k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 107k]
  ------------------
  498|      0|                return align_type::center;
  499|   107k|            default:
  ------------------
  |  Branch (499:13): [True: 107k, False: 0]
  ------------------
  500|   107k|                return align_type::none;
  501|   107k|        }
  502|   107k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|  53.8k|{
  554|  53.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  53.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  53.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  53.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 53.8k, False: 0]
  |  Branch (556:33): [True: 0, False: 53.8k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  53.8k|    return begin;
  567|  53.8k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  53.8k|    {
 1051|  53.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  53.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 53.8k, False: 0]
  ------------------
 1053|  53.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 53.8k, False: 0]
  ------------------
 1054|  53.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 53.8k]
  ------------------
 1055|  53.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  53.8k|        Handler::on_localized();
 1063|  53.8k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.39M|{
  226|  2.39M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.39M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.39M|                  "\n"
  230|  2.39M|                  "Unsupported range type given as input to a scanning "
  231|  2.39M|                  "function.\n"
  232|  2.39M|                  "A range needs to have a character type (value type) "
  233|  2.39M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.39M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.39M|                  "to be included.\n"
  236|  2.39M|                  "See the scnlib documentation for more details.");
  237|  2.39M|    static_assert(
  238|  2.39M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.39M|        "\n"
  240|  2.39M|        "Unsupported range type given as input to a scanning "
  241|  2.39M|        "function.\n"
  242|  2.39M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.39M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.39M|        "not supported.");
  245|  2.39M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.39M|                  "\n"
  247|  2.39M|                  "Unsupported range type given as input to a scanning "
  248|  2.39M|                  "function.\n"
  249|  2.39M|                  "file_marker_found cannot be used as an "
  250|  2.39M|                  "source range type to scn::scan.\n"
  251|  2.39M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.39M|                  "and do not provide an explicit source range, "
  253|  2.39M|                  "or use scn::scan with a FILE* directly.");
  254|  2.39M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.39M|                  "\n"
  256|  2.39M|                  "Unsupported range type given as input to a scanning "
  257|  2.39M|                  "function.\n"
  258|  2.39M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.39M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.39M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.39M|                  "\n"
  262|  2.39M|                  "Unsupported range type given as input to a scanning "
  263|  2.39M|                  "function.\n"
  264|  2.39M|                  "A range needs to model forward_range and have a valid "
  265|  2.39M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.39M|                  "Examples of scannable ranges are std::string, "
  267|  2.39M|                  "std::string_view, "
  268|  2.39M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.39M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.39M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.39M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.39M|{
  153|  2.39M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.39M|        return std::basic_string_view{ranges::data(r),
  155|  2.39M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.39M|    }
  162|  2.39M|    else {
  163|  2.39M|        return invalid_char_type{};
  164|  2.39M|    }
  165|  2.39M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  98.3k|{
  226|  98.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  98.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  98.3k|                  "\n"
  230|  98.3k|                  "Unsupported range type given as input to a scanning "
  231|  98.3k|                  "function.\n"
  232|  98.3k|                  "A range needs to have a character type (value type) "
  233|  98.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  98.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  98.3k|                  "to be included.\n"
  236|  98.3k|                  "See the scnlib documentation for more details.");
  237|  98.3k|    static_assert(
  238|  98.3k|        !std::is_same_v<T, custom_char_traits>,
  239|  98.3k|        "\n"
  240|  98.3k|        "Unsupported range type given as input to a scanning "
  241|  98.3k|        "function.\n"
  242|  98.3k|        "String types (std::basic_string, and std::basic_string_view) "
  243|  98.3k|        "need to use std::char_traits. Strings with custom Traits are "
  244|  98.3k|        "not supported.");
  245|  98.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  98.3k|                  "\n"
  247|  98.3k|                  "Unsupported range type given as input to a scanning "
  248|  98.3k|                  "function.\n"
  249|  98.3k|                  "file_marker_found cannot be used as an "
  250|  98.3k|                  "source range type to scn::scan.\n"
  251|  98.3k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  98.3k|                  "and do not provide an explicit source range, "
  253|  98.3k|                  "or use scn::scan with a FILE* directly.");
  254|  98.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  98.3k|                  "\n"
  256|  98.3k|                  "Unsupported range type given as input to a scanning "
  257|  98.3k|                  "function.\n"
  258|  98.3k|                  "In order to be scannable, a range needs to satisfy "
  259|  98.3k|                  "`forward_range`. `input_range` is not sufficient.");
  260|  98.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  98.3k|                  "\n"
  262|  98.3k|                  "Unsupported range type given as input to a scanning "
  263|  98.3k|                  "function.\n"
  264|  98.3k|                  "A range needs to model forward_range and have a valid "
  265|  98.3k|                  "character type (char or wchar_t) to be scannable.\n"
  266|  98.3k|                  "Examples of scannable ranges are std::string, "
  267|  98.3k|                  "std::string_view, "
  268|  98.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  98.3k|                  "See the scnlib documentation for more details.");
  270|       |
  271|  98.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  98.3k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|  98.3k|{
  196|  98.3k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|  98.3k|        return file_marker_found{};
  198|  98.3k|    }
  199|  98.3k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|  98.3k|        if constexpr (ranges::input_range<Range>) {
  201|  98.3k|            return insufficient_range{};
  202|  98.3k|        }
  203|  98.3k|        else {
  204|  98.3k|            return invalid_input_range{};
  205|  98.3k|        }
  206|  98.3k|    }
  207|  98.3k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|  98.3k|        return invalid_char_type{};
  209|  98.3k|    }
  210|  98.3k|    else {
  211|  98.3k|        return make_forward_scan_buffer(r);
  212|  98.3k|    }
  213|  98.3k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  2.01M|{
  226|  2.01M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  2.01M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  2.01M|                  "\n"
  230|  2.01M|                  "Unsupported range type given as input to a scanning "
  231|  2.01M|                  "function.\n"
  232|  2.01M|                  "A range needs to have a character type (value type) "
  233|  2.01M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  2.01M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  2.01M|                  "to be included.\n"
  236|  2.01M|                  "See the scnlib documentation for more details.");
  237|  2.01M|    static_assert(
  238|  2.01M|        !std::is_same_v<T, custom_char_traits>,
  239|  2.01M|        "\n"
  240|  2.01M|        "Unsupported range type given as input to a scanning "
  241|  2.01M|        "function.\n"
  242|  2.01M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  2.01M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  2.01M|        "not supported.");
  245|  2.01M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  2.01M|                  "\n"
  247|  2.01M|                  "Unsupported range type given as input to a scanning "
  248|  2.01M|                  "function.\n"
  249|  2.01M|                  "file_marker_found cannot be used as an "
  250|  2.01M|                  "source range type to scn::scan.\n"
  251|  2.01M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  2.01M|                  "and do not provide an explicit source range, "
  253|  2.01M|                  "or use scn::scan with a FILE* directly.");
  254|  2.01M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  2.01M|                  "\n"
  256|  2.01M|                  "Unsupported range type given as input to a scanning "
  257|  2.01M|                  "function.\n"
  258|  2.01M|                  "In order to be scannable, a range needs to satisfy "
  259|  2.01M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  2.01M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  2.01M|                  "\n"
  262|  2.01M|                  "Unsupported range type given as input to a scanning "
  263|  2.01M|                  "function.\n"
  264|  2.01M|                  "A range needs to model forward_range and have a valid "
  265|  2.01M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  2.01M|                  "Examples of scannable ranges are std::string, "
  267|  2.01M|                  "std::string_view, "
  268|  2.01M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  2.01M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  2.01M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  2.01M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  2.01M|{
  153|  2.01M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  2.01M|        return std::basic_string_view{ranges::data(r),
  155|  2.01M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  2.01M|    }
  162|  2.01M|    else {
  163|  2.01M|        return invalid_char_type{};
  164|  2.01M|    }
  165|  2.01M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   323k|{
  226|   323k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   323k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   323k|                  "\n"
  230|   323k|                  "Unsupported range type given as input to a scanning "
  231|   323k|                  "function.\n"
  232|   323k|                  "A range needs to have a character type (value type) "
  233|   323k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   323k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   323k|                  "to be included.\n"
  236|   323k|                  "See the scnlib documentation for more details.");
  237|   323k|    static_assert(
  238|   323k|        !std::is_same_v<T, custom_char_traits>,
  239|   323k|        "\n"
  240|   323k|        "Unsupported range type given as input to a scanning "
  241|   323k|        "function.\n"
  242|   323k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   323k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   323k|        "not supported.");
  245|   323k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   323k|                  "\n"
  247|   323k|                  "Unsupported range type given as input to a scanning "
  248|   323k|                  "function.\n"
  249|   323k|                  "file_marker_found cannot be used as an "
  250|   323k|                  "source range type to scn::scan.\n"
  251|   323k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   323k|                  "and do not provide an explicit source range, "
  253|   323k|                  "or use scn::scan with a FILE* directly.");
  254|   323k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   323k|                  "\n"
  256|   323k|                  "Unsupported range type given as input to a scanning "
  257|   323k|                  "function.\n"
  258|   323k|                  "In order to be scannable, a range needs to satisfy "
  259|   323k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   323k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   323k|                  "\n"
  262|   323k|                  "Unsupported range type given as input to a scanning "
  263|   323k|                  "function.\n"
  264|   323k|                  "A range needs to model forward_range and have a valid "
  265|   323k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   323k|                  "Examples of scannable ranges are std::string, "
  267|   323k|                  "std::string_view, "
  268|   323k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   323k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   323k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   323k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   323k|{
  196|   323k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   323k|        return file_marker_found{};
  198|   323k|    }
  199|   323k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   323k|        if constexpr (ranges::input_range<Range>) {
  201|   323k|            return insufficient_range{};
  202|   323k|        }
  203|   323k|        else {
  204|   323k|            return invalid_input_range{};
  205|   323k|        }
  206|   323k|    }
  207|   323k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   323k|        return invalid_char_type{};
  209|   323k|    }
  210|   323k|    else {
  211|   323k|        return make_forward_scan_buffer(r);
  212|   323k|    }
  213|   323k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  7.44M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  1.75M|    {
   45|  1.75M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  1.75M|    {
   66|  1.75M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.75M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.75M|        do_check_arg_id(id);
   74|  1.75M|        return id;
   75|  1.75M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  1.75M|{
  210|  1.75M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.75M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.75M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  1.75M|    {
   61|  1.75M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.75M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  3.50M|    {
   50|  3.50M|        return m_format.data();
   51|  3.50M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  1.66M|    {
   45|  1.66M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  1.66M|    {
   66|  1.66M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.66M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.66M|        do_check_arg_id(id);
   74|  1.66M|        return id;
   75|  1.66M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  1.66M|{
  210|  1.66M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.66M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.66M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  1.66M|    {
   61|  1.66M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.66M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  3.33M|    {
   50|  3.33M|        return m_format.data();
   51|  3.33M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  6.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|   928k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.76M|    {
  482|  4.76M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.76M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  4.76M|    {
  473|  4.76M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.76M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.01M|    {
  482|  2.01M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.01M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  2.01M|    {
  473|  2.01M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.01M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.19M|    {
  482|  2.19M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.19M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.19M|    {
  473|  2.19M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.19M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.59M|    {
  549|  1.59M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.59M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.59M|    {
  541|  1.59M|        return ranges::distance(lhs, rhs);
  542|  1.59M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   249k|    {
  513|   249k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   249k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   249k|    {
  498|   249k|        it.batch_advance(n);
  499|   249k|        return it;
  500|   249k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.80M|    {
  482|  1.80M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.80M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  1.80M|    {
  473|  1.80M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.80M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  1.28M|    {
  549|  1.28M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  1.28M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  1.28M|    {
  541|  1.28M|        return ranges::distance(lhs, rhs);
  542|  1.28M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   659k|    {
  513|   659k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   659k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   659k|    {
  498|   659k|        it.batch_advance(n);
  499|   659k|        return it;
  500|   659k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   107k|    {
  549|   107k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   107k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   107k|    {
  534|   107k|        return rhs.position() - lhs.position();
  535|   107k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.10M|    {
  482|  1.10M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.10M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSC_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISO_E4typeEE4typeE_EEOSH_:
  472|  1.10M|    {
  473|  1.10M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.10M|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  2.29M|{
  343|  2.29M|    return {ranges::next(ranges::begin(source), n),
  344|  2.29M|            make_vscan_result_range_end(source)};
  345|  2.29M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  2.29M|{
  330|  2.29M|    return ranges::end(source);
  331|  2.29M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   703k|    {
  253|   703k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  2.29M|    {
  104|  2.29M|    }
_ZN3scn2v26detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
   38|  1.31M|    {
   39|  1.31M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  2.29M|    {
  121|  2.29M|        return ranges::begin(m_range);
  122|  2.29M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   789k|    {
  253|   789k|    }
_ZN3scn2v26detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
   38|  1.47M|    {
   39|  1.47M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   801k|    {
  253|   801k|    }
_ZN3scn2v26detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
   38|  1.49M|    {
   39|  1.49M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  1.84M|{
  343|  1.84M|    return {ranges::next(ranges::begin(source), n),
  344|  1.84M|            make_vscan_result_range_end(source)};
  345|  1.84M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  1.84M|{
  330|  1.84M|    return ranges::end(source);
  331|  1.84M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|   565k|    {
  253|   565k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  1.84M|    {
  104|  1.84M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  1.84M|    {
  121|  1.84M|        return ranges::begin(m_range);
  122|  1.84M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|   632k|    {
  253|   632k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|   642k|    {
  253|   642k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   148k|{
  343|   148k|    return {ranges::next(ranges::begin(source), n),
  344|   148k|            make_vscan_result_range_end(source)};
  345|   148k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   148k|{
  330|   148k|    return ranges::end(source);
  331|   148k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ESF_ONS6_5tupleIJfEEE:
  252|  49.3k|    {
  253|  49.3k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   148k|    {
  104|   148k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   148k|    {
  121|   148k|        return ranges::begin(m_range);
  122|   148k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ESF_ONS6_5tupleIJdEEE:
  252|  49.3k|    {
  253|  49.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ESF_ONS6_5tupleIJeEEE:
  252|  49.3k|    {
  253|  49.3k|    }

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   331k|{
  117|   331k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   331k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   331k|{
   77|   331k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   331k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   331k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   331k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   663k|{
   55|   663k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   663k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.2k, False: 632k]
  |  |  ------------------
  ------------------
   56|  30.2k|        return unexpected(result.error());
   57|  30.2k|    }
   58|   632k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   632k|    static_cast<    \
  |  |  247|   632k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   632k|    static_cast<    \
  |  |  247|   632k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   663k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   331k|{
  201|   331k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   331k|                                                      format, {});
  203|   331k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   331k|{
  163|   331k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   331k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   331k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   331k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   331k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  72.8k|{
  248|  72.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  72.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  72.8k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  72.8k|{
  229|  72.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  72.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  72.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 70.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|  72.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  70.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  70.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  70.3k|    static_cast<    \
  |  |  247|  70.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  70.3k|    static_cast<    \
  |  |  247|  70.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  72.8k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   369k|{
  117|   369k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   369k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   369k|{
   77|   369k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   369k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   369k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   369k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   739k|{
   55|   739k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.2k, False: 709k]
  |  |  ------------------
  ------------------
   56|  30.2k|        return unexpected(result.error());
   57|  30.2k|    }
   58|   709k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   709k|    static_cast<    \
  |  |  247|   709k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   709k|    static_cast<    \
  |  |  247|   709k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   739k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   369k|{
  201|   369k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   369k|                                                      format, {});
  203|   369k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   369k|{
  163|   369k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   369k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   369k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   369k|    static_cast<    \
  |  |  247|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   369k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  82.2k|{
  248|  82.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  82.2k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  82.2k|{
  229|  82.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  82.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  82.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|  82.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  79.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  79.7k|    static_cast<    \
  |  |  247|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  79.7k|    static_cast<    \
  |  |  247|  79.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  82.2k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   375k|{
  117|   375k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   375k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   375k|{
   77|   375k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   375k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   375k|    static_cast<    \
  |  |  247|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   375k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   375k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   375k|    static_cast<    \
  |  |  247|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   375k|    static_cast<    \
  |  |  247|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   375k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   750k|{
   55|   750k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.2k, False: 720k]
  |  |  ------------------
  ------------------
   56|  30.2k|        return unexpected(result.error());
   57|  30.2k|    }
   58|   720k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   720k|    static_cast<    \
  |  |  247|   720k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   720k|    static_cast<    \
  |  |  247|   720k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   750k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   375k|{
  201|   375k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   375k|                                                      format, {});
  203|   375k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   375k|{
  163|   375k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   375k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   375k|    static_cast<    \
  |  |  247|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   375k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   375k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   375k|    static_cast<    \
  |  |  247|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   375k|    static_cast<    \
  |  |  247|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   375k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  84.0k|{
  248|  84.0k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  84.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  84.0k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  84.0k|{
  229|  84.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  84.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  84.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 81.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|  84.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  81.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  81.5k|    static_cast<    \
  |  |  247|  81.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  81.5k|    static_cast<    \
  |  |  247|  81.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  84.0k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.1k|{
  117|  15.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.1k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.1k|{
   77|  15.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  30.2k|{
   55|  30.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  30.2k|        return unexpected(result.error());
   57|  30.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  30.2k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.1k|{
  201|  15.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.1k|                                                      format, {});
  203|  15.1k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.1k|{
  163|  15.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.1k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.52k|{
  248|  2.52k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.52k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.52k|{
  229|  2.52k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|  2.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.52k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.1k|{
  117|  15.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.1k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.1k|{
   77|  15.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  30.2k|{
   55|  30.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  30.2k|        return unexpected(result.error());
   57|  30.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  30.2k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.1k|{
  201|  15.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.1k|                                                      format, {});
  203|  15.1k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.1k|{
  163|  15.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.1k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.52k|{
  248|  2.52k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.52k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.52k|{
  229|  2.52k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|  2.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.52k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  15.1k|{
  117|  15.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  15.1k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  15.1k|{
   77|  15.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  15.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  15.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  15.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  15.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  30.2k|{
   55|  30.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  30.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.2k, False: 0]
  |  |  ------------------
  ------------------
   56|  30.2k|        return unexpected(result.error());
   57|  30.2k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  30.2k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  15.1k|{
  201|  15.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  15.1k|                                                      format, {});
  203|  15.1k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  15.1k|{
  163|  15.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  15.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  15.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  15.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  15.1k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.52k|{
  248|  2.52k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.52k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.52k|{
  229|  2.52k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.52k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.52k|    }                                                  \
  |  |  |  |   70|  2.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.52k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   281k|{
   77|   281k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   281k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   281k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   281k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   563k|{
   55|   563k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.9k, False: 509k]
  |  |  ------------------
  ------------------
   56|  53.9k|        return unexpected(result.error());
   57|  53.9k|    }
   58|   509k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   509k|    static_cast<    \
  |  |  247|   509k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   509k|    static_cast<    \
  |  |  247|   509k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   563k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   281k|{
  163|   281k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   281k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   281k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   281k|    static_cast<    \
  |  |  247|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   281k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  60.3k|{
  229|  60.3k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  60.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  60.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.49k, False: 55.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.49k|    }                                                  \
  |  |  |  |   70|  60.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  55.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  55.8k|    static_cast<    \
  |  |  247|  55.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  55.8k|    static_cast<    \
  |  |  247|  55.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  60.3k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   311k|{
   77|   311k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   311k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   311k|    static_cast<    \
  |  |  247|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   311k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   311k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   311k|    static_cast<    \
  |  |  247|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   311k|    static_cast<    \
  |  |  247|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   311k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   623k|{
   55|   623k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.9k, False: 569k]
  |  |  ------------------
  ------------------
   56|  53.9k|        return unexpected(result.error());
   57|  53.9k|    }
   58|   569k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   569k|    static_cast<    \
  |  |  247|   569k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   569k|    static_cast<    \
  |  |  247|   569k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   623k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   311k|{
  163|   311k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   311k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   311k|    static_cast<    \
  |  |  247|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   311k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   311k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   311k|    static_cast<    \
  |  |  247|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   311k|    static_cast<    \
  |  |  247|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   311k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  67.9k|{
  229|  67.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  67.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  67.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.49k, False: 63.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.49k|    }                                                  \
  |  |  |  |   70|  67.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  63.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.4k|    static_cast<    \
  |  |  247|  63.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.4k|    static_cast<    \
  |  |  247|  63.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  67.9k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   315k|{
   77|   315k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   315k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   315k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   315k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   315k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   631k|{
   55|   631k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.9k, False: 577k]
  |  |  ------------------
  ------------------
   56|  53.9k|        return unexpected(result.error());
   57|  53.9k|    }
   58|   577k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   577k|    static_cast<    \
  |  |  247|   577k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   577k|    static_cast<    \
  |  |  247|   577k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   631k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   315k|{
  163|   315k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   315k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   315k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   315k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   315k|    static_cast<    \
  |  |  247|   315k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   315k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  69.2k|{
  229|  69.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  69.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.49k, False: 64.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.49k|    }                                                  \
  |  |  |  |   70|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  64.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.7k|    static_cast<    \
  |  |  247|  64.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.7k|    static_cast<    \
  |  |  247|  64.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  69.2k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  49.4k|{
   77|  49.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  49.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  49.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  49.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  49.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  98.8k|{
   55|  98.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.9k, False: 44.8k]
  |  |  ------------------
  ------------------
   56|  53.9k|        return unexpected(result.error());
   57|  53.9k|    }
   58|  44.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  98.8k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  49.4k|{
  163|  49.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  49.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  49.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  49.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  49.4k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.98k|{
  229|  8.98k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.98k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.49k, False: 4.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.49k|    }                                                  \
  |  |  |  |   70|  8.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.48k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.48k|    static_cast<    \
  |  |  247|  4.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.48k|    static_cast<    \
  |  |  247|  4.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.98k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  49.4k|{
   77|  49.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  49.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  49.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  49.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  49.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  98.8k|{
   55|  98.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.9k, False: 44.8k]
  |  |  ------------------
  ------------------
   56|  53.9k|        return unexpected(result.error());
   57|  53.9k|    }
   58|  44.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  98.8k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  49.4k|{
  163|  49.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  49.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  49.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  49.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  49.4k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.98k|{
  229|  8.98k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.98k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.49k, False: 4.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.49k|    }                                                  \
  |  |  |  |   70|  8.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.48k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.48k|    static_cast<    \
  |  |  247|  4.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.48k|    static_cast<    \
  |  |  247|  4.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.98k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  49.4k|{
   77|  49.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  49.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  49.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  49.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  49.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  98.8k|{
   55|  98.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 53.9k, False: 44.8k]
  |  |  ------------------
  ------------------
   56|  53.9k|        return unexpected(result.error());
   57|  53.9k|    }
   58|  44.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  98.8k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  49.4k|{
  163|  49.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  49.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  49.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  49.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  49.4k|    static_cast<    \
  |  |  247|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  49.4k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.98k|{
  229|  8.98k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.98k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.49k, False: 4.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.49k|    }                                                  \
  |  |  |  |   70|  8.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.48k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.48k|    static_cast<    \
  |  |  247|  4.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.48k|    static_cast<    \
  |  |  247|  4.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.98k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|  98.3k|{
  486|  98.3k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|  98.3k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|  98.3k|    {
  378|  98.3k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|  98.3k|    {
  360|  98.3k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|  98.3k|    {
  129|  98.3k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|  98.3k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   491k|    {
  382|   491k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 627, False: 491k]
  ------------------
  383|    627|            return false;
  384|    627|        }
  385|   491k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 392k, False: 98.3k]
  ------------------
  386|   392k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   392k|                                          this->m_current_view.begin(),
  388|   392k|                                          this->m_current_view.end());
  389|   392k|        }
  390|   491k|        m_latest = *m_cursor;
  391|   491k|        ++m_cursor;
  392|   491k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   491k|        return true;
  394|   491k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|  98.3k|    {
   49|  98.3k|        SCN_UNUSED(position);
  ------------------
  |  |  227|  98.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|  98.3k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   323k|{
  486|   323k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   323k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   323k|    {
  378|   323k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   323k|    {
  360|   323k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   323k|    {
  129|   323k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   323k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  2.17M|    {
  382|  2.17M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 2.12k, False: 2.16M]
  ------------------
  383|  2.12k|            return false;
  384|  2.12k|        }
  385|  2.16M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 1.84M, False: 323k]
  ------------------
  386|  1.84M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  1.84M|                                          this->m_current_view.begin(),
  388|  1.84M|                                          this->m_current_view.end());
  389|  1.84M|        }
  390|  2.16M|        m_latest = *m_cursor;
  391|  2.16M|        ++m_cursor;
  392|  2.16M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  2.16M|        return true;
  394|  2.17M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   323k|    {
   49|   323k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   323k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   323k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  12.0M|    {
  173|  12.0M|        return m_end == nullptr;
  174|  12.0M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   688k|    {
  189|   688k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 688k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   688k|        return parent()->get_segment_starting_at(position());
  195|   688k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  6.49M|    {
  183|  6.49M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  6.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  6.49M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   688k|    {
   79|   688k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   688k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 196k, False: 491k]
  |  |  ------------------
  ------------------
   80|   688k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   196k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   196k|        }
   83|   491k|        const auto start = pos - m_putback_buffer.size();
   84|   491k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   491k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   491k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   688k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   249k|    {
  178|   249k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   249k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  1.33M|    {
  168|  1.33M|        return m_position;
  169|  1.33M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   294k|    {
  101|   294k|        return m_is_contiguous;
  102|   294k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  54.2M|    {
  173|  54.2M|        return m_end == nullptr;
  174|  54.2M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  3.04M|    {
  189|  3.04M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 3.04M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  3.04M|        return parent()->get_segment_starting_at(position());
  195|  3.04M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  29.5M|    {
  183|  29.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  29.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  29.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  29.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  3.04M|    {
   79|  3.04M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.34M, False: 1.69M]
  |  |  ------------------
  ------------------
   80|  3.04M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  1.34M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  1.34M|        }
   83|  1.69M|        const auto start = pos - m_putback_buffer.size();
   84|  1.69M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  3.04M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   834k|    {
  178|   834k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   834k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   834k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   834k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  6.23M|    {
  168|  6.23M|        return m_position;
  169|  6.23M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|   970k|    {
  101|   970k|        return m_is_contiguous;
  102|   970k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|  98.3k|{
  322|  98.3k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 98.3k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|  98.3k|    return ranges::subrange{forward_iterator{this, 0},
  327|  98.3k|                            ranges_std::default_sentinel};
  328|  98.3k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|  98.3k|    {
  155|  98.3k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  98.3k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  98.3k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   589k|    {
  258|   589k|        return x.is_at_end();
  259|   589k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.27M|    {
  302|  1.27M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.27M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.27M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.27M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.27M|        return !read_at_position();
  309|  1.27M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.19M|    {
  282|  3.19M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.19M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.19M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.19M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.70M, False: 491k]
  |  |  ------------------
  ------------------
  289|  2.70M|            return true;
  290|  2.70M|        }
  291|       |
  292|   983k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 491k, False: 491k]
  ------------------
  293|   491k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 627, False: 491k]
  ------------------
  294|    627|                return false;
  295|    627|            }
  296|   491k|        }
  297|   491k|        return true;
  298|   491k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  4.43M|    {
   59|  4.43M|        return m_putback_buffer.size() + m_current_view.size();
   60|  4.43M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   688k|    {
  269|   688k|        return !x.is_at_end();
  270|   688k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.13M|    {
  217|  1.13M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.13M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.13M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.13M|        auto res = read_at_position();
  226|  1.13M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.13M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.13M|    {
   90|  1.13M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 740k, False: 393k]
  |  |  ------------------
  ------------------
   91|  1.13M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|   740k|            return m_putback_buffer[pos];
   93|   740k|        }
   94|   393k|        const auto start = pos - m_putback_buffer.size();
   95|   393k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.13M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   786k|    {
  203|   786k|        ++m_position;
  204|   786k|        std::ignore = read_at_position();
  205|   786k|        return *this;
  206|   786k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   642k|    {
  252|   642k|        return !(lhs == rhs);
  253|   642k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   740k|    {
  247|   740k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 740k, False: 0]
  |  Branch (247:46): [True: 294k, False: 445k]
  ------------------
  248|   740k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   249k|    {
  232|   249k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   249k|        return *this;
  235|   249k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|  98.3k|    {
   54|  98.3k|        sync(0);
   55|  98.3k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   323k|{
  322|   323k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 323k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   323k|    return ranges::subrange{forward_iterator{this, 0},
  327|   323k|                            ranges_std::default_sentinel};
  328|   323k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   323k|    {
  155|   323k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   323k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   323k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.26M|    {
  258|  2.26M|        return x.is_at_end();
  259|  2.26M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  5.21M|    {
  302|  5.21M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 5.21M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  5.21M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 5.21M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  5.21M|        return !read_at_position();
  309|  5.21M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  15.0M|    {
  282|  15.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  15.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  15.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 15.0M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  15.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  15.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 12.8M, False: 2.17M]
  |  |  ------------------
  ------------------
  289|  12.8M|            return true;
  290|  12.8M|        }
  291|       |
  292|  4.33M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 2.17M, False: 2.16M]
  ------------------
  293|  2.17M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 2.12k, False: 2.16M]
  ------------------
  294|  2.12k|                return false;
  295|  2.12k|            }
  296|  2.17M|        }
  297|  2.16M|        return true;
  298|  2.17M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  20.1M|    {
   59|  20.1M|        return m_putback_buffer.size() + m_current_view.size();
   60|  20.1M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  2.95M|    {
  269|  2.95M|        return !x.is_at_end();
  270|  2.95M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  4.99M|    {
  217|  4.99M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  4.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  4.99M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 4.99M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  4.99M|        auto res = read_at_position();
  226|  4.99M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  4.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  4.99M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  4.99M|    {
   90|  4.99M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  4.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.94M, False: 1.05M]
  |  |  ------------------
  ------------------
   91|  4.99M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  3.94M|            return m_putback_buffer[pos];
   93|  3.94M|        }
   94|  1.05M|        const auto start = pos - m_putback_buffer.size();
   95|  1.05M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  4.99M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  4.80M|    {
  203|  4.80M|        ++m_position;
  204|  4.80M|        std::ignore = read_at_position();
  205|  4.80M|        return *this;
  206|  4.80M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  3.55M|    {
  252|  3.55M|        return !(lhs == rhs);
  253|  3.55M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  4.20M|    {
  247|  4.20M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 4.20M, False: 0]
  |  Branch (247:46): [True: 1.69M, False: 2.50M]
  ------------------
  248|  4.20M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   659k|    {
  232|   659k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   659k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   659k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   659k|        return *this;
  235|   659k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   175k|    {
   54|   175k|        sync(0);
   55|   175k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  1.32M|{
   72|  1.32M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  1.32M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  1.32M|    }
   75|  1.32M|    else if constexpr (sizeof(U) == 2) {
   76|  1.32M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  1.32M|    }
   78|  1.32M|    else {
   79|       |        // utf-32
   80|  1.32M|        static_assert(sizeof(U) == 4);
   81|  1.32M|        SCN_UNUSED(ch);
   82|  1.32M|        return 1;
   83|  1.32M|    }
   84|  1.32M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  1.32M|{
   36|  1.32M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  1.32M|    SCN_GCC_COMPAT_PUSH
   39|  1.32M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  1.32M|    constexpr char lengths[] =
   41|  1.32M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  1.32M|        "\1\1\1\1\1\1\1\1"
   43|  1.32M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  1.32M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  1.32M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  1.32M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  1.32M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  1.32M|    SCN_GCC_COMPAT_POP
   50|  1.32M|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  67.2M|{
   72|  67.2M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  67.2M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  67.2M|    }
   75|  67.2M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  67.2M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  67.2M|    }
   78|  67.2M|    else {
   79|       |        // utf-32
   80|  67.2M|        static_assert(sizeof(U) == 4);
   81|  67.2M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  67.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  67.2M|        return 1;
   83|  67.2M|    }
   84|  67.2M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   717k|{
   36|   717k|#define SCN_VISIT(Type)                                         \
   37|   717k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   717k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   717k|    }                                                           \
   40|   717k|    else {                                                      \
   41|   717k|        return vis(monostate_val);                              \
   42|   717k|    }
   43|       |
   44|   717k|    monostate monostate_val{};
   45|       |
   46|   717k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 717k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 717k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 717k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 717k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 717k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 717k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 717k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 717k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 717k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 717k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 717k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 717k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 717k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 717k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 717k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   218k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 218k, False: 498k]
  ------------------
   78|   218k|            SCN_VISIT(float);
  ------------------
  |  |   37|   218k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   218k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   218k|    }                                                           \
  |  |   40|   218k|    else {                                                      \
  |  |   41|   218k|        return vis(monostate_val);                              \
  |  |   42|   218k|    }
  ------------------
   79|   246k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 246k, False: 470k]
  ------------------
   80|   246k|            SCN_VISIT(double);
  ------------------
  |  |   37|   246k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   246k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   246k|    }                                                           \
  |  |   40|   246k|    else {                                                      \
  |  |   41|   246k|        return vis(monostate_val);                              \
  |  |   42|   246k|    }
  ------------------
   81|   252k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 252k, False: 465k]
  ------------------
   82|   252k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   252k|    }                                                           \
  |  |   40|   252k|    else {                                                      \
  |  |   41|   252k|        return vis(monostate_val);                              \
  |  |   42|   252k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 717k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 717k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 717k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 717k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 717k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 717k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 717k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 717k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 717k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   717k|            SCN_CLANG_POP
  114|   717k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   717k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  22.6k|{
   36|  22.6k|#define SCN_VISIT(Type)                                         \
   37|  22.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  22.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  22.6k|    }                                                           \
   40|  22.6k|    else {                                                      \
   41|  22.6k|        return vis(monostate_val);                              \
   42|  22.6k|    }
   43|       |
   44|  22.6k|    monostate monostate_val{};
   45|       |
   46|  22.6k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 22.6k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 22.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 22.6k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 22.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 22.6k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 22.6k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 22.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 22.6k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 22.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 22.6k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 22.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 22.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 22.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 22.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 22.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  7.56k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 7.56k, False: 15.1k]
  ------------------
   78|  7.56k|            SCN_VISIT(float);
  ------------------
  |  |   37|  7.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.56k|    }                                                           \
  |  |   40|  7.56k|    else {                                                      \
  |  |   41|  7.56k|        return vis(monostate_val);                              \
  |  |   42|  7.56k|    }
  ------------------
   79|  7.56k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 7.56k, False: 15.1k]
  ------------------
   80|  7.56k|            SCN_VISIT(double);
  ------------------
  |  |   37|  7.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.56k|    }                                                           \
  |  |   40|  7.56k|    else {                                                      \
  |  |   41|  7.56k|        return vis(monostate_val);                              \
  |  |   42|  7.56k|    }
  ------------------
   81|  7.56k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 7.56k, False: 15.1k]
  ------------------
   82|  7.56k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  7.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.56k|    }                                                           \
  |  |   40|  7.56k|    else {                                                      \
  |  |   41|  7.56k|        return vis(monostate_val);                              \
  |  |   42|  7.56k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 22.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 22.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 22.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 22.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 22.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 22.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 22.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 22.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 22.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  22.6k|            SCN_CLANG_POP
  114|  22.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  22.6k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.67M|{
   36|  1.67M|#define SCN_VISIT(Type)                                         \
   37|  1.67M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.67M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.67M|    }                                                           \
   40|  1.67M|    else {                                                      \
   41|  1.67M|        return vis(monostate_val);                              \
   42|  1.67M|    }
   43|       |
   44|  1.67M|    monostate monostate_val{};
   45|       |
   46|  1.67M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.67M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.67M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.67M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.67M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.67M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.67M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.67M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.67M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.67M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.67M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.67M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.67M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.67M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.67M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.67M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   517k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 517k, False: 1.15M]
  ------------------
   78|   517k|            SCN_VISIT(float);
  ------------------
  |  |   37|   517k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   517k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   517k|    }                                                           \
  |  |   40|   517k|    else {                                                      \
  |  |   41|   517k|        return vis(monostate_val);                              \
  |  |   42|   517k|    }
  ------------------
   79|   575k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 575k, False: 1.09M]
  ------------------
   80|   575k|            SCN_VISIT(double);
  ------------------
  |  |   37|   575k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   575k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   575k|    }                                                           \
  |  |   40|   575k|    else {                                                      \
  |  |   41|   575k|        return vis(monostate_val);                              \
  |  |   42|   575k|    }
  ------------------
   81|   582k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 582k, False: 1.09M]
  ------------------
   82|   582k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   582k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   582k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   582k|    }                                                           \
  |  |   40|   582k|    else {                                                      \
  |  |   41|   582k|        return vis(monostate_val);                              \
  |  |   42|   582k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.67M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.67M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.67M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.67M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.67M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.67M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.67M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.67M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.67M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.67M|            SCN_CLANG_POP
  114|  1.67M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.67M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  75.6k|{
   36|  75.6k|#define SCN_VISIT(Type)                                         \
   37|  75.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  75.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  75.6k|    }                                                           \
   40|  75.6k|    else {                                                      \
   41|  75.6k|        return vis(monostate_val);                              \
   42|  75.6k|    }
   43|       |
   44|  75.6k|    monostate monostate_val{};
   45|       |
   46|  75.6k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 75.6k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 75.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 75.6k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 75.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 75.6k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 75.6k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 75.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 75.6k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 75.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 75.6k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 75.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 75.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 75.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 75.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 75.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  25.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 25.2k, False: 50.4k]
  ------------------
   78|  25.2k|            SCN_VISIT(float);
  ------------------
  |  |   37|  25.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  25.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  25.2k|    }                                                           \
  |  |   40|  25.2k|    else {                                                      \
  |  |   41|  25.2k|        return vis(monostate_val);                              \
  |  |   42|  25.2k|    }
  ------------------
   79|  25.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 25.2k, False: 50.4k]
  ------------------
   80|  25.2k|            SCN_VISIT(double);
  ------------------
  |  |   37|  25.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  25.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  25.2k|    }                                                           \
  |  |   40|  25.2k|    else {                                                      \
  |  |   41|  25.2k|        return vis(monostate_val);                              \
  |  |   42|  25.2k|    }
  ------------------
   81|  25.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 25.2k, False: 50.4k]
  ------------------
   82|  25.2k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  25.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  25.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  25.2k|    }                                                           \
  |  |   40|  25.2k|    else {                                                      \
  |  |   41|  25.2k|        return vis(monostate_val);                              \
  |  |   42|  25.2k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 75.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 75.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 75.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 75.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 75.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 75.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 75.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 75.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 75.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  75.6k|            SCN_CLANG_POP
  114|  75.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  75.6k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   592k|{
   36|   592k|#define SCN_VISIT(Type)                                         \
   37|   592k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   592k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   592k|    }                                                           \
   40|   592k|    else {                                                      \
   41|   592k|        return vis(monostate_val);                              \
   42|   592k|    }
   43|       |
   44|   592k|    monostate monostate_val{};
   45|       |
   46|   592k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 592k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 592k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 592k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 592k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 592k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 592k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 592k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 592k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 592k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 592k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 592k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 592k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 592k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 592k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 592k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   181k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 181k, False: 411k]
  ------------------
   78|   181k|            SCN_VISIT(float);
  ------------------
  |  |   37|   181k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   181k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   181k|    }                                                           \
  |  |   40|   181k|    else {                                                      \
  |  |   41|   181k|        return vis(monostate_val);                              \
  |  |   42|   181k|    }
  ------------------
   79|   203k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 203k, False: 388k]
  ------------------
   80|   203k|            SCN_VISIT(double);
  ------------------
  |  |   37|   203k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   203k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   203k|    }                                                           \
  |  |   40|   203k|    else {                                                      \
  |  |   41|   203k|        return vis(monostate_val);                              \
  |  |   42|   203k|    }
  ------------------
   81|   207k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 207k, False: 384k]
  ------------------
   82|   207k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   207k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   207k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   207k|    }                                                           \
  |  |   40|   207k|    else {                                                      \
  |  |   41|   207k|        return vis(monostate_val);                              \
  |  |   42|   207k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 592k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 592k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 592k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 592k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 592k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 592k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 592k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 592k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 592k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   592k|            SCN_CLANG_POP
  114|   592k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   592k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.42M|{
   36|  1.42M|#define SCN_VISIT(Type)                                         \
   37|  1.42M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.42M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.42M|    }                                                           \
   40|  1.42M|    else {                                                      \
   41|  1.42M|        return vis(monostate_val);                              \
   42|  1.42M|    }
   43|       |
   44|  1.42M|    monostate monostate_val{};
   45|       |
   46|  1.42M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.42M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.42M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.42M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.42M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.42M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.42M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.42M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.42M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.42M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.42M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.42M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.42M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.42M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.42M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.42M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   442k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 442k, False: 980k]
  ------------------
   78|   442k|            SCN_VISIT(float);
  ------------------
  |  |   37|   442k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   442k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   442k|    }                                                           \
  |  |   40|   442k|    else {                                                      \
  |  |   41|   442k|        return vis(monostate_val);                              \
  |  |   42|   442k|    }
  ------------------
   79|   487k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 487k, False: 935k]
  ------------------
   80|   487k|            SCN_VISIT(double);
  ------------------
  |  |   37|   487k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   487k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   487k|    }                                                           \
  |  |   40|   487k|    else {                                                      \
  |  |   41|   487k|        return vis(monostate_val);                              \
  |  |   42|   487k|    }
  ------------------
   81|   493k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 493k, False: 929k]
  ------------------
   82|   493k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   493k|    }                                                           \
  |  |   40|   493k|    else {                                                      \
  |  |   41|   493k|        return vis(monostate_val);                              \
  |  |   42|   493k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.42M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.42M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.42M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.42M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.42M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.42M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.42M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.42M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.42M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.42M|            SCN_CLANG_POP
  114|  1.42M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.42M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  80.8k|{
   36|  80.8k|#define SCN_VISIT(Type)                                         \
   37|  80.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  80.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  80.8k|    }                                                           \
   40|  80.8k|    else {                                                      \
   41|  80.8k|        return vis(monostate_val);                              \
   42|  80.8k|    }
   43|       |
   44|  80.8k|    monostate monostate_val{};
   45|       |
   46|  80.8k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 80.8k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 80.8k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 80.8k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 80.8k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 80.8k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 80.8k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 80.8k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 80.8k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 80.8k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 80.8k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 80.8k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 80.8k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 80.8k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 80.8k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 80.8k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  26.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 26.9k, False: 53.8k]
  ------------------
   78|  26.9k|            SCN_VISIT(float);
  ------------------
  |  |   37|  26.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.9k|    }                                                           \
  |  |   40|  26.9k|    else {                                                      \
  |  |   41|  26.9k|        return vis(monostate_val);                              \
  |  |   42|  26.9k|    }
  ------------------
   79|  26.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 26.9k, False: 53.8k]
  ------------------
   80|  26.9k|            SCN_VISIT(double);
  ------------------
  |  |   37|  26.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.9k|    }                                                           \
  |  |   40|  26.9k|    else {                                                      \
  |  |   41|  26.9k|        return vis(monostate_val);                              \
  |  |   42|  26.9k|    }
  ------------------
   81|  26.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 26.9k, False: 53.8k]
  ------------------
   82|  26.9k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  26.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.9k|    }                                                           \
  |  |   40|  26.9k|    else {                                                      \
  |  |   41|  26.9k|        return vis(monostate_val);                              \
  |  |   42|  26.9k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 80.8k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 80.8k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 80.8k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 80.8k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 80.8k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 80.8k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 80.8k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 80.8k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 80.8k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  80.8k|            SCN_CLANG_POP
  114|  80.8k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  80.8k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   242k|{
   36|   242k|#define SCN_VISIT(Type)                                         \
   37|   242k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   242k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   242k|    }                                                           \
   40|   242k|    else {                                                      \
   41|   242k|        return vis(monostate_val);                              \
   42|   242k|    }
   43|       |
   44|   242k|    monostate monostate_val{};
   45|       |
   46|   242k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 242k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 242k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 242k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 242k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 242k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 242k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 242k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 242k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 242k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 242k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 242k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 242k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 242k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 242k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 242k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  80.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 80.8k, False: 161k]
  ------------------
   78|  80.8k|            SCN_VISIT(float);
  ------------------
  |  |   37|  80.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.8k|    }                                                           \
  |  |   40|  80.8k|    else {                                                      \
  |  |   41|  80.8k|        return vis(monostate_val);                              \
  |  |   42|  80.8k|    }
  ------------------
   79|  80.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 80.8k, False: 161k]
  ------------------
   80|  80.8k|            SCN_VISIT(double);
  ------------------
  |  |   37|  80.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.8k|    }                                                           \
  |  |   40|  80.8k|    else {                                                      \
  |  |   41|  80.8k|        return vis(monostate_val);                              \
  |  |   42|  80.8k|    }
  ------------------
   81|  80.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 80.8k, False: 161k]
  ------------------
   82|  80.8k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  80.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  80.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  80.8k|    }                                                           \
  |  |   40|  80.8k|    else {                                                      \
  |  |   41|  80.8k|        return vis(monostate_val);                              \
  |  |   42|  80.8k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 242k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 242k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 242k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 242k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 242k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 242k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 242k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 242k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 242k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   242k|            SCN_CLANG_POP
  114|   242k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   242k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  1.07M|{
  174|  1.07M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  1.07M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.07M|{
  111|  1.07M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.07M|    auto result = vscan_impl(buffer, format, args);
  114|  1.07M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.3k, False: 1.03M]
  |  |  ------------------
  ------------------
  115|  45.3k|        return unexpected(result.error());
  116|  45.3k|    }
  117|  1.03M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.07M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  1.07M|{
  192|  1.07M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  1.07M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.07M|{
  127|  1.07M|#if !SCN_DISABLE_LOCALE
  128|  1.07M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.07M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.07M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.07M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.07M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.3k, False: 1.03M]
  |  |  ------------------
  ------------------
  135|  45.3k|        return unexpected(result.error());
  136|  45.3k|    }
  137|  1.03M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.07M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   239k|{
  205|   239k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   239k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   239k|{
  151|   239k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   239k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   239k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.56k, False: 231k]
  |  |  ------------------
  ------------------
  155|  7.56k|        return unexpected(result.error());
  156|  7.56k|    }
  157|   231k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   239k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  45.3k|{
  174|  45.3k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  45.3k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|  45.3k|{
  111|  45.3k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  45.3k|    auto result = vscan_impl(buffer, format, args);
  114|  45.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.3k, False: 0]
  |  |  ------------------
  ------------------
  115|  45.3k|        return unexpected(result.error());
  116|  45.3k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  45.3k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  45.3k|{
  192|  45.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  45.3k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|  45.3k|{
  127|  45.3k|#if !SCN_DISABLE_LOCALE
  128|  45.3k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  45.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  45.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  45.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  45.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 45.3k, False: 0]
  |  |  ------------------
  ------------------
  135|  45.3k|        return unexpected(result.error());
  136|  45.3k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  45.3k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  7.56k|{
  205|  7.56k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  7.56k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  7.56k|{
  151|  7.56k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  7.56k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  7.56k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  7.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.56k, False: 0]
  |  |  ------------------
  ------------------
  155|  7.56k|        return unexpected(result.error());
  156|  7.56k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  7.56k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|   908k|{
  111|   908k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   908k|    auto result = vscan_impl(buffer, format, args);
  114|   908k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   908k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.8k, False: 828k]
  |  |  ------------------
  ------------------
  115|  80.8k|        return unexpected(result.error());
  116|  80.8k|    }
  117|   828k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   908k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|   908k|{
  127|   908k|#if !SCN_DISABLE_LOCALE
  128|   908k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   908k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   908k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   908k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   908k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   908k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.8k, False: 828k]
  |  |  ------------------
  ------------------
  135|  80.8k|        return unexpected(result.error());
  136|  80.8k|    }
  137|   828k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   908k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   197k|{
  151|   197k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   197k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   197k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.4k, False: 184k]
  |  |  ------------------
  ------------------
  155|  13.4k|        return unexpected(result.error());
  156|  13.4k|    }
  157|   184k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   197k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   148k|{
  111|   148k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   148k|    auto result = vscan_impl(buffer, format, args);
  114|   148k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.8k, False: 67.3k]
  |  |  ------------------
  ------------------
  115|  80.8k|        return unexpected(result.error());
  116|  80.8k|    }
  117|  67.3k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   148k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   148k|{
  127|   148k|#if !SCN_DISABLE_LOCALE
  128|   148k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   148k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   148k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   148k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   148k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.8k, False: 67.3k]
  |  |  ------------------
  ------------------
  135|  80.8k|        return unexpected(result.error());
  136|  80.8k|    }
  137|  67.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   148k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  26.9k|{
  151|  26.9k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  26.9k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  26.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.4k, False: 13.4k]
  |  |  ------------------
  ------------------
  155|  13.4k|        return unexpected(result.error());
  156|  13.4k|    }
  157|  13.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  26.9k|}

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   281k|{
   90|   281k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   281k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   908k|{
   45|   908k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   908k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   281k|{
  125|   281k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   281k|                                                         format, {});
  127|   281k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   908k|{
   61|   908k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   908k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  60.3k|{
  159|  60.3k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  60.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  60.3k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   197k|{
   73|   197k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   197k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   311k|{
   90|   311k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   311k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   311k|{
  125|   311k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   311k|                                                         format, {});
  127|   311k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  67.9k|{
  159|  67.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  67.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  67.9k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   315k|{
   90|   315k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   315k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   315k|{
  125|   315k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   315k|                                                         format, {});
  127|   315k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  69.2k|{
  159|  69.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  69.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  69.2k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  49.4k|{
   90|  49.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  49.4k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   148k|{
   45|   148k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   148k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  49.4k|{
  125|  49.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  49.4k|                                                         format, {});
  127|  49.4k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   148k|{
   61|   148k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   148k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.98k|{
  159|  8.98k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.98k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  26.9k|{
   73|  26.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  26.9k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  49.4k|{
   90|  49.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  49.4k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  49.4k|{
  125|  49.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  49.4k|                                                         format, {});
  127|  49.4k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.98k|{
  159|  8.98k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.98k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  49.4k|{
   90|  49.4k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  49.4k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  49.4k|{
  125|  49.4k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  49.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  49.4k|                                                         format, {});
  127|  49.4k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.98k|{
  159|  8.98k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.98k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  8.91M|            {
 2693|  8.91M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.91M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  8.91M|            {
 2672|  8.91M|                return decay_copy(t.begin());
 2673|  8.91M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|  97.8M|    {
 2606|  97.8M|        return std::forward<T>(t);
 2607|  97.8M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.76M|            {
 3178|  4.76M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.76M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.76M|            {
 3158|  4.76M|                return t.data();
 3159|  4.76M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  4.76M|    {
 6095|  4.76M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 18.9k, False: 4.74M]
  ------------------
 6096|  4.76M|                   ? nullptr
 6097|  4.76M|                   : std::addressof(*ranges::begin(derived()));
 6098|  4.76M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  4.76M|            {
 3127|  4.76M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.76M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  4.76M|            {
 3098|  4.76M|                return bool((std::forward<T>(t).empty()));
 3099|  4.76M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  13.2M|        {
 6454|  13.2M|            return data_.begin_ == data_.end_;
 6455|  13.2M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  9.51M|    {
 6049|  9.51M|        return static_cast<const D&>(*this);
 6050|  9.51M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  17.7M|            {
 2693|  17.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  17.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  17.7M|            {
 2672|  17.7M|                return decay_copy(t.begin());
 2673|  17.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  56.5M|        {
 6444|  56.5M|            return data_.begin_;
 6445|  56.5M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.76M|            {
 3038|  4.76M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.76M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  4.76M|            {
 3000|  4.76M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.76M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  22.4M|    {
 2606|  22.4M|        return std::forward<T>(t);
 2607|  22.4M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  13.3M|        {
 6462|  13.3M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  13.3M|                return data_.size_;
 6464|  13.3M|            }
 6465|  13.3M|            else {
 6466|  13.3M|                return data_.end_ - data_.begin_;
 6467|  13.3M|            }
 6468|  13.3M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  8.28M|            {
 3788|  8.28M|                ranges::advance(x, n);
 3789|  8.28M|                return x;
 3790|  8.28M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  8.28M|            {
 3678|  8.28M|                fn::impl(i, n);
 3679|  8.28M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  8.28M|            {
 3562|  8.28M|                r += n;
 3563|  8.28M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  37.1M|            {
 2693|  37.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  37.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  37.1M|            {
 2672|  37.1M|                return decay_copy(t.begin());
 2673|  37.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  10.5M|            {
 2759|  10.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.5M|            {
 2739|  10.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  26.9M|        {
 6449|  26.9M|            return data_.end_;
 6450|  26.9M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  10.4M|            {
 2759|  10.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  10.4M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  10.4M|            {
 2739|  10.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  10.4M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  21.0M|        {
 6375|  21.0M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  21.0M|        {
 6294|  21.0M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  98.3k|            {
 2693|  98.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  98.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|  98.3k|            {
 2672|  98.3k|                return decay_copy(t.begin());
 2673|  98.3k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|   786k|    {
 2606|   786k|        return std::forward<T>(t);
 2607|   786k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  98.3k|            {
 2693|  98.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  98.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  98.3k|            {
 2672|  98.3k|                return decay_copy(t.begin());
 2673|  98.3k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  98.3k|        {
 6444|  98.3k|            return data_.begin_;
 6445|  98.3k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   491k|            {
 2759|   491k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   491k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   491k|            {
 2739|   491k|                return decay_copy(std::forward<T>(t).end());
 2740|   491k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   491k|        {
 6449|   491k|            return data_.end_;
 6450|   491k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  98.3k|            {
 2759|  98.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  98.3k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  98.3k|            {
 2739|  98.3k|                return decay_copy(std::forward<T>(t).end());
 2740|  98.3k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  98.3k|        {
 6375|  98.3k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|  98.3k|        {
 6294|  98.3k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.44M|            {
 2693|  1.44M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.44M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.44M|            {
 2672|  1.44M|                return decay_copy(t.begin());
 2673|  1.44M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   146M|    {
 2606|   146M|        return std::forward<T>(t);
 2607|   146M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  2.01M|            {
 3178|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.01M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.01M|            {
 3158|  2.01M|                return t.data();
 3159|  2.01M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  2.01M|    {
 6095|  2.01M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 19.2k, False: 1.99M]
  ------------------
 6096|  2.01M|                   ? nullptr
 6097|  2.01M|                   : std::addressof(*ranges::begin(derived()));
 6098|  2.01M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  2.01M|            {
 3127|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.01M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  2.01M|            {
 3098|  2.01M|                return bool((std::forward<T>(t).empty()));
 3099|  2.01M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  3.81M|        {
 6454|  3.81M|            return data_.begin_ == data_.end_;
 6455|  3.81M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  4.01M|    {
 6049|  4.01M|        return static_cast<const D&>(*this);
 6050|  4.01M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  14.7M|            {
 2693|  14.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  14.7M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  14.7M|            {
 2672|  14.7M|                return decay_copy(t.begin());
 2673|  14.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  53.0M|        {
 6444|  53.0M|            return data_.begin_;
 6445|  53.0M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.01M|            {
 3038|  2.01M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.01M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  2.01M|            {
 3000|  2.01M|                return decay_copy(std::forward<T>(t).size());
 3001|  2.01M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  9.11M|        {
 6462|  9.11M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  9.11M|                return data_.size_;
 6464|  9.11M|            }
 6465|  9.11M|            else {
 6466|  9.11M|                return data_.end_ - data_.begin_;
 6467|  9.11M|            }
 6468|  9.11M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  8.89M|            {
 3788|  8.89M|                ranges::advance(x, n);
 3789|  8.89M|                return x;
 3790|  8.89M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  8.89M|            {
 3678|  8.89M|                fn::impl(i, n);
 3679|  8.89M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  8.89M|            {
 3562|  8.89M|                r += n;
 3563|  8.89M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  36.8M|            {
 2693|  36.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.8M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  36.8M|            {
 2672|  36.8M|                return decay_copy(t.begin());
 2673|  36.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  46.0M|            {
 2759|  46.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  46.0M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  46.0M|            {
 2739|  46.0M|                return decay_copy(std::forward<T>(t).end());
 2740|  46.0M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  92.4M|        {
 6449|  92.4M|            return data_.end_;
 6450|  92.4M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  4.11M|            {
 2759|  4.11M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.11M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  4.11M|            {
 2739|  4.11M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.11M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  18.5M|        {
 6375|  18.5M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  18.5M|        {
 6294|  18.5M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   175k|            {
 2693|   175k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   175k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   175k|            {
 2672|   175k|                return decay_copy(t.begin());
 2673|   175k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  3.43M|    {
 2606|  3.43M|        return std::forward<T>(t);
 2607|  3.43M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   471k|            {
 2693|   471k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   471k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   471k|            {
 2672|   471k|                return decay_copy(t.begin());
 2673|   471k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   619k|        {
 6444|   619k|            return data_.begin_;
 6445|   619k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.31M|            {
 2759|  2.31M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.31M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.31M|            {
 2739|  2.31M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.31M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  2.31M|        {
 6449|  2.31M|            return data_.end_;
 6450|  2.31M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   148k|            {
 3788|   148k|                ranges::advance(x, n);
 3789|   148k|                return x;
 3790|   148k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   148k|            {
 3678|   148k|                fn::impl(i, n);
 3679|   148k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   148k|            {
 3562|   148k|                r += n;
 3563|   148k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   323k|            {
 2759|   323k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   323k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   323k|            {
 2739|   323k|                return decay_copy(std::forward<T>(t).end());
 2740|   323k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   471k|        {
 6375|   471k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   471k|        {
 6294|   471k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   148k|            {
 2693|   148k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   148k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   148k|            {
 2672|   148k|                return decay_copy(t.begin());
 2673|   148k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  3.59M|        {
 6444|  3.59M|            return data_.begin_;
 6445|  3.59M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  14.5M|        {
 6444|  14.5M|            return data_.begin_;
 6445|  14.5M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  16.9M|    {
 6044|  16.9M|        return static_cast<D&>(*this);
 6045|  16.9M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  8.48M|            {
 3098|  8.48M|                return bool((std::forward<T>(t).empty()));
 3099|  8.48M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  8.48M|            {
 3127|  8.48M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  8.48M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  8.48M|    {
 6085|  8.48M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 4.79k, False: 8.48M]
  ------------------
 6086|  8.48M|                   ? nullptr
 6087|  8.48M|                   : std::addressof(*ranges::begin(derived()));
 6088|  8.48M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  13.0M|            {
 2739|  13.0M|                return decay_copy(std::forward<T>(t).end());
 2740|  13.0M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  13.0M|            {
 2759|  13.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  13.0M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  3.60M|    {
 6044|  3.60M|        return static_cast<D&>(*this);
 6045|  3.60M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  1.80M|            {
 3098|  1.80M|                return bool((std::forward<T>(t).empty()));
 3099|  1.80M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  1.80M|            {
 3127|  1.80M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.80M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  1.80M|    {
 6085|  1.80M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 4.43k, False: 1.79M]
  ------------------
 6086|  1.80M|                   ? nullptr
 6087|  1.80M|                   : std::addressof(*ranges::begin(derived()));
 6088|  1.80M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  43.6M|            {
 2739|  43.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  43.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  43.6M|            {
 2759|  43.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  43.6M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  3.52M|            {
 3780|  3.52M|                ++x;
 3781|  3.52M|                return x;
 3782|  3.52M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  8.53M|            {
 3038|  8.53M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.53M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  8.53M|            {
 3000|  8.53M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.53M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  8.48M|            {
 3178|  8.48M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  8.48M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  8.48M|            {
 3158|  8.48M|                return t.data();
 3159|  8.48M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  11.7M|    {
 2606|  11.7M|        return std::forward<T>(t);
 2607|  11.7M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  6.38M|            {
 3077|  6.38M|                return fn::impl(std::forward<T>(t));
 3078|  6.38M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  6.38M|            {
 3067|  6.38M|                return static_cast<ssize_return_t<T>>(
 3068|  6.38M|                    ranges::size(std::forward<T>(t)));
 3069|  6.38M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  7.48M|            {
 3038|  7.48M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.48M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  7.48M|            {
 3000|  7.48M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.48M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.59M|            {
 3597|  1.59M|                i = std::move(bound);
 3598|  1.59M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3076|  4.28M|            {
 3077|  4.28M|                return fn::impl(std::forward<T>(t));
 3078|  4.28M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISE_EENS0_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3066|  4.28M|            {
 3067|  4.28M|                return static_cast<ssize_return_t<T>>(
 3068|  4.28M|                    ranges::size(std::forward<T>(t)));
 3069|  4.28M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.28M|            {
 3038|  4.28M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.28M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  4.28M|            {
 3000|  4.28M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.28M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.29M|        {
 6793|  1.29M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.29M|                                    proj);
 6795|  1.29M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.29M|        {
 6761|  7.59M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.58M, False: 9.54k]
  ------------------
 6762|  7.58M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.29M, False: 6.29M]
  ------------------
 6763|  1.29M|                    return first;
 6764|  1.29M|                }
 6765|  6.29M|                ++first;
 6766|  6.29M|            }
 6767|  9.54k|            return first;
 6768|  1.29M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  7.58M|            {
 1300|  7.58M|                return fn::impl(std::forward<F>(f),
 1301|  7.58M|                                std::forward<Args>(args)...);
 1302|  7.58M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  7.58M|            {
 1289|  7.58M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.58M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  48.7M|            {
 1300|  48.7M|                return fn::impl(std::forward<F>(f),
 1301|  48.7M|                                std::forward<Args>(args)...);
 1302|  48.7M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  48.7M|            {
 1289|  48.7M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  48.7M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  48.7M|    {
 1142|  48.7M|        return std::forward<T>(t);
 1143|  48.7M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.59M|            {
 3798|  1.59M|                ranges::advance(x, bound);
 3799|  1.59M|                return x;
 3800|  1.59M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.59M|            {
 3686|  1.59M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.59M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  6.84M|            {
 3756|  6.84M|                return fn::impl(std::move(first), std::move(last));
 3757|  6.84M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  6.84M|            {
 3716|  6.84M|                return s - i;
 3717|  6.84M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|   778k|        {
 6375|   778k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|   778k|        {
 6294|   778k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.53M|            {
 2693|  1.53M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.53M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  1.53M|            {
 2672|  1.53M|                return decay_copy(t.begin());
 2673|  1.53M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  3.52M|    {
 2606|  3.52M|        return std::forward<T>(t);
 2607|  3.52M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   998k|            {
 2759|   998k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   998k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   998k|            {
 2739|   998k|                return decay_copy(std::forward<T>(t).end());
 2740|   998k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  9.64M|    {
 2606|  9.64M|        return std::forward<T>(t);
 2607|  9.64M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  1.88M|        {
 6449|  1.88M|            return data_.end_;
 6450|  1.88M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   589k|        {
 6444|   589k|            return data_.begin_;
 6445|   589k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   589k|        {
 6449|   589k|            return data_.end_;
 6450|   589k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   196k|        {
 6375|   196k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   196k|        {
 6294|   196k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  98.2k|            {
 3780|  98.2k|                ++x;
 3781|  98.2k|                return x;
 3782|  98.2k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|  98.2k|        {
 6793|  98.2k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  98.2k|                                    proj);
 6795|  98.2k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  98.2k|        {
 6761|  98.2k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 98.2k, False: 0]
  ------------------
 6762|  98.2k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 98.2k, False: 0]
  ------------------
 6763|  98.2k|                    return first;
 6764|  98.2k|                }
 6765|      0|                ++first;
 6766|      0|            }
 6767|      0|            return first;
 6768|  98.2k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  98.2k|            {
 1300|  98.2k|                return fn::impl(std::forward<F>(f),
 1301|  98.2k|                                std::forward<Args>(args)...);
 1302|  98.2k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  98.2k|            {
 1289|  98.2k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  98.2k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  98.2k|            {
 1300|  98.2k|                return fn::impl(std::forward<F>(f),
 1301|  98.2k|                                std::forward<Args>(args)...);
 1302|  98.2k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  98.2k|            {
 1289|  98.2k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  98.2k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|  98.2k|    {
 1142|  98.2k|        return std::forward<T>(t);
 1143|  98.2k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   884k|            {
 2759|   884k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   884k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   884k|            {
 2739|   884k|                return decay_copy(std::forward<T>(t).end());
 2740|   884k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  1.98M|            {
 2693|  1.98M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.98M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  1.98M|            {
 2672|  1.98M|                return decay_copy(t.begin());
 2673|  1.98M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  1.80M|            {
 3178|  1.80M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.80M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.80M|            {
 3158|  1.80M|                return t.data();
 3159|  1.80M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  7.10M|            {
 3038|  7.10M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  7.10M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  7.10M|            {
 3000|  7.10M|                return decay_copy(std::forward<T>(t).size());
 3001|  7.10M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.31M|            {
 3597|  1.31M|                i = std::move(bound);
 3598|  1.31M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  2.93M|            {
 3780|  2.93M|                ++x;
 3781|  2.93M|                return x;
 3782|  2.93M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  5.29M|            {
 3077|  5.29M|                return fn::impl(std::forward<T>(t));
 3078|  5.29M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  5.29M|            {
 3067|  5.29M|                return static_cast<ssize_return_t<T>>(
 3068|  5.29M|                    ranges::size(std::forward<T>(t)));
 3069|  5.29M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  1.09M|        {
 6793|  1.09M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.09M|                                    proj);
 6795|  1.09M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  1.09M|        {
 6761|  5.48M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 5.47M, False: 9.90k]
  ------------------
 6762|  5.47M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.08M, False: 4.38M]
  ------------------
 6763|  1.08M|                    return first;
 6764|  1.08M|                }
 6765|  4.38M|                ++first;
 6766|  4.38M|            }
 6767|  9.90k|            return first;
 6768|  1.09M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  5.47M|            {
 1300|  5.47M|                return fn::impl(std::forward<F>(f),
 1301|  5.47M|                                std::forward<Args>(args)...);
 1302|  5.47M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  5.47M|            {
 1289|  5.47M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.47M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  5.47M|            {
 1300|  5.47M|                return fn::impl(std::forward<F>(f),
 1301|  5.47M|                                std::forward<Args>(args)...);
 1302|  5.47M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  5.47M|            {
 1289|  5.47M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.47M|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  5.47M|    {
 1142|  5.47M|        return std::forward<T>(t);
 1143|  5.47M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.31M|            {
 3798|  1.31M|                ranges::advance(x, bound);
 3799|  1.31M|                return x;
 3800|  1.31M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.31M|            {
 3686|  1.31M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.31M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  2.53M|            {
 3756|  2.53M|                return fn::impl(std::move(first), std::move(last));
 3757|  2.53M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  2.53M|            {
 3716|  2.53M|                return s - i;
 3717|  2.53M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.46M|        {
 6375|  3.46M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.46M|        {
 6294|  3.46M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  5.09M|            {
 2693|  5.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  5.09M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  5.09M|            {
 2672|  5.09M|                return decay_copy(t.begin());
 2673|  5.09M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  14.3M|    {
 2606|  14.3M|        return std::forward<T>(t);
 2607|  14.3M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  3.71M|            {
 2759|  3.71M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.71M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  3.71M|            {
 2739|  3.71M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.71M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  7.75M|        {
 6449|  7.75M|            return data_.end_;
 6450|  7.75M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  3.30M|        {
 6444|  3.30M|            return data_.begin_;
 6445|  3.30M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  3.30M|        {
 6449|  3.30M|            return data_.end_;
 6450|  3.30M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  1.19M|        {
 6375|  1.19M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  1.19M|        {
 6294|  1.19M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   646k|            {
 3780|   646k|                ++x;
 3781|   646k|                return x;
 3782|   646k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   498k|        {
 6793|   498k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   498k|                                    proj);
 6795|   498k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   498k|        {
 6761|   848k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 848k, False: 156]
  ------------------
 6762|   848k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 498k, False: 350k]
  ------------------
 6763|   498k|                    return first;
 6764|   498k|                }
 6765|   350k|                ++first;
 6766|   350k|            }
 6767|    156|            return first;
 6768|   498k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   848k|            {
 1300|   848k|                return fn::impl(std::forward<F>(f),
 1301|   848k|                                std::forward<Args>(args)...);
 1302|   848k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   848k|            {
 1289|   848k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   848k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   848k|            {
 1300|   848k|                return fn::impl(std::forward<F>(f),
 1301|   848k|                                std::forward<Args>(args)...);
 1302|   848k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   848k|            {
 1289|   848k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   848k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   848k|    {
 1142|   848k|        return std::forward<T>(t);
 1143|   848k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  4.04M|            {
 2759|  4.04M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.04M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  4.04M|            {
 2739|  4.04M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.04M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  9.22M|            {
 2693|  9.22M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.22M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  9.22M|            {
 2672|  9.22M|                return decay_copy(t.begin());
 2673|  9.22M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|   175k|            {
 3756|   175k|                return fn::impl(std::move(first), std::move(last));
 3757|   175k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|   175k|            {
 3724|   175k|                iter_difference_t<I> counter{0};
 3725|   525k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 350k, False: 175k]
  ------------------
 3726|   350k|                    ++i;
 3727|   350k|                    ++counter;
 3728|   350k|                }
 3729|   175k|                return counter;
 3730|   175k|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3787|   148k|            {
 3788|   148k|                ranges::advance(x, n);
 3789|   148k|                return x;
 3790|   148k|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3677|   148k|            {
 3678|   148k|                fn::impl(i, n);
 3679|   148k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSD_NS0_20incrementable_traitsISD_E15difference_typeE:
 3587|   148k|            {
 3588|   444k|                while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (3588:24): [True: 296k, False: 148k]
  ------------------
 3589|   296k|                    ++i;
 3590|   296k|                }
 3591|   148k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSB_:
 3177|  1.10M|            {
 3178|  1.10M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.10M|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.10M|            {
 3158|  1.10M|                return t.data();
 3159|  1.10M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.20M|        {
 6793|  5.20M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.20M|                                    proj);
 6795|  5.20M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.20M|        {
 6761|  41.1M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 36.7M, False: 4.41M]
  ------------------
 6762|  36.7M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 791k, False: 35.9M]
  ------------------
 6763|   791k|                    return first;
 6764|   791k|                }
 6765|  35.9M|                ++first;
 6766|  35.9M|            }
 6767|  4.41M|            return first;
 6768|  5.20M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  36.7M|            {
 1300|  36.7M|                return fn::impl(std::forward<F>(f),
 1301|  36.7M|                                std::forward<Args>(args)...);
 1302|  36.7M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  36.7M|            {
 1289|  36.7M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  36.7M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  2.41M|        {
 6793|  2.41M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.41M|                                    proj);
 6795|  2.41M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  2.41M|        {
 6761|  4.51M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.39M, False: 120k]
  ------------------
 6762|  4.39M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.29M, False: 2.10M]
  ------------------
 6763|  2.29M|                    return first;
 6764|  2.29M|                }
 6765|  2.10M|                ++first;
 6766|  2.10M|            }
 6767|   120k|            return first;
 6768|  2.41M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  4.39M|            {
 1300|  4.39M|                return fn::impl(std::forward<F>(f),
 1301|  4.39M|                                std::forward<Args>(args)...);
 1302|  4.39M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  4.39M|            {
 1289|  4.39M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  4.39M|            }

_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  2.25M|    {
   44|  2.25M|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  3.00k|{
   50|  3.00k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  3.00k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
   49|  50.3k|{
   50|  50.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  50.3k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
   49|  2.08k|{
   50|  2.08k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  2.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.08k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   196k|    {
   44|   196k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  15.1k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  1.93M|    {
   44|  1.93M|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   471k|    {
   44|   471k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  53.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|  98.8k|{
   50|  98.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  98.8k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  14.0M|    {
 1191|  14.0M|        return has_value();
 1192|  14.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  27.8M|    {
  189|  27.8M|        return m_has_value;
  190|  27.8M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|   772k|    {
 1197|   772k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   772k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   772k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   772k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   772k|    {
  172|   772k|        return m_unexpected;
  173|   772k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  5.54M|    {
   72|  5.54M|        return m_unexpected;
   73|  5.54M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  2.70M|    {
   58|  2.70M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  2.70M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  2.70M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  98.3k|    {
 1078|  98.3k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  98.3k|    {
  151|  98.3k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  7.75M|    {
   67|  7.75M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  7.75M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  7.75M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.39M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  4.43M|    {
 1251|  4.43M|        return value();
 1252|  4.43M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  12.9M|    {
 1221|  12.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  12.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  12.9M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  12.9M|    {
  155|  12.9M|        return m_value;
  156|  12.9M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  2.29M|    {
 1034|  2.29M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  2.29M|    {
  142|  2.29M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.39M|    {
 1191|  2.39M|        return has_value();
 1192|  2.39M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.78M|    {
  189|  4.78M|        return m_has_value;
  190|  4.78M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  98.3k|    {
 1197|  98.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  98.3k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  98.3k|    {
  172|  98.3k|        return m_unexpected;
  173|  98.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  32.7k|    {
 1078|  32.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  32.7k|    {
  151|  32.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   735k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  2.06M|    {
 1251|  2.06M|        return value();
 1252|  2.06M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  2.29M|    {
 1221|  2.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.29M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.29M|    {
  155|  2.29M|        return m_value;
  156|  2.29M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   703k|    {
 1034|   703k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   703k|    {
  142|   703k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   735k|    {
 1191|   735k|        return has_value();
 1192|   735k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.43M|    {
  189|  1.43M|        return m_has_value;
  190|  1.43M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   703k|    {
 1274|   703k|        return std::addressof(value());
 1275|   703k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   703k|    {
 1221|   703k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   703k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   703k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   703k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   703k|    {
  155|   703k|        return m_value;
  156|   703k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   231k|    {
 1263|   231k|        return std::move(value());
 1264|   231k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  32.7k|    {
 1078|  32.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  32.7k|    {
  151|  32.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   821k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   789k|    {
 1034|   789k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   789k|    {
  142|   789k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   821k|    {
 1191|   821k|        return has_value();
 1192|   821k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.61M|    {
  189|  1.61M|        return m_has_value;
  190|  1.61M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   789k|    {
 1274|   789k|        return std::addressof(value());
 1275|   789k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   789k|    {
 1221|   789k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   789k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   789k|    {
  155|   789k|        return m_value;
  156|   789k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  32.7k|    {
 1078|  32.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  32.7k|    {
  151|  32.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   834k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   801k|    {
 1034|   801k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   801k|    {
  142|   801k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   834k|    {
 1191|   834k|        return has_value();
 1192|   834k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.63M|    {
  189|  1.63M|        return m_has_value;
  190|  1.63M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   801k|    {
 1274|   801k|        return std::addressof(value());
 1275|   801k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   801k|    {
 1221|   801k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   801k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   801k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   801k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   801k|    {
  155|   801k|        return m_value;
  156|   801k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  98.3k|    {
 1078|  98.3k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|  98.3k|    {
  151|  98.3k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  98.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  98.3k|    {
 1191|  98.3k|        return has_value();
 1192|  98.3k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   196k|    {
  189|   196k|        return m_has_value;
  190|   196k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  98.3k|    {
 1197|  98.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  98.3k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  98.3k|    {
  172|  98.3k|        return m_unexpected;
  173|  98.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  32.7k|    {
 1078|  32.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  32.7k|    {
  151|  32.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  32.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  32.7k|    {
 1191|  32.7k|        return has_value();
 1192|  32.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  32.7k|    {
  189|  32.7k|        return m_has_value;
  190|  32.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  32.7k|    {
 1078|  32.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  32.7k|    {
  151|  32.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  32.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  32.7k|    {
 1191|  32.7k|        return has_value();
 1192|  32.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  32.7k|    {
  189|  32.7k|        return m_has_value;
  190|  32.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  32.7k|    {
 1078|  32.7k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  32.7k|    {
  151|  32.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  32.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  32.7k|    {
 1191|  32.7k|        return has_value();
 1192|  32.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  32.7k|    {
  189|  32.7k|        return m_has_value;
  190|  32.7k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   175k|    {
 1078|   175k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   175k|    {
  151|   175k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.01M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  1.84M|    {
 1034|  1.84M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  1.84M|    {
  142|  1.84M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  2.01M|    {
 1191|  2.01M|        return has_value();
 1192|  2.01M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.03M|    {
  189|  4.03M|        return m_has_value;
  190|  4.03M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   175k|    {
 1197|   175k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   175k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   175k|    {
  172|   175k|        return m_unexpected;
  173|   175k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  58.4k|    {
 1078|  58.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  58.4k|    {
  151|  58.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   623k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.65M|    {
 1251|  1.65M|        return value();
 1252|  1.65M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  1.84M|    {
 1221|  1.84M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.84M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.84M|    {
  155|  1.84M|        return m_value;
  156|  1.84M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   565k|    {
 1034|   565k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   565k|    {
  142|   565k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   623k|    {
 1191|   623k|        return has_value();
 1192|   623k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.18M|    {
  189|  1.18M|        return m_has_value;
  190|  1.18M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|   565k|    {
 1274|   565k|        return std::addressof(value());
 1275|   565k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   565k|    {
 1221|   565k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   565k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   565k|    {
  155|   565k|        return m_value;
  156|   565k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   184k|    {
 1263|   184k|        return std::move(value());
 1264|   184k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  58.4k|    {
 1078|  58.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  58.4k|    {
  151|  58.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   691k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   632k|    {
 1034|   632k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   632k|    {
  142|   632k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   691k|    {
 1191|   691k|        return has_value();
 1192|   691k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.32M|    {
  189|  1.32M|        return m_has_value;
  190|  1.32M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|   632k|    {
 1274|   632k|        return std::addressof(value());
 1275|   632k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   632k|    {
 1221|   632k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   632k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   632k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   632k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   632k|    {
  155|   632k|        return m_value;
  156|   632k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  58.4k|    {
 1078|  58.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  58.4k|    {
  151|  58.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   700k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   642k|    {
 1034|   642k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   642k|    {
  142|   642k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   700k|    {
 1191|   700k|        return has_value();
 1192|   700k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.34M|    {
  189|  1.34M|        return m_has_value;
  190|  1.34M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|   642k|    {
 1274|   642k|        return std::addressof(value());
 1275|   642k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   642k|    {
 1221|   642k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   642k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   642k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   642k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   642k|    {
  155|   642k|        return m_value;
  156|   642k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   175k|    {
 1078|   175k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   175k|    {
  151|   175k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   323k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   148k|    {
 1034|   148k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   148k|    {
  142|   148k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   323k|    {
 1191|   323k|        return has_value();
 1192|   323k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   646k|    {
  189|   646k|        return m_has_value;
  190|   646k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   175k|    {
 1197|   175k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   175k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   175k|    {
  172|   175k|        return m_unexpected;
  173|   175k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  58.4k|    {
 1078|  58.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  58.4k|    {
  151|  58.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   107k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   134k|    {
 1251|   134k|        return value();
 1252|   134k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   148k|    {
 1221|   148k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   148k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   148k|    {
  155|   148k|        return m_value;
  156|   148k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  49.3k|    {
 1034|  49.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  49.3k|    {
  142|  49.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   107k|    {
 1191|   107k|        return has_value();
 1192|   107k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|  49.3k|    {
 1274|  49.3k|        return std::addressof(value());
 1275|  49.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  49.3k|    {
 1221|  49.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  49.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  49.3k|    {
  155|  49.3k|        return m_value;
  156|  49.3k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  13.4k|    {
 1263|  13.4k|        return std::move(value());
 1264|  13.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  58.4k|    {
 1078|  58.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  58.4k|    {
  151|  58.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   107k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  49.3k|    {
 1034|  49.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  49.3k|    {
  142|  49.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   107k|    {
 1191|   107k|        return has_value();
 1192|   107k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|  49.3k|    {
 1274|  49.3k|        return std::addressof(value());
 1275|  49.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  49.3k|    {
 1221|  49.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  49.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  49.3k|    {
  155|  49.3k|        return m_value;
  156|  49.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  58.4k|    {
 1078|  58.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  58.4k|    {
  151|  58.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   107k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  49.3k|    {
 1034|  49.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  49.3k|    {
  142|  49.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   107k|    {
 1191|   107k|        return has_value();
 1192|   107k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   157k|    {
  189|   157k|        return m_has_value;
  190|   157k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|  49.3k|    {
 1274|  49.3k|        return std::addressof(value());
 1275|  49.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  49.3k|    {
 1221|  49.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  49.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  49.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  49.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  49.3k|    {
  155|  49.3k|        return m_value;
  156|  49.3k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.39M|    {
 1405|  2.39M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.39M|                                            std::forward<F>(f));
 1407|  2.39M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.39M|{
  927|  2.39M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.39M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.39M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.39M|            return result(*std::forward<Exp>(exp));
  931|  2.39M|        }
  932|       |
  933|  2.39M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.39M|        return result(unexpect, monostate{});
  935|  2.39M|    }
  936|  2.39M|    else {
  937|  2.39M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.39M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.36M, False: 23.1k]
  |  |  ------------------
  ------------------
  939|  2.39M|                   ? result(*std::forward<Exp>(exp))
  940|  2.39M|                   : result(unexpect,
  941|  23.1k|                            std::invoke(std::forward<F>(f),
  942|  23.1k|                                        std::forward<Exp>(exp).error()));
  943|  2.39M|    }
  944|  2.39M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  9.09M|    {
  189|  9.09M|        return m_has_value;
  190|  9.09M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.36M|    {
 1263|  2.36M|        return std::move(value());
 1264|  2.36M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.14M|    {
 1221|  3.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.14M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  3.14M|    {
  155|  3.14M|        return m_value;
  156|  3.14M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  9.28M|    {
 1034|  9.28M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  9.28M|    {
  142|  9.28M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  23.1k|    {
 1207|  23.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  23.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  23.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  29.2k|    {
  172|  29.2k|        return m_unexpected;
  173|  29.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   296k|    {
   72|   296k|        return m_unexpected;
   73|   296k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  2.27M|    {
 1088|  2.27M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.42M|    {
  151|  2.42M|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  14.1M|    {
 1191|  14.1M|        return has_value();
 1192|  14.1M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  21.4M|    {
  189|  21.4M|        return m_has_value;
  190|  21.4M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   200k|    {
 1197|   200k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   200k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   200k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   200k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   200k|    {
  172|   200k|        return m_unexpected;
  173|   200k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   154k|    {
 1078|   154k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.39M|    {
 1263|  5.39M|        return std::move(value());
 1264|  5.39M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.09M|    {
 1221|  7.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.09M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  7.09M|    {
  155|  7.09M|        return m_value;
  156|  7.09M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   154k|    {
   58|   154k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   154k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   154k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|   772k|    {
 1078|   772k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|   772k|    {
  151|   772k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  60.9k|    {
   58|  60.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  60.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  60.9k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  29.2k|    {
 1078|  29.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  29.2k|    {
  151|  29.2k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   148k|    {
   67|   148k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   148k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   148k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.92M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  5.89M|    {
 1034|  5.89M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  5.89M|    {
  142|  5.89M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  3.53M|    {
 1191|  3.53M|        return has_value();
 1192|  3.53M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  6.14k|    {
 1197|  6.14k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.14k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  62.4k|    {
   58|  62.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  62.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  62.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.38M|    {
 1078|  2.38M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  18.2M|    {
   72|  18.2M|        return m_unexpected;
   73|  18.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.38M|    {
  151|  2.38M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  4.94M|    {
   67|  4.94M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  4.94M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  4.94M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   774k|    {
 1251|   774k|        return value();
 1252|   774k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   795k|    {
 1034|   795k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   795k|    {
  142|   795k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  19.4M|    {
   58|  19.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  19.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  19.4M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  9.36M|    {
 1078|  9.36M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  19.4M|    {
   72|  19.4M|        return m_unexpected;
   73|  19.4M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  9.36M|    {
  151|  9.36M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  19.4M|    {
   67|  19.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  19.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  19.4M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  15.9M|    {
 1191|  15.9M|        return has_value();
 1192|  15.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  27.0M|    {
  189|  27.0M|        return m_has_value;
  190|  27.0M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  6.39M|    {
 1197|  6.39M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.39M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.39M|    {
  172|  6.39M|        return m_unexpected;
  173|  6.39M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.42M|    {
 1034|  2.42M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.42M|    {
  142|  2.42M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.42M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|  87.4k|    {
   58|  87.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  87.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  87.4k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    202|    {
 1078|    202|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    202|    {
  151|    202|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.46M|    {
 1251|  2.46M|        return value();
 1252|  2.46M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.46M|    {
 1221|  2.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.46M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.46M|    {
  155|  2.46M|        return m_value;
  156|  2.46M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  57.7k|    {
 1191|  57.7k|        return has_value();
 1192|  57.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.85M|    {
  189|  4.85M|        return m_has_value;
  190|  4.85M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.36M|    {
 1263|  2.36M|        return std::move(value());
 1264|  2.36M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.42M|    {
 1221|  2.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.42M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.42M|    {
  155|  2.42M|        return m_value;
  156|  2.42M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|   983k|    {
 1034|   983k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|   983k|    {
  142|   983k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.69M|    {
 1251|  1.69M|        return value();
 1252|  1.69M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   142k|    {
 1034|   142k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   142k|    {
  142|   142k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  4.79M|    {
   58|  4.79M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  4.79M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  4.79M|    }
_ZNO3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1262|  8.56M|    {
 1263|  8.56M|        return std::move(value());
 1264|  8.56M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  2.36M|    {
 1405|  2.36M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.36M|                                            std::forward<F>(f));
 1407|  2.36M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  2.36M|{
  927|  2.36M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.36M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.36M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.36M|            return result(*std::forward<Exp>(exp));
  931|  2.36M|        }
  932|       |
  933|  2.36M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.36M|        return result(unexpect, monostate{});
  935|  2.36M|    }
  936|  2.36M|    else {
  937|  2.36M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.36M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.36M, False: 0]
  |  |  ------------------
  ------------------
  939|  2.36M|                   ? result(*std::forward<Exp>(exp))
  940|  2.36M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  2.36M|    }
  944|  2.36M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  2.36M|    {
 1034|  2.36M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.36M|    {
  142|  2.36M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.36M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  2.36M|    {
 1191|  2.36M|        return has_value();
 1192|  2.36M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.73M|    {
  189|  4.73M|        return m_has_value;
  190|  4.73M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  2.36M|    {
 1263|  2.36M|        return std::move(value());
 1264|  2.36M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.36M|    {
 1221|  2.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.36M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.36M|    {
  155|  2.36M|        return m_value;
  156|  2.36M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  2.25M|    {
 1395|  2.25M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  2.25M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  2.25M|{
  927|  2.25M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.25M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.25M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.25M|            return result(*std::forward<Exp>(exp));
  931|  2.25M|        }
  932|       |
  933|  2.25M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.25M|        return result(unexpect, monostate{});
  935|  2.25M|    }
  936|  2.25M|    else {
  937|  2.25M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.25M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 2.25M]
  |  |  ------------------
  ------------------
  939|  2.25M|                   ? result(*std::forward<Exp>(exp))
  940|  2.25M|                   : result(unexpect,
  941|  2.25M|                            std::invoke(std::forward<F>(f),
  942|  2.25M|                                        std::forward<Exp>(exp).error()));
  943|  2.25M|    }
  944|  2.25M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  57.5k|    {
 1274|  57.5k|        return std::addressof(value());
 1275|  57.5k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  12.5M|    {
 1034|  12.5M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  12.5M|    {
  142|  12.5M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    216|    {
 1078|    216|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    216|    {
  151|    216|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   446k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   445k|    {
 1034|   445k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   445k|    {
  142|   445k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  98.3k|    {
 1405|  98.3k|        return detail::transform_error_impl(std::move(*this),
 1406|  98.3k|                                            std::forward<F>(f));
 1407|  98.3k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  98.3k|{
  927|  98.3k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  98.3k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  98.3k|        if (SCN_LIKELY(exp.has_value())) {
  930|  98.3k|            return result(*std::forward<Exp>(exp));
  931|  98.3k|        }
  932|       |
  933|  98.3k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  98.3k|        return result(unexpect, monostate{});
  935|  98.3k|    }
  936|  98.3k|    else {
  937|  98.3k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  98.3k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  98.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.2k, False: 39]
  |  |  ------------------
  ------------------
  939|  98.3k|                   ? result(*std::forward<Exp>(exp))
  940|  98.3k|                   : result(unexpect,
  941|     39|                            std::invoke(std::forward<F>(f),
  942|     39|                                        std::forward<Exp>(exp).error()));
  943|  98.3k|    }
  944|  98.3k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   793k|    {
  189|   793k|        return m_has_value;
  190|   793k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   347k|    {
 1263|   347k|        return std::move(value());
 1264|   347k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   347k|    {
 1221|   347k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   347k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   347k|    {
  155|   347k|        return m_value;
  156|   347k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  98.2k|    {
 1034|  98.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  98.2k|    {
  142|  98.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   491k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    216|    {
 1207|    216|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    216|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    216|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    216|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    216|    {
  172|    216|        return m_unexpected;
  173|    216|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   196k|    {
 1088|   196k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   393k|    {
  151|   393k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  98.2k|    {
 1191|  98.2k|        return has_value();
 1192|  98.2k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|  98.4k|    {
 1078|  98.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|  98.6k|    {
  151|  98.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   793k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   445k|    {
 1078|   445k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   445k|    {
  151|   445k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|   892k|    {
 1191|   892k|        return has_value();
 1192|   892k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  1.73M|    {
  189|  1.73M|        return m_has_value;
  190|  1.73M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   393k|    {
 1197|   393k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   393k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   393k|    {
  172|   393k|        return m_unexpected;
  173|   393k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|  98.2k|    {
 1034|  98.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|  98.2k|    {
  142|  98.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  98.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   249k|    {
 1221|   249k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   249k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   249k|    {
  155|   249k|        return m_value;
  156|   249k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   196k|    {
  189|   196k|        return m_has_value;
  190|   196k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|  98.2k|    {
 1263|  98.2k|        return std::move(value());
 1264|  98.2k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|  98.2k|    {
 1221|  98.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  98.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|  98.2k|    {
  155|  98.2k|        return m_value;
  156|  98.2k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   249k|    {
 1405|   249k|        return detail::transform_error_impl(std::move(*this),
 1406|   249k|                                            std::forward<F>(f));
 1407|   249k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   249k|{
  927|   249k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   249k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   249k|        if (SCN_LIKELY(exp.has_value())) {
  930|   249k|            return result(*std::forward<Exp>(exp));
  931|   249k|        }
  932|       |
  933|   249k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   249k|        return result(unexpect, monostate{});
  935|   249k|    }
  936|   249k|    else {
  937|   249k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   249k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   249k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 249k, False: 177]
  |  |  ------------------
  ------------------
  939|   249k|                   ? result(*std::forward<Exp>(exp))
  940|   249k|                   : result(unexpect,
  941|    177|                            std::invoke(std::forward<F>(f),
  942|    177|                                        std::forward<Exp>(exp).error()));
  943|   249k|    }
  944|   249k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   249k|    {
 1034|   249k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   249k|    {
  142|   249k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    177|    {
 1088|    177|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   249k|    {
 1263|   249k|        return std::move(value());
 1264|   249k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   196k|    {
 1078|   196k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  98.2k|    {
 1221|  98.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  98.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|   982k|    {
  189|   982k|        return m_has_value;
  190|   982k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  98.2k|    {
  155|  98.2k|        return m_value;
  156|  98.2k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|  98.2k|    {
 1405|  98.2k|        return detail::transform_error_impl(std::move(*this),
 1406|  98.2k|                                            std::forward<F>(f));
 1407|  98.2k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|  98.2k|{
  927|  98.2k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  98.2k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  98.2k|        if (SCN_LIKELY(exp.has_value())) {
  930|  98.2k|            return result(*std::forward<Exp>(exp));
  931|  98.2k|        }
  932|       |
  933|  98.2k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  98.2k|        return result(unexpect, monostate{});
  935|  98.2k|    }
  936|  98.2k|    else {
  937|  98.2k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  98.2k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  98.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.2k, False: 0]
  |  |  ------------------
  ------------------
  939|  98.2k|                   ? result(*std::forward<Exp>(exp))
  940|  98.2k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  98.2k|    }
  944|  98.2k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|  98.2k|    {
 1034|  98.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|  98.2k|    {
  142|  98.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  98.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  98.2k|    {
 1191|  98.2k|        return has_value();
 1192|  98.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   196k|    {
  189|   196k|        return m_has_value;
  190|   196k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|  98.2k|    {
 1263|  98.2k|        return std::move(value());
 1264|  98.2k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|  98.2k|    {
 1221|  98.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  98.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  98.2k|    {
  155|  98.2k|        return m_value;
  156|  98.2k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   196k|    {
 1395|   196k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   196k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   196k|{
  927|   196k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   196k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   196k|        if (SCN_LIKELY(exp.has_value())) {
  930|   196k|            return result(*std::forward<Exp>(exp));
  931|   196k|        }
  932|       |
  933|   196k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   196k|        return result(unexpect, monostate{});
  935|   196k|    }
  936|   196k|    else {
  937|   196k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   196k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   196k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 196k]
  |  |  ------------------
  ------------------
  939|   196k|                   ? result(*std::forward<Exp>(exp))
  940|   196k|                   : result(unexpect,
  941|   196k|                            std::invoke(std::forward<F>(f),
  942|   196k|                                        std::forward<Exp>(exp).error()));
  943|   196k|    }
  944|   196k|}
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   589k|    {
 1191|   589k|        return has_value();
 1192|   589k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   294k|    {
 1197|   294k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   294k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   294k|    {
  172|   294k|        return m_unexpected;
  173|   294k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|  98.2k|    {
 1263|  98.2k|        return std::move(value());
 1264|  98.2k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   117k|    {
 1078|   117k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   117k|    {
  151|   117k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  10.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  10.1M|    {
 1034|  10.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  10.1M|    {
  142|  10.1M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  2.01M|    {
 1405|  2.01M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.01M|                                            std::forward<F>(f));
 1407|  2.01M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.01M|{
  927|  2.01M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.01M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.01M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.01M|            return result(*std::forward<Exp>(exp));
  931|  2.01M|        }
  932|       |
  933|  2.01M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.01M|        return result(unexpect, monostate{});
  935|  2.01M|    }
  936|  2.01M|    else {
  937|  2.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.99M, False: 24.8k]
  |  |  ------------------
  ------------------
  939|  2.01M|                   ? result(*std::forward<Exp>(exp))
  940|  2.01M|                   : result(unexpect,
  941|  24.8k|                            std::invoke(std::forward<F>(f),
  942|  24.8k|                                        std::forward<Exp>(exp).error()));
  943|  2.01M|    }
  944|  2.01M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  18.1M|    {
  189|  18.1M|        return m_has_value;
  190|  18.1M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  7.20M|    {
 1263|  7.20M|        return std::move(value());
 1264|  7.20M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.80M|    {
 1221|  7.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.80M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  7.80M|    {
  155|  7.80M|        return m_value;
  156|  7.80M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  7.62M|    {
 1034|  7.62M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  7.62M|    {
  142|  7.62M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.97M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   111k|    {
 1207|   111k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   111k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   117k|    {
  172|   117k|        return m_unexpected;
  173|   117k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.95M|    {
 1088|  1.95M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  2.21M|    {
  151|  2.21M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   263k|    {
 1078|   263k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  2.94M|    {
 1191|  2.94M|        return has_value();
 1192|  2.94M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  6.36k|    {
 1197|  6.36k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.36k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  2.05M|    {
 1078|  2.05M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.13M|    {
  151|  2.13M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  16.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   606k|    {
 1251|   606k|        return value();
 1252|   606k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   625k|    {
 1034|   625k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   625k|    {
  142|   625k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  7.85M|    {
 1078|  7.85M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  7.85M|    {
  151|  7.85M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  18.6M|    {
 1191|  18.6M|        return has_value();
 1192|  18.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  33.2M|    {
  189|  33.2M|        return m_has_value;
  190|  33.2M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  5.53M|    {
 1197|  5.53M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  5.53M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  5.53M|    {
  172|  5.53M|        return m_unexpected;
  173|  5.53M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  2.03M|    {
 1034|  2.03M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  2.03M|    {
  142|  2.03M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.03M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    202|    {
 1078|    202|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    202|    {
  151|    202|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.96M|    {
 1251|  1.96M|        return value();
 1252|  1.96M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  7.17M|    {
 1221|  7.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  7.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  7.17M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  7.17M|    {
  155|  7.17M|        return m_value;
  156|  7.17M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  48.0k|    {
 1191|  48.0k|        return has_value();
 1192|  48.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  4.07M|    {
  189|  4.07M|        return m_has_value;
  190|  4.07M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.99M|    {
 1263|  1.99M|        return std::move(value());
 1264|  1.99M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  2.03M|    {
 1221|  2.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.03M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  2.03M|    {
  155|  2.03M|        return m_value;
  156|  2.03M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  5.29M|    {
 1405|  5.29M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.29M|                                            std::forward<F>(f));
 1407|  5.29M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.29M|{
  927|  5.29M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.29M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.29M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.29M|            return result(*std::forward<Exp>(exp));
  931|  5.29M|        }
  932|       |
  933|  5.29M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.29M|        return result(unexpect, monostate{});
  935|  5.29M|    }
  936|  5.29M|    else {
  937|  5.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.21M, False: 86.5k]
  |  |  ------------------
  ------------------
  939|  5.29M|                   ? result(*std::forward<Exp>(exp))
  940|  5.29M|                   : result(unexpect,
  941|  86.5k|                            std::invoke(std::forward<F>(f),
  942|  86.5k|                                        std::forward<Exp>(exp).error()));
  943|  5.29M|    }
  944|  5.29M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  6.00M|    {
 1034|  6.00M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  6.00M|    {
  142|  6.00M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|  86.5k|    {
 1088|  86.5k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.21M|    {
 1263|  5.21M|        return std::move(value());
 1264|  5.21M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.37M|    {
 1251|  1.37M|        return value();
 1252|  1.37M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.83M|    {
 1221|  5.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.83M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  18.1M|    {
  189|  18.1M|        return m_has_value;
  190|  18.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  5.83M|    {
  155|  5.83M|        return m_value;
  156|  5.83M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   124k|    {
 1034|   124k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   124k|    {
  142|   124k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  1.99M|    {
 1405|  1.99M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.99M|                                            std::forward<F>(f));
 1407|  1.99M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  1.99M|{
  927|  1.99M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.99M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.99M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.99M|            return result(*std::forward<Exp>(exp));
  931|  1.99M|        }
  932|       |
  933|  1.99M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.99M|        return result(unexpect, monostate{});
  935|  1.99M|    }
  936|  1.99M|    else {
  937|  1.99M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.99M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.99M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.99M, False: 0]
  |  |  ------------------
  ------------------
  939|  1.99M|                   ? result(*std::forward<Exp>(exp))
  940|  1.99M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.99M|    }
  944|  1.99M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  1.99M|    {
 1034|  1.99M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  1.99M|    {
  142|  1.99M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.99M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  1.99M|    {
 1191|  1.99M|        return has_value();
 1192|  1.99M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.98M|    {
  189|  3.98M|        return m_has_value;
  190|  3.98M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.99M|    {
 1263|  1.99M|        return std::move(value());
 1264|  1.99M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.99M|    {
 1221|  1.99M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.99M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.99M|    {
  155|  1.99M|        return m_value;
  156|  1.99M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  1.93M|    {
 1395|  1.93M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  1.93M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  1.93M|{
  927|  1.93M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.93M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.93M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.93M|            return result(*std::forward<Exp>(exp));
  931|  1.93M|        }
  932|       |
  933|  1.93M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.93M|        return result(unexpect, monostate{});
  935|  1.93M|    }
  936|  1.93M|    else {
  937|  1.93M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.93M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.93M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
  939|  1.93M|                   ? result(*std::forward<Exp>(exp))
  940|  1.93M|                   : result(unexpect,
  941|  1.93M|                            std::invoke(std::forward<F>(f),
  942|  1.93M|                                        std::forward<Exp>(exp).error()));
  943|  1.93M|    }
  944|  1.93M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  47.8k|    {
 1274|  47.8k|        return std::addressof(value());
 1275|  47.8k|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  11.9M|    {
 1191|  11.9M|        return has_value();
 1192|  11.9M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   349k|    {
 1197|   349k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   349k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   349k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   349k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   349k|    {
  172|   349k|        return m_unexpected;
  173|   349k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.45M|    {
 1263|  4.45M|        return std::move(value());
 1264|  4.45M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   377k|    {
 1078|   377k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   848k|    {
  151|   848k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.61M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   767k|    {
 1034|   767k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   767k|    {
  142|   767k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.93M|    {
 1191|  1.93M|        return has_value();
 1192|  1.93M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.08M|    {
  189|  3.08M|        return m_has_value;
  190|  3.08M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   525k|    {
 1197|   525k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   525k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   525k|    {
  172|   525k|        return m_unexpected;
  173|   525k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   107k|    {
 1251|   107k|        return value();
 1252|   107k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   619k|    {
 1221|   619k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   619k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   619k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   619k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   619k|    {
  155|   619k|        return m_value;
  156|   619k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    735|    {
 1078|    735|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    735|    {
  151|    735|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.80M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.80M|    {
 1034|  1.80M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.80M|    {
  142|  1.80M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   323k|    {
 1405|   323k|        return detail::transform_error_impl(std::move(*this),
 1406|   323k|                                            std::forward<F>(f));
 1407|   323k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   323k|{
  927|   323k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   323k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   323k|        if (SCN_LIKELY(exp.has_value())) {
  930|   323k|            return result(*std::forward<Exp>(exp));
  931|   323k|        }
  932|       |
  933|   323k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   323k|        return result(unexpect, monostate{});
  935|   323k|    }
  936|   323k|    else {
  937|   323k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   323k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   323k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 323k, False: 261]
  |  |  ------------------
  ------------------
  939|   323k|                   ? result(*std::forward<Exp>(exp))
  940|   323k|                   : result(unexpect,
  941|    261|                            std::invoke(std::forward<F>(f),
  942|    261|                                        std::forward<Exp>(exp).error()));
  943|   323k|    }
  944|   323k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.96M|    {
  189|  2.96M|        return m_has_value;
  190|  2.96M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.15M|    {
 1263|  1.15M|        return std::move(value());
 1264|  1.15M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.15M|    {
 1221|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.15M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.15M|    {
  155|  1.15M|        return m_value;
  156|  1.15M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    591|    {
 1207|    591|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    591|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    591|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    591|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    735|    {
  172|    735|        return m_unexpected;
  173|    735|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   471k|    {
 1088|   471k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   646k|    {
 1191|   646k|        return has_value();
 1192|   646k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|    144|    {
 1197|    144|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    144|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    144|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|    144|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   323k|    {
 1078|   323k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   323k|    {
  151|   323k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.13M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.80M|    {
 1078|  1.80M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.80M|    {
  151|  1.80M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.46M|    {
 1191|  3.46M|        return has_value();
 1192|  3.46M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.23M|    {
  189|  6.23M|        return m_has_value;
  190|  6.23M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|  1.11M|    {
 1197|  1.11M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.11M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.11M|    {
  172|  1.11M|        return m_unexpected;
  173|  1.11M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   323k|    {
 1034|   323k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   323k|    {
  142|   323k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   323k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   350k|    {
 1251|   350k|        return value();
 1252|   350k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.18M|    {
 1221|  1.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.18M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.18M|    {
  155|  1.18M|        return m_value;
  156|  1.18M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   646k|    {
  189|   646k|        return m_has_value;
  190|   646k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   323k|    {
 1263|   323k|        return std::move(value());
 1264|   323k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   323k|    {
 1221|   323k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   323k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   323k|    {
  155|   323k|        return m_value;
  156|   323k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   834k|    {
 1405|   834k|        return detail::transform_error_impl(std::move(*this),
 1406|   834k|                                            std::forward<F>(f));
 1407|   834k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   834k|{
  927|   834k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   834k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   834k|        if (SCN_LIKELY(exp.has_value())) {
  930|   834k|            return result(*std::forward<Exp>(exp));
  931|   834k|        }
  932|       |
  933|   834k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   834k|        return result(unexpect, monostate{});
  935|   834k|    }
  936|   834k|    else {
  937|   834k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   834k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   834k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 834k, False: 330]
  |  |  ------------------
  ------------------
  939|   834k|                   ? result(*std::forward<Exp>(exp))
  940|   834k|                   : result(unexpect,
  941|    330|                            std::invoke(std::forward<F>(f),
  942|    330|                                        std::forward<Exp>(exp).error()));
  943|   834k|    }
  944|   834k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.00M|    {
 1034|  1.00M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.00M|    {
  142|  1.00M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    330|    {
 1088|    330|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   834k|    {
 1263|   834k|        return std::move(value());
 1264|   834k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   323k|    {
 1405|   323k|        return detail::transform_error_impl(std::move(*this),
 1406|   323k|                                            std::forward<F>(f));
 1407|   323k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   323k|{
  927|   323k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   323k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   323k|        if (SCN_LIKELY(exp.has_value())) {
  930|   323k|            return result(*std::forward<Exp>(exp));
  931|   323k|        }
  932|       |
  933|   323k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   323k|        return result(unexpect, monostate{});
  935|   323k|    }
  936|   323k|    else {
  937|   323k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   323k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   323k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 323k, False: 0]
  |  |  ------------------
  ------------------
  939|   323k|                   ? result(*std::forward<Exp>(exp))
  940|   323k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   323k|    }
  944|   323k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   323k|    {
 1034|   323k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   323k|    {
  142|   323k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   323k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   323k|    {
 1191|   323k|        return has_value();
 1192|   323k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   646k|    {
  189|   646k|        return m_has_value;
  190|   646k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   323k|    {
 1263|   323k|        return std::move(value());
 1264|   323k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   323k|    {
 1221|   323k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   323k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   323k|    {
  155|   323k|        return m_value;
  156|   323k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   471k|    {
 1395|   471k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   471k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   471k|{
  927|   471k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   471k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   471k|        if (SCN_LIKELY(exp.has_value())) {
  930|   471k|            return result(*std::forward<Exp>(exp));
  931|   471k|        }
  932|       |
  933|   471k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   471k|        return result(unexpect, monostate{});
  935|   471k|    }
  936|   471k|    else {
  937|   471k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   471k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   471k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 471k]
  |  |  ------------------
  ------------------
  939|   471k|                   ? result(*std::forward<Exp>(exp))
  940|   471k|                   : result(unexpect,
  941|   471k|                            std::invoke(std::forward<F>(f),
  942|   471k|                                        std::forward<Exp>(exp).error()));
  943|   471k|    }
  944|   471k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   511k|    {
 1263|   511k|        return std::move(value());
 1264|   511k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1033|   249k|    {
 1034|   249k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  141|   249k|    {
  142|   249k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.04k|{
  200|  5.04k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.04k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.04k|{
  180|  5.04k|    return p;
  181|  5.04k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.04k|{
  200|  5.04k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.04k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.04k|{
  180|  5.04k|    return p;
  181|  5.04k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.04k|{
  200|  5.04k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.04k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  5.04k|{
  180|  5.04k|    return p;
  181|  5.04k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  25.5M|{
  200|  25.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  25.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  25.5M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  25.9M|{
  180|  25.9M|    return p;
  181|  25.9M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  9.59M|{
  200|  9.59M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  9.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  9.59M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  9.59M|{
  180|  9.59M|    return p;
  181|  9.59M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   393k|{
  200|   393k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   393k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   393k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  9.39M|{
  200|  9.39M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  9.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  9.39M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  11.7M|{
  180|  11.7M|    return p;
  181|  11.7M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  2.39M|{
  200|  2.39M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  2.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  2.39M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  17.5k|    {
  242|  17.5k|        return static_cast<size_type>(m_end - m_ptr);
  243|  17.5k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.52k|    {
  181|  2.52k|        return m_ptr;
  182|  2.52k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.52k|    {
  185|  2.52k|        return m_end;
  186|  2.52k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.52k|    {
  238|  2.52k|        return m_ptr;
  239|  2.52k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.52k|    {
  120|  2.52k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  30.2k|    {
  181|  30.2k|        return m_ptr;
  182|  30.2k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  30.2k|    {
  185|  30.2k|        return m_end;
  186|  30.2k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.52k|    {
  120|  2.52k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  53.9k|    {
  181|  53.9k|        return m_ptr;
  182|  53.9k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  53.9k|    {
  185|  53.9k|        return m_end;
  186|  53.9k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.52k|    {
  120|  2.52k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  4.79M|    {
  120|  4.79M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  4.79M|    {
  238|  4.79M|        return m_ptr;
  239|  4.79M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  4.79M|    {
  242|  4.79M|        return static_cast<size_type>(m_end - m_ptr);
  243|  4.79M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  98.3k|{
   60|  98.3k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  98.3k|                                          const CharT*, const CharT*>) {
   62|  98.3k|        return {first, last};
   63|  98.3k|    }
   64|  98.3k|    else {
   65|  98.3k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  98.3k|    }
   67|  98.3k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  4.84M|{
   60|  4.84M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  4.84M|                                          const CharT*, const CharT*>) {
   62|  4.84M|        return {first, last};
   63|  4.84M|    }
   64|  4.84M|    else {
   65|  4.84M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  4.84M|    }
   67|  4.84M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  8.32M|{
   44|  8.32M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  8.32M|                                          decltype(first), decltype(last)> &&
   46|  8.32M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  8.32M|        return {first, last};
   48|  8.32M|    }
   49|  8.32M|    else {
   50|  8.32M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  8.32M|                                       to_address(first), to_address(last)))};
   52|  8.32M|    }
   53|  8.32M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  11.4M|{
   75|  11.4M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  11.4M|                      typename std::basic_string_view<CharT>::iterator,
   77|  11.4M|                      decltype(it)> &&
   78|  11.4M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  11.4M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  11.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  11.4M|        return it;
   81|  11.4M|    }
   82|  11.4M|    else {
   83|  11.4M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  11.4M|    }
   85|  11.4M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|  98.3k|{
   54|  98.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  98.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  98.3k|        return true;
   57|  98.3k|    }
   58|  98.3k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|  98.3k|                           ranges::iterator_t<Range>,
   60|  98.3k|                           typename detail::basic_scan_buffer<
   61|  98.3k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  98.3k|        auto beg = ranges::begin(r);
   63|  98.3k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 98.3k, False: 0]
  ------------------
   64|  98.3k|            return false;
   65|  98.3k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|  98.3k|    else {
   79|  98.3k|        return false;
   80|  98.3k|    }
   81|  98.3k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   196k|{
  112|   196k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   196k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   196k|        return r;
  115|   196k|    }
  116|   196k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   196k|                           ranges::iterator_t<Range>,
  118|   196k|                           typename detail::basic_scan_buffer<
  119|   196k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   196k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   196k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   196k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   196k|                ranges::begin(r), ranges::end(r)));
  124|   196k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   196k|        }
  126|   196k|        else {
  127|   196k|            return ranges::begin(r).contiguous_segment();
  128|   196k|        }
  129|   196k|    }
  130|   196k|    else {
  131|   196k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   196k|    }
  133|   196k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   249k|{
  166|   249k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   249k|        return ranges_polyfill::usize(r);
  168|   249k|    }
  169|   249k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   249k|                           ranges::iterator_t<Range>,
  171|   249k|                           typename detail::basic_scan_buffer<
  172|   249k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   249k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   249k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   249k|                                       ranges::begin(r).position());
  176|   249k|        }
  177|   249k|        else {
  178|   249k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 249k, False: 0]
  ------------------
  179|   249k|                return static_cast<size_t>(
  180|   249k|                    ranges::begin(r).parent()->chars_available() -
  181|   249k|                    ranges::begin(r).position());
  182|   249k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   249k|        }
  185|   249k|    }
  186|   249k|    else {
  187|   249k|        return 0;
  188|   249k|    }
  189|   249k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   323k|{
   54|   323k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   323k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   323k|        return true;
   57|   323k|    }
   58|   323k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   323k|                           ranges::iterator_t<Range>,
   60|   323k|                           typename detail::basic_scan_buffer<
   61|   323k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   323k|        auto beg = ranges::begin(r);
   63|   323k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 323k, False: 0]
  ------------------
   64|   323k|            return false;
   65|   323k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   323k|    else {
   79|   323k|        return false;
   80|   323k|    }
   81|   323k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   323k|{
  112|   323k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   323k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   323k|        return r;
  115|   323k|    }
  116|   323k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   323k|                           ranges::iterator_t<Range>,
  118|   323k|                           typename detail::basic_scan_buffer<
  119|   323k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   323k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   323k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   323k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   323k|                ranges::begin(r), ranges::end(r)));
  124|   323k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   323k|        }
  126|   323k|        else {
  127|   323k|            return ranges::begin(r).contiguous_segment();
  128|   323k|        }
  129|   323k|    }
  130|   323k|    else {
  131|   323k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   323k|    }
  133|   323k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   834k|{
  166|   834k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   834k|        return ranges_polyfill::usize(r);
  168|   834k|    }
  169|   834k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   834k|                           ranges::iterator_t<Range>,
  171|   834k|                           typename detail::basic_scan_buffer<
  172|   834k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   834k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   834k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   834k|                                       ranges::begin(r).position());
  176|   834k|        }
  177|   834k|        else {
  178|   834k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 834k, False: 0]
  ------------------
  179|   834k|                return static_cast<size_t>(
  180|   834k|                    ranges::begin(r).parent()->chars_available() -
  181|   834k|                    ranges::begin(r).position());
  182|   834k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   834k|        }
  185|   834k|    }
  186|   834k|    else {
  187|   834k|        return 0;
  188|   834k|    }
  189|   834k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.37M|{
  235|  2.37M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.37M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.37M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.37M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.37M|    }
  240|  2.37M|    else {
  241|  2.37M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.37M|    }
  243|  2.37M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.37M|    {
   50|  2.37M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  6.94M|    {
   63|  6.94M|        return sv;
   64|  6.94M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  8.31M|    {
  142|  8.31M|        return m_view;
  143|  8.31M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  5.13M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  4.93M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  2.19M|    {
  137|  2.19M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  2.19M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  2.19M|    {
  181|  2.19M|        using value_t = ranges::range_value_t<Range>;
  182|  2.19M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.19M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.19M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.19M|            m_storage.reset();
  186|  2.19M|            m_view = string_view_type{ranges::data(range),
  187|  2.19M|                                      ranges_polyfill::usize(range)};
  188|  2.19M|        }
  189|  2.19M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  2.19M|                                          std::basic_string<CharT>>) {
  191|  2.19M|            m_storage.emplace(SCN_FWD(range));
  192|  2.19M|            m_view = string_view_type{*m_storage};
  193|  2.19M|        }
  194|  2.19M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  2.19M|                                          typename detail::basic_scan_buffer<
  196|  2.19M|                                              value_t>::forward_iterator> &&
  197|  2.19M|                           ranges::common_range<Range>) {
  198|  2.19M|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.19M|            auto end_seg = range.end().contiguous_segment();
  200|  2.19M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.19M|                             detail::to_address(end_seg.end()))) {
  202|  2.19M|                auto& str = m_storage.emplace();
  203|  2.19M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.19M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.19M|                m_view = string_view_type{str};
  206|  2.19M|                return;
  207|  2.19M|            }
  208|       |
  209|  2.19M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.19M|                                                            end_seg.data());
  211|  2.19M|            m_storage.reset();
  212|  2.19M|        }
  213|  2.19M|        else {
  214|  2.19M|            auto& str = m_storage.emplace();
  215|  2.19M|            if constexpr (ranges::sized_range<Range>) {
  216|  2.19M|                str.reserve(ranges_polyfill::usize(range));
  217|  2.19M|            }
  218|  2.19M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.19M|                      std::back_inserter(str));
  220|  2.19M|            m_view = string_view_type{str};
  221|  2.19M|        }
  222|  2.19M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|  2.66M|    {
  147|  2.66M|        return m_storage.has_value();
  148|  2.66M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|  1.56M|    {
  152|  1.56M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  1.56M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   196k|{
  235|   196k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   196k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   196k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   196k|        return string_view_wrapper{SCN_FWD(range)};
  239|   196k|    }
  240|   196k|    else {
  241|   196k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   196k|    }
  243|   196k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   196k|    {
   97|   196k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   196k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   196k|    {
  181|   196k|        using value_t = ranges::range_value_t<Range>;
  182|   196k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   196k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   196k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   196k|            m_storage.reset();
  186|   196k|            m_view = string_view_type{ranges::data(range),
  187|   196k|                                      ranges_polyfill::usize(range)};
  188|   196k|        }
  189|   196k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   196k|                                          std::basic_string<CharT>>) {
  191|   196k|            m_storage.emplace(SCN_FWD(range));
  192|   196k|            m_view = string_view_type{*m_storage};
  193|   196k|        }
  194|   196k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   196k|                                          typename detail::basic_scan_buffer<
  196|   196k|                                              value_t>::forward_iterator> &&
  197|   196k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   196k|            auto beg_seg = range.begin().contiguous_segment();
  199|   196k|            auto end_seg = range.end().contiguous_segment();
  200|   196k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 196k, False: 78]
  |  |  ------------------
  ------------------
  201|   196k|                             detail::to_address(end_seg.end()))) {
  202|   196k|                auto& str = m_storage.emplace();
  203|   196k|                str.reserve(range.end().position() - range.begin().position());
  204|   196k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   196k|                m_view = string_view_type{str};
  206|   196k|                return;
  207|   196k|            }
  208|       |
  209|     78|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     78|                                                            end_seg.data());
  211|     78|            m_storage.reset();
  212|     78|        }
  213|   196k|        else {
  214|   196k|            auto& str = m_storage.emplace();
  215|   196k|            if constexpr (ranges::sized_range<Range>) {
  216|   196k|                str.reserve(ranges_polyfill::usize(range));
  217|   196k|            }
  218|   196k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   196k|                      std::back_inserter(str));
  220|   196k|            m_view = string_view_type{str};
  221|   196k|        }
  222|   196k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  9.10M|    {
  142|  9.10M|        return m_view;
  143|  9.10M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  5.67M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  4.62M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.80M|    {
  137|  1.80M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.80M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.80M|    {
  181|  1.80M|        using value_t = ranges::range_value_t<Range>;
  182|  1.80M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.80M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.80M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.80M|            m_storage.reset();
  186|  1.80M|            m_view = string_view_type{ranges::data(range),
  187|  1.80M|                                      ranges_polyfill::usize(range)};
  188|  1.80M|        }
  189|  1.80M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.80M|                                          std::basic_string<CharT>>) {
  191|  1.80M|            m_storage.emplace(SCN_FWD(range));
  192|  1.80M|            m_view = string_view_type{*m_storage};
  193|  1.80M|        }
  194|  1.80M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.80M|                                          typename detail::basic_scan_buffer<
  196|  1.80M|                                              value_t>::forward_iterator> &&
  197|  1.80M|                           ranges::common_range<Range>) {
  198|  1.80M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.80M|            auto end_seg = range.end().contiguous_segment();
  200|  1.80M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.80M|                             detail::to_address(end_seg.end()))) {
  202|  1.80M|                auto& str = m_storage.emplace();
  203|  1.80M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.80M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.80M|                m_view = string_view_type{str};
  206|  1.80M|                return;
  207|  1.80M|            }
  208|       |
  209|  1.80M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.80M|                                                            end_seg.data());
  211|  1.80M|            m_storage.reset();
  212|  1.80M|        }
  213|  1.80M|        else {
  214|  1.80M|            auto& str = m_storage.emplace();
  215|  1.80M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.80M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.80M|            }
  218|  1.80M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.80M|                      std::back_inserter(str));
  220|  1.80M|            m_view = string_view_type{str};
  221|  1.80M|        }
  222|  1.80M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|  2.29M|    {
  147|  2.29M|        return m_storage.has_value();
  148|  2.29M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|  1.34M|    {
  152|  1.34M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  1.34M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  1.05M|{
  235|  1.05M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.05M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.05M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.05M|        return string_view_wrapper{SCN_FWD(range)};
  239|  1.05M|    }
  240|  1.05M|    else {
  241|  1.05M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  1.05M|    }
  243|  1.05M|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  1.05M|    {
   97|  1.05M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  1.05M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  1.19M|    {
  181|  1.19M|        using value_t = ranges::range_value_t<Range>;
  182|  1.19M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.19M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.19M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.19M|            m_storage.reset();
  186|  1.19M|            m_view = string_view_type{ranges::data(range),
  187|  1.19M|                                      ranges_polyfill::usize(range)};
  188|  1.19M|        }
  189|  1.19M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.19M|                                          std::basic_string<CharT>>) {
  191|  1.19M|            m_storage.emplace(SCN_FWD(range));
  192|  1.19M|            m_view = string_view_type{*m_storage};
  193|  1.19M|        }
  194|  1.19M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  1.19M|                                          typename detail::basic_scan_buffer<
  196|  1.19M|                                              value_t>::forward_iterator> &&
  197|  1.19M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  1.19M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.19M|            auto end_seg = range.end().contiguous_segment();
  200|  1.19M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.05M, False: 148k]
  |  |  ------------------
  ------------------
  201|  1.19M|                             detail::to_address(end_seg.end()))) {
  202|  1.05M|                auto& str = m_storage.emplace();
  203|  1.05M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.05M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.05M|                m_view = string_view_type{str};
  206|  1.05M|                return;
  207|  1.05M|            }
  208|       |
  209|   148k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|   148k|                                                            end_seg.data());
  211|   148k|            m_storage.reset();
  212|   148k|        }
  213|  1.19M|        else {
  214|  1.19M|            auto& str = m_storage.emplace();
  215|  1.19M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.19M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.19M|            }
  218|  1.19M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.19M|                      std::back_inserter(str));
  220|  1.19M|            m_view = string_view_type{str};
  221|  1.19M|        }
  222|  1.19M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEvOT_:
  136|   148k|    {
  137|   148k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|   148k|    }
_ZN3scn2v24impl22make_contiguous_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  234|  1.10M|{
  235|  1.10M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.10M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.10M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.10M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.10M|    }
  240|  1.10M|    else {
  241|  1.10M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.10M|    }
  243|  1.10M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2INSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
   49|  1.10M|    {
   50|  1.10M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
  136|  1.10M|    {
  137|  1.10M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.10M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
  180|  1.10M|    {
  181|  1.10M|        using value_t = ranges::range_value_t<Range>;
  182|  1.10M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.10M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.10M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.10M|            m_storage.reset();
  186|  1.10M|            m_view = string_view_type{ranges::data(range),
  187|  1.10M|                                      ranges_polyfill::usize(range)};
  188|  1.10M|        }
  189|  1.10M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  1.10M|                                          std::basic_string<CharT>>) {
  191|  1.10M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.10M|            m_view = string_view_type{*m_storage};
  193|  1.10M|        }
  194|  1.10M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.10M|                                          typename detail::basic_scan_buffer<
  196|  1.10M|                                              value_t>::forward_iterator> &&
  197|  1.10M|                           ranges::common_range<Range>) {
  198|  1.10M|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.10M|            auto end_seg = range.end().contiguous_segment();
  200|  1.10M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.10M|                             detail::to_address(end_seg.end()))) {
  202|  1.10M|                auto& str = m_storage.emplace();
  203|  1.10M|                str.reserve(range.end().position() - range.begin().position());
  204|  1.10M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.10M|                m_view = string_view_type{str};
  206|  1.10M|                return;
  207|  1.10M|            }
  208|       |
  209|  1.10M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.10M|                                                            end_seg.data());
  211|  1.10M|            m_storage.reset();
  212|  1.10M|        }
  213|  1.10M|        else {
  214|  1.10M|            auto& str = m_storage.emplace();
  215|  1.10M|            if constexpr (ranges::sized_range<Range>) {
  216|  1.10M|                str.reserve(ranges_polyfill::usize(range));
  217|  1.10M|            }
  218|  1.10M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.10M|                      std::back_inserter(str));
  220|  1.10M|            m_view = string_view_type{str};
  221|  1.10M|        }
  222|  1.10M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
  136|   946k|    {
  137|   946k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   946k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|   946k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
  180|   946k|    {
  181|   946k|        using value_t = ranges::range_value_t<Range>;
  182|   946k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   946k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   946k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   946k|            m_storage.reset();
  186|   946k|            m_view = string_view_type{ranges::data(range),
  187|   946k|                                      ranges_polyfill::usize(range)};
  188|   946k|        }
  189|   946k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   946k|                                          std::basic_string<CharT>>) {
  191|   946k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|   946k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|   946k|            m_view = string_view_type{*m_storage};
  193|   946k|        }
  194|   946k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|   946k|                                          typename detail::basic_scan_buffer<
  196|   946k|                                              value_t>::forward_iterator> &&
  197|   946k|                           ranges::common_range<Range>) {
  198|   946k|            auto beg_seg = range.begin().contiguous_segment();
  199|   946k|            auto end_seg = range.end().contiguous_segment();
  200|   946k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|   946k|                             detail::to_address(end_seg.end()))) {
  202|   946k|                auto& str = m_storage.emplace();
  203|   946k|                str.reserve(range.end().position() - range.begin().position());
  204|   946k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   946k|                m_view = string_view_type{str};
  206|   946k|                return;
  207|   946k|            }
  208|       |
  209|   946k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|   946k|                                                            end_seg.data());
  211|   946k|            m_storage.reset();
  212|   946k|        }
  213|   946k|        else {
  214|   946k|            auto& str = m_storage.emplace();
  215|   946k|            if constexpr (ranges::sized_range<Range>) {
  216|   946k|                str.reserve(ranges_polyfill::usize(range));
  217|   946k|            }
  218|   946k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   946k|                      std::back_inserter(str));
  220|   946k|            m_view = string_view_type{str};
  221|   946k|        }
  222|   946k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  8.29M|{
   97|  8.29M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  8.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.2k, False: 8.26M]
  |  |  ------------------
  ------------------
   98|  29.2k|        return eof_error::eof;
   99|  29.2k|    }
  100|  8.26M|    return eof_error::good;
  101|  8.29M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  8.29M|{
   91|  8.29M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  8.29M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  8.29M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  8.29M|    {
   84|  8.29M|        return begin == end;
   85|  8.29M|    }
   86|  8.29M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   294k|{
   97|   294k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39, False: 294k]
  |  |  ------------------
  ------------------
   98|     39|        return eof_error::eof;
   99|     39|    }
  100|   294k|    return eof_error::good;
  101|   294k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   294k|{
   91|   294k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   294k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   294k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   294k|    {
   84|   294k|        return begin == end;
   85|   294k|    }
   86|   294k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  6.95M|{
   97|  6.95M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  6.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.2k, False: 6.92M]
  |  |  ------------------
  ------------------
   98|  31.2k|        return eof_error::eof;
   99|  31.2k|    }
  100|  6.92M|    return eof_error::good;
  101|  6.95M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  6.95M|{
   91|  6.95M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  6.95M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  6.95M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  6.95M|    {
   84|  6.95M|        return begin == end;
   85|  6.95M|    }
   86|  6.95M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.29M|{
   97|  1.29M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 405, False: 1.29M]
  |  |  ------------------
  ------------------
   98|    405|        return eof_error::eof;
   99|    405|    }
  100|  1.29M|    return eof_error::good;
  101|  1.29M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.29M|{
   91|  1.29M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.29M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.29M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.29M|    {
   84|  1.29M|        return begin == end;
   85|  1.29M|    }
   86|  1.29M|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  1.10M|{
  120|  1.10M|    return find_classic_impl(
  121|  1.10M|        source, [](char ch) { return is_ascii_space(ch); },
  122|  1.10M|        [](char32_t cp) { return is_cp_space(cp); });
  123|  1.10M|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  2.47M|{
  128|  2.47M|    return find_classic_impl(
  129|  2.47M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  2.47M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  2.47M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|  1.10M|{
   44|  1.10M|    auto it = source.begin();
   45|       |
   46|  5.59M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 5.31M, False: 273k]
  ------------------
   47|  5.31M|        auto sv =
   48|  5.31M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  5.31M|                .substr(0, 8);
   50|       |
   51|  5.31M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.20M, False: 112k]
  ------------------
   52|  5.20M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.20M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.20M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 791k, False: 4.41M]
  ------------------
   55|   791k|                break;
   56|   791k|            }
   57|  4.41M|            continue;
   58|  5.20M|        }
   59|       |
   60|   397k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 322k, False: 75.3k]
  ------------------
   61|   322k|            auto tmp =
   62|   322k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   322k|            auto res = get_next_code_point(tmp);
   64|   322k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 36.8k, False: 285k]
  ------------------
   65|  36.8k|                return it;
   66|  36.8k|            }
   67|   285k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   285k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   285k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|   285k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   285k|        }
   71|   112k|    }
   72|       |
   73|  1.06M|    return detail::make_string_view_iterator(source, it);
   74|  1.10M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  7.81M|{
   31|  7.81M|    static_assert(sizeof(*source.data()) == 1);
   32|  7.81M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  7.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  7.81M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  7.81M|    return has_byte_greater(word, 127) != 0;
   37|  7.81M|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|  36.7M|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|   322k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  2.47M|{
   44|  2.47M|    auto it = source.begin();
   45|       |
   46|  2.60M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 2.49M, False: 102k]
  ------------------
   47|  2.49M|        auto sv =
   48|  2.49M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  2.49M|                .substr(0, 8);
   50|       |
   51|  2.49M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 2.41M, False: 88.7k]
  ------------------
   52|  2.41M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  2.41M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  2.41M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 2.29M, False: 120k]
  ------------------
   55|  2.29M|                break;
   56|  2.29M|            }
   57|   120k|            continue;
   58|  2.41M|        }
   59|       |
   60|   192k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 182k, False: 9.86k]
  ------------------
   61|   182k|            auto tmp =
   62|   182k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   182k|            auto res = get_next_code_point(tmp);
   64|   182k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 78.9k, False: 103k]
  ------------------
   65|  78.9k|                return it;
   66|  78.9k|            }
   67|   103k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   103k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   103k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|   103k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   103k|        }
   71|  88.7k|    }
   72|       |
   73|  2.39M|    return detail::make_string_view_iterator(source, it);
   74|  2.47M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  4.39M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   182k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  2.37M|{
  300|  2.37M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  2.37M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  2.37M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  2.37M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  2.37M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  2.37M|        return ranges::next(ranges::begin(range),
  306|  2.37M|                            ranges::distance(buf.view().begin(), it));
  307|  2.37M|    }
  308|  2.37M|    else {
  309|  2.37M|        auto it = ranges::begin(range);
  310|       |
  311|  2.37M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  2.37M|            auto seg = get_contiguous_beginning(range);
  313|  2.37M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  2.37M|                seg_it != seg.end()) {
  315|  2.37M|                return ranges_polyfill::batch_next(
  316|  2.37M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  2.37M|            }
  318|  2.37M|            ranges_polyfill::batch_next(it, seg.size());
  319|  2.37M|        }
  320|       |
  321|  2.37M|        return read_while_code_point(
  322|  2.37M|            SCN_FWD(range),
  323|  2.37M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  2.37M|    }
  325|  2.37M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.81M|{
  459|  2.81M|    auto it = read_code_unit(range);
  460|  2.81M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.86k, False: 2.81M]
  |  |  ------------------
  ------------------
  461|  2.86k|        return unexpected(make_eof_parse_error(it.error()));
  462|  2.86k|    }
  463|       |
  464|  5.23M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 5.23M, False: 2.14M]
  ------------------
  465|  5.23M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 672k, False: 4.56M]
  ------------------
  466|   672k|            return *it;
  467|   672k|        }
  468|  5.23M|    }
  469|       |
  470|  2.14M|    return unexpected(parse_error::error);
  471|  2.81M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  6.29M|{
  418|  6.29M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  6.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  6.29M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  6.29M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 49.3k, False: 6.24M]
  ------------------
  423|  49.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  49.3k|        }
  425|  6.24M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 6.04M, False: 201k]
  ------------------
  426|  6.04M|            return unexpected(parse_error::error);
  427|  6.04M|        }
  428|   201k|        return ranges::next(ranges::begin(range), str.size());
  429|  6.24M|    }
  430|  6.29M|    else {
  431|  6.29M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.29M|            if (ch < 'A' || ch > 'Z') {
  433|  6.29M|                return ch;
  434|  6.29M|            }
  435|  6.29M|            return static_cast<char_type>(ch +
  436|  6.29M|                                          static_cast<char_type>('a' - 'A'));
  437|  6.29M|        };
  438|       |
  439|  6.29M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  6.29M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  6.29M|        if (SCN_UNLIKELY(!std::equal(
  443|  6.29M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  6.29M|                    return ascii_tolower(a) ==
  445|  6.29M|                           static_cast<detail::char_t<Range>>(b);
  446|  6.29M|                }))) {
  447|  6.29M|            return unexpected(parse_error::error);
  448|  6.29M|        }
  449|       |
  450|  6.29M|        return it;
  451|  6.29M|    }
  452|  6.29M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  6.28M|{
  407|  6.28M|    unsigned char running_diff{0};
  408|  23.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 17.3M, False: 6.28M]
  ------------------
  409|  17.3M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  17.3M|    }
  411|  6.28M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 182k, False: 6.10M]
  |  Branch (411:33): [True: 40.4k, False: 6.06M]
  ------------------
  412|  6.28M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  38.8k|{
  418|  38.8k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  38.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  38.8k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  38.8k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 520, False: 38.3k]
  ------------------
  423|    520|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|    520|        }
  425|  38.3k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 17.6k, False: 20.6k]
  ------------------
  426|  17.6k|            return unexpected(parse_error::error);
  427|  17.6k|        }
  428|  20.6k|        return ranges::next(ranges::begin(range), str.size());
  429|  38.3k|    }
  430|  38.8k|    else {
  431|  38.8k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  38.8k|            if (ch < 'A' || ch > 'Z') {
  433|  38.8k|                return ch;
  434|  38.8k|            }
  435|  38.8k|            return static_cast<char_type>(ch +
  436|  38.8k|                                          static_cast<char_type>('a' - 'A'));
  437|  38.8k|        };
  438|       |
  439|  38.8k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  38.8k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  38.8k|        if (SCN_UNLIKELY(!std::equal(
  443|  38.8k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  38.8k|                    return ascii_tolower(a) ==
  445|  38.8k|                           static_cast<detail::char_t<Range>>(b);
  446|  38.8k|                }))) {
  447|  38.8k|            return unexpected(parse_error::error);
  448|  38.8k|        }
  449|       |
  450|  38.8k|        return it;
  451|  38.8k|    }
  452|  38.8k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   713k|{
  332|   713k|    auto it = read_code_unit(range);
  333|   713k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.27k, False: 710k]
  |  |  ------------------
  ------------------
  334|  3.27k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.27k|    }
  336|       |
  337|   710k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 608k, False: 102k]
  |  |  ------------------
  ------------------
  338|   710k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   608k|        return unexpected(parse_error::error);
  340|   608k|    }
  341|       |
  342|   102k|    return *it;
  343|   710k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  6.05k|{
  139|  6.05k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  6.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  6.05k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  6.05k|{
  131|  6.05k|    return ranges::find_if(range, pred);
  132|  6.05k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.29M|{
  159|  1.29M|    auto it = read_while_code_unit(range, pred);
  160|  1.29M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 551k, False: 742k]
  ------------------
  161|   551k|        return unexpected(parse_error::error);
  162|   551k|    }
  163|   742k|    return it;
  164|  1.29M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.29M|{
  139|  1.29M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.29M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.29M|{
  131|  1.29M|    return ranges::find_if(range, pred);
  132|  1.29M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|  98.3k|{
  300|  98.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  98.3k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  98.3k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  98.3k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  98.3k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  98.3k|        return ranges::next(ranges::begin(range),
  306|  98.3k|                            ranges::distance(buf.view().begin(), it));
  307|  98.3k|    }
  308|  98.3k|    else {
  309|  98.3k|        auto it = ranges::begin(range);
  310|       |
  311|  98.3k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  98.3k|            auto seg = get_contiguous_beginning(range);
  313|  98.3k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  98.3k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 0, False: 98.3k]
  ------------------
  315|      0|                return ranges_polyfill::batch_next(
  316|      0|                    it, ranges::distance(seg.begin(), seg_it));
  317|      0|            }
  318|  98.3k|            ranges_polyfill::batch_next(it, seg.size());
  319|  98.3k|        }
  320|       |
  321|  98.3k|        return read_while_code_point(
  322|  98.3k|            SCN_FWD(range),
  ------------------
  |  |  248|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  98.3k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  98.3k|    }
  325|  98.3k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|  98.3k|{
  264|  98.3k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  98.3k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|  98.3k|{
  231|  98.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  98.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  98.3k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|  98.3k|    }
  235|  98.3k|    else {
  236|  98.3k|        auto it = ranges::begin(range);
  237|  98.3k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  98.3k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  98.3k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 98.3k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   196k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 196k, False: 39]
  ------------------
  246|   196k|            const auto [iter, value] =
  247|   196k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   196k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   196k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 98.2k, False: 98.3k]
  ------------------
  250|  98.2k|                return it;
  251|  98.2k|            }
  252|  98.3k|            it = iter;
  253|  98.3k|        }
  254|       |
  255|     39|        return it;
  256|  98.3k|    }
  257|  98.3k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  98.3k|{
  178|  98.3k|    static_assert(ranges::contiguous_range<Range> &&
  179|  98.3k|                  ranges::sized_range<Range>);
  180|       |
  181|  98.3k|    std::array<char32_t, 16> cp_buf{};
  182|  98.3k|    std::array<uint8_t, 16> idx_buf{};
  183|  98.3k|    auto it = ranges::begin(range);
  184|   196k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 98.3k, False: 98.3k]
  ------------------
  185|  98.3k|        auto chunk_begin = it;
  186|  98.3k|        size_t code_point_count = 0;
  187|  98.3k|        uint8_t code_unit_idx = 0;
  188|   196k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 196k, False: 0]
  |  Branch (188:52): [True: 98.3k, False: 98.3k]
  ------------------
  189|  98.3k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 98.3k, False: 0]
  ------------------
  190|  98.3k|                idx_buf[code_point_count] = code_unit_idx;
  191|  98.3k|                ++code_point_count;
  192|  98.3k|            }
  193|  98.3k|            ++it;
  194|  98.3k|            ++code_unit_idx;
  195|  98.3k|        }
  196|       |
  197|  98.3k|        auto input = detail::make_string_view_from_pointers(
  198|  98.3k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  98.3k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  98.3k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  98.3k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.3k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   196k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 98.3k, False: 98.3k]
  ------------------
  217|  98.3k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 98.3k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|  98.3k|        }
  221|  98.3k|    }
  222|       |
  223|  98.3k|    return it;
  224|  98.3k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   196k|{
   42|   196k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   196k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   196k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.2k, False: 98.3k]
  |  |  ------------------
  ------------------
   48|   196k|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 196k, False: 39]
  ------------------
   49|   196k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 98.2k, False: 98.2k]
  ------------------
   50|  98.2k|                break;
   51|  98.2k|            }
   52|   196k|        }
   53|       |
   54|  98.2k|        return {it, make_contiguous_buffer(
   55|  98.2k|                        ranges::subrange{ranges::begin(range), it})};
   56|  98.2k|    }
   57|       |
   58|  98.3k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 98.3k, False: 0]
  ------------------
   59|  98.3k|        ++it;
   60|  98.3k|        return {it, make_contiguous_buffer(
   61|  98.3k|                        ranges::subrange{ranges::begin(range), it})};
   62|  98.3k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  98.3k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   294k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|  98.2k|{
  459|  98.2k|    auto it = read_code_unit(range);
  460|  98.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  98.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.2k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   196k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 196k, False: 98.2k]
  ------------------
  465|   196k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 196k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   196k|    }
  469|       |
  470|  98.2k|    return unexpected(parse_error::error);
  471|  98.2k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   249k|{
  418|   249k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   249k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   249k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   249k|        if (ranges::size(range) < str.size()) {
  423|   249k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   249k|        }
  425|   249k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   249k|            return unexpected(parse_error::error);
  427|   249k|        }
  428|   249k|        return ranges::next(ranges::begin(range), str.size());
  429|   249k|    }
  430|   249k|    else {
  431|   249k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   249k|            if (ch < 'A' || ch > 'Z') {
  433|   249k|                return ch;
  434|   249k|            }
  435|   249k|            return static_cast<char_type>(ch +
  436|   249k|                                          static_cast<char_type>('a' - 'A'));
  437|   249k|        };
  438|       |
  439|   249k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   249k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   249k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 0]
  |  |  ------------------
  ------------------
  443|   249k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   249k|                    return ascii_tolower(a) ==
  445|   249k|                           static_cast<detail::char_t<Range>>(b);
  446|   249k|                }))) {
  447|   249k|            return unexpected(parse_error::error);
  448|   249k|        }
  449|       |
  450|      0|        return it;
  451|   249k|    }
  452|   249k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   249k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   249k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 249k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   249k|                return ch;
  434|   249k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   249k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|  98.2k|{
  139|  98.2k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  98.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  98.2k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|  98.2k|{
  131|  98.2k|    return ranges::find_if(range, pred);
  132|  98.2k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|  98.2k|{
  159|  98.2k|    auto it = read_while_code_unit(range, pred);
  160|  98.2k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 98.2k, False: 0]
  ------------------
  161|  98.2k|        return unexpected(parse_error::error);
  162|  98.2k|    }
  163|      0|    return it;
  164|  98.2k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  1.99M|{
  300|  1.99M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  1.99M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  1.99M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  1.99M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  1.99M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  1.99M|        return ranges::next(ranges::begin(range),
  306|  1.99M|                            ranges::distance(buf.view().begin(), it));
  307|  1.99M|    }
  308|  1.99M|    else {
  309|  1.99M|        auto it = ranges::begin(range);
  310|       |
  311|  1.99M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  1.99M|            auto seg = get_contiguous_beginning(range);
  313|  1.99M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  1.99M|                seg_it != seg.end()) {
  315|  1.99M|                return ranges_polyfill::batch_next(
  316|  1.99M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  1.99M|            }
  318|  1.99M|            ranges_polyfill::batch_next(it, seg.size());
  319|  1.99M|        }
  320|       |
  321|  1.99M|        return read_while_code_point(
  322|  1.99M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.99M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  1.99M|    }
  325|  1.99M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  1.99M|{
  264|  1.99M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  1.99M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  1.99M|{
  231|  1.99M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  1.99M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  1.99M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  1.99M|    }
  235|  1.99M|    else {
  236|  1.99M|        auto it = ranges::begin(range);
  237|  1.99M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  1.99M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  1.99M|            seg_it != seg.end()) {
  241|  1.99M|            return ranges_polyfill::batch_next(
  242|  1.99M|                it, ranges::distance(seg.begin(), seg_it));
  243|  1.99M|        }
  244|       |
  245|  1.99M|        while (it != ranges::end(range)) {
  246|  1.99M|            const auto [iter, value] =
  247|  1.99M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  1.99M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  1.99M|            if (pred(cp)) {
  250|  1.99M|                return it;
  251|  1.99M|            }
  252|  1.99M|            it = iter;
  253|  1.99M|        }
  254|       |
  255|  1.99M|        return it;
  256|  1.99M|    }
  257|  1.99M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  1.99M|{
  178|  1.99M|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.99M|                  ranges::sized_range<Range>);
  180|       |
  181|  1.99M|    std::array<char32_t, 16> cp_buf{};
  182|  1.99M|    std::array<uint8_t, 16> idx_buf{};
  183|  1.99M|    auto it = ranges::begin(range);
  184|  2.00M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.00M, False: 5.64k]
  ------------------
  185|  2.00M|        auto chunk_begin = it;
  186|  2.00M|        size_t code_point_count = 0;
  187|  2.00M|        uint8_t code_unit_idx = 0;
  188|  32.5M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 30.6M, False: 1.83M]
  |  Branch (188:52): [True: 30.5M, False: 163k]
  ------------------
  189|  30.5M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 30.5M, False: 0]
  ------------------
  190|  30.5M|                idx_buf[code_point_count] = code_unit_idx;
  191|  30.5M|                ++code_point_count;
  192|  30.5M|            }
  193|  30.5M|            ++it;
  194|  30.5M|            ++code_unit_idx;
  195|  30.5M|        }
  196|       |
  197|  2.00M|        auto input = detail::make_string_view_from_pointers(
  198|  2.00M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.00M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.00M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.00M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  3.71M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 3.70M, False: 12.0k]
  ------------------
  217|  3.70M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 1.99M, False: 1.71M]
  ------------------
  218|  1.99M|                return chunk_begin + idx_buf[i];
  219|  1.99M|            }
  220|  3.70M|        }
  221|  2.00M|    }
  222|       |
  223|  5.64k|    return it;
  224|  1.99M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  3.70M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  2.35M|{
  459|  2.35M|    auto it = read_code_unit(range);
  460|  2.35M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.95k, False: 2.35M]
  |  |  ------------------
  ------------------
  461|  2.95k|        return unexpected(make_eof_parse_error(it.error()));
  462|  2.95k|    }
  463|       |
  464|  4.40M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 4.40M, False: 1.81M]
  ------------------
  465|  4.40M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 532k, False: 3.86M]
  ------------------
  466|   532k|            return *it;
  467|   532k|        }
  468|  4.40M|    }
  469|       |
  470|  1.81M|    return unexpected(parse_error::error);
  471|  2.35M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  5.26M|{
  418|  5.26M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  5.26M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  5.26M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  5.26M|        if (ranges::size(range) < str.size()) {
  423|  5.26M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  5.26M|        }
  425|  5.26M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  5.26M|            return unexpected(parse_error::error);
  427|  5.26M|        }
  428|  5.26M|        return ranges::next(ranges::begin(range), str.size());
  429|  5.26M|    }
  430|  5.26M|    else {
  431|  5.26M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  5.26M|            if (ch < 'A' || ch > 'Z') {
  433|  5.26M|                return ch;
  434|  5.26M|            }
  435|  5.26M|            return static_cast<char_type>(ch +
  436|  5.26M|                                          static_cast<char_type>('a' - 'A'));
  437|  5.26M|        };
  438|       |
  439|  5.26M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  5.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 86.0k, False: 5.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  86.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  86.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  86.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  86.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  86.0k|    }                                                  \
  |  |  |  |   70|  5.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  5.18M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  5.18M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.01M, False: 168k]
  |  |  ------------------
  ------------------
  443|  5.18M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  5.18M|                    return ascii_tolower(a) ==
  445|  5.18M|                           static_cast<detail::char_t<Range>>(b);
  446|  5.18M|                }))) {
  447|  5.01M|            return unexpected(parse_error::error);
  448|  5.01M|        }
  449|       |
  450|   168k|        return it;
  451|  5.18M|    }
  452|  5.26M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  6.02M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  6.02M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 5.25M, False: 771k]
  |  Branch (432:29): [True: 644k, False: 127k]
  ------------------
  433|  5.90M|                return ch;
  434|  5.90M|            }
  435|   127k|            return static_cast<char_type>(ch +
  436|   127k|                                          static_cast<char_type>('a' - 'A'));
  437|  6.02M|        };
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  30.4k|{
  418|  30.4k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  30.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  30.4k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  30.4k|        if (ranges::size(range) < str.size()) {
  423|  30.4k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  30.4k|        }
  425|  30.4k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  30.4k|            return unexpected(parse_error::error);
  427|  30.4k|        }
  428|  30.4k|        return ranges::next(ranges::begin(range), str.size());
  429|  30.4k|    }
  430|  30.4k|    else {
  431|  30.4k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  30.4k|            if (ch < 'A' || ch > 'Z') {
  433|  30.4k|                return ch;
  434|  30.4k|            }
  435|  30.4k|            return static_cast<char_type>(ch +
  436|  30.4k|                                          static_cast<char_type>('a' - 'A'));
  437|  30.4k|        };
  438|       |
  439|  30.4k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  30.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 520, False: 29.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    520|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    520|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    520|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    520|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    520|    }                                                  \
  |  |  |  |   70|  30.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  29.9k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  29.9k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.3k, False: 18.6k]
  |  |  ------------------
  ------------------
  443|  29.9k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  29.9k|                    return ascii_tolower(a) ==
  445|  29.9k|                           static_cast<detail::char_t<Range>>(b);
  446|  29.9k|                }))) {
  447|  11.3k|            return unexpected(parse_error::error);
  448|  11.3k|        }
  449|       |
  450|  18.6k|        return it;
  451|  29.9k|    }
  452|  30.4k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  431|   106k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   106k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 10.6k, False: 95.3k]
  |  Branch (432:29): [True: 94.9k, False: 420]
  ------------------
  433|   105k|                return ch;
  434|   105k|            }
  435|    420|            return static_cast<char_type>(ch +
  436|    420|                                          static_cast<char_type>('a' - 'A'));
  437|   106k|        };
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|   587k|{
  332|   587k|    auto it = read_code_unit(range);
  333|   587k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   587k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.41k, False: 583k]
  |  |  ------------------
  ------------------
  334|  3.41k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.41k|    }
  336|       |
  337|   583k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 509k, False: 74.2k]
  |  |  ------------------
  ------------------
  338|   583k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   509k|        return unexpected(parse_error::error);
  340|   509k|    }
  341|       |
  342|  74.2k|    return *it;
  343|   583k|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  5.64k|{
  139|  5.64k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  5.64k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  5.64k|{
  131|  5.64k|    return ranges::find_if(range, pred);
  132|  5.64k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  1.09M|{
  159|  1.09M|    auto it = read_while_code_unit(range, pred);
  160|  1.09M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 497k, False: 592k]
  ------------------
  161|   497k|        return unexpected(parse_error::error);
  162|   497k|    }
  163|   592k|    return it;
  164|  1.09M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  1.09M|{
  139|  1.09M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.09M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  1.09M|{
  131|  1.09M|    return ranges::find_if(range, pred);
  132|  1.09M|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|   946k|{
  231|   946k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   946k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   946k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|   946k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|   946k|    }
  235|   946k|    else {
  236|   946k|        auto it = ranges::begin(range);
  237|   946k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   946k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   946k|            seg_it != seg.end()) {
  241|   946k|            return ranges_polyfill::batch_next(
  242|   946k|                it, ranges::distance(seg.begin(), seg_it));
  243|   946k|        }
  244|       |
  245|   946k|        while (it != ranges::end(range)) {
  246|   946k|            const auto [iter, value] =
  247|   946k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   946k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   946k|            if (pred(cp)) {
  250|   946k|                return it;
  251|   946k|            }
  252|   946k|            it = iter;
  253|   946k|        }
  254|       |
  255|   946k|        return it;
  256|   946k|    }
  257|   946k|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|   946k|{
  178|   946k|    static_assert(ranges::contiguous_range<Range> &&
  179|   946k|                  ranges::sized_range<Range>);
  180|       |
  181|   946k|    std::array<char32_t, 16> cp_buf{};
  182|   946k|    std::array<uint8_t, 16> idx_buf{};
  183|   946k|    auto it = ranges::begin(range);
  184|  2.65M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 2.37M, False: 284k]
  ------------------
  185|  2.37M|        auto chunk_begin = it;
  186|  2.37M|        size_t code_point_count = 0;
  187|  2.37M|        uint8_t code_unit_idx = 0;
  188|  36.6M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 34.6M, False: 2.06M]
  |  Branch (188:52): [True: 34.3M, False: 313k]
  ------------------
  189|  34.3M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 34.3M, False: 0]
  ------------------
  190|  34.3M|                idx_buf[code_point_count] = code_unit_idx;
  191|  34.3M|                ++code_point_count;
  192|  34.3M|            }
  193|  34.3M|            ++it;
  194|  34.3M|            ++code_unit_idx;
  195|  34.3M|        }
  196|       |
  197|  2.37M|        auto input = detail::make_string_view_from_pointers(
  198|  2.37M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  2.37M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  2.37M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  2.37M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.37M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  29.2M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 27.5M, False: 1.71M]
  ------------------
  217|  27.5M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 661k, False: 26.8M]
  ------------------
  218|   661k|                return chunk_begin + idx_buf[i];
  219|   661k|            }
  220|  27.5M|        }
  221|  2.37M|    }
  222|       |
  223|   284k|    return it;
  224|   946k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   323k|{
  178|   323k|    static_assert(ranges::contiguous_range<Range> &&
  179|   323k|                  ranges::sized_range<Range>);
  180|       |
  181|   323k|    std::array<char32_t, 16> cp_buf{};
  182|   323k|    std::array<uint8_t, 16> idx_buf{};
  183|   323k|    auto it = ranges::begin(range);
  184|   498k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 323k, False: 175k]
  ------------------
  185|   323k|        auto chunk_begin = it;
  186|   323k|        size_t code_point_count = 0;
  187|   323k|        uint8_t code_unit_idx = 0;
  188|   646k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 646k, False: 0]
  |  Branch (188:52): [True: 323k, False: 323k]
  ------------------
  189|   323k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 323k, False: 0]
  ------------------
  190|   323k|                idx_buf[code_point_count] = code_unit_idx;
  191|   323k|                ++code_point_count;
  192|   323k|            }
  193|   323k|            ++it;
  194|   323k|            ++code_unit_idx;
  195|   323k|        }
  196|       |
  197|   323k|        auto input = detail::make_string_view_from_pointers(
  198|   323k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   323k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   323k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   323k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 323k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   498k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 323k, False: 175k]
  ------------------
  217|   323k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 148k, False: 175k]
  ------------------
  218|   148k|                return chunk_begin + idx_buf[i];
  219|   148k|            }
  220|   323k|        }
  221|   323k|    }
  222|       |
  223|   175k|    return it;
  224|   323k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   323k|{
  300|   323k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   323k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   323k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   323k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   323k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   323k|        return ranges::next(ranges::begin(range),
  306|   323k|                            ranges::distance(buf.view().begin(), it));
  307|   323k|    }
  308|   323k|    else {
  309|   323k|        auto it = ranges::begin(range);
  310|       |
  311|   323k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   323k|            auto seg = get_contiguous_beginning(range);
  313|   323k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   323k|                seg_it != seg.end()) {
  315|   323k|                return ranges_polyfill::batch_next(
  316|   323k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   323k|            }
  318|   323k|            ranges_polyfill::batch_next(it, seg.size());
  319|   323k|        }
  320|       |
  321|   323k|        return read_while_code_point(
  322|   323k|            SCN_FWD(range),
  ------------------
  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   323k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   323k|    }
  325|   323k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   323k|{
  264|   323k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   323k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   323k|{
  231|   323k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   323k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   323k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   323k|    }
  235|   323k|    else {
  236|   323k|        auto it = ranges::begin(range);
  237|   323k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   323k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   323k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 148k, False: 175k]
  ------------------
  241|   148k|            return ranges_polyfill::batch_next(
  242|   148k|                it, ranges::distance(seg.begin(), seg_it));
  243|   148k|        }
  244|       |
  245|  1.05M|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 1.05M, False: 195]
  ------------------
  246|  1.05M|            const auto [iter, value] =
  247|  1.05M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  1.05M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  1.05M|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 175k, False: 875k]
  ------------------
  250|   175k|                return it;
  251|   175k|            }
  252|   875k|            it = iter;
  253|   875k|        }
  254|       |
  255|    195|        return it;
  256|   175k|    }
  257|   323k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|  1.05M|{
   42|  1.05M|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  1.05M|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  1.05M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  1.05M|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 1.05M, False: 0]
  ------------------
   59|  1.05M|        ++it;
   60|  1.05M|        return {it, make_contiguous_buffer(
   61|  1.05M|                        ranges::subrange{ranges::begin(range), it})};
   62|  1.05M|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  1.05M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  1.37M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   471k|{
  459|   471k|    auto it = read_code_unit(range);
  460|   471k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66, False: 471k]
  |  |  ------------------
  ------------------
  461|     66|        return unexpected(make_eof_parse_error(it.error()));
  462|     66|    }
  463|       |
  464|   942k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 942k, False: 471k]
  ------------------
  465|   942k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 942k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   942k|    }
  469|       |
  470|   471k|    return unexpected(parse_error::error);
  471|   471k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   834k|{
  418|   834k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   834k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   834k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   834k|        if (ranges::size(range) < str.size()) {
  423|   834k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   834k|        }
  425|   834k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   834k|            return unexpected(parse_error::error);
  427|   834k|        }
  428|   834k|        return ranges::next(ranges::begin(range), str.size());
  429|   834k|    }
  430|   834k|    else {
  431|   834k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   834k|            if (ch < 'A' || ch > 'Z') {
  433|   834k|                return ch;
  434|   834k|            }
  435|   834k|            return static_cast<char_type>(ch +
  436|   834k|                                          static_cast<char_type>('a' - 'A'));
  437|   834k|        };
  438|       |
  439|   834k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   834k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   834k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   834k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   834k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 330, False: 834k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    330|    }                                                  \
  |  |  |  |   70|   834k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   834k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   834k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   834k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   834k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 834k, False: 0]
  |  |  ------------------
  ------------------
  443|   834k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   834k|                    return ascii_tolower(a) ==
  445|   834k|                           static_cast<detail::char_t<Range>>(b);
  446|   834k|                }))) {
  447|   834k|            return unexpected(parse_error::error);
  448|   834k|        }
  449|       |
  450|      0|        return it;
  451|   834k|    }
  452|   834k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   928k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   928k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 928k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   928k|                return ch;
  434|   928k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   928k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   498k|{
  139|   498k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   498k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   498k|{
  131|   498k|    return ranges::find_if(range, pred);
  132|   498k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|   175k|{
  332|   175k|    auto it = read_code_unit(range);
  333|   175k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78, False: 174k]
  |  |  ------------------
  ------------------
  334|     78|        return unexpected(make_eof_parse_error(it.error()));
  335|     78|    }
  336|       |
  337|   174k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 174k, False: 0]
  |  |  ------------------
  ------------------
  338|   174k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   174k|        return unexpected(parse_error::error);
  340|   174k|    }
  341|       |
  342|      0|    return *it;
  343|   174k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   498k|{
  159|   498k|    auto it = read_while_code_unit(range, pred);
  160|   498k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 323k, False: 175k]
  ------------------
  161|   323k|        return unexpected(parse_error::error);
  162|   323k|    }
  163|   175k|    return it;
  164|   498k|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  1.10M|{
  270|  1.10M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  1.10M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  1.10M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  1.10M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  1.10M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  1.10M|        return ranges::next(ranges::begin(range),
  276|  1.10M|                            ranges::distance(buf.view().begin(), it));
  277|  1.10M|    }
  278|  1.10M|    else {
  279|  1.10M|        auto it = ranges::begin(range);
  280|       |
  281|  1.10M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  1.10M|            auto seg = get_contiguous_beginning(range);
  283|  1.10M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  1.10M|                seg_it != seg.end()) {
  285|  1.10M|                return ranges_polyfill::batch_next(
  286|  1.10M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  1.10M|            }
  288|  1.10M|            ranges_polyfill::batch_next(it, seg.size());
  289|  1.10M|        }
  290|       |
  291|  1.10M|        return read_until_code_point(
  292|  1.10M|            ranges::subrange{it, ranges::end(range)},
  293|  1.10M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  1.10M|    }
  295|  1.10M|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|   946k|{
  270|   946k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|   946k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|   946k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|   946k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|   946k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|   946k|        return ranges::next(ranges::begin(range),
  276|   946k|                            ranges::distance(buf.view().begin(), it));
  277|   946k|    }
  278|   946k|    else {
  279|   946k|        auto it = ranges::begin(range);
  280|       |
  281|   946k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|   946k|            auto seg = get_contiguous_beginning(range);
  283|   946k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|   946k|                seg_it != seg.end()) {
  285|   946k|                return ranges_polyfill::batch_next(
  286|   946k|                    it, ranges::distance(seg.begin(), seg_it));
  287|   946k|            }
  288|   946k|            ranges_polyfill::batch_next(it, seg.size());
  289|   946k|        }
  290|       |
  291|   946k|        return read_until_code_point(
  292|   946k|            ranges::subrange{it, ranges::end(range)},
  293|   946k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|   946k|    }
  295|   946k|}
_ZZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_ENKUlDiE_clEDi:
  293|  27.5M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  3.53M|{
   36|  3.53M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.14k, False: 3.52M]
  |  |  ------------------
  ------------------
   37|  6.14k|        return unexpected(e);
   38|  6.14k|    }
   39|       |
   40|  3.52M|    return ranges::next(ranges::begin(range));
   41|  3.53M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.59M|{
   30|  1.59M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.59M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  98.2k|{
   36|  98.2k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  98.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.2k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  98.2k|    return ranges::next(ranges::begin(range));
   41|  98.2k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   249k|{
   48|   249k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   249k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   249k|        const auto sz = ranges::ssize(range);
   52|   249k|        if (sz < count) {
   53|   249k|            return unexpected(eof_error::eof);
   54|   249k|        }
   55|       |
   56|   249k|        return ranges::next(ranges::begin(range), count);
   57|   249k|    }
   58|   249k|    else {
   59|   249k|        auto it = ranges::begin(range);
   60|   249k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 151k, False: 98.3k]
  ------------------
   61|   151k|            return ranges_polyfill::batch_next(it, count);
   62|   151k|        }
   63|       |
   64|   393k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 295k, False: 98.2k]
  ------------------
   65|   295k|             ++i, (void)++it) {
   66|   295k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 177, False: 294k]
  ------------------
   67|    177|                return unexpected(eof_error::eof);
   68|    177|            }
   69|   295k|        }
   70|       |
   71|  98.2k|        return it;
   72|  98.3k|    }
   73|   249k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  2.94M|{
   36|  2.94M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.36k, False: 2.93M]
  |  |  ------------------
  ------------------
   37|  6.36k|        return unexpected(e);
   38|  6.36k|    }
   39|       |
   40|  2.93M|    return ranges::next(ranges::begin(range));
   41|  2.94M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  5.29M|{
   48|  5.29M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  5.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  5.29M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  5.29M|        const auto sz = ranges::ssize(range);
   52|  5.29M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 86.5k, False: 5.21M]
  ------------------
   53|  86.5k|            return unexpected(eof_error::eof);
   54|  86.5k|        }
   55|       |
   56|  5.21M|        return ranges::next(ranges::begin(range), count);
   57|  5.29M|    }
   58|  5.29M|    else {
   59|  5.29M|        auto it = ranges::begin(range);
   60|  5.29M|        if (guaranteed_minimum_size(range) >= count) {
   61|  5.29M|            return ranges_polyfill::batch_next(it, count);
   62|  5.29M|        }
   63|       |
   64|  5.29M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  5.29M|             ++i, (void)++it) {
   66|  5.29M|            if (it == ranges::end(range)) {
   67|  5.29M|                return unexpected(eof_error::eof);
   68|  5.29M|            }
   69|  5.29M|        }
   70|       |
   71|  5.29M|        return it;
   72|  5.29M|    }
   73|  5.29M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.31M|{
   30|  1.31M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.31M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   646k|{
   36|   646k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 144, False: 646k]
  |  |  ------------------
  ------------------
   37|    144|        return unexpected(e);
   38|    144|    }
   39|       |
   40|   646k|    return ranges::next(ranges::begin(range));
   41|   646k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   834k|{
   48|   834k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   834k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   834k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   834k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   834k|        const auto sz = ranges::ssize(range);
   52|   834k|        if (sz < count) {
   53|   834k|            return unexpected(eof_error::eof);
   54|   834k|        }
   55|       |
   56|   834k|        return ranges::next(ranges::begin(range), count);
   57|   834k|    }
   58|   834k|    else {
   59|   834k|        auto it = ranges::begin(range);
   60|   834k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 511k, False: 323k]
  ------------------
   61|   511k|            return ranges_polyfill::batch_next(it, count);
   62|   511k|        }
   63|       |
   64|  1.29M|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 969k, False: 322k]
  ------------------
   65|   969k|             ++i, (void)++it) {
   66|   969k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 330, False: 969k]
  ------------------
   67|    330|                return unexpected(eof_error::eof);
   68|    330|            }
   69|   969k|        }
   70|       |
   71|   322k|        return it;
   72|   323k|    }
   73|   834k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  2.17M|{
   33|  2.17M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  2.17M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   933k|{
   39|   933k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   933k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 466k, False: 466k]
  ------------------
   41|   933k|                    : std::locale{};
   42|   933k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   489k|    {
  112|   489k|        auto stdloc = loc.get<std::locale>();
  113|   489k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   489k|        grouping = numpunct.grouping();
  115|   489k|        thousands_sep =
  116|   489k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 489k]
  ------------------
  117|   489k|        decimal_point = numpunct.decimal_point();
  118|   489k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   489k|{
   49|   489k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 489k, False: 0]
  ------------------
   50|   489k|        return std::use_facet<Facet>(stdloc);
   51|   489k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   489k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  2.46M|    localized_number_formatting_options() = default;
_ZN3scn2v24impl25set_clocale_classic_guardC2Ei:
   88|  2.04M|    {
   89|  2.04M|        std::setlocale(cat, "C");
   90|  2.04M|    }
_ZN3scn2v24impl16clocale_restorerC2Ei:
   59|  2.04M|    {
   60|  2.04M|        const auto loc = std::setlocale(cat, nullptr);
   61|  2.04M|        std::strcpy(m_locbuf, loc);
   62|  2.04M|    }
_ZN3scn2v24impl16clocale_restorerD2Ev:
   64|  2.04M|    {
   65|       |        // Restore locale to what it was before
   66|  2.04M|        std::setlocale(m_category, m_locbuf);
   67|  2.04M|    }
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   444k|    {
  112|   444k|        auto stdloc = loc.get<std::locale>();
  113|   444k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   444k|        grouping = numpunct.grouping();
  115|   444k|        thousands_sep =
  116|   444k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 444k]
  ------------------
  117|   444k|        decimal_point = numpunct.decimal_point();
  118|   444k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   444k|{
   49|   444k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 444k, False: 0]
  ------------------
   50|   444k|        return std::use_facet<Facet>(stdloc);
   51|   444k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   444k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  2.31M|    localized_number_formatting_options() = default;

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  2.37M|{
   46|  2.37M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 2.37M, False: 0]
  ------------------
   47|  2.37M|        auto it = read_while_classic_space(range);
   48|  2.37M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  2.37M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.17k, False: 2.36M]
  |  |  ------------------
  ------------------
   50|  4.17k|            return unexpected(e);
   51|  4.17k|        }
   52|       |
   53|  2.36M|        return it;
   54|  2.37M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  2.37M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  2.49M|    {
  126|  2.49M|        return true;
  127|  2.49M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|  98.3k|{
   46|  98.3k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 98.3k, False: 0]
  ------------------
   47|  98.3k|        auto it = read_while_classic_space(range);
   48|  98.3k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  98.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39, False: 98.2k]
  |  |  ------------------
  ------------------
   50|     39|            return unexpected(e);
   51|     39|        }
   52|       |
   53|  98.2k|        return it;
   54|  98.3k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  98.3k|}
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  3.41M|    {
   35|  3.41M|        return m_msg == nullptr;
   36|  3.41M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  1.75M|    {
  131|  1.75M|        reader_error_handler eh{};
  132|  1.75M|        get_derived().check_specs_impl(specs, eh);
  133|  1.75M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.75M|        return {};
  137|  1.75M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  1.75M|    {
  142|  1.75M|        return static_cast<Derived&>(*this);
  143|  1.75M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  1.99M|{
   46|  1.99M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 1.99M, False: 0]
  ------------------
   47|  1.99M|        auto it = read_while_classic_space(range);
   48|  1.99M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  1.99M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.64k, False: 1.99M]
  |  |  ------------------
  ------------------
   50|  5.64k|            return unexpected(e);
   51|  5.64k|        }
   52|       |
   53|  1.99M|        return it;
   54|  1.99M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  1.99M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  2.33M|    {
  126|  2.33M|        return true;
  127|  2.33M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  1.66M|    {
  131|  1.66M|        reader_error_handler eh{};
  132|  1.66M|        get_derived().check_specs_impl(specs, eh);
  133|  1.66M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.66M|        return {};
  137|  1.66M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  1.66M|    {
  142|  1.66M|        return static_cast<Derived&>(*this);
  143|  1.66M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   323k|{
   46|   323k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 323k, False: 0]
  ------------------
   47|   323k|        auto it = read_while_classic_space(range);
   48|   323k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   323k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 195, False: 323k]
  |  |  ------------------
  ------------------
   50|    195|            return unexpected(e);
   51|    195|        }
   52|       |
   53|   323k|        return it;
   54|   323k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   323k|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   716k|{
  640|   716k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   716k|                                  m_nan_payload_buffer, value);
  642|   716k|    value = this->setsign(value);
  643|   716k|    return n;
  644|   716k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  639|   641k|{
  640|   641k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   641k|                                  m_nan_payload_buffer, value);
  642|   641k|    value = this->setsign(value);
  643|   641k|    return n;
  644|   641k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   800k|{
  640|   800k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   800k|                                  m_nan_payload_buffer, value);
  642|   800k|    value = this->setsign(value);
  643|   800k|    return n;
  644|   800k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|   707k|{
  640|   707k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   707k|                                  m_nan_payload_buffer, value);
  642|   707k|    value = this->setsign(value);
  643|   707k|    return n;
  644|   707k|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   812k|{
  640|   812k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   812k|                                  m_nan_payload_buffer, value);
  642|   812k|    value = this->setsign(value);
  643|   812k|    return n;
  644|   812k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  639|   716k|{
  640|   716k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|   716k|                                  m_nan_payload_buffer, value);
  642|   716k|    value = this->setsign(value);
  643|   716k|    return n;
  644|   716k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   716k|{
  557|   716k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 5.61k, False: 710k]
  ------------------
  558|  5.61k|        value = std::numeric_limits<T>::infinity();
  559|  5.61k|        return 3;
  560|  5.61k|    }
  561|   710k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.54k, False: 704k]
  ------------------
  562|  6.54k|        value = std::numeric_limits<T>::infinity();
  563|  6.54k|        return 8;
  564|  6.54k|    }
  565|   704k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 30.3k, False: 674k]
  ------------------
  566|  30.3k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  30.3k|        return 3;
  568|  30.3k|    }
  569|   674k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.47k, False: 672k]
  ------------------
  570|  1.47k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.47k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.47k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.47k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.47k|    }
  601|       |
  602|   672k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   672k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 142k, False: 529k]
  ------------------
  604|   142k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.20k, False: 140k]
  |  |  ------------------
  ------------------
  605|  2.20k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.20k|                                         "Invalid floating-point digit");
  607|  2.20k|        }
  608|   142k|    }
  609|   670k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.27k, False: 664k]
  |  |  ------------------
  ------------------
  610|  6.27k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  6.27k|                                     "Invalid floating-point digit");
  612|  6.27k|    }
  613|       |
  614|   664k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   664k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   664k|            double tmp{};
  619|   664k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   664k|            value = tmp;
  621|   664k|            return ret;
  622|   664k|        }
  623|   664k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   664k|            return fast_float_fallback(data, value);
  627|   664k|        }
  628|   664k|    }
  629|   664k|    else {
  630|       |        // Default to fast_float
  631|   664k|        return fast_float_impl<CharT, T>{data}(value);
  632|   664k|    }
  633|   664k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  496|   664k|    {
  497|   664k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  130|  2.50M|    {
  131|  2.50M|        return {kind, options};
  132|  2.50M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  500|   664k|    {
  501|   664k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 140k, False: 523k]
  ------------------
  502|   664k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 17.2k, False: 506k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   157k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   157k|                                              value);
  506|   157k|        }
  507|       |
  508|   506k|        const auto flags = get_flags();
  509|   506k|        const auto view = get_view();
  510|   506k|        const auto result = fast_float::from_chars(
  511|   506k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   506k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 506k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   506k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.14k, False: 502k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  4.14k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  4.14k|                                              value);
  521|  4.14k|        }
  522|       |
  523|   502k|        return result.ptr - view.data();
  524|   506k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   161k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   161k|    {
  467|   161k|#if !SCN_DISABLE_STRTOD
  468|   161k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   161k|    }
  475|   161k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  312|   161k|    {
  313|   161k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  144|   301k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEclERf:
  316|   161k|    {
  317|   161k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   161k|                           generic_strtod);
  319|   161k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   161k|    {
  151|   161k|        CharT* end{};
  152|   161k|        errno = 0;
  153|   161k|        value = strtod_cb(src, &end);
  154|   161k|        const auto saved_errno = errno;
  155|   161k|        auto chars_read = end - src;
  156|       |
  157|   161k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   161k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.96k, False: 156k]
  |  |  ------------------
  ------------------
  159|  4.96k|            return unexpected(e);
  160|  4.96k|        }
  161|       |
  162|   156k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 139k, False: 17.0k]
  ------------------
  163|   156k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 139k, False: 0]
  ------------------
  164|   139k|            chars_read -= 2;
  165|   139k|        }
  166|       |
  167|   156k|        return chars_read;
  168|   161k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  196|   301k|    {
  197|   301k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 94.3k, False: 206k]
  |  Branch (197:37): [True: 0, False: 94.3k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   301k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 29.7k, False: 271k]
  ------------------
  204|   301k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 29.7k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   301k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 8.90k, False: 292k]
  |  Branch (210:34): [True: 1.34k, False: 7.56k]
  ------------------
  211|  1.34k|            SCN_UNLIKELY_ATTR
  212|  1.34k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|  1.34k|        }
  214|       |
  215|   299k|        SCN_GCC_COMPAT_PUSH
  216|   299k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   299k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 299k, False: 0]
  ------------------
  219|   299k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 299k, False: 0]
  ------------------
  220|   299k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 7.56k, False: 292k]
  ------------------
  221|  7.56k|            SCN_UNLIKELY_ATTR
  222|  7.56k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  7.56k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   292k|            return {};
  228|   299k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEf:
  105|   309k|{
  106|   309k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (106:12): [True: 95.6k, False: 214k]
  |  Branch (106:25): [True: 0, False: 214k]
  ------------------
  107|   309k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   161k|    {
  174|   161k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 161k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   161k|            auto first_space = read_until_classic_space(input.view());
  177|   161k|            input.assign(
  178|   161k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   161k|        }
  180|       |
  181|   161k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 140k, False: 21.3k]
  ------------------
  182|   140k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   140k|                input.get_allocated_string().insert(0, "0x");
  184|   140k|            }
  185|   140k|            else {
  186|   140k|                input.get_allocated_string().insert(0, L"0x");
  187|   140k|            }
  188|   140k|        }
  189|       |
  190|   161k|        return input.get_allocated_string().c_str();
  191|   161k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  323|   161k|    {
  324|   161k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   161k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   161k|        }
  327|   161k|        else {
  328|   161k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   161k|        }
  330|   161k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  231|   161k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   161k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   161k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   161k|            return std::strtof(str, str_end);
  258|   161k|        }
  259|   161k|        else if constexpr (std::is_same_v<T, double>) {
  260|   161k|            return std::strtod(str, str_end);
  261|   161k|        }
  262|   161k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   161k|            return std::strtold(str, str_end);
  264|   161k|        }
  265|   161k|#endif
  266|   161k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  479|  2.00M|    {
  480|  2.00M|        unsigned format_flags{};
  481|  2.00M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (481:13): [True: 1.98M, False: 11.8k]
  ------------------
  482|  1.98M|            format_flags |= fast_float::fixed;
  483|  1.98M|        }
  484|  2.00M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (484:13): [True: 1.72M, False: 277k]
  ------------------
  485|  1.72M|            format_flags |= fast_float::scientific;
  486|  1.72M|        }
  487|       |
  488|  2.00M|        return static_cast<fast_float::chars_format>(format_flags);
  489|  2.00M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  528|   506k|    {
  529|   506k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   506k|            return m_input.view();
  531|   506k|        }
  532|   506k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   506k|            return std::u16string_view{
  534|   506k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   506k|                m_input.view().size()};
  536|   506k|        }
  537|   506k|        else {
  538|   506k|            return std::u32string_view{
  539|   506k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   506k|                m_input.view().size()};
  541|   506k|        }
  542|   506k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   641k|{
  557|   641k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 3.62k, False: 637k]
  ------------------
  558|  3.62k|        value = std::numeric_limits<T>::infinity();
  559|  3.62k|        return 3;
  560|  3.62k|    }
  561|   637k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 5.89k, False: 631k]
  ------------------
  562|  5.89k|        value = std::numeric_limits<T>::infinity();
  563|  5.89k|        return 8;
  564|  5.89k|    }
  565|   631k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 27.1k, False: 604k]
  ------------------
  566|  27.1k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  27.1k|        return 3;
  568|  27.1k|    }
  569|   604k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.37k, False: 603k]
  ------------------
  570|  1.37k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.37k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.37k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.37k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.37k|    }
  601|       |
  602|   603k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   603k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   603k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   603k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 129k, False: 473k]
  ------------------
  604|   129k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.21k, False: 123k]
  |  |  ------------------
  ------------------
  605|  6.21k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.21k|                                         "Invalid floating-point digit");
  607|  6.21k|        }
  608|   129k|    }
  609|   596k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.4k, False: 580k]
  |  |  ------------------
  ------------------
  610|  16.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  16.4k|                                     "Invalid floating-point digit");
  612|  16.4k|    }
  613|       |
  614|   580k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   580k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   580k|            double tmp{};
  619|   580k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   580k|            value = tmp;
  621|   580k|            return ret;
  622|   580k|        }
  623|   580k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   580k|            return fast_float_fallback(data, value);
  627|   580k|        }
  628|   580k|    }
  629|   580k|    else {
  630|       |        // Default to fast_float
  631|   580k|        return fast_float_impl<CharT, T>{data}(value);
  632|   580k|    }
  633|   580k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  496|   580k|    {
  497|   580k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  130|  2.16M|    {
  131|  2.16M|        return {kind, options};
  132|  2.16M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  500|   580k|    {
  501|   580k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 123k, False: 457k]
  ------------------
  502|   580k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 12.4k, False: 444k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   135k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   135k|                                              value);
  506|   135k|        }
  507|       |
  508|   444k|        const auto flags = get_flags();
  509|   444k|        const auto view = get_view();
  510|   444k|        const auto result = fast_float::from_chars(
  511|   444k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   444k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 444k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   444k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.33k, False: 441k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  3.33k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  3.33k|                                              value);
  521|  3.33k|        }
  522|       |
  523|   441k|        return result.ptr - view.data();
  524|   444k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   139k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   139k|    {
  467|   139k|#if !SCN_DISABLE_STRTOD
  468|   139k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   139k|    }
  475|   139k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  312|   139k|    {
  313|   139k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEclERf:
  316|   139k|    {
  317|   139k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   139k|                           generic_strtod);
  319|   139k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  150|   139k|    {
  151|   139k|        CharT* end{};
  152|   139k|        errno = 0;
  153|   139k|        value = strtod_cb(src, &end);
  154|   139k|        const auto saved_errno = errno;
  155|   139k|        auto chars_read = end - src;
  156|       |
  157|   139k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   139k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.94k, False: 135k]
  |  |  ------------------
  ------------------
  159|  3.94k|            return unexpected(e);
  160|  3.94k|        }
  161|       |
  162|   135k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 122k, False: 12.3k]
  ------------------
  163|   135k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 122k, False: 0]
  ------------------
  164|   122k|            chars_read -= 2;
  165|   122k|        }
  166|       |
  167|   135k|        return chars_read;
  168|   139k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   139k|    {
  174|   139k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 139k, False: 4]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   139k|            auto first_space = read_until_classic_space(input.view());
  177|   139k|            input.assign(
  178|   139k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   139k|        }
  180|       |
  181|   139k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 123k, False: 15.8k]
  ------------------
  182|   123k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   123k|                input.get_allocated_string().insert(0, "0x");
  184|   123k|            }
  185|   123k|            else {
  186|   123k|                input.get_allocated_string().insert(0, L"0x");
  187|   123k|            }
  188|   123k|        }
  189|       |
  190|   139k|        return input.get_allocated_string().c_str();
  191|   139k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  323|   139k|    {
  324|   139k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   139k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   139k|        }
  327|   139k|        else {
  328|   139k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   139k|        }
  330|   139k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  269|   139k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   139k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   139k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   139k|            return std::wcstof(str, str_end);
  296|   139k|        }
  297|   139k|        else if constexpr (std::is_same_v<T, double>) {
  298|   139k|            return std::wcstod(str, str_end);
  299|   139k|        }
  300|   139k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   139k|            return std::wcstold(str, str_end);
  302|   139k|        }
  303|   139k|#endif
  304|   139k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  528|   444k|    {
  529|   444k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   444k|            return m_input.view();
  531|   444k|        }
  532|   444k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   444k|            return std::u16string_view{
  534|   444k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   444k|                m_input.view().size()};
  536|   444k|        }
  537|   444k|        else {
  538|   444k|            return std::u32string_view{
  539|   444k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   444k|                m_input.view().size()};
  541|   444k|        }
  542|   444k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   800k|{
  557|   800k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.19k, False: 794k]
  ------------------
  558|  6.19k|        value = std::numeric_limits<T>::infinity();
  559|  6.19k|        return 3;
  560|  6.19k|    }
  561|   794k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 7.03k, False: 787k]
  ------------------
  562|  7.03k|        value = std::numeric_limits<T>::infinity();
  563|  7.03k|        return 8;
  564|  7.03k|    }
  565|   787k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 32.2k, False: 755k]
  ------------------
  566|  32.2k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  32.2k|        return 3;
  568|  32.2k|    }
  569|   755k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.50k, False: 753k]
  ------------------
  570|  1.50k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.50k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.50k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.50k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.50k|    }
  601|       |
  602|   753k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   753k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 162k, False: 591k]
  ------------------
  604|   162k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.52k, False: 160k]
  |  |  ------------------
  ------------------
  605|  2.52k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.52k|                                         "Invalid floating-point digit");
  607|  2.52k|        }
  608|   162k|    }
  609|   751k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.24k, False: 744k]
  |  |  ------------------
  ------------------
  610|  7.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  7.24k|                                     "Invalid floating-point digit");
  612|  7.24k|    }
  613|       |
  614|   744k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   744k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   744k|            double tmp{};
  619|   744k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   744k|            value = tmp;
  621|   744k|            return ret;
  622|   744k|        }
  623|   744k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   744k|            return fast_float_fallback(data, value);
  627|   744k|        }
  628|   744k|    }
  629|   744k|    else {
  630|       |        // Default to fast_float
  631|   744k|        return fast_float_impl<CharT, T>{data}(value);
  632|   744k|    }
  633|   744k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  496|   744k|    {
  497|   744k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  500|   744k|    {
  501|   744k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 160k, False: 583k]
  ------------------
  502|   744k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 22.2k, False: 561k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   182k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   182k|                                              value);
  506|   182k|        }
  507|       |
  508|   561k|        const auto flags = get_flags();
  509|   561k|        const auto view = get_view();
  510|   561k|        const auto result = fast_float::from_chars(
  511|   561k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   561k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   561k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.94k, False: 559k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  1.94k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  1.94k|                                              value);
  521|  1.94k|        }
  522|       |
  523|   559k|        return result.ptr - view.data();
  524|   561k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   184k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   184k|    {
  467|   184k|#if !SCN_DISABLE_STRTOD
  468|   184k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   184k|    }
  475|   184k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  312|   184k|    {
  313|   184k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  144|   340k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEclERd:
  316|   184k|    {
  317|   184k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   184k|                           generic_strtod);
  319|   184k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   184k|    {
  151|   184k|        CharT* end{};
  152|   184k|        errno = 0;
  153|   184k|        value = strtod_cb(src, &end);
  154|   184k|        const auto saved_errno = errno;
  155|   184k|        auto chars_read = end - src;
  156|       |
  157|   184k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   184k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.14k, False: 182k]
  |  |  ------------------
  ------------------
  159|  2.14k|            return unexpected(e);
  160|  2.14k|        }
  161|       |
  162|   182k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 160k, False: 22.2k]
  ------------------
  163|   182k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 160k, False: 0]
  ------------------
  164|   160k|            chars_read -= 2;
  165|   160k|        }
  166|       |
  167|   182k|        return chars_read;
  168|   184k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  196|   340k|    {
  197|   340k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 101k, False: 239k]
  |  Branch (197:37): [True: 0, False: 101k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|   340k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 39.4k, False: 301k]
  ------------------
  204|   340k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 39.4k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|   340k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 3.92k, False: 336k]
  |  Branch (210:34): [True: 393, False: 3.53k]
  ------------------
  211|    393|            SCN_UNLIKELY_ATTR
  212|    393|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    393|        }
  214|       |
  215|   340k|        SCN_GCC_COMPAT_PUSH
  216|   340k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|   340k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 340k, False: 0]
  ------------------
  219|   340k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 340k, False: 0]
  ------------------
  220|   340k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 3.53k, False: 336k]
  ------------------
  221|  3.53k|            SCN_UNLIKELY_ATTR
  222|  3.53k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  3.53k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|   336k|            return {};
  228|   340k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEd:
  109|   344k|{
  110|   344k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (110:12): [True: 101k, False: 242k]
  |  Branch (110:24): [True: 0, False: 242k]
  ------------------
  111|   344k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   184k|    {
  174|   184k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 184k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   184k|            auto first_space = read_until_classic_space(input.view());
  177|   184k|            input.assign(
  178|   184k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   184k|        }
  180|       |
  181|   184k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 160k, False: 24.2k]
  ------------------
  182|   160k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   160k|                input.get_allocated_string().insert(0, "0x");
  184|   160k|            }
  185|   160k|            else {
  186|   160k|                input.get_allocated_string().insert(0, L"0x");
  187|   160k|            }
  188|   160k|        }
  189|       |
  190|   184k|        return input.get_allocated_string().c_str();
  191|   184k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  323|   184k|    {
  324|   184k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   184k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   184k|        }
  327|   184k|        else {
  328|   184k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   184k|        }
  330|   184k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  231|   184k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   184k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   184k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   184k|            return std::strtof(str, str_end);
  258|   184k|        }
  259|   184k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   184k|            return std::strtod(str, str_end);
  261|   184k|        }
  262|   184k|        else if constexpr (std::is_same_v<T, long double>) {
  263|   184k|            return std::strtold(str, str_end);
  264|   184k|        }
  265|   184k|#endif
  266|   184k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  528|   561k|    {
  529|   561k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   561k|            return m_input.view();
  531|   561k|        }
  532|   561k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  533|   561k|            return std::u16string_view{
  534|   561k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   561k|                m_input.view().size()};
  536|   561k|        }
  537|   561k|        else {
  538|   561k|            return std::u32string_view{
  539|   561k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   561k|                m_input.view().size()};
  541|   561k|        }
  542|   561k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   707k|{
  557|   707k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 4.03k, False: 703k]
  ------------------
  558|  4.03k|        value = std::numeric_limits<T>::infinity();
  559|  4.03k|        return 3;
  560|  4.03k|    }
  561|   703k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.33k, False: 696k]
  ------------------
  562|  6.33k|        value = std::numeric_limits<T>::infinity();
  563|  6.33k|        return 8;
  564|  6.33k|    }
  565|   696k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 28.9k, False: 668k]
  ------------------
  566|  28.9k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  28.9k|        return 3;
  568|  28.9k|    }
  569|   668k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.41k, False: 666k]
  ------------------
  570|  1.41k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.41k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.41k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.41k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.41k|    }
  601|       |
  602|   666k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   666k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   666k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   666k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 143k, False: 522k]
  ------------------
  604|   143k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.37k, False: 137k]
  |  |  ------------------
  ------------------
  605|  6.37k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.37k|                                         "Invalid floating-point digit");
  607|  6.37k|        }
  608|   143k|    }
  609|   660k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 17.1k, False: 643k]
  |  |  ------------------
  ------------------
  610|  17.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.1k|                                     "Invalid floating-point digit");
  612|  17.1k|    }
  613|       |
  614|   643k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   643k|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   643k|            double tmp{};
  619|   643k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   643k|            value = tmp;
  621|   643k|            return ret;
  622|   643k|        }
  623|   643k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   643k|            return fast_float_fallback(data, value);
  627|   643k|        }
  628|   643k|    }
  629|   643k|    else {
  630|       |        // Default to fast_float
  631|   643k|        return fast_float_impl<CharT, T>{data}(value);
  632|   643k|    }
  633|   643k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  496|   643k|    {
  497|   643k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  500|   643k|    {
  501|   643k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (501:13): [True: 137k, False: 505k]
  ------------------
  502|   643k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (502:13): [True: 17.2k, False: 488k]
  ------------------
  503|       |            // fast_float doesn't support hexfloats
  504|   154k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  505|   154k|                                              value);
  506|   154k|        }
  507|       |
  508|   488k|        const auto flags = get_flags();
  509|   488k|        const auto view = get_view();
  510|   488k|        const auto result = fast_float::from_chars(
  511|   488k|            view.data(), view.data() + view.size(), value, flags);
  512|       |
  513|   488k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
  514|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  515|      0|                                         "fast_float: invalid_argument");
  516|      0|        }
  517|   488k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.62k, False: 487k]
  |  |  ------------------
  ------------------
  518|       |            // may just be very large: fall back
  519|  1.62k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  520|  1.62k|                                              value);
  521|  1.62k|        }
  522|       |
  523|   487k|        return result.ptr - view.data();
  524|   488k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   156k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   156k|    {
  467|   156k|#if !SCN_DISABLE_STRTOD
  468|   156k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   156k|    }
  475|   156k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  312|   156k|    {
  313|   156k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEclERd:
  316|   156k|    {
  317|   156k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   156k|                           generic_strtod);
  319|   156k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  150|   156k|    {
  151|   156k|        CharT* end{};
  152|   156k|        errno = 0;
  153|   156k|        value = strtod_cb(src, &end);
  154|   156k|        const auto saved_errno = errno;
  155|   156k|        auto chars_read = end - src;
  156|       |
  157|   156k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   156k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.77k, False: 154k]
  |  |  ------------------
  ------------------
  159|  1.77k|            return unexpected(e);
  160|  1.77k|        }
  161|       |
  162|   154k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 137k, False: 17.1k]
  ------------------
  163|   154k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 137k, False: 0]
  ------------------
  164|   137k|            chars_read -= 2;
  165|   137k|        }
  166|       |
  167|   154k|        return chars_read;
  168|   156k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   156k|    {
  174|   156k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 156k, False: 4]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   156k|            auto first_space = read_until_classic_space(input.view());
  177|   156k|            input.assign(
  178|   156k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   156k|        }
  180|       |
  181|   156k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 137k, False: 18.8k]
  ------------------
  182|   137k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   137k|                input.get_allocated_string().insert(0, "0x");
  184|   137k|            }
  185|   137k|            else {
  186|   137k|                input.get_allocated_string().insert(0, L"0x");
  187|   137k|            }
  188|   137k|        }
  189|       |
  190|   156k|        return input.get_allocated_string().c_str();
  191|   156k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  323|   156k|    {
  324|   156k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   156k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   156k|        }
  327|   156k|        else {
  328|   156k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   156k|        }
  330|   156k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  269|   156k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   156k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   156k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   156k|            return std::wcstof(str, str_end);
  296|   156k|        }
  297|   156k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   156k|            return std::wcstod(str, str_end);
  299|   156k|        }
  300|   156k|        else if constexpr (std::is_same_v<T, long double>) {
  301|   156k|            return std::wcstold(str, str_end);
  302|   156k|        }
  303|   156k|#endif
  304|   156k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  528|   488k|    {
  529|   488k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (529:23): [Folded - Ignored]
  ------------------
  530|   488k|            return m_input.view();
  531|   488k|        }
  532|   488k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (532:28): [Folded - Ignored]
  ------------------
  533|   488k|            return std::u16string_view{
  534|   488k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  535|   488k|                m_input.view().size()};
  536|   488k|        }
  537|   488k|        else {
  538|   488k|            return std::u32string_view{
  539|   488k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  540|   488k|                m_input.view().size()};
  541|   488k|        }
  542|   488k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   812k|{
  557|   812k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 6.37k, False: 806k]
  ------------------
  558|  6.37k|        value = std::numeric_limits<T>::infinity();
  559|  6.37k|        return 3;
  560|  6.37k|    }
  561|   806k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 7.09k, False: 799k]
  ------------------
  562|  7.09k|        value = std::numeric_limits<T>::infinity();
  563|  7.09k|        return 8;
  564|  7.09k|    }
  565|   799k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 32.4k, False: 766k]
  ------------------
  566|  32.4k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  32.4k|        return 3;
  568|  32.4k|    }
  569|   766k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.51k, False: 765k]
  ------------------
  570|  1.51k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.51k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.51k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.51k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.51k|    }
  601|       |
  602|   765k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   765k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   765k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   765k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 163k, False: 602k]
  ------------------
  604|   163k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.61k, False: 160k]
  |  |  ------------------
  ------------------
  605|  2.61k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  2.61k|                                         "Invalid floating-point digit");
  607|  2.61k|        }
  608|   163k|    }
  609|   762k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   762k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.81k, False: 755k]
  |  |  ------------------
  ------------------
  610|  7.81k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  7.81k|                                     "Invalid floating-point digit");
  612|  7.81k|    }
  613|       |
  614|   755k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   755k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   755k|            double tmp{};
  619|   755k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   755k|            value = tmp;
  621|   755k|            return ret;
  622|   755k|        }
  623|   755k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   755k|            return fast_float_fallback(data, value);
  627|   755k|        }
  628|   755k|    }
  629|   755k|    else {
  630|       |        // Default to fast_float
  631|   755k|        return fast_float_impl<CharT, T>{data}(value);
  632|   755k|    }
  633|   755k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   755k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   755k|    {
  467|   755k|#if !SCN_DISABLE_STRTOD
  468|   755k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   755k|    }
  475|   755k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  312|   755k|    {
  313|   755k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  144|  1.40M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEclERe:
  316|   755k|    {
  317|   755k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   755k|                           generic_strtod);
  319|   755k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   755k|    {
  151|   755k|        CharT* end{};
  152|   755k|        errno = 0;
  153|   755k|        value = strtod_cb(src, &end);
  154|   755k|        const auto saved_errno = errno;
  155|   755k|        auto chars_read = end - src;
  156|       |
  157|   755k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   755k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 670, False: 754k]
  |  |  ------------------
  ------------------
  159|    670|            return unexpected(e);
  160|    670|        }
  161|       |
  162|   754k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 160k, False: 594k]
  ------------------
  163|   754k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 160k, False: 0]
  ------------------
  164|   160k|            chars_read -= 2;
  165|   160k|        }
  166|       |
  167|   754k|        return chars_read;
  168|   755k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  196|  1.40M|    {
  197|  1.40M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (197:13): [True: 448k, False: 958k]
  |  Branch (197:37): [True: 0, False: 448k]
  ------------------
  198|      0|            SCN_UNLIKELY_ATTR
  199|      0|            return {scan_error::invalid_scanned_value,
  200|      0|                    "strtod failed: No conversion"};
  201|      0|        }
  202|       |
  203|  1.40M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (203:13): [True: 39.5k, False: 1.36M]
  ------------------
  204|  1.40M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (204:13): [True: 0, False: 39.5k]
  ------------------
  205|      0|            SCN_UNLIKELY_ATTR
  206|      0|            return {scan_error::invalid_scanned_value,
  207|      0|                    "Hexfloats disallowed by format string"};
  208|      0|        }
  209|       |
  210|  1.40M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (210:13): [True: 1.22k, False: 1.40M]
  |  Branch (210:34): [True: 124, False: 1.10k]
  ------------------
  211|    124|            SCN_UNLIKELY_ATTR
  212|    124|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  213|    124|        }
  214|       |
  215|  1.40M|        SCN_GCC_COMPAT_PUSH
  216|  1.40M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  217|       |
  218|  1.40M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (218:13): [True: 1.40M, False: 0]
  ------------------
  219|  1.40M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (219:13): [True: 1.40M, False: 0]
  ------------------
  220|  1.40M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (220:13): [True: 1.10k, False: 1.40M]
  ------------------
  221|  1.10k|            SCN_UNLIKELY_ATTR
  222|  1.10k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  223|  1.10k|        }
  224|       |
  225|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  226|       |
  227|  1.40M|            return {};
  228|  1.40M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEe:
  113|  1.40M|{
  114|  1.40M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (114:12): [True: 448k, False: 959k]
  |  Branch (114:26): [True: 0, False: 959k]
  ------------------
  115|  1.40M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   755k|    {
  174|   755k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 755k, False: 0]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   755k|            auto first_space = read_until_classic_space(input.view());
  177|   755k|            input.assign(
  178|   755k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   755k|        }
  180|       |
  181|   755k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 160k, False: 594k]
  ------------------
  182|   160k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   160k|                input.get_allocated_string().insert(0, "0x");
  184|   160k|            }
  185|   160k|            else {
  186|   160k|                input.get_allocated_string().insert(0, L"0x");
  187|   160k|            }
  188|   160k|        }
  189|       |
  190|   755k|        return input.get_allocated_string().c_str();
  191|   755k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  323|   755k|    {
  324|   755k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   755k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   755k|        }
  327|   755k|        else {
  328|   755k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   755k|        }
  330|   755k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  231|   755k|    {
  232|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  233|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  234|       |        if constexpr (std::is_same_v<T, float>) {
  235|       |            return ::strtof_l(str, str_end, cloc);
  236|       |        }
  237|       |        else if constexpr (std::is_same_v<T, double>) {
  238|       |            return ::strtod_l(str, str_end, cloc);
  239|       |        }
  240|       |        else if constexpr (std::is_same_v<T, long double>) {
  241|       |            return ::strtold_l(str, str_end, cloc);
  242|       |        }
  243|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  244|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  245|       |        if constexpr (std::is_same_v<T, float>) {
  246|       |            return ::_strtof_l(str, str_end, cloc);
  247|       |        }
  248|       |        else if constexpr (std::is_same_v<T, double>) {
  249|       |            return ::_strtod_l(str, str_end, cloc);
  250|       |        }
  251|       |        else if constexpr (std::is_same_v<T, long double>) {
  252|       |            return ::_strtold_l(str, str_end, cloc);
  253|       |        }
  254|       |#else
  255|   755k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  256|   755k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (256:23): [Folded - Ignored]
  ------------------
  257|   755k|            return std::strtof(str, str_end);
  258|   755k|        }
  259|   755k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (259:28): [Folded - Ignored]
  ------------------
  260|   755k|            return std::strtod(str, str_end);
  261|   755k|        }
  262|   755k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (262:28): [Folded - Ignored]
  ------------------
  263|   755k|            return std::strtold(str, str_end);
  264|   755k|        }
  265|   755k|#endif
  266|   755k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|   716k|{
  557|   716k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 4.20k, False: 712k]
  ------------------
  558|  4.20k|        value = std::numeric_limits<T>::infinity();
  559|  4.20k|        return 3;
  560|  4.20k|    }
  561|   712k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 6.39k, False: 705k]
  ------------------
  562|  6.39k|        value = std::numeric_limits<T>::infinity();
  563|  6.39k|        return 8;
  564|  6.39k|    }
  565|   705k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 29.0k, False: 676k]
  ------------------
  566|  29.0k|        value = std::numeric_limits<T>::quiet_NaN();
  567|  29.0k|        return 3;
  568|  29.0k|    }
  569|   676k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 1.41k, False: 675k]
  ------------------
  570|  1.41k|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|  1.41k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|  1.41k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|  1.41k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|  1.41k|    }
  601|       |
  602|   675k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|   675k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   675k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|   675k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 143k, False: 531k]
  ------------------
  604|   143k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.42k, False: 137k]
  |  |  ------------------
  ------------------
  605|  6.42k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|  6.42k|                                         "Invalid floating-point digit");
  607|  6.42k|        }
  608|   143k|    }
  609|   668k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|   668k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 17.5k, False: 651k]
  |  |  ------------------
  ------------------
  610|  17.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  17.5k|                                     "Invalid floating-point digit");
  612|  17.5k|    }
  613|       |
  614|   651k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|   651k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (615:23): [Folded - Ignored]
  ------------------
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|   651k|            double tmp{};
  619|   651k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|   651k|            value = tmp;
  621|   651k|            return ret;
  622|   651k|        }
  623|   651k|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|   651k|            return fast_float_fallback(data, value);
  627|   651k|        }
  628|   651k|    }
  629|   651k|    else {
  630|       |        // Default to fast_float
  631|   651k|        return fast_float_impl<CharT, T>{data}(value);
  632|   651k|    }
  633|   651k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  459|   651k|{
  460|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  461|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  462|       |        return from_chars_impl<T>{data}(value);
  463|       |    }
  464|       |    else
  465|       |#endif
  466|   651k|    {
  467|   651k|#if !SCN_DISABLE_STRTOD
  468|   651k|        return strtod_impl<CharT, T>{data}(value);
  469|       |#else
  470|       |        return unexpected_scan_error(
  471|       |            scan_error::invalid_scanned_value,
  472|       |            "fast_float failed, and fallbacks are disabled");
  473|       |#endif
  474|   651k|    }
  475|   651k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  312|   651k|    {
  313|   651k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEclERe:
  316|   651k|    {
  317|   651k|        return this->parse(value, this->get_null_terminated_source(m_input),
  318|   651k|                           generic_strtod);
  319|   651k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  150|   651k|    {
  151|   651k|        CharT* end{};
  152|   651k|        errno = 0;
  153|   651k|        value = strtod_cb(src, &end);
  154|   651k|        const auto saved_errno = errno;
  155|   651k|        auto chars_read = end - src;
  156|       |
  157|   651k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  158|   651k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 555, False: 650k]
  |  |  ------------------
  ------------------
  159|    555|            return unexpected(e);
  160|    555|        }
  161|       |
  162|   650k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (162:13): [True: 137k, False: 513k]
  ------------------
  163|   650k|            chars_read >= 2) {
  ------------------
  |  Branch (163:13): [True: 137k, False: 0]
  ------------------
  164|   137k|            chars_read -= 2;
  165|   137k|        }
  166|       |
  167|   650k|        return chars_read;
  168|   651k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  173|   651k|    {
  174|   651k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (174:13): [True: 651k, False: 22]
  ------------------
  175|       |            // TODO: call float_reader::read_source?
  176|   651k|            auto first_space = read_until_classic_space(input.view());
  177|   651k|            input.assign(
  178|   651k|                std::basic_string<CharT>{input.view().begin(), first_space});
  179|   651k|        }
  180|       |
  181|   651k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (181:13): [True: 137k, False: 514k]
  ------------------
  182|   137k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (182:27): [Folded - Ignored]
  ------------------
  183|   137k|                input.get_allocated_string().insert(0, "0x");
  184|   137k|            }
  185|   137k|            else {
  186|   137k|                input.get_allocated_string().insert(0, L"0x");
  187|   137k|            }
  188|   137k|        }
  189|       |
  190|   651k|        return input.get_allocated_string().c_str();
  191|   651k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  323|   651k|    {
  324|   651k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (324:23): [Folded - Ignored]
  ------------------
  325|   651k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  326|   651k|        }
  327|   651k|        else {
  328|   651k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  329|   651k|        }
  330|   651k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  269|   651k|    {
  270|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  271|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  272|       |        if constexpr (std::is_same_v<T, float>) {
  273|       |            return ::wcstof_l(str, str_end, cloc);
  274|       |        }
  275|       |        else if constexpr (std::is_same_v<T, double>) {
  276|       |            return ::wcstod_l(str, str_end, cloc);
  277|       |        }
  278|       |        else if constexpr (std::is_same_v<T, long double>) {
  279|       |            return ::wcstold_l(str, str_end, cloc);
  280|       |        }
  281|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  282|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  283|       |        if constexpr (std::is_same_v<T, float>) {
  284|       |            return ::_wcstof_l(str, str_end, cloc);
  285|       |        }
  286|       |        else if constexpr (std::is_same_v<T, double>) {
  287|       |            return ::_wcstod_l(str, str_end, cloc);
  288|       |        }
  289|       |        else if constexpr (std::is_same_v<T, long double>) {
  290|       |            return ::_wcstold_l(str, str_end, cloc);
  291|       |        }
  292|       |#else
  293|   651k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  294|   651k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (294:23): [Folded - Ignored]
  ------------------
  295|   651k|            return std::wcstof(str, str_end);
  296|   651k|        }
  297|   651k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (297:28): [Folded - Ignored]
  ------------------
  298|   651k|            return std::wcstod(str, str_end);
  299|   651k|        }
  300|   651k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (300:28): [Folded - Ignored]
  ------------------
  301|   651k|            return std::wcstold(str, str_end);
  302|   651k|        }
  303|   651k|#endif
  304|   651k|    }

_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   216k|    {
  577|   216k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   216k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   216k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   216k|        float_reader<CharT> rd{};
  581|   216k|        return read_impl<range_nocvref_t>(
  582|   216k|            range, rd,
  583|   216k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   216k|                return r.read_source(SCN_FWD(args)...);
  585|   216k|            },
  586|   216k|            value);
  587|   216k|    }
_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|   733k|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|  1.39M|    constexpr float_reader_base() = default;
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   728k|    {
  633|   728k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   728k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.3k, False: 716k]
  |  |  ------------------
  ------------------
  635|  12.3k|            return unexpected(r.error());
  636|  12.3k|        }
  637|       |
  638|   716k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   716k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   716k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   716k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.4k, False: 703k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.4k|    }                                                  \
  |  |  |  |   70|   716k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   703k|        return ranges::next(ranges::begin(range), n);
  640|   716k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   716k|    {
   98|   716k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   716k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   716k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   716k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 183k, False: 533k]
  ------------------
  102|       |
  103|   716k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   716k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   716k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   716k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.4k, False: 703k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.4k|    }                                                  \
  |  |  |  |   70|   716k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   703k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   716k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   216k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   216k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   216k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.89M|    {
   73|  1.89M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.89M|        return read_source_impl(range);
   79|  1.89M|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  2.36M|    {
  112|  2.36M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  2.36M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.36M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.36M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.36M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  2.36M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  2.36M|        auto it = sign_result.first;
  115|  2.36M|        m_sign = sign_result.second;
  116|       |
  117|  2.36M|        auto digits_begin = it;
  118|  2.36M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  2.36M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  2.36M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  2.36M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  4.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.36M]
  |  |  |  Branch (153:45): [True: 0, False: 2.36M]
  |  |  |  Branch (153:45): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
  122|  2.36M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  2.36M|            else {
  133|  2.36M|                auto cb = [&](auto&& rr)
  134|  2.36M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.36M|                    auto res = read_all(rr);
  136|  2.36M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  2.36M|                        return unexpected_scan_error(
  138|  2.36M|                            scan_error::invalid_scanned_value,
  139|  2.36M|                            "Invalid float value");
  140|  2.36M|                    }
  141|  2.36M|                    return res;
  142|  2.36M|                };
  143|  2.36M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  2.36M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  2.36M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 38.7k, False: 2.33M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  38.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  38.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  38.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  38.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  38.7k|    }                                                  \
  |  |   70|  2.36M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  2.33M|            }
  145|  2.36M|        }
  146|  2.33M|        else {
  147|  2.33M|            SCN_TRY_ASSIGN(
  148|  2.33M|                it,
  149|  2.33M|                do_read_source_impl(
  150|  2.33M|                    r,
  151|  2.33M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  2.33M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  2.33M|        }
  154|       |
  155|  2.33M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  2.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  2.33M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 2.31M, False: 18.1k]
  |  Branch (157:48): [True: 2.29M, False: 20.6k]
  ------------------
  158|  2.33M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 2.19M, False: 95.1k]
  ------------------
  159|  2.33M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 2.19M, False: 4.49k]
  ------------------
  160|  2.19M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  2.19M|        }
  162|       |
  163|  2.33M|        handle_separators();
  164|       |
  165|  2.33M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 2.33M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  2.33M|        return it;
  178|  2.33M|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  2.36M|    {
  226|  2.36M|        auto it = ranges::begin(range);
  227|  2.36M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 2.33M, False: 38.8k]
  ------------------
  228|  2.33M|            return unexpected(r.error());
  229|  2.33M|        }
  230|  38.8k|        else {
  231|  38.8k|            it = *r;
  232|  38.8k|        }
  233|       |
  234|  38.8k|        if (auto r = read_matching_string_classic_nocase(
  235|  38.8k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  38.8k|            !r) {
  ------------------
  |  Branch (236:13): [True: 18.1k, False: 20.6k]
  ------------------
  237|  18.1k|            m_kind = float_kind::inf_short;
  238|  18.1k|            return it;
  239|  18.1k|        }
  240|  20.6k|        else {
  241|  20.6k|            m_kind = float_kind::inf_long;
  242|  20.6k|            return *r;
  243|  20.6k|        }
  244|  38.8k|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  2.33M|    {
  249|  2.33M|        auto it = ranges::begin(range);
  250|  2.33M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 2.22M, False: 101k]
  ------------------
  251|  2.22M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  2.22M|                scan_error::invalid_scanned_value,
  253|  2.22M|                "Invalid floating-point NaN value"));
  254|  2.22M|        }
  255|   101k|        else {
  256|   101k|            it = *r;
  257|   101k|        }
  258|       |
  259|   101k|        if (auto r = read_matching_code_unit(
  260|   101k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|   101k|            !r) {
  ------------------
  |  Branch (261:13): [True: 95.1k, False: 6.05k]
  ------------------
  262|  95.1k|            m_kind = float_kind::nan_simple;
  263|  95.1k|            return it;
  264|  95.1k|        }
  265|  6.05k|        else {
  266|  6.05k|            it = *r;
  267|  6.05k|        }
  268|       |
  269|  6.05k|        auto payload_beg_it = it;
  270|  6.05k|        it = read_while_code_unit(
  271|  6.05k|            ranges::subrange{it, ranges::end(range)},
  272|  6.05k|            [](char_type ch) SCN_NOEXCEPT {
  273|  6.05k|                return is_ascii_char(ch) &&
  274|  6.05k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  6.05k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  6.05k|            });
  277|  6.05k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  6.05k|        m_kind = float_kind::nan_with_payload;
  280|  6.05k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 4.49k, False: 1.56k]
  ------------------
  281|  6.05k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  4.49k|            return *r;
  283|  4.49k|        }
  284|  1.56k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  1.56k|                                     "Invalid floating-point NaN payload");
  286|  6.05k|    }
_ZZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlcE_clEc:
  272|  43.0k|            [](char_type ch) SCN_NOEXCEPT {
  273|  43.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 42.9k, False: 143]
  ------------------
  274|  43.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 37.8k, False: 5.09k]
  |  Branch (274:39): [True: 25.7k, False: 12.0k]
  |  Branch (274:54): [True: 4.77k, False: 12.3k]
  |  Branch (274:67): [True: 4.65k, False: 111]
  ------------------
  275|  42.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 7.40k, False: 5.09k]
  |  Branch (275:39): [True: 3.92k, False: 3.48k]
  |  Branch (275:53): [True: 3.36k, False: 5.20k]
  ------------------
  276|  43.0k|            });
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.59M|    {
  220|  1.59M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.59M|    }
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   391k|    {
  292|   391k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 57.7k, False: 333k]
  ------------------
  293|  57.7k|            auto beg_exp_it = ranges::begin(range);
  294|  57.7k|            auto it = *r;
  295|       |
  296|  57.7k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 57.5k, False: 202]
  ------------------
  297|  57.7k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  57.5k|                it = r_sign->first;
  299|  57.5k|            }
  300|       |
  301|  57.7k|            if (auto r_exp = read_while1_code_unit(
  302|  57.7k|                    ranges::subrange{it, ranges::end(range)},
  303|  57.7k|                    [](char_type ch)
  304|  57.7k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  57.7k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 922, False: 56.7k]
  |  |  ------------------
  ------------------
  306|    922|                it = beg_exp_it;
  307|    922|            }
  308|  56.7k|            else {
  309|  56.7k|                it = *r_exp;
  310|  56.7k|            }
  311|       |
  312|  57.7k|            return it;
  313|  57.7k|        }
  314|   333k|        else {
  315|   333k|            return ranges::begin(range);
  316|   333k|        }
  317|   391k|    }
_ZZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlcE_clEc:
  304|   191k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   629k|    {
  365|   629k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   629k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 401k, False: 228k]
  |  Branch (366:50): [True: 23.8k, False: 377k]
  ------------------
  367|       |
  368|   629k|        auto it = ranges::begin(range);
  369|   629k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   629k|        if (auto r =
  372|   629k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   629k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.2k, False: 606k]
  |  |  ------------------
  ------------------
  374|  23.2k|            return r.transform_error(
  375|  23.2k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  23.2k|                                              "Invalid floating-point value"));
  377|  23.2k|        }
  378|   606k|        else {
  379|   606k|            digits_count += ranges::distance(it, *r);
  380|   606k|            it = *r;
  381|   606k|        }
  382|       |
  383|   606k|        m_integral_part_length = digits_count;
  384|   606k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 91.6k, False: 514k]
  ------------------
  385|   606k|                ranges::subrange{it, ranges::end(range)},
  386|   606k|                m_locale_options.decimal_point)) {
  387|  91.6k|            it = *r;
  388|  91.6k|        }
  389|       |
  390|   606k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 79.3k, False: 527k]
  ------------------
  391|   606k|                                     false)) {
  392|  79.3k|            digits_count += ranges::distance(it, *r);
  393|  79.3k|            it = *r;
  394|  79.3k|        }
  395|       |
  396|   606k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 606k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   606k|        auto beg_exp_it = it;
  402|   606k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 391k, False: 215k]
  ------------------
  403|   391k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   391k|        }
  405|   606k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 23.1k, False: 583k]
  |  Branch (405:29): [True: 12.9k, False: 10.1k]
  ------------------
  406|  12.9k|            return unexpected_scan_error(
  407|  12.9k|                scan_error::invalid_scanned_value,
  408|  12.9k|                "No exponent given to scientific float");
  409|  12.9k|        }
  410|       |
  411|   593k|        m_kind =
  412|   593k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 536k, False: 56.7k]
  ------------------
  413|       |
  414|   593k|        return it;
  415|   606k|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.23M|    {
  185|  1.23M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.23M]
  |  |  |  Branch (153:45): [True: 0, False: 1.23M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.23M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.23M|        return read_while1_code_unit(
  195|  1.23M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.23M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.23M|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|  7.35M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  2.36M|    {
  423|  2.36M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  2.36M|        const bool allowed_nonhex =
  425|  2.36M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  2.36M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  2.36M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 2.33M, False: 38.8k]
  |  Branch (428:45): [True: 0, False: 2.33M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  2.36M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 38.8k, False: 2.33M]
  ------------------
  434|  38.8k|            return *r;
  435|  38.8k|        }
  436|       |
  437|  2.33M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 2.23M, False: 99.6k]
  |  Branch (437:45): [True: 1.56k, False: 2.22M]
  ------------------
  438|  1.56k|            return unexpected(r.error());
  439|  1.56k|        }
  440|  2.32M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 99.6k, False: 2.22M]
  ------------------
  441|  99.6k|            return *r;
  442|  99.6k|        }
  443|       |
  444|  2.22M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.59M, False: 629k]
  |  Branch (444:28): [True: 486k, False: 1.11M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   486k|            auto it = ranges::begin(range);
  448|       |
  449|   486k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 17.8k, False: 469k]
  ------------------
  450|  17.8k|                m_kind = float_kind::hex_with_prefix;
  451|  17.8k|                it = *r;
  452|  17.8k|            }
  453|   469k|            else {
  454|   469k|                m_kind = float_kind::hex_without_prefix;
  455|   469k|            }
  456|       |
  457|   486k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   486k|        }
  459|  1.74M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 629k, False: 1.11M]
  |  Branch (459:34): [True: 629k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   629k|            m_kind = float_kind::generic;
  463|   629k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   629k|        }
  465|  1.11M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.11M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.9k, False: 1.06M]
  |  |  ------------------
  ------------------
  471|  43.9k|                m_kind = float_kind::hex_with_prefix;
  472|  43.9k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  43.9k|            }
  474|       |
  475|  1.06M|            m_kind = float_kind::generic;
  476|  1.06M|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.11M|        }
  478|  2.22M|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   530k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   530k|                    auto res = read_all(rr);
  136|   530k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 340, False: 530k]
  |  |  ------------------
  ------------------
  137|    340|                        return unexpected_scan_error(
  138|    340|                            scan_error::invalid_scanned_value,
  139|    340|                            "Invalid float value");
  140|    340|                    }
  141|   530k|                    return res;
  142|   530k|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.06M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.06M|                    auto res = read_all(rr);
  136|  1.06M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 670, False: 1.06M]
  |  |  ------------------
  ------------------
  137|    670|                        return unexpected_scan_error(
  138|    670|                            scan_error::invalid_scanned_value,
  139|    670|                            "Invalid float value");
  140|    670|                    }
  141|  1.06M|                    return res;
  142|  1.06M|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  2.33M|    {
  482|  2.33M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 2.33M, False: 0]
  ------------------
  483|  2.33M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 2.33M, False: 0]
  ------------------
  484|  2.33M|            return;
  485|  2.33M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   244k|    {
  577|   244k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   244k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   244k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   244k|        float_reader<CharT> rd{};
  581|   244k|        return read_impl<range_nocvref_t>(
  582|   244k|            range, rd,
  583|   244k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   244k|                return r.read_source(SCN_FWD(args)...);
  585|   244k|            },
  586|   244k|            value);
  587|   244k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   813k|    {
  633|   813k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   813k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.9k, False: 800k]
  |  |  ------------------
  ------------------
  635|  12.9k|            return unexpected(r.error());
  636|  12.9k|        }
  637|       |
  638|   800k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   800k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   800k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   800k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.9k, False: 789k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.9k|    }                                                  \
  |  |  |  |   70|   800k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   789k|        return ranges::next(ranges::begin(range), n);
  640|   800k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   800k|    {
   98|   800k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   800k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 203k, False: 597k]
  ------------------
  102|       |
  103|   800k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   800k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   800k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   800k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.9k, False: 789k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.9k|    }                                                  \
  |  |  |  |   70|   800k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   789k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   800k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   244k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   244k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   244k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   249k|    {
  577|   249k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   249k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   249k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   249k|        float_reader<CharT> rd{};
  581|   249k|        return read_impl<range_nocvref_t>(
  582|   249k|            range, rd,
  583|   249k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   249k|                return r.read_source(SCN_FWD(args)...);
  585|   249k|            },
  586|   249k|            value);
  587|   249k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   826k|    {
  633|   826k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   826k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.3k, False: 812k]
  |  |  ------------------
  ------------------
  635|  13.3k|            return unexpected(r.error());
  636|  13.3k|        }
  637|       |
  638|   812k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   812k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   812k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   812k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   812k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.0k, False: 801k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.0k|    }                                                  \
  |  |  |  |   70|   812k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   801k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   801k|        return ranges::next(ranges::begin(range), n);
  640|   812k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   812k|    {
   98|   812k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   812k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   812k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   812k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 210k, False: 602k]
  ------------------
  102|       |
  103|   812k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   812k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   812k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   812k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   812k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.0k, False: 801k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.0k|    }                                                  \
  |  |  |  |   70|   812k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   801k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   801k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   812k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   249k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   249k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   249k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.56k|    {
  577|  7.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.56k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.56k|        float_reader<CharT> rd{};
  581|  7.56k|        return read_impl<range_nocvref_t>(
  582|  7.56k|            range, rd,
  583|  7.56k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.56k|                return r.read_source(SCN_FWD(args)...);
  585|  7.56k|            },
  586|  7.56k|            value);
  587|  7.56k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  32.7k|    {
  633|  32.7k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  32.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.7k, False: 0]
  |  |  ------------------
  ------------------
  635|  32.7k|            return unexpected(r.error());
  636|  32.7k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.56k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.56k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.56k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|  83.1k|    {
   73|  83.1k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.1k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  83.1k|        return read_source_impl(range);
   79|  83.1k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|  98.2k|    {
  112|  98.2k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  98.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 98.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  98.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  98.2k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  98.2k|        auto it = sign_result.first;
  115|  98.2k|        m_sign = sign_result.second;
  116|       |
  117|  98.2k|        auto digits_begin = it;
  118|  98.2k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  98.2k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  98.2k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  98.2k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|  98.2k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|  98.2k|                SCN_TRY_ASSIGN(
  124|  98.2k|                    it,
  125|  98.2k|                    do_read_source_impl(
  126|  98.2k|                        r,
  127|  98.2k|                        [&](auto&& rr) {
  128|  98.2k|                            return read_regular_float(SCN_FWD(rr));
  129|  98.2k|                        },
  130|  98.2k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|  98.2k|            }
  132|  98.2k|            else {
  133|  98.2k|                auto cb = [&](auto&& rr)
  134|  98.2k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  98.2k|                    auto res = read_all(rr);
  136|  98.2k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  98.2k|                        return unexpected_scan_error(
  138|  98.2k|                            scan_error::invalid_scanned_value,
  139|  98.2k|                            "Invalid float value");
  140|  98.2k|                    }
  141|  98.2k|                    return res;
  142|  98.2k|                };
  143|  98.2k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|  98.2k|            }
  145|  98.2k|        }
  146|  98.2k|        else {
  147|  98.2k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|  98.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  98.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  98.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 98.2k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  98.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  98.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  98.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  98.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  98.2k|    }                                                  \
  |  |   70|  98.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  98.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|  98.2k|    {
  423|  98.2k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  98.2k|        const bool allowed_nonhex =
  425|  98.2k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  98.2k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  98.2k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 98.2k, False: 0]
  |  Branch (428:45): [True: 0, False: 98.2k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  98.2k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 98.2k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|  98.2k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 98.2k, False: 0]
  |  Branch (437:45): [True: 0, False: 98.2k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|  98.2k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 98.2k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|  98.2k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 52.9k, False: 45.3k]
  |  Branch (444:28): [True: 15.1k, False: 37.8k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  15.1k|            auto it = ranges::begin(range);
  448|       |
  449|  15.1k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 15.1k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  15.1k|            else {
  454|  15.1k|                m_kind = float_kind::hex_without_prefix;
  455|  15.1k|            }
  456|       |
  457|  15.1k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  15.1k|        }
  459|  83.1k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 45.3k, False: 37.8k]
  |  Branch (459:34): [True: 45.3k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  45.3k|            m_kind = float_kind::generic;
  463|  45.3k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  45.3k|        }
  465|  37.8k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  37.8k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.8k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  37.8k|            m_kind = float_kind::generic;
  476|  37.8k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  37.8k|        }
  478|  98.2k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|  98.2k|    {
  226|  98.2k|        auto it = ranges::begin(range);
  227|  98.2k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 98.2k, False: 0]
  ------------------
  228|  98.2k|            return unexpected(r.error());
  229|  98.2k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|  98.2k|    {
  249|  98.2k|        auto it = ranges::begin(range);
  250|  98.2k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 98.2k, False: 0]
  ------------------
  251|  98.2k|            return r.transform_error(map_parse_error_to_scan_error(
  252|  98.2k|                scan_error::invalid_scanned_value,
  253|  98.2k|                "Invalid floating-point NaN value"));
  254|  98.2k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|  52.9k|    {
  220|  52.9k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  52.9k|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  15.1k|    {
  323|  15.1k|        auto it = ranges::begin(range);
  324|       |
  325|  15.1k|        std::ptrdiff_t digits_count = 0;
  326|  15.1k|        if (auto r =
  327|  15.1k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  15.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.1k, False: 0]
  |  |  ------------------
  ------------------
  329|  15.1k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  15.1k|                scan_error::invalid_scanned_value,
  331|  15.1k|                "Invalid hexadecimal floating-point value"));
  332|  15.1k|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  15.1k|    {
  203|  15.1k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 15.1k]
  |  |  |  Branch (153:45): [True: 0, False: 15.1k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  15.1k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  15.1k|        return read_while1_code_unit(
  213|  15.1k|            SCN_FWD(range),
  ------------------
  |  |  248|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  15.1k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  15.1k|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  214|  15.1k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|  83.1k|    {
  365|  83.1k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|  83.1k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 68.0k, False: 15.1k]
  |  Branch (366:50): [True: 15.1k, False: 52.9k]
  ------------------
  367|       |
  368|  83.1k|        auto it = ranges::begin(range);
  369|  83.1k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|  83.1k|        if (auto r =
  372|  83.1k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|  83.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.1k, False: 0]
  |  |  ------------------
  ------------------
  374|  83.1k|            return r.transform_error(
  375|  83.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  83.1k|                                              "Invalid floating-point value"));
  377|  83.1k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|  83.1k|    {
  185|  83.1k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.1k]
  |  |  |  Branch (153:45): [True: 0, False: 83.1k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  83.1k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  83.1k|        return read_while1_code_unit(
  195|  83.1k|            SCN_FWD(range),
  ------------------
  |  |  248|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  83.1k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  83.1k|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  196|  83.1k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.56k|    {
  577|  7.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.56k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.56k|        float_reader<CharT> rd{};
  581|  7.56k|        return read_impl<range_nocvref_t>(
  582|  7.56k|            range, rd,
  583|  7.56k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.56k|                return r.read_source(SCN_FWD(args)...);
  585|  7.56k|            },
  586|  7.56k|            value);
  587|  7.56k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  32.7k|    {
  633|  32.7k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  32.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.7k, False: 0]
  |  |  ------------------
  ------------------
  635|  32.7k|            return unexpected(r.error());
  636|  32.7k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.56k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.56k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.56k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  7.56k|    {
  577|  7.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  7.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  7.56k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  7.56k|        float_reader<CharT> rd{};
  581|  7.56k|        return read_impl<range_nocvref_t>(
  582|  7.56k|            range, rd,
  583|  7.56k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.56k|                return r.read_source(SCN_FWD(args)...);
  585|  7.56k|            },
  586|  7.56k|            value);
  587|  7.56k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  32.7k|    {
  633|  32.7k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  32.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.7k, False: 0]
  |  |  ------------------
  ------------------
  635|  32.7k|            return unexpected(r.error());
  636|  32.7k|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  7.56k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  7.56k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  7.56k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.75M|    {
  570|  1.75M|        detail::check_float_type_specs(specs, eh);
  571|  1.75M|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.73M|    {
  644|  1.73M|        unsigned options{};
  645|  1.73M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 489k, False: 1.24M]
  ------------------
  646|   489k|            options |= float_reader_base::allow_thsep;
  647|   489k|        }
  648|       |
  649|  1.73M|        SCN_GCC_COMPAT_PUSH
  650|  1.73M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.73M|        switch (specs.type) {
  653|   253k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 253k, False: 1.48M]
  ------------------
  654|   253k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  40.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 40.0k, False: 1.69M]
  ------------------
  657|  40.0k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   532k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 532k, False: 1.20M]
  ------------------
  660|   532k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   419k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 419k, False: 1.31M]
  ------------------
  663|   419k|                return options | float_reader_base::allow_scientific |
  664|   419k|                       float_reader_base::allow_fixed;
  665|       |
  666|   489k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 489k, False: 1.24M]
  ------------------
  667|   489k|                return options | float_reader_base::allow_scientific |
  668|   489k|                       float_reader_base::allow_fixed |
  669|   489k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.73M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.73M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.73M|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|  1.73M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|  3.38M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   512k|    {
  596|   512k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   512k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   512k|#if !SCN_DISABLE_LOCALE
  600|   512k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 144k, False: 368k]
  ------------------
  601|   144k|            return read_impl<range_nocvref_t>(
  602|   144k|                range, rd,
  603|   144k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   144k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   144k|                },
  606|   144k|                value, loc);
  607|   144k|        }
  608|   368k|#endif
  609|       |
  610|   368k|        return read_impl<range_nocvref_t>(
  611|   368k|            range, rd,
  612|   368k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   368k|                return r.read_source(SCN_FWD(args)...);
  614|   368k|            },
  615|   368k|            value);
  616|   512k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   144k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   144k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   144k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   473k|    {
   86|   473k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   473k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   473k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 473k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   473k|        return read_source_impl(range);
   92|   473k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   368k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   368k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   368k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   569k|    {
  596|   569k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   569k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   569k|#if !SCN_DISABLE_LOCALE
  600|   569k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 163k, False: 406k]
  ------------------
  601|   163k|            return read_impl<range_nocvref_t>(
  602|   163k|                range, rd,
  603|   163k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   163k|                },
  606|   163k|                value, loc);
  607|   163k|        }
  608|   406k|#endif
  609|       |
  610|   406k|        return read_impl<range_nocvref_t>(
  611|   406k|            range, rd,
  612|   406k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   406k|                return r.read_source(SCN_FWD(args)...);
  614|   406k|            },
  615|   406k|            value);
  616|   569k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   163k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   163k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   406k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   406k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   406k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   576k|    {
  596|   576k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   576k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   576k|#if !SCN_DISABLE_LOCALE
  600|   576k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 166k, False: 409k]
  ------------------
  601|   166k|            return read_impl<range_nocvref_t>(
  602|   166k|                range, rd,
  603|   166k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   166k|                },
  606|   166k|                value, loc);
  607|   166k|        }
  608|   409k|#endif
  609|       |
  610|   409k|        return read_impl<range_nocvref_t>(
  611|   409k|            range, rd,
  612|   409k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   409k|                return r.read_source(SCN_FWD(args)...);
  614|   409k|            },
  615|   409k|            value);
  616|   576k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   166k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   166k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   409k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   409k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   409k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  25.2k|    {
  596|  25.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  25.2k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  25.2k|#if !SCN_DISABLE_LOCALE
  600|  25.2k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.04k, False: 20.1k]
  ------------------
  601|  5.04k|            return read_impl<range_nocvref_t>(
  602|  5.04k|                range, rd,
  603|  5.04k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.04k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.04k|                },
  606|  5.04k|                value, loc);
  607|  5.04k|        }
  608|  20.1k|#endif
  609|       |
  610|  20.1k|        return read_impl<range_nocvref_t>(
  611|  20.1k|            range, rd,
  612|  20.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.1k|                return r.read_source(SCN_FWD(args)...);
  614|  20.1k|            },
  615|  20.1k|            value);
  616|  25.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.04k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.04k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.04k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  15.1k|    {
   86|  15.1k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  15.1k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  15.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  15.1k|        return read_source_impl(range);
   92|  15.1k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  20.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  20.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  25.2k|    {
  596|  25.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  25.2k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  25.2k|#if !SCN_DISABLE_LOCALE
  600|  25.2k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.04k, False: 20.1k]
  ------------------
  601|  5.04k|            return read_impl<range_nocvref_t>(
  602|  5.04k|                range, rd,
  603|  5.04k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.04k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.04k|                },
  606|  5.04k|                value, loc);
  607|  5.04k|        }
  608|  20.1k|#endif
  609|       |
  610|  20.1k|        return read_impl<range_nocvref_t>(
  611|  20.1k|            range, rd,
  612|  20.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.1k|                return r.read_source(SCN_FWD(args)...);
  614|  20.1k|            },
  615|  20.1k|            value);
  616|  25.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.04k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.04k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.04k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  20.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  20.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  25.2k|    {
  596|  25.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  25.2k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  25.2k|#if !SCN_DISABLE_LOCALE
  600|  25.2k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 5.04k, False: 20.1k]
  ------------------
  601|  5.04k|            return read_impl<range_nocvref_t>(
  602|  5.04k|                range, rd,
  603|  5.04k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.04k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  5.04k|                },
  606|  5.04k|                value, loc);
  607|  5.04k|        }
  608|  20.1k|#endif
  609|       |
  610|  20.1k|        return read_impl<range_nocvref_t>(
  611|  20.1k|            range, rd,
  612|  20.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.1k|                return r.read_source(SCN_FWD(args)...);
  614|  20.1k|            },
  615|  20.1k|            value);
  616|  25.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  5.04k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  5.04k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  5.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  5.04k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  20.1k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  20.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  20.1k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   178k|    {
  577|   178k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   178k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   178k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   178k|        float_reader<CharT> rd{};
  581|   178k|        return read_impl<range_nocvref_t>(
  582|   178k|            range, rd,
  583|   178k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   178k|                return r.read_source(SCN_FWD(args)...);
  585|   178k|            },
  586|   178k|            value);
  587|   178k|    }
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|   666k|    constexpr float_reader() = default;
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   616k|    {
  633|   616k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   616k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   616k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.2k, False: 591k]
  |  |  ------------------
  ------------------
  635|  24.2k|            return unexpected(r.error());
  636|  24.2k|        }
  637|       |
  638|   591k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   591k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   591k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   591k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26.6k, False: 565k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.6k|    }                                                  \
  |  |  |  |   70|   591k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   565k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   565k|        return ranges::next(ranges::begin(range), n);
  640|   591k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|   641k|    {
   98|   641k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   641k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 143k, False: 497k]
  ------------------
  102|       |
  103|   641k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   641k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   641k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   641k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26.6k, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.6k|    }                                                  \
  |  |  |  |   70|   641k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   614k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   641k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   178k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   178k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   178k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.60M|    {
   73|  1.60M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.60M|        return read_source_impl(range);
   79|  1.60M|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  1.99M|    {
  112|  1.99M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  1.99M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.99M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.99M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.99M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.99M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.99M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  1.99M|        auto it = sign_result.first;
  115|  1.99M|        m_sign = sign_result.second;
  116|       |
  117|  1.99M|        auto digits_begin = it;
  118|  1.99M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  1.99M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  1.99M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  1.99M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  3.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.99M]
  |  |  |  Branch (153:45): [True: 0, False: 1.99M]
  |  |  |  Branch (153:45): [True: 0, False: 1.99M]
  |  |  ------------------
  ------------------
  122|  1.99M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  1.99M|            else {
  133|  1.99M|                auto cb = [&](auto&& rr)
  134|  1.99M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.99M|                    auto res = read_all(rr);
  136|  1.99M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  1.99M|                        return unexpected_scan_error(
  138|  1.99M|                            scan_error::invalid_scanned_value,
  139|  1.99M|                            "Invalid float value");
  140|  1.99M|                    }
  141|  1.99M|                    return res;
  142|  1.99M|                };
  143|  1.99M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  1.99M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  1.99M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 73.9k, False: 1.91M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  73.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|  73.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  73.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|  73.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|  73.9k|    }                                                  \
  |  |   70|  1.99M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  1.91M|            }
  145|  1.99M|        }
  146|  1.91M|        else {
  147|  1.91M|            SCN_TRY_ASSIGN(
  148|  1.91M|                it,
  149|  1.91M|                do_read_source_impl(
  150|  1.91M|                    r,
  151|  1.91M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  1.91M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  1.91M|        }
  154|       |
  155|  1.91M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  1.91M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 1.90M, False: 11.8k]
  |  Branch (157:48): [True: 1.88M, False: 18.6k]
  ------------------
  158|  1.91M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.80M, False: 85.1k]
  ------------------
  159|  1.91M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.79M, False: 4.19k]
  ------------------
  160|  1.79M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.79M|        }
  162|       |
  163|  1.91M|        handle_separators();
  164|       |
  165|  1.91M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 1.91M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  1.91M|        return it;
  178|  1.91M|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  1.99M|    {
  226|  1.99M|        auto it = ranges::begin(range);
  227|  1.99M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 1.96M, False: 30.4k]
  ------------------
  228|  1.96M|            return unexpected(r.error());
  229|  1.96M|        }
  230|  30.4k|        else {
  231|  30.4k|            it = *r;
  232|  30.4k|        }
  233|       |
  234|  30.4k|        if (auto r = read_matching_string_classic_nocase(
  235|  30.4k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  30.4k|            !r) {
  ------------------
  |  Branch (236:13): [True: 11.8k, False: 18.6k]
  ------------------
  237|  11.8k|            m_kind = float_kind::inf_short;
  238|  11.8k|            return it;
  239|  11.8k|        }
  240|  18.6k|        else {
  241|  18.6k|            m_kind = float_kind::inf_long;
  242|  18.6k|            return *r;
  243|  18.6k|        }
  244|  30.4k|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  1.96M|    {
  249|  1.96M|        auto it = ranges::begin(range);
  250|  1.96M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 1.86M, False: 90.8k]
  ------------------
  251|  1.86M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  1.86M|                scan_error::invalid_scanned_value,
  253|  1.86M|                "Invalid floating-point NaN value"));
  254|  1.86M|        }
  255|  90.8k|        else {
  256|  90.8k|            it = *r;
  257|  90.8k|        }
  258|       |
  259|  90.8k|        if (auto r = read_matching_code_unit(
  260|  90.8k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|  90.8k|            !r) {
  ------------------
  |  Branch (261:13): [True: 85.1k, False: 5.64k]
  ------------------
  262|  85.1k|            m_kind = float_kind::nan_simple;
  263|  85.1k|            return it;
  264|  85.1k|        }
  265|  5.64k|        else {
  266|  5.64k|            it = *r;
  267|  5.64k|        }
  268|       |
  269|  5.64k|        auto payload_beg_it = it;
  270|  5.64k|        it = read_while_code_unit(
  271|  5.64k|            ranges::subrange{it, ranges::end(range)},
  272|  5.64k|            [](char_type ch) SCN_NOEXCEPT {
  273|  5.64k|                return is_ascii_char(ch) &&
  274|  5.64k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  5.64k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  5.64k|            });
  277|  5.64k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  5.64k|        m_kind = float_kind::nan_with_payload;
  280|  5.64k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 4.19k, False: 1.44k]
  ------------------
  281|  5.64k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  4.19k|            return *r;
  283|  4.19k|        }
  284|  1.44k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  1.44k|                                     "Invalid floating-point NaN payload");
  286|  5.64k|    }
_ZZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlwE_clEw:
  272|  42.0k|            [](char_type ch) SCN_NOEXCEPT {
  273|  42.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 41.9k, False: 83]
  ------------------
  274|  42.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 37.1k, False: 4.74k]
  |  Branch (274:39): [True: 25.7k, False: 11.4k]
  |  Branch (274:54): [True: 4.77k, False: 11.4k]
  |  Branch (274:67): [True: 4.65k, False: 111]
  ------------------
  275|  41.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 6.80k, False: 4.74k]
  |  Branch (275:39): [True: 3.70k, False: 3.10k]
  |  Branch (275:53): [True: 2.99k, False: 4.85k]
  ------------------
  276|  42.0k|            });
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.31M|    {
  220|  1.31M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.31M|    }
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   315k|    {
  292|   315k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 48.0k, False: 267k]
  ------------------
  293|  48.0k|            auto beg_exp_it = ranges::begin(range);
  294|  48.0k|            auto it = *r;
  295|       |
  296|  48.0k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 47.8k, False: 202]
  ------------------
  297|  48.0k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  47.8k|                it = r_sign->first;
  299|  47.8k|            }
  300|       |
  301|  48.0k|            if (auto r_exp = read_while1_code_unit(
  302|  48.0k|                    ranges::subrange{it, ranges::end(range)},
  303|  48.0k|                    [](char_type ch)
  304|  48.0k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  48.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  48.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 916, False: 47.1k]
  |  |  ------------------
  ------------------
  306|    916|                it = beg_exp_it;
  307|    916|            }
  308|  47.1k|            else {
  309|  47.1k|                it = *r_exp;
  310|  47.1k|            }
  311|       |
  312|  48.0k|            return it;
  313|  48.0k|        }
  314|   267k|        else {
  315|   267k|            return ranges::begin(range);
  316|   267k|        }
  317|   315k|    }
_ZZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  304|   159k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|   551k|    {
  365|   551k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   551k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 351k, False: 199k]
  |  Branch (366:50): [True: 33.4k, False: 318k]
  ------------------
  367|       |
  368|   551k|        auto it = ranges::begin(range);
  369|   551k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   551k|        if (auto r =
  372|   551k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   551k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.9k, False: 490k]
  |  |  ------------------
  ------------------
  374|  60.9k|            return r.transform_error(
  375|  60.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  60.9k|                                              "Invalid floating-point value"));
  377|  60.9k|        }
  378|   490k|        else {
  379|   490k|            digits_count += ranges::distance(it, *r);
  380|   490k|            it = *r;
  381|   490k|        }
  382|       |
  383|   490k|        m_integral_part_length = digits_count;
  384|   490k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 64.3k, False: 426k]
  ------------------
  385|   490k|                ranges::subrange{it, ranges::end(range)},
  386|   490k|                m_locale_options.decimal_point)) {
  387|  64.3k|            it = *r;
  388|  64.3k|        }
  389|       |
  390|   490k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 54.6k, False: 435k]
  ------------------
  391|   490k|                                     false)) {
  392|  54.6k|            digits_count += ranges::distance(it, *r);
  393|  54.6k|            it = *r;
  394|  54.6k|        }
  395|       |
  396|   490k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 490k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   490k|        auto beg_exp_it = it;
  402|   490k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 315k, False: 175k]
  ------------------
  403|   315k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   315k|        }
  405|   490k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 18.5k, False: 472k]
  |  Branch (405:29): [True: 10.5k, False: 7.98k]
  ------------------
  406|  10.5k|            return unexpected_scan_error(
  407|  10.5k|                scan_error::invalid_scanned_value,
  408|  10.5k|                "No exponent given to scientific float");
  409|  10.5k|        }
  410|       |
  411|   480k|        m_kind =
  412|   480k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 432k, False: 47.1k]
  ------------------
  413|       |
  414|   480k|        return it;
  415|   490k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  1.04M|    {
  185|  1.04M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04M]
  |  |  |  Branch (153:45): [True: 0, False: 1.04M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  1.04M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  1.04M|        return read_while1_code_unit(
  195|  1.04M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  1.04M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  1.04M|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|  5.27M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  1.99M|    {
  423|  1.99M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  1.99M|        const bool allowed_nonhex =
  425|  1.99M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  1.99M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  1.99M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 1.96M, False: 30.4k]
  |  Branch (428:45): [True: 0, False: 1.96M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  1.99M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 30.4k, False: 1.96M]
  ------------------
  434|  30.4k|            return *r;
  435|  30.4k|        }
  436|       |
  437|  1.96M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 1.87M, False: 89.3k]
  |  Branch (437:45): [True: 1.44k, False: 1.86M]
  ------------------
  438|  1.44k|            return unexpected(r.error());
  439|  1.44k|        }
  440|  1.95M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 89.3k, False: 1.86M]
  ------------------
  441|  89.3k|            return *r;
  442|  89.3k|        }
  443|       |
  444|  1.86M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.31M, False: 551k]
  |  Branch (444:28): [True: 403k, False: 913k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   403k|            auto it = ranges::begin(range);
  448|       |
  449|   403k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 13.5k, False: 390k]
  ------------------
  450|  13.5k|                m_kind = float_kind::hex_with_prefix;
  451|  13.5k|                it = *r;
  452|  13.5k|            }
  453|   390k|            else {
  454|   390k|                m_kind = float_kind::hex_without_prefix;
  455|   390k|            }
  456|       |
  457|   403k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   403k|        }
  459|  1.46M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 551k, False: 913k]
  |  Branch (459:34): [True: 551k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   551k|            m_kind = float_kind::generic;
  463|   551k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   551k|        }
  465|   913k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   913k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.4k, False: 880k]
  |  |  ------------------
  ------------------
  471|  33.4k|                m_kind = float_kind::hex_with_prefix;
  472|  33.4k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  33.4k|            }
  474|       |
  475|   880k|            m_kind = float_kind::generic;
  476|   880k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   880k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   913k|        }
  478|  1.86M|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   437k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   437k|                    auto res = read_all(rr);
  136|   437k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 358, False: 436k]
  |  |  ------------------
  ------------------
  137|    358|                        return unexpected_scan_error(
  138|    358|                            scan_error::invalid_scanned_value,
  139|    358|                            "Invalid float value");
  140|    358|                    }
  141|   436k|                    return res;
  142|   437k|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|   880k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   880k|                    auto res = read_all(rr);
  136|   880k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|   880k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 715, False: 879k]
  |  |  ------------------
  ------------------
  137|    715|                        return unexpected_scan_error(
  138|    715|                            scan_error::invalid_scanned_value,
  139|    715|                            "Invalid float value");
  140|    715|                    }
  141|   879k|                    return res;
  142|   880k|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  2.06M|    {
  482|  2.06M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 2.06M, False: 0]
  ------------------
  483|  2.06M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 2.06M, False: 0]
  ------------------
  484|  2.06M|            return;
  485|  2.06M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   201k|    {
  577|   201k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   201k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   201k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   201k|        float_reader<CharT> rd{};
  581|   201k|        return read_impl<range_nocvref_t>(
  582|   201k|            range, rd,
  583|   201k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   201k|                return r.read_source(SCN_FWD(args)...);
  585|   201k|            },
  586|   201k|            value);
  587|   201k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   682k|    {
  633|   682k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   682k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   682k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.6k, False: 657k]
  |  |  ------------------
  ------------------
  635|  24.6k|            return unexpected(r.error());
  636|  24.6k|        }
  637|       |
  638|   657k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   657k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   657k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   657k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   657k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.2k, False: 632k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.2k|    }                                                  \
  |  |  |  |   70|   657k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   632k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   632k|        return ranges::next(ranges::begin(range), n);
  640|   657k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|   707k|    {
   98|   707k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   707k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 159k, False: 547k]
  ------------------
  102|       |
  103|   707k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   707k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   707k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   707k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.2k, False: 682k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.2k|    }                                                  \
  |  |  |  |   70|   707k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   682k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   682k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   707k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   201k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   201k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   201k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   205k|    {
  577|   205k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   205k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   205k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   205k|        float_reader<CharT> rd{};
  581|   205k|        return read_impl<range_nocvref_t>(
  582|   205k|            range, rd,
  583|   205k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   205k|                return r.read_source(SCN_FWD(args)...);
  585|   205k|            },
  586|   205k|            value);
  587|   205k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|   691k|    {
  633|   691k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   691k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.0k, False: 666k]
  |  |  ------------------
  ------------------
  635|  25.0k|            return unexpected(r.error());
  636|  25.0k|        }
  637|       |
  638|   666k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|   666k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   666k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   666k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   666k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 642k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|   666k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   642k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|   642k|        return ranges::next(ranges::begin(range), n);
  640|   666k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|   716k|    {
   98|   716k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   716k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   716k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|   716k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 164k, False: 551k]
  ------------------
  102|       |
  103|   716k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|   716k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   716k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   716k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 691k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|   716k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|   691k|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|   716k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   205k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   205k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   205k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  1.66M|    {
  570|  1.66M|        detail::check_float_type_specs(specs, eh);
  571|  1.66M|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|  1.64M|    {
  644|  1.64M|        unsigned options{};
  645|  1.64M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 444k, False: 1.20M]
  ------------------
  646|   444k|            options |= float_reader_base::allow_thsep;
  647|   444k|        }
  648|       |
  649|  1.64M|        SCN_GCC_COMPAT_PUSH
  650|  1.64M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  1.64M|        switch (specs.type) {
  653|   262k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 262k, False: 1.38M]
  ------------------
  654|   262k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  61.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 61.3k, False: 1.58M]
  ------------------
  657|  61.3k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|   483k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 483k, False: 1.16M]
  ------------------
  660|   483k|                return options | float_reader_base::allow_hex;
  661|       |
  662|   395k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 395k, False: 1.25M]
  ------------------
  663|   395k|                return options | float_reader_base::allow_scientific |
  664|   395k|                       float_reader_base::allow_fixed;
  665|       |
  666|   444k|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 444k, False: 1.20M]
  ------------------
  667|   444k|                return options | float_reader_base::allow_scientific |
  668|   444k|                       float_reader_base::allow_fixed |
  669|   444k|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 1.64M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  1.64M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  1.64M|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|  1.64M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   437k|    {
  596|   437k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   437k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   437k|#if !SCN_DISABLE_LOCALE
  600|   437k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 119k, False: 317k]
  ------------------
  601|   119k|            return read_impl<range_nocvref_t>(
  602|   119k|                range, rd,
  603|   119k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   119k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   119k|                },
  606|   119k|                value, loc);
  607|   119k|        }
  608|   317k|#endif
  609|       |
  610|   317k|        return read_impl<range_nocvref_t>(
  611|   317k|            range, rd,
  612|   317k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   317k|                return r.read_source(SCN_FWD(args)...);
  614|   317k|            },
  615|   317k|            value);
  616|   437k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   119k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   119k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   119k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   390k|    {
   86|   390k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   390k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   390k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 390k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   390k|        return read_source_impl(range);
   92|   390k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   317k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   317k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   317k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   481k|    {
  596|   481k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   481k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   481k|#if !SCN_DISABLE_LOCALE
  600|   481k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 134k, False: 347k]
  ------------------
  601|   134k|            return read_impl<range_nocvref_t>(
  602|   134k|                range, rd,
  603|   134k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   134k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   134k|                },
  606|   134k|                value, loc);
  607|   134k|        }
  608|   347k|#endif
  609|       |
  610|   347k|        return read_impl<range_nocvref_t>(
  611|   347k|            range, rd,
  612|   347k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   347k|                return r.read_source(SCN_FWD(args)...);
  614|   347k|            },
  615|   347k|            value);
  616|   481k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   134k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   134k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   134k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   347k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   347k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   347k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   486k|    {
  596|   486k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   486k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   486k|#if !SCN_DISABLE_LOCALE
  600|   486k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 136k, False: 349k]
  ------------------
  601|   136k|            return read_impl<range_nocvref_t>(
  602|   136k|                range, rd,
  603|   136k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   136k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   136k|                },
  606|   136k|                value, loc);
  607|   136k|        }
  608|   349k|#endif
  609|       |
  610|   349k|        return read_impl<range_nocvref_t>(
  611|   349k|            range, rd,
  612|   349k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   349k|                return r.read_source(SCN_FWD(args)...);
  614|   349k|            },
  615|   349k|            value);
  616|   486k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   136k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   136k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   136k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   349k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   349k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   349k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  26.9k|    {
  577|  26.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  26.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  26.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  26.9k|        float_reader<CharT> rd{};
  581|  26.9k|        return read_impl<range_nocvref_t>(
  582|  26.9k|            range, rd,
  583|  26.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  26.9k|                return r.read_source(SCN_FWD(args)...);
  585|  26.9k|            },
  586|  26.9k|            value);
  587|  26.9k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   107k|    {
  633|   107k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   107k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58.3k, False: 49.3k]
  |  |  ------------------
  ------------------
  635|  58.3k|            return unexpected(r.error());
  636|  58.3k|        }
  637|       |
  638|  49.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  49.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 49.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  49.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  49.3k|        return ranges::next(ranges::begin(range), n);
  640|  49.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  26.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  26.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  26.9k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   269k|    {
   73|   269k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 269k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   269k|        return read_source_impl(range);
   79|   269k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   323k|    {
  112|   323k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 323k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   323k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   323k|        auto it = sign_result.first;
  115|   323k|        m_sign = sign_result.second;
  116|       |
  117|   323k|        auto digits_begin = it;
  118|   323k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   323k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   323k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   323k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   323k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   323k|                SCN_TRY_ASSIGN(
  124|   323k|                    it,
  125|   323k|                    do_read_source_impl(
  126|   323k|                        r,
  127|   323k|                        [&](auto&& rr) {
  128|   323k|                            return read_regular_float(SCN_FWD(rr));
  129|   323k|                        },
  130|   323k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   323k|            }
  132|   323k|            else {
  133|   323k|                auto cb = [&](auto&& rr)
  134|   323k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   323k|                    auto res = read_all(rr);
  136|   323k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   323k|                        return unexpected_scan_error(
  138|   323k|                            scan_error::invalid_scanned_value,
  139|   323k|                            "Invalid float value");
  140|   323k|                    }
  141|   323k|                    return res;
  142|   323k|                };
  143|   323k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   323k|            }
  145|   323k|        }
  146|   323k|        else {
  147|   323k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 175k, False: 148k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   175k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   175k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   175k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   175k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   175k|    }                                                  \
  |  |   70|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|   148k|                it,
  149|   148k|                do_read_source_impl(
  150|   148k|                    r,
  151|   148k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|   148k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|   148k|        }
  154|       |
  155|   148k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|   148k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 148k, False: 0]
  |  Branch (157:48): [True: 148k, False: 0]
  ------------------
  158|   148k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 148k, False: 0]
  ------------------
  159|   148k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 148k, False: 0]
  ------------------
  160|   148k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|   148k|        }
  162|       |
  163|   148k|        handle_separators();
  164|       |
  165|   148k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 148k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|   148k|        return it;
  178|   148k|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   323k|    {
  423|   323k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   323k|        const bool allowed_nonhex =
  425|   323k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   323k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   323k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 323k, False: 0]
  |  Branch (428:45): [True: 0, False: 323k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   323k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 323k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   323k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 323k, False: 0]
  |  Branch (437:45): [True: 0, False: 323k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   323k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 323k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   323k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 188k, False: 134k]
  |  Branch (444:28): [True: 53.8k, False: 134k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  53.8k|            auto it = ranges::begin(range);
  448|       |
  449|  53.8k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 53.8k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  53.8k|            else {
  454|  53.8k|                m_kind = float_kind::hex_without_prefix;
  455|  53.8k|            }
  456|       |
  457|  53.8k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  53.8k|        }
  459|   269k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 134k, False: 134k]
  |  Branch (459:34): [True: 134k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   134k|            m_kind = float_kind::generic;
  463|   134k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   134k|        }
  465|   134k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   134k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|   134k|            m_kind = float_kind::generic;
  476|   134k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   134k|        }
  478|   323k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   323k|    {
  226|   323k|        auto it = ranges::begin(range);
  227|   323k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 323k, False: 0]
  ------------------
  228|   323k|            return unexpected(r.error());
  229|   323k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   323k|    {
  249|   323k|        auto it = ranges::begin(range);
  250|   323k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 323k, False: 0]
  ------------------
  251|   323k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   323k|                scan_error::invalid_scanned_value,
  253|   323k|                "Invalid floating-point NaN value"));
  254|   323k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|   188k|    {
  220|   188k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|   188k|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  53.8k|    {
  323|  53.8k|        auto it = ranges::begin(range);
  324|       |
  325|  53.8k|        std::ptrdiff_t digits_count = 0;
  326|  53.8k|        if (auto r =
  327|  53.8k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  53.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.9k, False: 26.9k]
  |  |  ------------------
  ------------------
  329|  26.9k|            return r.transform_error(map_parse_error_to_scan_error(
  330|  26.9k|                scan_error::invalid_scanned_value,
  331|  26.9k|                "Invalid hexadecimal floating-point value"));
  332|  26.9k|        }
  333|  26.9k|        else {
  334|  26.9k|            digits_count += ranges::distance(it, *r);
  335|  26.9k|            it = *r;
  336|  26.9k|        }
  337|       |
  338|  26.9k|        m_integral_part_length = digits_count;
  339|  26.9k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 26.9k]
  ------------------
  340|  26.9k|                ranges::subrange{it, ranges::end(range)},
  341|  26.9k|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|  26.9k|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 26.9k]
  ------------------
  346|  26.9k|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|  26.9k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.9k]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|  26.9k|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|  26.9k|        return it;
  359|  26.9k|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  80.7k|    {
  203|  80.7k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.7k]
  |  |  |  Branch (153:45): [True: 0, False: 80.7k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  80.7k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  80.7k|        return read_while1_code_unit(
  213|  80.7k|            SCN_FWD(range),
  ------------------
  |  |  248|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  80.7k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  80.7k|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  214|   134k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  291|   148k|    {
  292|   148k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 0, False: 148k]
  ------------------
  293|      0|            auto beg_exp_it = ranges::begin(range);
  294|      0|            auto it = *r;
  295|       |
  296|      0|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 0, False: 0]
  ------------------
  297|      0|                    ranges::subrange{it, ranges::end(range)})) {
  298|      0|                it = r_sign->first;
  299|      0|            }
  300|       |
  301|      0|            if (auto r_exp = read_while1_code_unit(
  302|      0|                    ranges::subrange{it, ranges::end(range)},
  303|      0|                    [](char_type ch)
  304|      0|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  306|      0|                it = beg_exp_it;
  307|      0|            }
  308|      0|            else {
  309|      0|                it = *r_exp;
  310|      0|            }
  311|       |
  312|      0|            return it;
  313|      0|        }
  314|   148k|        else {
  315|   148k|            return ranges::begin(range);
  316|   148k|        }
  317|   148k|    }
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   269k|    {
  365|   269k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   269k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 215k, False: 53.8k]
  |  Branch (366:50): [True: 26.9k, False: 188k]
  ------------------
  367|       |
  368|   269k|        auto it = ranges::begin(range);
  369|   269k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   269k|        if (auto r =
  372|   269k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   269k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 148k]
  |  |  ------------------
  ------------------
  374|   121k|            return r.transform_error(
  375|   121k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   121k|                                              "Invalid floating-point value"));
  377|   121k|        }
  378|   148k|        else {
  379|   148k|            digits_count += ranges::distance(it, *r);
  380|   148k|            it = *r;
  381|   148k|        }
  382|       |
  383|   148k|        m_integral_part_length = digits_count;
  384|   148k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 148k]
  ------------------
  385|   148k|                ranges::subrange{it, ranges::end(range)},
  386|   148k|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|   148k|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 148k]
  ------------------
  391|   148k|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|   148k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|   148k|        auto beg_exp_it = it;
  402|   148k|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 121k, False: 26.9k]
  ------------------
  403|   121k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   121k|        }
  405|   148k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 26.9k, False: 121k]
  |  Branch (405:29): [True: 26.9k, False: 0]
  ------------------
  406|  26.9k|            return unexpected_scan_error(
  407|  26.9k|                scan_error::invalid_scanned_value,
  408|  26.9k|                "No exponent given to scientific float");
  409|  26.9k|        }
  410|       |
  411|   121k|        m_kind =
  412|   121k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 121k, False: 0]
  ------------------
  413|       |
  414|   121k|        return it;
  415|   148k|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   417k|    {
  185|   417k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 417k]
  |  |  |  Branch (153:45): [True: 0, False: 417k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   417k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   417k|        return read_while1_code_unit(
  195|   417k|            SCN_FWD(range),
  ------------------
  |  |  248|   417k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   417k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   417k|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  196|   713k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  26.9k|    {
  577|  26.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  26.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  26.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  26.9k|        float_reader<CharT> rd{};
  581|  26.9k|        return read_impl<range_nocvref_t>(
  582|  26.9k|            range, rd,
  583|  26.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  26.9k|                return r.read_source(SCN_FWD(args)...);
  585|  26.9k|            },
  586|  26.9k|            value);
  587|  26.9k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   107k|    {
  633|   107k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   107k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58.3k, False: 49.3k]
  |  |  ------------------
  ------------------
  635|  58.3k|            return unexpected(r.error());
  636|  58.3k|        }
  637|       |
  638|  49.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  49.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 49.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  49.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  49.3k|        return ranges::next(ranges::begin(range), n);
  640|  49.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  26.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  26.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  26.9k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  26.9k|    {
  577|  26.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  26.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  26.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  26.9k|        float_reader<CharT> rd{};
  581|  26.9k|        return read_impl<range_nocvref_t>(
  582|  26.9k|            range, rd,
  583|  26.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  26.9k|                return r.read_source(SCN_FWD(args)...);
  585|  26.9k|            },
  586|  26.9k|            value);
  587|  26.9k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   107k|    {
  633|   107k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   107k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58.3k, False: 49.3k]
  |  |  ------------------
  ------------------
  635|  58.3k|            return unexpected(r.error());
  636|  58.3k|        }
  637|       |
  638|  49.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  49.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 49.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  49.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  49.3k|        return ranges::next(ranges::begin(range), n);
  640|  49.3k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  26.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  26.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  26.9k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  80.7k|    {
  596|  80.7k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  80.7k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  80.7k|#if !SCN_DISABLE_LOCALE
  600|  80.7k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 17.9k, False: 62.8k]
  ------------------
  601|  17.9k|            return read_impl<range_nocvref_t>(
  602|  17.9k|                range, rd,
  603|  17.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  17.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  17.9k|                },
  606|  17.9k|                value, loc);
  607|  17.9k|        }
  608|  62.8k|#endif
  609|       |
  610|  62.8k|        return read_impl<range_nocvref_t>(
  611|  62.8k|            range, rd,
  612|  62.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  62.8k|                return r.read_source(SCN_FWD(args)...);
  614|  62.8k|            },
  615|  62.8k|            value);
  616|  80.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  17.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  17.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  17.9k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  53.8k|    {
   86|  53.8k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  53.8k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  53.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  53.8k|        return read_source_impl(range);
   92|  53.8k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  62.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  62.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  62.8k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  80.7k|    {
  596|  80.7k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  80.7k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  80.7k|#if !SCN_DISABLE_LOCALE
  600|  80.7k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 17.9k, False: 62.8k]
  ------------------
  601|  17.9k|            return read_impl<range_nocvref_t>(
  602|  17.9k|                range, rd,
  603|  17.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  17.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  17.9k|                },
  606|  17.9k|                value, loc);
  607|  17.9k|        }
  608|  62.8k|#endif
  609|       |
  610|  62.8k|        return read_impl<range_nocvref_t>(
  611|  62.8k|            range, rd,
  612|  62.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  62.8k|                return r.read_source(SCN_FWD(args)...);
  614|  62.8k|            },
  615|  62.8k|            value);
  616|  80.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  17.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  17.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  17.9k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  62.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  62.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  62.8k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  80.7k|    {
  596|  80.7k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  80.7k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  80.7k|#if !SCN_DISABLE_LOCALE
  600|  80.7k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 17.9k, False: 62.8k]
  ------------------
  601|  17.9k|            return read_impl<range_nocvref_t>(
  602|  17.9k|                range, rd,
  603|  17.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  17.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  17.9k|                },
  606|  17.9k|                value, loc);
  607|  17.9k|        }
  608|  62.8k|#endif
  609|       |
  610|  62.8k|        return read_impl<range_nocvref_t>(
  611|  62.8k|            range, rd,
  612|  62.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  62.8k|                return r.read_source(SCN_FWD(args)...);
  614|  62.8k|            },
  615|  62.8k|            value);
  616|  80.7k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  17.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  17.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  17.9k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  62.8k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  62.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  62.8k|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIfEET_S5_:
  523|   716k|    {
  524|   716k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   716k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   716k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   716k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 81.0k, False: 635k]
  ------------------
  526|  81.0k|            return -value;
  527|  81.0k|        }
  528|   635k|        return value;
  529|   716k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIfEET_S5_:
  523|   641k|    {
  524|   641k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   641k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 66.1k, False: 575k]
  ------------------
  526|  66.1k|            return -value;
  527|  66.1k|        }
  528|   575k|        return value;
  529|   641k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|   800k|    {
  524|   800k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   800k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 88.9k, False: 712k]
  ------------------
  526|  88.9k|            return -value;
  527|  88.9k|        }
  528|   712k|        return value;
  529|   800k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|   707k|    {
  524|   707k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   707k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 72.4k, False: 634k]
  ------------------
  526|  72.4k|            return -value;
  527|  72.4k|        }
  528|   634k|        return value;
  529|   707k|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIeEET_S5_:
  523|   812k|    {
  524|   812k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   812k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   812k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   812k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 91.6k, False: 721k]
  ------------------
  526|  91.6k|            return -value;
  527|  91.6k|        }
  528|   721k|        return value;
  529|   812k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIeEET_S5_:
  523|   716k|    {
  524|   716k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|   716k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   716k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|   716k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 74.6k, False: 641k]
  ------------------
  526|  74.6k|            return -value;
  527|  74.6k|        }
  528|   641k|        return value;
  529|   716k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  2.36M|{
   69|  2.36M|    auto r = read_one_of_code_unit(range, "+-");
   70|  2.36M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.76M, False: 599k]
  ------------------
   71|  1.76M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.76M, False: 0]
  ------------------
   72|  1.76M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.76M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.76M|    }
   76|       |
   77|   599k|    auto& it = *r;
   78|   599k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 262k, False: 336k]
  ------------------
   79|   262k|        return std::pair{it, sign_type::minus_sign};
   80|   262k|    }
   81|   336k|    return std::pair{it, sign_type::plus_sign};
   82|   599k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  18.8M|{
   51|  18.8M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  18.8M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  57.7k|{
   69|  57.7k|    auto r = read_one_of_code_unit(range, "+-");
   70|  57.7k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 42.8k, False: 14.8k]
  ------------------
   71|  42.8k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 42.6k, False: 202]
  ------------------
   72|  42.6k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  42.6k|        }
   74|    202|        return unexpected(eof_error::eof);
   75|  42.8k|    }
   76|       |
   77|  14.8k|    auto& it = *r;
   78|  14.8k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 5.72k, False: 9.10k]
  ------------------
   79|  5.72k|        return std::pair{it, sign_type::minus_sign};
   80|  5.72k|    }
   81|  9.10k|    return std::pair{it, sign_type::plus_sign};
   82|  14.8k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|  98.2k|{
   69|  98.2k|    auto r = read_one_of_code_unit(range, "+-");
   70|  98.2k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 98.2k, False: 0]
  ------------------
   71|  98.2k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 98.2k, False: 0]
  ------------------
   72|  98.2k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  98.2k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  98.2k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  1.99M|{
   69|  1.99M|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.99M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.51M, False: 471k]
  ------------------
   71|  1.51M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.51M, False: 0]
  ------------------
   72|  1.51M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.51M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.51M|    }
   76|       |
   77|   471k|    auto& it = *r;
   78|   471k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 214k, False: 256k]
  ------------------
   79|   214k|        return std::pair{it, sign_type::minus_sign};
   80|   214k|    }
   81|   256k|    return std::pair{it, sign_type::plus_sign};
   82|   471k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  8.62M|{
   55|  8.62M|#if WCHAR_MIN < 0
   56|  8.62M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 8.61M, False: 4.29k]
  |  Branch (56:20): [True: 8.52M, False: 96.6k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  8.52M|        return char_to_int(static_cast<char>(ch));
   61|  8.52M|    }
   62|   100k|    return 255;
   63|  8.62M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  48.0k|{
   69|  48.0k|    auto r = read_one_of_code_unit(range, "+-");
   70|  48.0k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 34.8k, False: 13.2k]
  ------------------
   71|  34.8k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 34.6k, False: 202]
  ------------------
   72|  34.6k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  34.6k|        }
   74|    202|        return unexpected(eof_error::eof);
   75|  34.8k|    }
   76|       |
   77|  13.2k|    auto& it = *r;
   78|  13.2k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 5.19k, False: 8.01k]
  ------------------
   79|  5.19k|        return std::pair{it, sign_type::minus_sign};
   80|  5.19k|    }
   81|  8.01k|    return std::pair{it, sign_type::plus_sign};
   82|  13.2k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   323k|{
   69|   323k|    auto r = read_one_of_code_unit(range, "+-");
   70|   323k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 323k, False: 0]
  ------------------
   71|   323k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 323k, False: 0]
  ------------------
   72|   323k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   323k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   323k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.39M|{
   43|  2.39M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18.9k, False: 2.37M]
  |  |  ------------------
  ------------------
   44|  18.9k|        return unexpected(e);
   45|  18.9k|    }
   46|       |
   47|  2.37M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 2.37M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  2.37M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  2.37M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  121|   218k|    {
  122|   218k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   218k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   218k|                          basic_contiguous_scan_context<char_type>>) {
  126|   218k|            auto rd = make_reader<T, char_type>();
  127|   218k|            return impl(rd, range, value);
  128|   218k|        }
  129|   218k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   218k|            auto rd = make_reader<T, char_type>();
  131|   218k|            if (!is_segment_contiguous(range)) {
  132|   218k|                return impl(rd, range, value);
  133|   218k|            }
  134|   218k|            auto crange = get_as_contiguous(range);
  135|   218k|            SCN_TRY(it, impl(rd, crange, value));
  136|   218k|            return ranges_polyfill::batch_next(
  137|   218k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   218k|        }
  139|   218k|        else {
  140|   218k|            SCN_EXPECT(false);
  141|   218k|            SCN_UNREACHABLE;
  142|   218k|        }
  143|   218k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   218k|    {
  112|   218k|        SCN_TRY(it,
  ------------------
  |  |   71|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.89k, False: 216k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.89k|    }                                                  \
  |  |  |  |   70|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   216k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   216k|                    .transform_error(make_eof_scan_error));
  115|   216k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   216k|                               loc);
  117|   218k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|   246k|    {
  122|   246k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   246k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   246k|                          basic_contiguous_scan_context<char_type>>) {
  126|   246k|            auto rd = make_reader<T, char_type>();
  127|   246k|            return impl(rd, range, value);
  128|   246k|        }
  129|   246k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   246k|            auto rd = make_reader<T, char_type>();
  131|   246k|            if (!is_segment_contiguous(range)) {
  132|   246k|                return impl(rd, range, value);
  133|   246k|            }
  134|   246k|            auto crange = get_as_contiguous(range);
  135|   246k|            SCN_TRY(it, impl(rd, crange, value));
  136|   246k|            return ranges_polyfill::batch_next(
  137|   246k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   246k|        }
  139|   246k|        else {
  140|   246k|            SCN_EXPECT(false);
  141|   246k|            SCN_UNREACHABLE;
  142|   246k|        }
  143|   246k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   246k|    {
  112|   246k|        SCN_TRY(it,
  ------------------
  |  |   71|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.19k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.19k|    }                                                  \
  |  |  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   244k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   244k|                    .transform_error(make_eof_scan_error));
  115|   244k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   244k|                               loc);
  117|   246k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  121|   252k|    {
  122|   252k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   252k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   252k|                          basic_contiguous_scan_context<char_type>>) {
  126|   252k|            auto rd = make_reader<T, char_type>();
  127|   252k|            return impl(rd, range, value);
  128|   252k|        }
  129|   252k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   252k|            auto rd = make_reader<T, char_type>();
  131|   252k|            if (!is_segment_contiguous(range)) {
  132|   252k|                return impl(rd, range, value);
  133|   252k|            }
  134|   252k|            auto crange = get_as_contiguous(range);
  135|   252k|            SCN_TRY(it, impl(rd, crange, value));
  136|   252k|            return ranges_polyfill::batch_next(
  137|   252k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   252k|        }
  139|   252k|        else {
  140|   252k|            SCN_EXPECT(false);
  141|   252k|            SCN_UNREACHABLE;
  142|   252k|        }
  143|   252k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   252k|    {
  112|   252k|        SCN_TRY(it,
  ------------------
  |  |   71|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.34k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.34k|    }                                                  \
  |  |  |  |   70|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   249k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   249k|                    .transform_error(make_eof_scan_error));
  115|   249k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   249k|                               loc);
  117|   252k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|  98.3k|{
   43|  98.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.3k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|  98.3k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 98.3k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  98.3k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  98.3k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.56k|    {
  122|  7.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.56k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.56k|            auto rd = make_reader<T, char_type>();
  127|  7.56k|            return impl(rd, range, value);
  128|  7.56k|        }
  129|  7.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.56k|            auto rd = make_reader<T, char_type>();
  131|  7.56k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.56k, False: 0]
  ------------------
  132|  7.56k|                return impl(rd, range, value);
  133|  7.56k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.56k|        else {
  140|  7.56k|            SCN_EXPECT(false);
  141|  7.56k|            SCN_UNREACHABLE;
  142|  7.56k|        }
  143|  7.56k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.56k|    {
  112|  7.56k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 7.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  7.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.56k|                    .transform_error(make_eof_scan_error));
  115|  7.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.56k|                               loc);
  117|  7.56k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.56k|    {
  122|  7.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.56k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.56k|            auto rd = make_reader<T, char_type>();
  127|  7.56k|            return impl(rd, range, value);
  128|  7.56k|        }
  129|  7.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.56k|            auto rd = make_reader<T, char_type>();
  131|  7.56k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.56k, False: 0]
  ------------------
  132|  7.56k|                return impl(rd, range, value);
  133|  7.56k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.56k|        else {
  140|  7.56k|            SCN_EXPECT(false);
  141|  7.56k|            SCN_UNREACHABLE;
  142|  7.56k|        }
  143|  7.56k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.56k|    {
  112|  7.56k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 7.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  7.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.56k|                    .transform_error(make_eof_scan_error));
  115|  7.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.56k|                               loc);
  117|  7.56k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  7.56k|    {
  122|  7.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  7.56k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  7.56k|            auto rd = make_reader<T, char_type>();
  127|  7.56k|            return impl(rd, range, value);
  128|  7.56k|        }
  129|  7.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.56k|            auto rd = make_reader<T, char_type>();
  131|  7.56k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 7.56k, False: 0]
  ------------------
  132|  7.56k|                return impl(rd, range, value);
  133|  7.56k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  7.56k|        else {
  140|  7.56k|            SCN_EXPECT(false);
  141|  7.56k|            SCN_UNREACHABLE;
  142|  7.56k|        }
  143|  7.56k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  7.56k|    {
  112|  7.56k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 7.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  7.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  7.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  7.56k|                    .transform_error(make_eof_scan_error));
  115|  7.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  7.56k|                               loc);
  117|  7.56k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  222|   517k|    {
  223|   517k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   517k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   517k|                          basic_contiguous_scan_context<char_type>>) {
  227|   517k|            auto rd = make_reader<T, char_type>();
  228|   517k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 517k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   517k|            return impl(rd, range, value);
  233|   517k|        }
  234|   517k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   517k|            auto rd = make_reader<T, char_type>();
  236|   517k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   517k|                return unexpected(e);
  238|   517k|            }
  239|       |
  240|   517k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   517k|                return impl(rd, range, value);
  242|   517k|            }
  243|       |
  244|   517k|            auto crange = get_as_contiguous(range);
  245|   517k|            SCN_TRY(it, impl(rd, crange, value));
  246|   517k|            return ranges_polyfill::batch_next(
  247|   517k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   517k|        }
  249|   517k|        else {
  250|   517k|            SCN_EXPECT(false);
  251|   517k|            SCN_UNREACHABLE;
  252|   517k|        }
  253|   517k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   517k|    {
  205|   517k|        SCN_TRY(it,
  ------------------
  |  |   71|   517k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   517k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   517k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.04k, False: 512k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.04k|    }                                                  \
  |  |  |  |   70|   517k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   512k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   512k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   512k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   512k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 512k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   512k|        return rd.read_specs(subr, specs, value, loc);
  218|   512k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|   575k|    {
  223|   575k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   575k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   575k|                          basic_contiguous_scan_context<char_type>>) {
  227|   575k|            auto rd = make_reader<T, char_type>();
  228|   575k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 575k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   575k|            return impl(rd, range, value);
  233|   575k|        }
  234|   575k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   575k|            auto rd = make_reader<T, char_type>();
  236|   575k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   575k|                return unexpected(e);
  238|   575k|            }
  239|       |
  240|   575k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   575k|                return impl(rd, range, value);
  242|   575k|            }
  243|       |
  244|   575k|            auto crange = get_as_contiguous(range);
  245|   575k|            SCN_TRY(it, impl(rd, crange, value));
  246|   575k|            return ranges_polyfill::batch_next(
  247|   575k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   575k|        }
  249|   575k|        else {
  250|   575k|            SCN_EXPECT(false);
  251|   575k|            SCN_UNREACHABLE;
  252|   575k|        }
  253|   575k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   575k|    {
  205|   575k|        SCN_TRY(it,
  ------------------
  |  |   71|   575k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   575k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   575k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.66k, False: 569k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.66k|    }                                                  \
  |  |  |  |   70|   575k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   569k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   569k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   569k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   569k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 569k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   569k|        return rd.read_specs(subr, specs, value, loc);
  218|   569k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  222|   582k|    {
  223|   582k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   582k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   582k|                          basic_contiguous_scan_context<char_type>>) {
  227|   582k|            auto rd = make_reader<T, char_type>();
  228|   582k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 582k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   582k|            return impl(rd, range, value);
  233|   582k|        }
  234|   582k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   582k|            auto rd = make_reader<T, char_type>();
  236|   582k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   582k|                return unexpected(e);
  238|   582k|            }
  239|       |
  240|   582k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   582k|                return impl(rd, range, value);
  242|   582k|            }
  243|       |
  244|   582k|            auto crange = get_as_contiguous(range);
  245|   582k|            SCN_TRY(it, impl(rd, crange, value));
  246|   582k|            return ranges_polyfill::batch_next(
  247|   582k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   582k|        }
  249|   582k|        else {
  250|   582k|            SCN_EXPECT(false);
  251|   582k|            SCN_UNREACHABLE;
  252|   582k|        }
  253|   582k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   582k|    {
  205|   582k|        SCN_TRY(it,
  ------------------
  |  |   71|   582k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   582k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   582k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.96k, False: 576k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.96k|    }                                                  \
  |  |  |  |   70|   582k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   576k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   576k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   576k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   576k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   576k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 576k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   576k|        return rd.read_specs(subr, specs, value, loc);
  218|   576k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  25.2k|    {
  223|  25.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  25.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  25.2k|            auto rd = make_reader<T, char_type>();
  228|  25.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  25.2k|                return unexpected(e);
  230|  25.2k|            }
  231|       |
  232|  25.2k|            return impl(rd, range, value);
  233|  25.2k|        }
  234|  25.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  25.2k|            auto rd = make_reader<T, char_type>();
  236|  25.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 25.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  25.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 25.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  25.2k|                return impl(rd, range, value);
  242|  25.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  25.2k|        else {
  250|  25.2k|            SCN_EXPECT(false);
  251|  25.2k|            SCN_UNREACHABLE;
  252|  25.2k|        }
  253|  25.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  25.2k|    {
  205|  25.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  25.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  25.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  25.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  25.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 25.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  25.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  25.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  25.2k|    {
  223|  25.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  25.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  25.2k|            auto rd = make_reader<T, char_type>();
  228|  25.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  25.2k|                return unexpected(e);
  230|  25.2k|            }
  231|       |
  232|  25.2k|            return impl(rd, range, value);
  233|  25.2k|        }
  234|  25.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  25.2k|            auto rd = make_reader<T, char_type>();
  236|  25.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 25.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  25.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 25.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  25.2k|                return impl(rd, range, value);
  242|  25.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  25.2k|        else {
  250|  25.2k|            SCN_EXPECT(false);
  251|  25.2k|            SCN_UNREACHABLE;
  252|  25.2k|        }
  253|  25.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  25.2k|    {
  205|  25.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  25.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  25.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  25.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  25.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 25.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  25.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  25.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  25.2k|    {
  223|  25.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  25.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  25.2k|            auto rd = make_reader<T, char_type>();
  228|  25.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  25.2k|                return unexpected(e);
  230|  25.2k|            }
  231|       |
  232|  25.2k|            return impl(rd, range, value);
  233|  25.2k|        }
  234|  25.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  25.2k|            auto rd = make_reader<T, char_type>();
  236|  25.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 25.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  25.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 25.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  25.2k|                return impl(rd, range, value);
  242|  25.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  25.2k|        else {
  250|  25.2k|            SCN_EXPECT(false);
  251|  25.2k|            SCN_UNREACHABLE;
  252|  25.2k|        }
  253|  25.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  25.2k|    {
  205|  25.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  25.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 25.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  25.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  25.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  25.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  25.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  25.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 25.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  25.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  25.2k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  2.01M|{
   43|  2.01M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.2k, False: 1.99M]
  |  |  ------------------
  ------------------
   44|  19.2k|        return unexpected(e);
   45|  19.2k|    }
   46|       |
   47|  1.99M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 1.99M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  1.99M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  1.99M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  121|   181k|    {
  122|   181k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   181k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   181k|                          basic_contiguous_scan_context<char_type>>) {
  126|   181k|            auto rd = make_reader<T, char_type>();
  127|   181k|            return impl(rd, range, value);
  128|   181k|        }
  129|   181k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   181k|            auto rd = make_reader<T, char_type>();
  131|   181k|            if (!is_segment_contiguous(range)) {
  132|   181k|                return impl(rd, range, value);
  133|   181k|            }
  134|   181k|            auto crange = get_as_contiguous(range);
  135|   181k|            SCN_TRY(it, impl(rd, crange, value));
  136|   181k|            return ranges_polyfill::batch_next(
  137|   181k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   181k|        }
  139|   181k|        else {
  140|   181k|            SCN_EXPECT(false);
  141|   181k|            SCN_UNREACHABLE;
  142|   181k|        }
  143|   181k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   181k|    {
  112|   181k|        SCN_TRY(it,
  ------------------
  |  |   71|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.03k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.03k|    }                                                  \
  |  |  |  |   70|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   178k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   178k|                    .transform_error(make_eof_scan_error));
  115|   178k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   178k|                               loc);
  117|   181k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|   203k|    {
  122|   203k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   203k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   203k|                          basic_contiguous_scan_context<char_type>>) {
  126|   203k|            auto rd = make_reader<T, char_type>();
  127|   203k|            return impl(rd, range, value);
  128|   203k|        }
  129|   203k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   203k|            auto rd = make_reader<T, char_type>();
  131|   203k|            if (!is_segment_contiguous(range)) {
  132|   203k|                return impl(rd, range, value);
  133|   203k|            }
  134|   203k|            auto crange = get_as_contiguous(range);
  135|   203k|            SCN_TRY(it, impl(rd, crange, value));
  136|   203k|            return ranges_polyfill::batch_next(
  137|   203k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   203k|        }
  139|   203k|        else {
  140|   203k|            SCN_EXPECT(false);
  141|   203k|            SCN_UNREACHABLE;
  142|   203k|        }
  143|   203k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   203k|    {
  112|   203k|        SCN_TRY(it,
  ------------------
  |  |   71|   203k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.34k, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.34k|    }                                                  \
  |  |  |  |   70|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   201k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   201k|                    .transform_error(make_eof_scan_error));
  115|   201k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   201k|                               loc);
  117|   203k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  121|   207k|    {
  122|   207k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   207k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   207k|                          basic_contiguous_scan_context<char_type>>) {
  126|   207k|            auto rd = make_reader<T, char_type>();
  127|   207k|            return impl(rd, range, value);
  128|   207k|        }
  129|   207k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   207k|            auto rd = make_reader<T, char_type>();
  131|   207k|            if (!is_segment_contiguous(range)) {
  132|   207k|                return impl(rd, range, value);
  133|   207k|            }
  134|   207k|            auto crange = get_as_contiguous(range);
  135|   207k|            SCN_TRY(it, impl(rd, crange, value));
  136|   207k|            return ranges_polyfill::batch_next(
  137|   207k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   207k|        }
  139|   207k|        else {
  140|   207k|            SCN_EXPECT(false);
  141|   207k|            SCN_UNREACHABLE;
  142|   207k|        }
  143|   207k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   207k|    {
  112|   207k|        SCN_TRY(it,
  ------------------
  |  |   71|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.49k, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.49k|    }                                                  \
  |  |  |  |   70|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   205k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   205k|                    .transform_error(make_eof_scan_error));
  115|   205k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   205k|                               loc);
  117|   207k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  222|   442k|    {
  223|   442k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   442k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   442k|                          basic_contiguous_scan_context<char_type>>) {
  227|   442k|            auto rd = make_reader<T, char_type>();
  228|   442k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 442k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   442k|            return impl(rd, range, value);
  233|   442k|        }
  234|   442k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   442k|            auto rd = make_reader<T, char_type>();
  236|   442k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   442k|                return unexpected(e);
  238|   442k|            }
  239|       |
  240|   442k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   442k|                return impl(rd, range, value);
  242|   442k|            }
  243|       |
  244|   442k|            auto crange = get_as_contiguous(range);
  245|   442k|            SCN_TRY(it, impl(rd, crange, value));
  246|   442k|            return ranges_polyfill::batch_next(
  247|   442k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   442k|        }
  249|   442k|        else {
  250|   442k|            SCN_EXPECT(false);
  251|   442k|            SCN_UNREACHABLE;
  252|   442k|        }
  253|   442k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   442k|    {
  205|   442k|        SCN_TRY(it,
  ------------------
  |  |   71|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.48k, False: 437k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.48k|    }                                                  \
  |  |  |  |   70|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   437k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   437k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   437k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   437k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 437k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   437k|        return rd.read_specs(subr, specs, value, loc);
  218|   437k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|   487k|    {
  223|   487k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   487k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   487k|                          basic_contiguous_scan_context<char_type>>) {
  227|   487k|            auto rd = make_reader<T, char_type>();
  228|   487k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 487k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   487k|            return impl(rd, range, value);
  233|   487k|        }
  234|   487k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   487k|            auto rd = make_reader<T, char_type>();
  236|   487k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   487k|                return unexpected(e);
  238|   487k|            }
  239|       |
  240|   487k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   487k|                return impl(rd, range, value);
  242|   487k|            }
  243|       |
  244|   487k|            auto crange = get_as_contiguous(range);
  245|   487k|            SCN_TRY(it, impl(rd, crange, value));
  246|   487k|            return ranges_polyfill::batch_next(
  247|   487k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   487k|        }
  249|   487k|        else {
  250|   487k|            SCN_EXPECT(false);
  251|   487k|            SCN_UNREACHABLE;
  252|   487k|        }
  253|   487k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   487k|    {
  205|   487k|        SCN_TRY(it,
  ------------------
  |  |   71|   487k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   487k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   487k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.12k, False: 481k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.12k|    }                                                  \
  |  |  |  |   70|   487k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   481k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   481k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   481k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   481k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 481k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   481k|        return rd.read_specs(subr, specs, value, loc);
  218|   481k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  222|   493k|    {
  223|   493k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   493k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   493k|                          basic_contiguous_scan_context<char_type>>) {
  227|   493k|            auto rd = make_reader<T, char_type>();
  228|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   493k|            return impl(rd, range, value);
  233|   493k|        }
  234|   493k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   493k|            auto rd = make_reader<T, char_type>();
  236|   493k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   493k|                return unexpected(e);
  238|   493k|            }
  239|       |
  240|   493k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   493k|                return impl(rd, range, value);
  242|   493k|            }
  243|       |
  244|   493k|            auto crange = get_as_contiguous(range);
  245|   493k|            SCN_TRY(it, impl(rd, crange, value));
  246|   493k|            return ranges_polyfill::batch_next(
  247|   493k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   493k|        }
  249|   493k|        else {
  250|   493k|            SCN_EXPECT(false);
  251|   493k|            SCN_UNREACHABLE;
  252|   493k|        }
  253|   493k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   493k|    {
  205|   493k|        SCN_TRY(it,
  ------------------
  |  |   71|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.41k, False: 486k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.41k|    }                                                  \
  |  |  |  |   70|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   486k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   486k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   486k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   486k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 486k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   486k|        return rd.read_specs(subr, specs, value, loc);
  218|   486k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   323k|{
   43|   323k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66, False: 323k]
  |  |  ------------------
  ------------------
   44|     66|        return unexpected(e);
   45|     66|    }
   46|       |
   47|   323k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 323k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   323k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   323k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  26.9k|    {
  122|  26.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  26.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  26.9k|            auto rd = make_reader<T, char_type>();
  127|  26.9k|            return impl(rd, range, value);
  128|  26.9k|        }
  129|  26.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  26.9k|            auto rd = make_reader<T, char_type>();
  131|  26.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 26.9k, False: 0]
  ------------------
  132|  26.9k|                return impl(rd, range, value);
  133|  26.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  26.9k|        else {
  140|  26.9k|            SCN_EXPECT(false);
  141|  26.9k|            SCN_UNREACHABLE;
  142|  26.9k|        }
  143|  26.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  26.9k|    {
  112|  26.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  26.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  26.9k|                    .transform_error(make_eof_scan_error));
  115|  26.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  26.9k|                               loc);
  117|  26.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  26.9k|    {
  122|  26.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  26.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  26.9k|            auto rd = make_reader<T, char_type>();
  127|  26.9k|            return impl(rd, range, value);
  128|  26.9k|        }
  129|  26.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  26.9k|            auto rd = make_reader<T, char_type>();
  131|  26.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 26.9k, False: 0]
  ------------------
  132|  26.9k|                return impl(rd, range, value);
  133|  26.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  26.9k|        else {
  140|  26.9k|            SCN_EXPECT(false);
  141|  26.9k|            SCN_UNREACHABLE;
  142|  26.9k|        }
  143|  26.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  26.9k|    {
  112|  26.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  26.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  26.9k|                    .transform_error(make_eof_scan_error));
  115|  26.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  26.9k|                               loc);
  117|  26.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  26.9k|    {
  122|  26.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  26.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  26.9k|            auto rd = make_reader<T, char_type>();
  127|  26.9k|            return impl(rd, range, value);
  128|  26.9k|        }
  129|  26.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  26.9k|            auto rd = make_reader<T, char_type>();
  131|  26.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 26.9k, False: 0]
  ------------------
  132|  26.9k|                return impl(rd, range, value);
  133|  26.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  26.9k|        else {
  140|  26.9k|            SCN_EXPECT(false);
  141|  26.9k|            SCN_UNREACHABLE;
  142|  26.9k|        }
  143|  26.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  26.9k|    {
  112|  26.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 26.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  26.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  26.9k|                    .transform_error(make_eof_scan_error));
  115|  26.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  26.9k|                               loc);
  117|  26.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.8k|    {
  223|  80.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.8k|            auto rd = make_reader<T, char_type>();
  228|  80.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.8k|                return unexpected(e);
  230|  80.8k|            }
  231|       |
  232|  80.8k|            return impl(rd, range, value);
  233|  80.8k|        }
  234|  80.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.8k|            auto rd = make_reader<T, char_type>();
  236|  80.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.8k|                return impl(rd, range, value);
  242|  80.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.8k|        else {
  250|  80.8k|            SCN_EXPECT(false);
  251|  80.8k|            SCN_UNREACHABLE;
  252|  80.8k|        }
  253|  80.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.8k|    {
  205|  80.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 80.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|  80.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.8k|    {
  223|  80.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.8k|            auto rd = make_reader<T, char_type>();
  228|  80.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.8k|                return unexpected(e);
  230|  80.8k|            }
  231|       |
  232|  80.8k|            return impl(rd, range, value);
  233|  80.8k|        }
  234|  80.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.8k|            auto rd = make_reader<T, char_type>();
  236|  80.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.8k|                return impl(rd, range, value);
  242|  80.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.8k|        else {
  250|  80.8k|            SCN_EXPECT(false);
  251|  80.8k|            SCN_UNREACHABLE;
  252|  80.8k|        }
  253|  80.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.8k|    {
  205|  80.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 80.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|  80.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  80.8k|    {
  223|  80.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  80.8k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  80.8k|            auto rd = make_reader<T, char_type>();
  228|  80.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  80.8k|                return unexpected(e);
  230|  80.8k|            }
  231|       |
  232|  80.8k|            return impl(rd, range, value);
  233|  80.8k|        }
  234|  80.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  80.8k|            auto rd = make_reader<T, char_type>();
  236|  80.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  80.8k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 80.8k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  80.8k|                return impl(rd, range, value);
  242|  80.8k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  80.8k|        else {
  250|  80.8k|            SCN_EXPECT(false);
  251|  80.8k|            SCN_UNREACHABLE;
  252|  80.8k|        }
  253|  80.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  80.8k|    {
  205|  80.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  80.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 80.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|  80.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  80.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  80.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  80.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  80.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 80.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  80.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  80.7k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  1.32M|{
  110|  1.32M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.32M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|  98.3k|{
   89|  98.3k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 98.3k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|  98.3k|    constexpr auto enc = get_encoding<CharT>();
   94|  98.3k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|  98.3k|        return simdutf::validate_utf8(input.data(), input.size());
   96|  98.3k|    }
   97|  98.3k|    else if constexpr (enc == encoding::utf16) {
   98|  98.3k|        return simdutf::validate_utf16(
   99|  98.3k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|  98.3k|    }
  101|  98.3k|    else if constexpr (enc == encoding::utf32) {
  102|  98.3k|        return simdutf::validate_utf32(
  103|  98.3k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|  98.3k|    }
  105|  98.3k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  98.3k|{
  449|  98.3k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 98.3k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  98.3k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  98.3k|        SCN_EXPECT(output.size() >= input.size());
  455|  98.3k|        std::memcpy(output.data(), input.data(),
  456|  98.3k|                    input.size() * sizeof(SourceCharT));
  457|  98.3k|        return input.size();
  458|  98.3k|    }
  459|       |
  460|  98.3k|    const auto result = [&]() {
  461|  98.3k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  98.3k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  98.3k|        if constexpr (src_enc == encoding::utf8) {
  465|  98.3k|            if constexpr (dest_enc == encoding::utf16) {
  466|  98.3k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  98.3k|                    input.data(), input.size(),
  468|  98.3k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  98.3k|            }
  470|  98.3k|            else {
  471|  98.3k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  98.3k|                    input.data(), input.size(),
  473|  98.3k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  98.3k|            }
  475|  98.3k|        }
  476|  98.3k|        else if constexpr (src_enc == encoding::utf16) {
  477|  98.3k|            if constexpr (dest_enc == encoding::utf8) {
  478|  98.3k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  98.3k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  98.3k|                    input.size(), output.data());
  481|  98.3k|            }
  482|  98.3k|            else {
  483|  98.3k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  98.3k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  98.3k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  98.3k|            }
  487|  98.3k|        }
  488|  98.3k|        else if constexpr (src_enc == encoding::utf32) {
  489|  98.3k|            if constexpr (dest_enc == encoding::utf8) {
  490|  98.3k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  98.3k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  98.3k|                    input.size(), output.data());
  493|  98.3k|            }
  494|  98.3k|            else {
  495|  98.3k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  98.3k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  98.3k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  98.3k|            }
  499|  98.3k|        }
  500|  98.3k|    }();
  501|       |
  502|  98.3k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.3k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|  98.3k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|  98.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|  98.3k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|  98.3k|    const auto result = [&]() {
  461|  98.3k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  98.3k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  98.3k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|  98.3k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|  98.3k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  98.3k|                    input.data(), input.size(),
  468|  98.3k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  98.3k|            }
  470|  98.3k|            else {
  471|  98.3k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  98.3k|                    input.data(), input.size(),
  473|  98.3k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  98.3k|            }
  475|  98.3k|        }
  476|  98.3k|        else if constexpr (src_enc == encoding::utf16) {
  477|  98.3k|            if constexpr (dest_enc == encoding::utf8) {
  478|  98.3k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  98.3k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  98.3k|                    input.size(), output.data());
  481|  98.3k|            }
  482|  98.3k|            else {
  483|  98.3k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  98.3k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  98.3k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  98.3k|            }
  487|  98.3k|        }
  488|  98.3k|        else if constexpr (src_enc == encoding::utf32) {
  489|  98.3k|            if constexpr (dest_enc == encoding::utf8) {
  490|  98.3k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  98.3k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  98.3k|                    input.size(), output.data());
  493|  98.3k|            }
  494|  98.3k|            else {
  495|  98.3k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  98.3k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  98.3k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  98.3k|            }
  499|  98.3k|        }
  500|  98.3k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   196k|{
  116|   196k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   196k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.2k, False: 98.3k]
  |  |  ------------------
  ------------------
  120|  98.2k|        return detail::invalid_code_point;
  121|  98.2k|    }
  122|       |
  123|  98.3k|    constexpr auto enc = get_encoding<CharT>();
  124|  98.3k|    char32_t output{};
  125|  98.3k|    size_t ret{};
  126|  98.3k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  98.3k|#ifndef NDEBUG
  128|  98.3k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 98.3k, False: 0]
  ------------------
  129|  98.3k|            auto len =
  130|  98.3k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  98.3k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|  98.3k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  98.3k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|  98.3k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.3k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  98.3k|    return static_cast<char32_t>(output);
  156|  98.3k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   504k|{
  263|   504k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   504k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22.6k, False: 482k]
  |  |  ------------------
  ------------------
  267|  22.6k|        return {get_start_of_next_code_point(input),
  268|  22.6k|                detail::invalid_code_point};
  269|  22.6k|    }
  270|   482k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.64k, False: 478k]
  |  |  ------------------
  ------------------
  271|  3.64k|        return {input.end(), detail::invalid_code_point};
  272|  3.64k|    }
  273|       |
  274|   478k|    constexpr auto enc = get_encoding<CharT>();
  275|   478k|    std::size_t result{1};
  276|   478k|    char32_t output{};
  277|   478k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   478k|        result = simdutf::convert_utf8_to_utf32(
  279|   478k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   478k|    }
  281|   478k|    else if constexpr (enc == encoding::utf16) {
  282|   478k|        result = simdutf::convert_utf16_to_utf32(
  283|   478k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   478k|    }
  285|   478k|    else if constexpr (enc == encoding::utf32) {
  286|   478k|        SCN_EXPECT(len == 1);
  287|   478k|        output = static_cast<char32_t>(input[0]);
  288|   478k|    }
  289|       |
  290|   478k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 38.3k, False: 440k]
  |  |  ------------------
  ------------------
  291|  38.3k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  38.3k|                detail::invalid_code_point};
  293|  38.3k|    }
  294|       |
  295|   440k|    return {input.begin() + len, output};
  296|   478k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  60.9k|{
  248|  60.9k|    auto it = input.begin();
  249|   139k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 130k, False: 9.21k]
  ------------------
  250|   130k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 51.7k, False: 78.6k]
  ------------------
  251|  51.7k|            break;
  252|  51.7k|        }
  253|   130k|    }
  254|       |
  255|  60.9k|    return it;
  256|  60.9k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  67.2M|{
  110|  67.2M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  67.2M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  4.69M|{
  449|  4.69M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 4.69M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  4.69M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  4.69M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  4.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  4.69M|                    input.size() * sizeof(SourceCharT));
  457|  4.69M|        return input.size();
  458|  4.69M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  1.05M|{
  116|  1.05M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  1.05M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  1.05M|    constexpr auto enc = get_encoding<CharT>();
  124|  1.05M|    char32_t output{};
  125|  1.05M|    size_t ret{};
  126|  1.05M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.05M|#ifndef NDEBUG
  128|  1.05M|        if (validate_unicode(input)) {
  129|  1.05M|            auto len =
  130|  1.05M|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  1.05M|            SCN_EXPECT(len == 1);
  132|  1.05M|        }
  133|  1.05M|#endif
  134|  1.05M|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  1.05M|    }
  136|  1.05M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  1.05M|#ifndef NDEBUG
  138|  1.05M|        if (validate_unicode(input)) {
  139|  1.05M|            auto len = simdutf::utf32_length_from_utf16(
  140|  1.05M|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  1.05M|            SCN_EXPECT(len == 1);
  142|  1.05M|        }
  143|  1.05M|#endif
  144|  1.05M|        ret = simdutf::convert_utf16_to_utf32(
  145|  1.05M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  1.05M|    }
  147|  1.05M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  1.05M|        output = static_cast<char32_t>(input[0]);
  149|  1.05M|        ret = output < detail::invalid_code_point;
  150|  1.05M|    }
  151|       |
  152|  1.05M|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  1.05M|    return static_cast<char32_t>(output);
  156|  1.05M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  33.3M|{
   29|       |    // Pattern_White_Space property
   30|  33.3M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 33.0M, False: 314k]
  |  Branch (30:27): [True: 2.91M, False: 30.1M]
  ------------------
   31|  33.3M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 586k, False: 29.8M]
  ------------------
   32|  33.3M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 250k, False: 29.6M]
  ------------------
   33|  33.3M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.79k, False: 29.6M]
  ------------------
   34|  33.3M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 1.85k, False: 29.6M]
  ------------------
   35|  33.3M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 5.22k, False: 29.6M]
  ------------------
   36|  33.3M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 29.6M]
  ------------------
   37|  33.3M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|  43.0k|{
   69|  43.0k|    return static_cast<unsigned char>(ch) <= 127;
   70|  43.0k|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|  42.0k|{
   74|  42.0k|#if WCHAR_MIN < 0
   75|  42.0k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 42.0k, False: 0]
  |  Branch (75:23): [True: 41.9k, False: 83]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|  42.0k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  41.1M|{
   58|  41.1M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  41.1M|        static_cast<unsigned char>(ch))];
   60|  41.1M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  7.81M|{
   92|  7.81M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  7.81M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  1.67M|    {
   57|  1.67M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  4.94M|    {
   61|  4.94M|        return m_current;
   62|  4.94M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  3.27M|    {
   66|  3.27M|        return m_range.end();
   67|  3.27M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  1.59M|    {
   81|  1.59M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.59M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.59M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.59M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.59M|        }
   87|  1.59M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.59M|    static_cast<    \
  |  |  247|  1.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.59M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  1.67M|    {
   71|  1.67M|        return ranges::subrange{begin(), end()};
   72|  1.67M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  1.42M|    {
   57|  1.42M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  4.13M|    {
   61|  4.13M|        return m_current;
   62|  4.13M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  2.71M|    {
   66|  2.71M|        return m_range.end();
   67|  2.71M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  1.28M|    {
   81|  1.28M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  1.28M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  1.28M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 1.28M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  1.28M|        }
   87|  1.28M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  1.28M|    static_cast<    \
  |  |  247|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  1.28M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  1.42M|    {
   71|  1.42M|        return ranges::subrange{begin(), end()};
   72|  1.42M|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  2.36M|    {
  205|  2.36M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.36M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   216k|    {
  196|   216k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   216k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   216k|              cvref<T> obj = *get<T>(fn);
  187|   216k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   216k|                  obj(static_cast<decltype(args)>(args)...);
  189|   216k|              }
  190|   216k|              else {
  191|   216k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   216k|              }
  193|   216k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   216k|    {
  126|   216k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   216k|            return static_cast<T*>(s.m_cp);
  128|   216k|        }
  129|   216k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   216k|            return static_cast<T*>(s.m_p);
  131|   216k|        }
  132|   216k|        else {
  133|   216k|            return reinterpret_cast<T*>(s.m_fp);
  134|   216k|        }
  135|   216k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  15.3M|    {
  205|  15.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  15.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  15.3M|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.39M|    {
  196|  1.39M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  7.68M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.68M|              cvref<T> obj = *get<T>(fn);
  187|  7.68M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.68M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.68M|              }
  190|  7.68M|              else {
  191|  7.68M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.68M|              }
  193|  7.68M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  7.68M|    {
  126|  7.68M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.68M|            return static_cast<T*>(s.m_cp);
  128|  7.68M|        }
  129|  7.68M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.68M|            return static_cast<T*>(s.m_p);
  131|  7.68M|        }
  132|  7.68M|        else {
  133|  7.68M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.68M|        }
  135|  7.68M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  1.39M|        {
  104|  1.39M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_:
  195|  6.05k|    {
  196|  6.05k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|  43.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  43.0k|              cvref<T> obj = *get<T>(fn);
  187|  43.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  43.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  43.0k|              }
  190|  43.0k|              else {
  191|  43.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  43.0k|              }
  193|  43.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlcE_EEDaNS3_7storageE:
  125|  43.0k|    {
  126|  43.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  43.0k|            return static_cast<T*>(s.m_cp);
  128|  43.0k|        }
  129|  43.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  43.0k|            return static_cast<T*>(s.m_p);
  131|  43.0k|        }
  132|  43.0k|        else {
  133|  43.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  43.0k|        }
  135|  43.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_LPv0EEEPSK_:
  103|  6.05k|        {
  104|  6.05k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_:
  195|  57.7k|    {
  196|  57.7k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   191k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   191k|              cvref<T> obj = *get<T>(fn);
  187|   191k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   191k|                  obj(static_cast<decltype(args)>(args)...);
  189|   191k|              }
  190|   191k|              else {
  191|   191k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   191k|              }
  193|   191k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  125|   191k|    {
  126|   191k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   191k|            return static_cast<T*>(s.m_cp);
  128|   191k|        }
  129|   191k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   191k|            return static_cast<T*>(s.m_p);
  131|   191k|        }
  132|   191k|        else {
  133|   191k|            return reinterpret_cast<T*>(s.m_fp);
  134|   191k|        }
  135|   191k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  103|  57.7k|        {
  104|  57.7k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|  1.23M|    {
  196|  1.23M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|  7.35M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.35M|              cvref<T> obj = *get<T>(fn);
  187|  7.35M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.35M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.35M|              }
  190|  7.35M|              else {
  191|  7.35M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.35M|              }
  193|  7.35M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|  7.35M|    {
  126|  7.35M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.35M|            return static_cast<T*>(s.m_cp);
  128|  7.35M|        }
  129|  7.35M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.35M|            return static_cast<T*>(s.m_p);
  131|  7.35M|        }
  132|  7.35M|        else {
  133|  7.35M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.35M|        }
  135|  7.35M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|  1.23M|        {
  104|  1.23M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   216k|        {
  104|   216k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   244k|    {
  196|   244k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   244k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   244k|              cvref<T> obj = *get<T>(fn);
  187|   244k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   244k|                  obj(static_cast<decltype(args)>(args)...);
  189|   244k|              }
  190|   244k|              else {
  191|   244k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   244k|              }
  193|   244k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   244k|    {
  126|   244k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   244k|            return static_cast<T*>(s.m_cp);
  128|   244k|        }
  129|   244k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   244k|            return static_cast<T*>(s.m_p);
  131|   244k|        }
  132|   244k|        else {
  133|   244k|            return reinterpret_cast<T*>(s.m_fp);
  134|   244k|        }
  135|   244k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   244k|        {
  104|   244k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   249k|    {
  196|   249k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   249k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   249k|              cvref<T> obj = *get<T>(fn);
  187|   249k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   249k|                  obj(static_cast<decltype(args)>(args)...);
  189|   249k|              }
  190|   249k|              else {
  191|   249k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   249k|              }
  193|   249k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   249k|    {
  126|   249k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   249k|            return static_cast<T*>(s.m_cp);
  128|   249k|        }
  129|   249k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   249k|            return static_cast<T*>(s.m_p);
  131|   249k|        }
  132|   249k|        else {
  133|   249k|            return reinterpret_cast<T*>(s.m_fp);
  134|   249k|        }
  135|   249k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   249k|        {
  104|   249k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  38.2M|    {
  205|  38.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  38.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  38.2M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  2.41M|    {
  196|  2.41M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  5.37M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.37M|              cvref<T> obj = *get<T>(fn);
  187|  5.37M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.37M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.37M|              }
  190|  5.37M|              else {
  191|  5.37M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.37M|              }
  193|  5.37M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  5.37M|    {
  126|  5.37M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.37M|            return static_cast<T*>(s.m_cp);
  128|  5.37M|        }
  129|  5.37M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.37M|            return static_cast<T*>(s.m_p);
  131|  5.37M|        }
  132|  5.37M|        else {
  133|  5.37M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.37M|        }
  135|  5.37M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  2.41M|        {
  104|  2.41M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|  98.3k|    {
  196|  98.3k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   294k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   294k|              cvref<T> obj = *get<T>(fn);
  187|   294k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   294k|                  obj(static_cast<decltype(args)>(args)...);
  189|   294k|              }
  190|   294k|              else {
  191|   294k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   294k|              }
  193|   294k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   294k|    {
  126|   294k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   294k|            return static_cast<T*>(s.m_cp);
  128|   294k|        }
  129|   294k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   294k|            return static_cast<T*>(s.m_p);
  131|   294k|        }
  132|   294k|        else {
  133|   294k|            return reinterpret_cast<T*>(s.m_fp);
  134|   294k|        }
  135|   294k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|  98.3k|        {
  104|  98.3k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|  98.2k|    {
  205|  98.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  98.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  98.2k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.56k|    {
  196|  7.56k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.56k|              cvref<T> obj = *get<T>(fn);
  187|  7.56k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.56k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.56k|              }
  190|  7.56k|              else {
  191|  7.56k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.56k|              }
  193|  7.56k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.56k|    {
  126|  7.56k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.56k|            return static_cast<T*>(s.m_cp);
  128|  7.56k|        }
  129|  7.56k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.56k|            return static_cast<T*>(s.m_p);
  131|  7.56k|        }
  132|  7.56k|        else {
  133|  7.56k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.56k|        }
  135|  7.56k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  15.1k|    {
  196|  15.1k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  15.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.1k|              cvref<T> obj = *get<T>(fn);
  187|  15.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.1k|              }
  190|  15.1k|              else {
  191|  15.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.1k|              }
  193|  15.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|  15.1k|    {
  126|  15.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.1k|            return static_cast<T*>(s.m_cp);
  128|  15.1k|        }
  129|  15.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  15.1k|            return static_cast<T*>(s.m_p);
  131|  15.1k|        }
  132|  15.1k|        else {
  133|  15.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.1k|        }
  135|  15.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  15.1k|        {
  104|  15.1k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  83.1k|    {
  196|  83.1k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|  83.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  83.1k|              cvref<T> obj = *get<T>(fn);
  187|  83.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  83.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  83.1k|              }
  190|  83.1k|              else {
  191|  83.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  83.1k|              }
  193|  83.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|  83.1k|    {
  126|  83.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  83.1k|            return static_cast<T*>(s.m_cp);
  128|  83.1k|        }
  129|  83.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  83.1k|            return static_cast<T*>(s.m_p);
  131|  83.1k|        }
  132|  83.1k|        else {
  133|  83.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  83.1k|        }
  135|  83.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  83.1k|        {
  104|  83.1k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.56k|        {
  104|  7.56k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.56k|    {
  196|  7.56k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.56k|              cvref<T> obj = *get<T>(fn);
  187|  7.56k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.56k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.56k|              }
  190|  7.56k|              else {
  191|  7.56k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.56k|              }
  193|  7.56k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.56k|    {
  126|  7.56k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.56k|            return static_cast<T*>(s.m_cp);
  128|  7.56k|        }
  129|  7.56k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.56k|            return static_cast<T*>(s.m_p);
  131|  7.56k|        }
  132|  7.56k|        else {
  133|  7.56k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.56k|        }
  135|  7.56k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.56k|        {
  104|  7.56k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  7.56k|    {
  196|  7.56k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  7.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.56k|              cvref<T> obj = *get<T>(fn);
  187|  7.56k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.56k|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.56k|              }
  190|  7.56k|              else {
  191|  7.56k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.56k|              }
  193|  7.56k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  7.56k|    {
  126|  7.56k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.56k|            return static_cast<T*>(s.m_cp);
  128|  7.56k|        }
  129|  7.56k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.56k|            return static_cast<T*>(s.m_p);
  131|  7.56k|        }
  132|  7.56k|        else {
  133|  7.56k|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.56k|        }
  135|  7.56k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  7.56k|        {
  104|  7.56k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   144k|    {
  196|   144k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   144k|              cvref<T> obj = *get<T>(fn);
  187|   144k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   144k|                  obj(static_cast<decltype(args)>(args)...);
  189|   144k|              }
  190|   144k|              else {
  191|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   144k|              }
  193|   144k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   144k|    {
  126|   144k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   144k|            return static_cast<T*>(s.m_cp);
  128|   144k|        }
  129|   144k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   144k|            return static_cast<T*>(s.m_p);
  131|   144k|        }
  132|   144k|        else {
  133|   144k|            return reinterpret_cast<T*>(s.m_fp);
  134|   144k|        }
  135|   144k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   144k|        {
  104|   144k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   368k|    {
  196|   368k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   368k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   368k|              cvref<T> obj = *get<T>(fn);
  187|   368k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   368k|                  obj(static_cast<decltype(args)>(args)...);
  189|   368k|              }
  190|   368k|              else {
  191|   368k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   368k|              }
  193|   368k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   368k|    {
  126|   368k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   368k|            return static_cast<T*>(s.m_cp);
  128|   368k|        }
  129|   368k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   368k|            return static_cast<T*>(s.m_p);
  131|   368k|        }
  132|   368k|        else {
  133|   368k|            return reinterpret_cast<T*>(s.m_fp);
  134|   368k|        }
  135|   368k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   368k|        {
  104|   368k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   163k|    {
  196|   163k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   163k|              cvref<T> obj = *get<T>(fn);
  187|   163k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   163k|                  obj(static_cast<decltype(args)>(args)...);
  189|   163k|              }
  190|   163k|              else {
  191|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   163k|              }
  193|   163k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   163k|    {
  126|   163k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   163k|            return static_cast<T*>(s.m_cp);
  128|   163k|        }
  129|   163k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   163k|            return static_cast<T*>(s.m_p);
  131|   163k|        }
  132|   163k|        else {
  133|   163k|            return reinterpret_cast<T*>(s.m_fp);
  134|   163k|        }
  135|   163k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   163k|        {
  104|   163k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   406k|    {
  196|   406k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   406k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   406k|              cvref<T> obj = *get<T>(fn);
  187|   406k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   406k|                  obj(static_cast<decltype(args)>(args)...);
  189|   406k|              }
  190|   406k|              else {
  191|   406k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   406k|              }
  193|   406k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   406k|    {
  126|   406k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   406k|            return static_cast<T*>(s.m_cp);
  128|   406k|        }
  129|   406k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   406k|            return static_cast<T*>(s.m_p);
  131|   406k|        }
  132|   406k|        else {
  133|   406k|            return reinterpret_cast<T*>(s.m_fp);
  134|   406k|        }
  135|   406k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   406k|        {
  104|   406k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   166k|    {
  196|   166k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   166k|              cvref<T> obj = *get<T>(fn);
  187|   166k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   166k|                  obj(static_cast<decltype(args)>(args)...);
  189|   166k|              }
  190|   166k|              else {
  191|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   166k|              }
  193|   166k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   166k|    {
  126|   166k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   166k|            return static_cast<T*>(s.m_cp);
  128|   166k|        }
  129|   166k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   166k|            return static_cast<T*>(s.m_p);
  131|   166k|        }
  132|   166k|        else {
  133|   166k|            return reinterpret_cast<T*>(s.m_fp);
  134|   166k|        }
  135|   166k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   166k|        {
  104|   166k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   409k|    {
  196|   409k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   409k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   409k|              cvref<T> obj = *get<T>(fn);
  187|   409k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   409k|                  obj(static_cast<decltype(args)>(args)...);
  189|   409k|              }
  190|   409k|              else {
  191|   409k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   409k|              }
  193|   409k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   409k|    {
  126|   409k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   409k|            return static_cast<T*>(s.m_cp);
  128|   409k|        }
  129|   409k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   409k|            return static_cast<T*>(s.m_p);
  131|   409k|        }
  132|   409k|        else {
  133|   409k|            return reinterpret_cast<T*>(s.m_fp);
  134|   409k|        }
  135|   409k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   409k|        {
  104|   409k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.04k|    {
  196|  5.04k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.04k|              cvref<T> obj = *get<T>(fn);
  187|  5.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.04k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.04k|              }
  190|  5.04k|              else {
  191|  5.04k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.04k|              }
  193|  5.04k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.04k|    {
  126|  5.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.04k|            return static_cast<T*>(s.m_cp);
  128|  5.04k|        }
  129|  5.04k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.04k|            return static_cast<T*>(s.m_p);
  131|  5.04k|        }
  132|  5.04k|        else {
  133|  5.04k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.04k|        }
  135|  5.04k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.04k|        {
  104|  5.04k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  20.1k|    {
  196|  20.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.1k|              cvref<T> obj = *get<T>(fn);
  187|  20.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.1k|              }
  190|  20.1k|              else {
  191|  20.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.1k|              }
  193|  20.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  20.1k|    {
  126|  20.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.1k|            return static_cast<T*>(s.m_cp);
  128|  20.1k|        }
  129|  20.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.1k|            return static_cast<T*>(s.m_p);
  131|  20.1k|        }
  132|  20.1k|        else {
  133|  20.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.1k|        }
  135|  20.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  20.1k|        {
  104|  20.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.04k|    {
  196|  5.04k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.04k|              cvref<T> obj = *get<T>(fn);
  187|  5.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.04k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.04k|              }
  190|  5.04k|              else {
  191|  5.04k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.04k|              }
  193|  5.04k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.04k|    {
  126|  5.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.04k|            return static_cast<T*>(s.m_cp);
  128|  5.04k|        }
  129|  5.04k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.04k|            return static_cast<T*>(s.m_p);
  131|  5.04k|        }
  132|  5.04k|        else {
  133|  5.04k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.04k|        }
  135|  5.04k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.04k|        {
  104|  5.04k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  20.1k|    {
  196|  20.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.1k|              cvref<T> obj = *get<T>(fn);
  187|  20.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.1k|              }
  190|  20.1k|              else {
  191|  20.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.1k|              }
  193|  20.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  20.1k|    {
  126|  20.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.1k|            return static_cast<T*>(s.m_cp);
  128|  20.1k|        }
  129|  20.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.1k|            return static_cast<T*>(s.m_p);
  131|  20.1k|        }
  132|  20.1k|        else {
  133|  20.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.1k|        }
  135|  20.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  20.1k|        {
  104|  20.1k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  5.04k|    {
  196|  5.04k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  5.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.04k|              cvref<T> obj = *get<T>(fn);
  187|  5.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.04k|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.04k|              }
  190|  5.04k|              else {
  191|  5.04k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.04k|              }
  193|  5.04k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  5.04k|    {
  126|  5.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.04k|            return static_cast<T*>(s.m_cp);
  128|  5.04k|        }
  129|  5.04k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.04k|            return static_cast<T*>(s.m_p);
  131|  5.04k|        }
  132|  5.04k|        else {
  133|  5.04k|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.04k|        }
  135|  5.04k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  5.04k|        {
  104|  5.04k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  20.1k|    {
  196|  20.1k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  20.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  20.1k|              cvref<T> obj = *get<T>(fn);
  187|  20.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  20.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  20.1k|              }
  190|  20.1k|              else {
  191|  20.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  20.1k|              }
  193|  20.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  20.1k|    {
  126|  20.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  20.1k|            return static_cast<T*>(s.m_cp);
  128|  20.1k|        }
  129|  20.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  20.1k|            return static_cast<T*>(s.m_p);
  131|  20.1k|        }
  132|  20.1k|        else {
  133|  20.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  20.1k|        }
  135|  20.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  20.1k|        {
  104|  20.1k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  1.99M|    {
  196|  1.99M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  3.70M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  3.70M|              cvref<T> obj = *get<T>(fn);
  187|  3.70M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  3.70M|                  obj(static_cast<decltype(args)>(args)...);
  189|  3.70M|              }
  190|  3.70M|              else {
  191|  3.70M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  3.70M|              }
  193|  3.70M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  3.70M|    {
  126|  3.70M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  3.70M|            return static_cast<T*>(s.m_cp);
  128|  3.70M|        }
  129|  3.70M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  3.70M|            return static_cast<T*>(s.m_p);
  131|  3.70M|        }
  132|  3.70M|        else {
  133|  3.70M|            return reinterpret_cast<T*>(s.m_fp);
  134|  3.70M|        }
  135|  3.70M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  1.99M|        {
  104|  1.99M|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  1.99M|    {
  205|  1.99M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.99M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   178k|    {
  196|   178k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   178k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   178k|              cvref<T> obj = *get<T>(fn);
  187|   178k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   178k|                  obj(static_cast<decltype(args)>(args)...);
  189|   178k|              }
  190|   178k|              else {
  191|   178k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   178k|              }
  193|   178k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   178k|    {
  126|   178k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   178k|            return static_cast<T*>(s.m_cp);
  128|   178k|        }
  129|   178k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   178k|            return static_cast<T*>(s.m_p);
  131|   178k|        }
  132|   178k|        else {
  133|   178k|            return reinterpret_cast<T*>(s.m_fp);
  134|   178k|        }
  135|   178k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  12.6M|    {
  205|  12.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  12.6M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.59M|    {
  196|  1.59M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  6.32M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.32M|              cvref<T> obj = *get<T>(fn);
  187|  6.32M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.32M|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.32M|              }
  190|  6.32M|              else {
  191|  6.32M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.32M|              }
  193|  6.32M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  6.32M|    {
  126|  6.32M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.32M|            return static_cast<T*>(s.m_cp);
  128|  6.32M|        }
  129|  6.32M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.32M|            return static_cast<T*>(s.m_p);
  131|  6.32M|        }
  132|  6.32M|        else {
  133|  6.32M|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.32M|        }
  135|  6.32M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  1.59M|        {
  104|  1.59M|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_:
  195|  5.64k|    {
  196|  5.64k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  42.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  42.0k|              cvref<T> obj = *get<T>(fn);
  187|  42.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  42.0k|                  obj(static_cast<decltype(args)>(args)...);
  189|  42.0k|              }
  190|  42.0k|              else {
  191|  42.0k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  42.0k|              }
  193|  42.0k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlwE_EEDaNS3_7storageE:
  125|  42.0k|    {
  126|  42.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  42.0k|            return static_cast<T*>(s.m_cp);
  128|  42.0k|        }
  129|  42.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  42.0k|            return static_cast<T*>(s.m_p);
  131|  42.0k|        }
  132|  42.0k|        else {
  133|  42.0k|            return reinterpret_cast<T*>(s.m_fp);
  134|  42.0k|        }
  135|  42.0k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_LPv0EEEPSK_:
  103|  5.64k|        {
  104|  5.64k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_:
  195|  48.0k|    {
  196|  48.0k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   159k|              cvref<T> obj = *get<T>(fn);
  187|   159k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   159k|                  obj(static_cast<decltype(args)>(args)...);
  189|   159k|              }
  190|   159k|              else {
  191|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   159k|              }
  193|   159k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  125|   159k|    {
  126|   159k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   159k|            return static_cast<T*>(s.m_cp);
  128|   159k|        }
  129|   159k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   159k|            return static_cast<T*>(s.m_p);
  131|   159k|        }
  132|   159k|        else {
  133|   159k|            return reinterpret_cast<T*>(s.m_fp);
  134|   159k|        }
  135|   159k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  103|  48.0k|        {
  104|  48.0k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|  1.04M|    {
  196|  1.04M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|  5.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  5.27M|              cvref<T> obj = *get<T>(fn);
  187|  5.27M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  5.27M|                  obj(static_cast<decltype(args)>(args)...);
  189|  5.27M|              }
  190|  5.27M|              else {
  191|  5.27M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  5.27M|              }
  193|  5.27M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|  5.27M|    {
  126|  5.27M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  5.27M|            return static_cast<T*>(s.m_cp);
  128|  5.27M|        }
  129|  5.27M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  5.27M|            return static_cast<T*>(s.m_p);
  131|  5.27M|        }
  132|  5.27M|        else {
  133|  5.27M|            return reinterpret_cast<T*>(s.m_fp);
  134|  5.27M|        }
  135|  5.27M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|  1.04M|        {
  104|  1.04M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   178k|        {
  104|   178k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   201k|    {
  196|   201k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   201k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   201k|              cvref<T> obj = *get<T>(fn);
  187|   201k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   201k|                  obj(static_cast<decltype(args)>(args)...);
  189|   201k|              }
  190|   201k|              else {
  191|   201k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   201k|              }
  193|   201k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   201k|    {
  126|   201k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   201k|            return static_cast<T*>(s.m_cp);
  128|   201k|        }
  129|   201k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   201k|            return static_cast<T*>(s.m_p);
  131|   201k|        }
  132|   201k|        else {
  133|   201k|            return reinterpret_cast<T*>(s.m_fp);
  134|   201k|        }
  135|   201k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   201k|        {
  104|   201k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   205k|    {
  196|   205k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   205k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   205k|              cvref<T> obj = *get<T>(fn);
  187|   205k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   205k|                  obj(static_cast<decltype(args)>(args)...);
  189|   205k|              }
  190|   205k|              else {
  191|   205k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   205k|              }
  193|   205k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   205k|    {
  126|   205k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   205k|            return static_cast<T*>(s.m_cp);
  128|   205k|        }
  129|   205k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   205k|            return static_cast<T*>(s.m_p);
  131|   205k|        }
  132|   205k|        else {
  133|   205k|            return reinterpret_cast<T*>(s.m_fp);
  134|   205k|        }
  135|   205k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   205k|        {
  104|   205k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   119k|    {
  196|   119k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   119k|              cvref<T> obj = *get<T>(fn);
  187|   119k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   119k|                  obj(static_cast<decltype(args)>(args)...);
  189|   119k|              }
  190|   119k|              else {
  191|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   119k|              }
  193|   119k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   119k|    {
  126|   119k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   119k|            return static_cast<T*>(s.m_cp);
  128|   119k|        }
  129|   119k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   119k|            return static_cast<T*>(s.m_p);
  131|   119k|        }
  132|   119k|        else {
  133|   119k|            return reinterpret_cast<T*>(s.m_fp);
  134|   119k|        }
  135|   119k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   119k|        {
  104|   119k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   317k|    {
  196|   317k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   317k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   317k|              cvref<T> obj = *get<T>(fn);
  187|   317k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   317k|                  obj(static_cast<decltype(args)>(args)...);
  189|   317k|              }
  190|   317k|              else {
  191|   317k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   317k|              }
  193|   317k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   317k|    {
  126|   317k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   317k|            return static_cast<T*>(s.m_cp);
  128|   317k|        }
  129|   317k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   317k|            return static_cast<T*>(s.m_p);
  131|   317k|        }
  132|   317k|        else {
  133|   317k|            return reinterpret_cast<T*>(s.m_fp);
  134|   317k|        }
  135|   317k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   317k|        {
  104|   317k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   134k|    {
  196|   134k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   134k|              cvref<T> obj = *get<T>(fn);
  187|   134k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   134k|                  obj(static_cast<decltype(args)>(args)...);
  189|   134k|              }
  190|   134k|              else {
  191|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   134k|              }
  193|   134k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   134k|    {
  126|   134k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   134k|            return static_cast<T*>(s.m_cp);
  128|   134k|        }
  129|   134k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   134k|            return static_cast<T*>(s.m_p);
  131|   134k|        }
  132|   134k|        else {
  133|   134k|            return reinterpret_cast<T*>(s.m_fp);
  134|   134k|        }
  135|   134k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   134k|        {
  104|   134k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   347k|    {
  196|   347k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   347k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   347k|              cvref<T> obj = *get<T>(fn);
  187|   347k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   347k|                  obj(static_cast<decltype(args)>(args)...);
  189|   347k|              }
  190|   347k|              else {
  191|   347k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   347k|              }
  193|   347k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   347k|    {
  126|   347k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   347k|            return static_cast<T*>(s.m_cp);
  128|   347k|        }
  129|   347k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   347k|            return static_cast<T*>(s.m_p);
  131|   347k|        }
  132|   347k|        else {
  133|   347k|            return reinterpret_cast<T*>(s.m_fp);
  134|   347k|        }
  135|   347k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   347k|        {
  104|   347k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   136k|    {
  196|   136k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   136k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   136k|              cvref<T> obj = *get<T>(fn);
  187|   136k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   136k|                  obj(static_cast<decltype(args)>(args)...);
  189|   136k|              }
  190|   136k|              else {
  191|   136k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   136k|              }
  193|   136k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   136k|    {
  126|   136k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   136k|            return static_cast<T*>(s.m_cp);
  128|   136k|        }
  129|   136k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   136k|            return static_cast<T*>(s.m_p);
  131|   136k|        }
  132|   136k|        else {
  133|   136k|            return reinterpret_cast<T*>(s.m_fp);
  134|   136k|        }
  135|   136k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   136k|        {
  104|   136k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   349k|    {
  196|   349k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   349k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   349k|              cvref<T> obj = *get<T>(fn);
  187|   349k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   349k|                  obj(static_cast<decltype(args)>(args)...);
  189|   349k|              }
  190|   349k|              else {
  191|   349k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   349k|              }
  193|   349k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   349k|    {
  126|   349k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   349k|            return static_cast<T*>(s.m_cp);
  128|   349k|        }
  129|   349k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   349k|            return static_cast<T*>(s.m_p);
  131|   349k|        }
  132|   349k|        else {
  133|   349k|            return reinterpret_cast<T*>(s.m_fp);
  134|   349k|        }
  135|   349k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   349k|        {
  104|   349k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   323k|    {
  196|   323k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  1.37M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.37M|              cvref<T> obj = *get<T>(fn);
  187|  1.37M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.37M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.37M|              }
  190|  1.37M|              else {
  191|  1.37M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.37M|              }
  193|  1.37M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  1.37M|    {
  126|  1.37M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.37M|            return static_cast<T*>(s.m_cp);
  128|  1.37M|        }
  129|  1.37M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.37M|            return static_cast<T*>(s.m_p);
  131|  1.37M|        }
  132|  1.37M|        else {
  133|  1.37M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.37M|        }
  135|  1.37M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   323k|        {
  104|   323k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   323k|    {
  205|   323k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   323k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  26.9k|    {
  196|  26.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  26.9k|              cvref<T> obj = *get<T>(fn);
  187|  26.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  26.9k|              }
  190|  26.9k|              else {
  191|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  26.9k|              }
  193|  26.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  26.9k|    {
  126|  26.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  26.9k|            return static_cast<T*>(s.m_cp);
  128|  26.9k|        }
  129|  26.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  26.9k|            return static_cast<T*>(s.m_p);
  131|  26.9k|        }
  132|  26.9k|        else {
  133|  26.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  26.9k|        }
  135|  26.9k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|  80.7k|    {
  196|  80.7k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   134k|              cvref<T> obj = *get<T>(fn);
  187|   134k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   134k|                  obj(static_cast<decltype(args)>(args)...);
  189|   134k|              }
  190|   134k|              else {
  191|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   134k|              }
  193|   134k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   134k|    {
  126|   134k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   134k|            return static_cast<T*>(s.m_cp);
  128|   134k|        }
  129|   134k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   134k|            return static_cast<T*>(s.m_p);
  131|   134k|        }
  132|   134k|        else {
  133|   134k|            return reinterpret_cast<T*>(s.m_fp);
  134|   134k|        }
  135|   134k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|  80.7k|        {
  104|  80.7k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   417k|    {
  196|   417k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   713k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   713k|              cvref<T> obj = *get<T>(fn);
  187|   713k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   713k|                  obj(static_cast<decltype(args)>(args)...);
  189|   713k|              }
  190|   713k|              else {
  191|   713k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   713k|              }
  193|   713k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   713k|    {
  126|   713k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   713k|            return static_cast<T*>(s.m_cp);
  128|   713k|        }
  129|   713k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   713k|            return static_cast<T*>(s.m_p);
  131|   713k|        }
  132|   713k|        else {
  133|   713k|            return reinterpret_cast<T*>(s.m_fp);
  134|   713k|        }
  135|   713k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   417k|        {
  104|   417k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  26.9k|        {
  104|  26.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  26.9k|    {
  196|  26.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  26.9k|              cvref<T> obj = *get<T>(fn);
  187|  26.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  26.9k|              }
  190|  26.9k|              else {
  191|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  26.9k|              }
  193|  26.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  26.9k|    {
  126|  26.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  26.9k|            return static_cast<T*>(s.m_cp);
  128|  26.9k|        }
  129|  26.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  26.9k|            return static_cast<T*>(s.m_p);
  131|  26.9k|        }
  132|  26.9k|        else {
  133|  26.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  26.9k|        }
  135|  26.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  26.9k|        {
  104|  26.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  26.9k|    {
  196|  26.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  26.9k|              cvref<T> obj = *get<T>(fn);
  187|  26.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  26.9k|              }
  190|  26.9k|              else {
  191|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  26.9k|              }
  193|  26.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  26.9k|    {
  126|  26.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  26.9k|            return static_cast<T*>(s.m_cp);
  128|  26.9k|        }
  129|  26.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  26.9k|            return static_cast<T*>(s.m_p);
  131|  26.9k|        }
  132|  26.9k|        else {
  133|  26.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  26.9k|        }
  135|  26.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  26.9k|        {
  104|  26.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  17.9k|    {
  196|  17.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  17.9k|              cvref<T> obj = *get<T>(fn);
  187|  17.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  17.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  17.9k|              }
  190|  17.9k|              else {
  191|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  17.9k|              }
  193|  17.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  17.9k|    {
  126|  17.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  17.9k|            return static_cast<T*>(s.m_cp);
  128|  17.9k|        }
  129|  17.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  17.9k|            return static_cast<T*>(s.m_p);
  131|  17.9k|        }
  132|  17.9k|        else {
  133|  17.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  17.9k|        }
  135|  17.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  17.9k|        {
  104|  17.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  62.8k|    {
  196|  62.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  62.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  62.8k|              cvref<T> obj = *get<T>(fn);
  187|  62.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  62.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  62.8k|              }
  190|  62.8k|              else {
  191|  62.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  62.8k|              }
  193|  62.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  62.8k|    {
  126|  62.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  62.8k|            return static_cast<T*>(s.m_cp);
  128|  62.8k|        }
  129|  62.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  62.8k|            return static_cast<T*>(s.m_p);
  131|  62.8k|        }
  132|  62.8k|        else {
  133|  62.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  62.8k|        }
  135|  62.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  62.8k|        {
  104|  62.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  17.9k|    {
  196|  17.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  17.9k|              cvref<T> obj = *get<T>(fn);
  187|  17.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  17.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  17.9k|              }
  190|  17.9k|              else {
  191|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  17.9k|              }
  193|  17.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  17.9k|    {
  126|  17.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  17.9k|            return static_cast<T*>(s.m_cp);
  128|  17.9k|        }
  129|  17.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  17.9k|            return static_cast<T*>(s.m_p);
  131|  17.9k|        }
  132|  17.9k|        else {
  133|  17.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  17.9k|        }
  135|  17.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  17.9k|        {
  104|  17.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  62.8k|    {
  196|  62.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  62.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  62.8k|              cvref<T> obj = *get<T>(fn);
  187|  62.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  62.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  62.8k|              }
  190|  62.8k|              else {
  191|  62.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  62.8k|              }
  193|  62.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  62.8k|    {
  126|  62.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  62.8k|            return static_cast<T*>(s.m_cp);
  128|  62.8k|        }
  129|  62.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  62.8k|            return static_cast<T*>(s.m_p);
  131|  62.8k|        }
  132|  62.8k|        else {
  133|  62.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  62.8k|        }
  135|  62.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  62.8k|        {
  104|  62.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  17.9k|    {
  196|  17.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  17.9k|              cvref<T> obj = *get<T>(fn);
  187|  17.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  17.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  17.9k|              }
  190|  17.9k|              else {
  191|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  17.9k|              }
  193|  17.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  17.9k|    {
  126|  17.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  17.9k|            return static_cast<T*>(s.m_cp);
  128|  17.9k|        }
  129|  17.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  17.9k|            return static_cast<T*>(s.m_p);
  131|  17.9k|        }
  132|  17.9k|        else {
  133|  17.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  17.9k|        }
  135|  17.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  17.9k|        {
  104|  17.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  62.8k|    {
  196|  62.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  62.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  62.8k|              cvref<T> obj = *get<T>(fn);
  187|  62.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  62.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  62.8k|              }
  190|  62.8k|              else {
  191|  62.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  62.8k|              }
  193|  62.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|  62.8k|    {
  126|  62.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  62.8k|            return static_cast<T*>(s.m_cp);
  128|  62.8k|        }
  129|  62.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  62.8k|            return static_cast<T*>(s.m_p);
  131|  62.8k|        }
  132|  62.8k|        else {
  133|  62.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  62.8k|        }
  135|  62.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|  62.8k|        {
  104|  62.8k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_:
  195|   946k|    {
  196|   946k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESL_Di:
  185|  27.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  27.5M|              cvref<T> obj = *get<T>(fn);
  187|  27.5M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  27.5M|                  obj(static_cast<decltype(args)>(args)...);
  189|  27.5M|              }
  190|  27.5M|              else {
  191|  27.5M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  27.5M|              }
  193|  27.5M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_EUlDiE_EEDaNS3_7storageE:
  125|  27.5M|    {
  126|  27.5M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  27.5M|            return static_cast<T*>(s.m_cp);
  128|  27.5M|        }
  129|  27.5M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  27.5M|            return static_cast<T*>(s.m_p);
  131|  27.5M|        }
  132|  27.5M|        else {
  133|  27.5M|            return reinterpret_cast<T*>(s.m_fp);
  134|  27.5M|        }
  135|  27.5M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_LPv0EEEPSD_:
  103|   946k|        {
  104|   946k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  48.3k|{
   44|  48.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  48.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  48.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  48.3k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  16.8M|{
   30|  16.8M|    return e != eof_error::good;
   31|  16.8M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   149k|{
   91|   149k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   149k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  13.4M|    {
   69|  13.4M|        return a.m_code == b.m_code;
   70|  13.4M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  33.1M|    {
   55|  33.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  33.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  33.1M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  4.85M|    return [code, msg](parse_error err) {
  115|  4.85M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  4.85M|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  4.85M|{
  100|  4.85M|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 4.85M]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  4.85M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 57.9k, False: 4.79M]
  ------------------
  105|  57.9k|        return scan_error{scan_error::end_of_range, "EOF"};
  106|  57.9k|    }
  107|       |
  108|  4.79M|    return scan_error{code, msg};
  109|  4.85M|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  4.85M|{
  114|  4.85M|    return [code, msg](parse_error err) {
  115|  4.85M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  4.85M|    };
  117|  4.85M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  1.07M|{
  587|  1.07M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  1.07M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|  45.3k|{
  595|  45.3k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|  45.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  45.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|  45.3k|    else {
  600|  45.3k|        source.sync_all();
  601|  45.3k|    }
  602|  45.3k|    return n;
  603|  45.3k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|   908k|{
  611|   908k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|   908k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   148k|{
  619|   148k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   148k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   148k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 67.3k, False: 80.8k]
  |  |  ------------------
  ------------------
  621|  67.3k|        source.sync(*n);
  622|  67.3k|    }
  623|  80.8k|    else {
  624|  80.8k|        source.sync_all();
  625|  80.8k|    }
  626|   148k|    return n;
  627|   148k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  1.07M|{
  544|  1.07M|    return vscan_internal(source, format, args);
  545|  1.07M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|  45.3k|{
  550|  45.3k|    auto n = vscan_internal(source, format, args);
  551|  45.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  45.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|  45.3k|    else {
  555|  45.3k|        source.sync_all();
  556|  45.3k|    }
  557|  45.3k|    return n;
  558|  45.3k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|   908k|{
  564|   908k|    return vscan_internal(source, format, args);
  565|   908k|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   148k|{
  570|   148k|    auto n = vscan_internal(source, format, args);
  571|   148k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   148k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 67.3k, False: 80.8k]
  |  |  ------------------
  ------------------
  572|  67.3k|        source.sync(*n);
  573|  67.3k|    }
  574|  80.8k|    else {
  575|  80.8k|        source.sync_all();
  576|  80.8k|    }
  577|   148k|    return n;
  578|   148k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   239k|{
  654|   239k|    return vscan_value_internal(source, arg);
  655|   239k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  7.56k|{
  659|  7.56k|    auto n = vscan_value_internal(source, arg);
  660|  7.56k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  7.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 7.56k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  7.56k|    else {
  664|  7.56k|        source.sync_all();
  665|  7.56k|    }
  666|  7.56k|    return n;
  667|  7.56k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   197k|{
  673|   197k|    return vscan_value_internal(source, arg);
  674|   197k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  26.9k|{
  679|  26.9k|    auto n = vscan_value_internal(source, arg);
  680|  26.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  26.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.4k, False: 13.4k]
  |  |  ------------------
  ------------------
  681|  13.4k|        source.sync(*n);
  682|  13.4k|    }
  683|  13.4k|    else {
  684|  13.4k|        source.sync_all();
  685|  13.4k|    }
  686|  26.9k|    return n;
  687|  26.9k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  90.7k|{
  476|  90.7k|    const auto argcount = args.size();
  477|  90.7k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 15.1k, False: 75.6k]
  |  Branch (477:60): [True: 15.1k, False: 0]
  ------------------
  478|  15.1k|        auto arg = args.get(0);
  479|  15.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  15.1k|    static_cast<    \
  |  |  247|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  15.1k|    }
  481|       |
  482|  75.6k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 75.6k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|  75.6k|    SCN_UNLIKELY_ATTR
  490|  75.6k|    {
  491|  75.6k|        auto handler = format_handler<false, CharT>{
  492|  75.6k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  75.6k|    static_cast<    \
  |  |  247|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  75.6k|    static_cast<    \
  |  |  247|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|  75.6k|        return vscan_parse_format_string(format, handler);
  494|  75.6k|    }
  495|  75.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.24M|{
   36|  2.24M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.75M, False: 493k]
  ------------------
   37|  1.75M|        return false;
   38|  1.75M|    }
   39|   493k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 493k, False: 0]
  |  Branch (39:39): [True: 493k, False: 0]
  ------------------
   40|  2.24M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  22.6k|{
   69|  22.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  22.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  22.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  22.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  22.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  22.6k|    static_cast<    \
  |  |  247|  22.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  22.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  22.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.6k|    }                                                  \
  |  |  |  |   70|  22.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  22.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  1.67M|    {
  314|  1.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  3.41M|    {
  133|  3.41M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.41M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  3.41M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  1.67M|    {
  264|  1.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.67M|{
  441|  1.67M|    const auto beg = handler.get_ctx().begin();
  442|  1.67M|    detail::parse_format_string<false>(format, handler);
  443|  1.67M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.6k, False: 1.59M]
  |  |  ------------------
  ------------------
  444|  75.6k|        return unexpected(handler.error);
  445|  75.6k|    }
  446|  1.59M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.67M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  11.5M|    {
  425|  11.5M|        return ctx.get();
  426|  11.5M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  11.5M|    {
  268|  11.5M|        return contiguous_ctx;
  269|  11.5M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  3.27M|    {
  318|  3.27M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 3.27M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  3.27M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.67M|{
   92|  1.67M|    auto arg = ctx.arg(id);
   93|  1.67M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.67M|    return arg;
   97|  1.67M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  3.41M|    {
  208|  3.41M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.41M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  3.41M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.41M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  3.41M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  3.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.41M, False: 0]
  |  |  ------------------
  ------------------
  218|  3.41M|            visited_args_lower64 |= (1ull << id);
  219|  3.41M|            return;
  220|  3.41M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  3.41M|    {
  193|  3.41M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.41M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  3.41M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  3.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.41M, False: 0]
  |  |  ------------------
  ------------------
  199|  3.41M|            return (visited_args_lower64 >> id) & 1ull;
  200|  3.41M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  3.41M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   420k|    {
  177|   420k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 420k, False: 0]
  |  |  ------------------
  ------------------
  178|   420k|            error = err;
  179|   420k|        }
  180|   420k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  1.67M|    {
  347|  1.67M|        return parse_ctx.next_arg_id();
  348|  1.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  1.67M|    {
  388|  1.67M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.67M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.67M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.67M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.67M|        auto specs = detail::format_specs{};
  401|  1.67M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.67M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.67M|            arg.type()};
  404|       |
  405|  1.67M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.67M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.67M]
  |  Branch (406:29): [True: 0, False: 1.67M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.67M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.67M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.67M|        on_visit_scan_arg(
  417|  1.67M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.67M|                                           get_ctx().locale()},
  419|  1.67M|            arg);
  420|  1.67M|        return parse_ctx.begin();
  421|  1.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  1.67M|    {
  112|  1.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  1.67M|    {
  359|  1.67M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.67M]
  |  Branch (359:23): [True: 0, False: 1.67M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.67M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.67M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.6k, False: 1.59M]
  |  |  ------------------
  ------------------
  366|  75.6k|            on_error(r.error());
  367|  75.6k|        }
  368|  1.59M|        else {
  369|  1.59M|            get_ctx().advance_to(*r);
  370|  1.59M|        }
  371|  1.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  3.41M|    {
  140|  3.41M|        {
  141|  3.41M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 3.41M]
  ------------------
  142|  3.41M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 3.41M]
  ------------------
  143|  3.41M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  3.41M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  3.41M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 3.41M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  3.41M|        }
  150|       |
  151|  3.41M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 3.41M, False: 0]
  ------------------
  152|  3.41M|            return;
  153|  3.41M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  3.41M|    {
  188|  3.41M|        return error;
  189|  3.41M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  10.2M|    {
  184|  10.2M|        return static_cast<bool>(error);
  185|  10.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|  75.6k|    {
  314|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|  75.6k|    {
  241|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  75.6k|{
  441|  75.6k|    const auto beg = handler.get_ctx().begin();
  442|  75.6k|    detail::parse_format_string<false>(format, handler);
  443|  75.6k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.6k, False: 0]
  |  |  ------------------
  ------------------
  444|  75.6k|        return unexpected(handler.error);
  445|  75.6k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  75.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   378k|    {
  425|   378k|        return ctx.get();
  426|   378k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   378k|    {
  245|   378k|        return ctx;
  246|   378k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|  75.6k|    {
  318|  75.6k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 75.6k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|  75.6k|{
   92|  75.6k|    auto arg = ctx.arg(id);
   93|  75.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  75.6k|    return arg;
   97|  75.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|  75.6k|    {
  347|  75.6k|        return parse_ctx.next_arg_id();
  348|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|  75.6k|    {
  388|  75.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  75.6k|        set_arg_as_visited(arg_id);
  390|       |
  391|  75.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 75.6k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  75.6k|        auto specs = detail::format_specs{};
  401|  75.6k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  75.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  75.6k|            arg.type()};
  404|       |
  405|  75.6k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  75.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 75.6k]
  |  Branch (406:29): [True: 0, False: 75.6k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  75.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  75.6k|        parse_ctx.advance_to(begin);
  415|       |
  416|  75.6k|        on_visit_scan_arg(
  417|  75.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  75.6k|                                           get_ctx().locale()},
  419|  75.6k|            arg);
  420|  75.6k|        return parse_ctx.begin();
  421|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|  75.6k|    {
  112|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|  75.6k|    {
  359|  75.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 75.6k]
  |  Branch (359:23): [True: 0, False: 75.6k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  75.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  75.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.6k, False: 0]
  |  |  ------------------
  ------------------
  366|  75.6k|            on_error(r.error());
  367|  75.6k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  2.15M|{
  456|  2.15M|    const auto argcount = args.size();
  457|  2.15M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 478k, False: 1.67M]
  |  Branch (457:60): [True: 478k, False: 0]
  ------------------
  458|   478k|        auto arg = args.get(0);
  459|   478k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   478k|    }
  461|       |
  462|  1.67M|    auto handler = format_handler<true, CharT>{
  463|  1.67M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.67M|                                       source.data() + source.size()},
  465|  1.67M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.67M|    static_cast<    \
  |  |  247|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.67M|    static_cast<    \
  |  |  247|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.67M|    return vscan_parse_format_string(format, handler);
  467|  2.15M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   717k|{
   49|   717k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 717k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   717k|    auto reader =
   55|   717k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   717k|            ranges::subrange<const CharT*>{source.data(),
   57|   717k|                                           source.data() + source.size()},
   58|   717k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   717k|    static_cast<    \
  |  |  247|   717k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   717k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   717k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   717k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   717k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.6k, False: 694k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.6k|    }                                                  \
  |  |  |  |   70|   717k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   694k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   694k|    return ranges::distance(source.data(), it);
   61|   717k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  1.81M|{
  456|  1.81M|    const auto argcount = args.size();
  457|  1.81M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 394k, False: 1.42M]
  |  Branch (457:60): [True: 394k, False: 0]
  ------------------
  458|   394k|        auto arg = args.get(0);
  459|   394k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   394k|    static_cast<    \
  |  |  247|   394k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   394k|    }
  461|       |
  462|  1.42M|    auto handler = format_handler<true, CharT>{
  463|  1.42M|        ranges::subrange<const CharT*>{source.data(),
  464|  1.42M|                                       source.data() + source.size()},
  465|  1.42M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.42M|    static_cast<    \
  |  |  247|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  1.42M|    static_cast<    \
  |  |  247|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  1.42M|    return vscan_parse_format_string(format, handler);
  467|  1.81M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  2.11M|{
   36|  2.11M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.66M, False: 448k]
  ------------------
   37|  1.66M|        return false;
   38|  1.66M|    }
   39|   448k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 448k, False: 0]
  |  Branch (39:39): [True: 448k, False: 0]
  ------------------
   40|  2.11M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   592k|{
   49|   592k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 592k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   592k|    auto reader =
   55|   592k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   592k|            ranges::subrange<const CharT*>{source.data(),
   57|   592k|                                           source.data() + source.size()},
   58|   592k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   592k|    static_cast<    \
  |  |  247|   592k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   592k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   592k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   592k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   592k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 40.4k, False: 552k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  40.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  40.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  40.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  40.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  40.4k|    }                                                  \
  |  |  |  |   70|   592k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   552k|    return ranges::distance(source.data(), it);
   61|   592k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  1.42M|    {
  314|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  1.42M|    {
  264|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  1.42M|{
  441|  1.42M|    const auto beg = handler.get_ctx().begin();
  442|  1.42M|    detail::parse_format_string<false>(format, handler);
  443|  1.42M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 134k, False: 1.28M]
  |  |  ------------------
  ------------------
  444|   134k|        return unexpected(handler.error);
  445|   134k|    }
  446|  1.28M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  1.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  9.69M|    {
  425|  9.69M|        return ctx.get();
  426|  9.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  9.69M|    {
  268|  9.69M|        return contiguous_ctx;
  269|  9.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  2.71M|    {
  318|  2.71M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 2.71M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  2.71M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  1.42M|{
   92|  1.42M|    auto arg = ctx.arg(id);
   93|  1.42M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  1.42M|    return arg;
   97|  1.42M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  1.42M|    {
  347|  1.42M|        return parse_ctx.next_arg_id();
  348|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  1.42M|    {
  388|  1.42M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  1.42M|        set_arg_as_visited(arg_id);
  390|       |
  391|  1.42M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 1.42M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  1.42M|        auto specs = detail::format_specs{};
  401|  1.42M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  1.42M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  1.42M|            arg.type()};
  404|       |
  405|  1.42M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  1.42M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 1.42M]
  |  Branch (406:29): [True: 0, False: 1.42M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  1.42M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.42M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  1.42M|        parse_ctx.advance_to(begin);
  415|       |
  416|  1.42M|        on_visit_scan_arg(
  417|  1.42M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  1.42M|                                           get_ctx().locale()},
  419|  1.42M|            arg);
  420|  1.42M|        return parse_ctx.begin();
  421|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  1.42M|    {
  112|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  1.42M|    {
  359|  1.42M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 1.42M]
  |  Branch (359:23): [True: 0, False: 1.42M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  1.42M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  1.42M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 134k, False: 1.28M]
  |  |  ------------------
  ------------------
  366|   134k|            on_error(r.error());
  367|   134k|        }
  368|  1.28M|        else {
  369|  1.28M|            get_ctx().advance_to(*r);
  370|  1.28M|        }
  371|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   296k|{
  476|   296k|    const auto argcount = args.size();
  477|   296k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 53.8k, False: 242k]
  |  Branch (477:60): [True: 53.8k, False: 0]
  ------------------
  478|  53.8k|        auto arg = args.get(0);
  479|  53.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  53.8k|    static_cast<    \
  |  |  247|  53.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  53.8k|    }
  481|       |
  482|   242k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 242k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   242k|    SCN_UNLIKELY_ATTR
  490|   242k|    {
  491|   242k|        auto handler = format_handler<false, CharT>{
  492|   242k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   242k|    static_cast<    \
  |  |  247|   242k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   242k|        return vscan_parse_format_string(format, handler);
  494|   242k|    }
  495|   242k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  80.8k|{
   69|  80.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  80.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  80.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 80.8k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  80.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  80.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  80.8k|    static_cast<    \
  |  |  247|  80.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  80.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  80.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 40.4k, False: 40.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  40.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  40.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  40.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  40.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  40.4k|    }                                                  \
  |  |  |  |   70|  80.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  40.4k|    return it.position();
   86|  80.8k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   242k|    {
  314|   242k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   242k|    {
  241|   242k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   242k|{
  441|   242k|    const auto beg = handler.get_ctx().begin();
  442|   242k|    detail::parse_format_string<false>(format, handler);
  443|   242k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 134k, False: 107k]
  |  |  ------------------
  ------------------
  444|   134k|        return unexpected(handler.error);
  445|   134k|    }
  446|   107k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   242k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.42M|    {
  425|  1.42M|        return ctx.get();
  426|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.42M|    {
  245|  1.42M|        return ctx;
  246|  1.42M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   350k|    {
  318|   350k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 350k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   350k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   242k|{
   92|   242k|    auto arg = ctx.arg(id);
   93|   242k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 242k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   242k|    return arg;
   97|   242k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   242k|    {
  347|   242k|        return parse_ctx.next_arg_id();
  348|   242k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   242k|    {
  388|   242k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   242k|        set_arg_as_visited(arg_id);
  390|       |
  391|   242k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 242k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   242k|        auto specs = detail::format_specs{};
  401|   242k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   242k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   242k|            arg.type()};
  404|       |
  405|   242k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   242k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 242k]
  |  Branch (406:29): [True: 0, False: 242k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   242k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 242k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   242k|        parse_ctx.advance_to(begin);
  415|       |
  416|   242k|        on_visit_scan_arg(
  417|   242k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   242k|                                           get_ctx().locale()},
  419|   242k|            arg);
  420|   242k|        return parse_ctx.begin();
  421|   242k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   242k|    {
  112|   242k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   242k|    {
  359|   242k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 242k]
  |  Branch (359:23): [True: 0, False: 242k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   242k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   242k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 134k, False: 107k]
  |  |  ------------------
  ------------------
  366|   134k|            on_error(r.error());
  367|   134k|        }
  368|   107k|        else {
  369|   107k|            get_ctx().advance_to(*r);
  370|   107k|        }
  371|   242k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   239k|{
  502|   239k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   239k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  7.56k|{
  502|  7.56k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  7.56k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   197k|{
  502|   197k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   197k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  26.9k|{
  502|  26.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  26.9k|}

LLVMFuzzerTestOneInput:
   54|  2.52k|{
   55|  2.52k|    scn::fuzz::run({data, size});
   56|  2.52k|    return 0;
   57|  2.52k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   32|  2.52k|{
   33|  2.52k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.52k]
  |  Branch (33:42): [True: 0, False: 2.52k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.52k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   38|       |
   39|  2.52k|    auto f =
   40|  2.52k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.52k|    do_basic_run(sv, f);
   42|       |
   43|  2.52k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}", L"{:f}",
   44|  2.52k|                                          L"{:g}", L"{:L}");
   45|  2.52k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.52k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 1.97k, False: 548]
  ------------------
   47|  1.97k|        do_basic_run(wsv_transcode, wf);
   48|  1.97k|    }
   49|  2.52k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.52k|{
   25|  2.52k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.52k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.52k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.52k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.52k|{
   25|  2.52k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.52k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.52k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.52k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  4.49k|{
   25|  4.49k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.49k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.49k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.49k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  4.49k|{
   25|  4.49k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.49k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.49k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.49k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.52k|{
   52|  2.52k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.52k|    std::copy(data.begin(), data.end(),
   57|  2.52k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.52k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.52k|    const auto wsv_reinterpret_size =
   62|  2.52k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 63, False: 2.45k]
  ------------------
   63|  2.52k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.52k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.52k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.52k|    std::wstring_view wsv_transcoded;
   69|  2.52k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.97k, False: 548]
  ------------------
   70|  1.97k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.97k|        else {
   79|  1.97k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.97k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.97k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.97k|                sv.data(), sv.size(),
   83|  1.97k|                reinterpret_cast<char32_t*>(
   84|  1.97k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.97k|        }
   86|  1.97k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.97k|    }
   88|       |
   89|  2.52k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.52k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.52k|{
  140|  2.52k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.52k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.52k|    buf.resize(sizeof...(Args));
  143|  2.52k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.52k|    return {buf.data(), buf.size()};
  145|  2.52k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.52k|{
  126|  2.52k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.52k|        return format_string_view_buffer;
  128|  2.52k|    }
  129|  2.52k|    else {
  130|  2.52k|        return wformat_string_view_buffer;
  131|  2.52k|    }
  132|  2.52k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.52k|{
  200|  2.52k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.52k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.52k|                                   format_strings);
  203|  2.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.52k|{
  151|       |    // Regular scan
  152|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.1k, False: 2.52k]
  ------------------
  153|  15.1k|        auto it = scn::ranges::begin(source);
  154|   331k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   331k|            auto result = scn::scan<T>(
  156|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   331k|                scn::runtime_format(f));
  158|   331k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.1k, False: 316k]
  ------------------
  159|  15.1k|                break;
  160|  15.1k|            }
  161|   316k|            it = result->begin();
  162|   316k|        }
  163|  15.1k|    }
  164|       |
  165|       |    // scan localized
  166|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.1k, False: 2.52k]
  ------------------
  167|  15.1k|        auto it = scn::ranges::begin(source);
  168|   331k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   331k|            auto result = scn::scan<T>(
  170|   331k|                global_locale,
  171|   331k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   331k|                scn::runtime_format(f));
  173|   331k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.1k, False: 316k]
  ------------------
  174|  15.1k|                break;
  175|  15.1k|            }
  176|   316k|            it = result->begin();
  177|   316k|        }
  178|  15.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.52k|    {
  182|  2.52k|        auto it = scn::ranges::begin(source);
  183|  72.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  72.8k|            auto result = scn::scan_value<T>(
  185|  72.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  72.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.52k, False: 70.3k]
  ------------------
  187|  2.52k|                break;
  188|  2.52k|            }
  189|  70.3k|            it = result->begin();
  190|  70.3k|        }
  191|  2.52k|    }
  192|  2.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.52k|{
  151|       |    // Regular scan
  152|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.1k, False: 2.52k]
  ------------------
  153|  15.1k|        auto it = scn::ranges::begin(source);
  154|   369k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   369k|            auto result = scn::scan<T>(
  156|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   369k|                scn::runtime_format(f));
  158|   369k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.1k, False: 354k]
  ------------------
  159|  15.1k|                break;
  160|  15.1k|            }
  161|   354k|            it = result->begin();
  162|   354k|        }
  163|  15.1k|    }
  164|       |
  165|       |    // scan localized
  166|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.1k, False: 2.52k]
  ------------------
  167|  15.1k|        auto it = scn::ranges::begin(source);
  168|   369k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   369k|            auto result = scn::scan<T>(
  170|   369k|                global_locale,
  171|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   369k|                scn::runtime_format(f));
  173|   369k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.1k, False: 354k]
  ------------------
  174|  15.1k|                break;
  175|  15.1k|            }
  176|   354k|            it = result->begin();
  177|   354k|        }
  178|  15.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.52k|    {
  182|  2.52k|        auto it = scn::ranges::begin(source);
  183|  82.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  82.2k|            auto result = scn::scan_value<T>(
  185|  82.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  82.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.52k, False: 79.7k]
  ------------------
  187|  2.52k|                break;
  188|  2.52k|            }
  189|  79.7k|            it = result->begin();
  190|  79.7k|        }
  191|  2.52k|    }
  192|  2.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.52k|{
  151|       |    // Regular scan
  152|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.1k, False: 2.52k]
  ------------------
  153|  15.1k|        auto it = scn::ranges::begin(source);
  154|   375k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   375k|            auto result = scn::scan<T>(
  156|   375k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   375k|                scn::runtime_format(f));
  158|   375k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.1k, False: 360k]
  ------------------
  159|  15.1k|                break;
  160|  15.1k|            }
  161|   360k|            it = result->begin();
  162|   360k|        }
  163|  15.1k|    }
  164|       |
  165|       |    // scan localized
  166|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.1k, False: 2.52k]
  ------------------
  167|  15.1k|        auto it = scn::ranges::begin(source);
  168|   375k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   375k|            auto result = scn::scan<T>(
  170|   375k|                global_locale,
  171|   375k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   375k|                scn::runtime_format(f));
  173|   375k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.1k, False: 360k]
  ------------------
  174|  15.1k|                break;
  175|  15.1k|            }
  176|   360k|            it = result->begin();
  177|   360k|        }
  178|  15.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.52k|    {
  182|  2.52k|        auto it = scn::ranges::begin(source);
  183|  84.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  84.0k|            auto result = scn::scan_value<T>(
  185|  84.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  84.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.52k, False: 81.5k]
  ------------------
  187|  2.52k|                break;
  188|  2.52k|            }
  189|  81.5k|            it = result->begin();
  190|  81.5k|        }
  191|  2.52k|    }
  192|  2.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.52k|{
  151|       |    // Regular scan
  152|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.1k, False: 2.52k]
  ------------------
  153|  15.1k|        auto it = scn::ranges::begin(source);
  154|  15.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.1k|            auto result = scn::scan<T>(
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.1k, False: 0]
  ------------------
  159|  15.1k|                break;
  160|  15.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.1k|    }
  164|       |
  165|       |    // scan localized
  166|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.1k, False: 2.52k]
  ------------------
  167|  15.1k|        auto it = scn::ranges::begin(source);
  168|  15.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.1k|            auto result = scn::scan<T>(
  170|  15.1k|                global_locale,
  171|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.1k|                scn::runtime_format(f));
  173|  15.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.1k, False: 0]
  ------------------
  174|  15.1k|                break;
  175|  15.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.52k|    {
  182|  2.52k|        auto it = scn::ranges::begin(source);
  183|  2.52k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.52k|            auto result = scn::scan_value<T>(
  185|  2.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.52k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.52k, False: 0]
  ------------------
  187|  2.52k|                break;
  188|  2.52k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.52k|    }
  192|  2.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.52k|{
  151|       |    // Regular scan
  152|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.1k, False: 2.52k]
  ------------------
  153|  15.1k|        auto it = scn::ranges::begin(source);
  154|  15.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.1k|            auto result = scn::scan<T>(
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.1k, False: 0]
  ------------------
  159|  15.1k|                break;
  160|  15.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.1k|    }
  164|       |
  165|       |    // scan localized
  166|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.1k, False: 2.52k]
  ------------------
  167|  15.1k|        auto it = scn::ranges::begin(source);
  168|  15.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.1k|            auto result = scn::scan<T>(
  170|  15.1k|                global_locale,
  171|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.1k|                scn::runtime_format(f));
  173|  15.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.1k, False: 0]
  ------------------
  174|  15.1k|                break;
  175|  15.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.52k|    {
  182|  2.52k|        auto it = scn::ranges::begin(source);
  183|  2.52k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.52k|            auto result = scn::scan_value<T>(
  185|  2.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.52k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.52k, False: 0]
  ------------------
  187|  2.52k|                break;
  188|  2.52k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.52k|    }
  192|  2.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.52k|{
  151|       |    // Regular scan
  152|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 15.1k, False: 2.52k]
  ------------------
  153|  15.1k|        auto it = scn::ranges::begin(source);
  154|  15.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  15.1k|            auto result = scn::scan<T>(
  156|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.1k|                scn::runtime_format(f));
  158|  15.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 15.1k, False: 0]
  ------------------
  159|  15.1k|                break;
  160|  15.1k|            }
  161|      0|            it = result->begin();
  162|      0|        }
  163|  15.1k|    }
  164|       |
  165|       |    // scan localized
  166|  15.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 15.1k, False: 2.52k]
  ------------------
  167|  15.1k|        auto it = scn::ranges::begin(source);
  168|  15.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.1k|            auto result = scn::scan<T>(
  170|  15.1k|                global_locale,
  171|  15.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  15.1k|                scn::runtime_format(f));
  173|  15.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 15.1k, False: 0]
  ------------------
  174|  15.1k|                break;
  175|  15.1k|            }
  176|      0|            it = result->begin();
  177|      0|        }
  178|  15.1k|    }
  179|       |
  180|       |    // scan_value
  181|  2.52k|    {
  182|  2.52k|        auto it = scn::ranges::begin(source);
  183|  2.52k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.52k|            auto result = scn::scan_value<T>(
  185|  2.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.52k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.52k, False: 0]
  ------------------
  187|  2.52k|                break;
  188|  2.52k|            }
  189|      0|            it = result->begin();
  190|      0|        }
  191|  2.52k|    }
  192|  2.52k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.52k|{
  109|  2.52k|    using char_type = ranges::range_value_t<Source>;
  110|  2.52k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.52k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.52k|              std::back_inserter(deque));
  113|  2.52k|    return deque;
  114|  2.52k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.52k|{
   98|  2.52k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.52k|        return noncontiguous_buffer;
  100|  2.52k|    }
  101|  2.52k|    else {
  102|  2.52k|        return wnoncontiguous_buffer;
  103|  2.52k|    }
  104|  2.52k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.52k|{
  140|  2.52k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.52k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.52k|    buf.resize(sizeof...(Args));
  143|  2.52k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.52k|    return {buf.data(), buf.size()};
  145|  2.52k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.52k|{
  126|  2.52k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.52k|        return format_string_view_buffer;
  128|  2.52k|    }
  129|  2.52k|    else {
  130|  2.52k|        return wformat_string_view_buffer;
  131|  2.52k|    }
  132|  2.52k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  4.49k|{
  200|  4.49k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  4.49k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  4.49k|                                   format_strings);
  203|  4.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.49k|{
  151|       |    // Regular scan
  152|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 26.9k, False: 4.49k]
  ------------------
  153|  26.9k|        auto it = scn::ranges::begin(source);
  154|   281k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   281k|            auto result = scn::scan<T>(
  156|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   281k|                scn::runtime_format(f));
  158|   281k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 26.9k, False: 254k]
  ------------------
  159|  26.9k|                break;
  160|  26.9k|            }
  161|   254k|            it = result->begin();
  162|   254k|        }
  163|  26.9k|    }
  164|       |
  165|       |    // scan localized
  166|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 26.9k, False: 4.49k]
  ------------------
  167|  26.9k|        auto it = scn::ranges::begin(source);
  168|   281k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   281k|            auto result = scn::scan<T>(
  170|   281k|                global_locale,
  171|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   281k|                scn::runtime_format(f));
  173|   281k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 26.9k, False: 254k]
  ------------------
  174|  26.9k|                break;
  175|  26.9k|            }
  176|   254k|            it = result->begin();
  177|   254k|        }
  178|  26.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.49k|    {
  182|  4.49k|        auto it = scn::ranges::begin(source);
  183|  60.3k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  60.3k|            auto result = scn::scan_value<T>(
  185|  60.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  60.3k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.49k, False: 55.8k]
  ------------------
  187|  4.49k|                break;
  188|  4.49k|            }
  189|  55.8k|            it = result->begin();
  190|  55.8k|        }
  191|  4.49k|    }
  192|  4.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.49k|{
  151|       |    // Regular scan
  152|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 26.9k, False: 4.49k]
  ------------------
  153|  26.9k|        auto it = scn::ranges::begin(source);
  154|   311k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   311k|            auto result = scn::scan<T>(
  156|   311k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   311k|                scn::runtime_format(f));
  158|   311k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 26.9k, False: 284k]
  ------------------
  159|  26.9k|                break;
  160|  26.9k|            }
  161|   284k|            it = result->begin();
  162|   284k|        }
  163|  26.9k|    }
  164|       |
  165|       |    // scan localized
  166|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 26.9k, False: 4.49k]
  ------------------
  167|  26.9k|        auto it = scn::ranges::begin(source);
  168|   311k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   311k|            auto result = scn::scan<T>(
  170|   311k|                global_locale,
  171|   311k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   311k|                scn::runtime_format(f));
  173|   311k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 26.9k, False: 284k]
  ------------------
  174|  26.9k|                break;
  175|  26.9k|            }
  176|   284k|            it = result->begin();
  177|   284k|        }
  178|  26.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.49k|    {
  182|  4.49k|        auto it = scn::ranges::begin(source);
  183|  67.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  67.9k|            auto result = scn::scan_value<T>(
  185|  67.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  67.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.49k, False: 63.4k]
  ------------------
  187|  4.49k|                break;
  188|  4.49k|            }
  189|  63.4k|            it = result->begin();
  190|  63.4k|        }
  191|  4.49k|    }
  192|  4.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.49k|{
  151|       |    // Regular scan
  152|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 26.9k, False: 4.49k]
  ------------------
  153|  26.9k|        auto it = scn::ranges::begin(source);
  154|   315k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   315k|            auto result = scn::scan<T>(
  156|   315k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   315k|                scn::runtime_format(f));
  158|   315k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 26.9k, False: 288k]
  ------------------
  159|  26.9k|                break;
  160|  26.9k|            }
  161|   288k|            it = result->begin();
  162|   288k|        }
  163|  26.9k|    }
  164|       |
  165|       |    // scan localized
  166|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 26.9k, False: 4.49k]
  ------------------
  167|  26.9k|        auto it = scn::ranges::begin(source);
  168|   315k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   315k|            auto result = scn::scan<T>(
  170|   315k|                global_locale,
  171|   315k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   315k|                scn::runtime_format(f));
  173|   315k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 26.9k, False: 288k]
  ------------------
  174|  26.9k|                break;
  175|  26.9k|            }
  176|   288k|            it = result->begin();
  177|   288k|        }
  178|  26.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.49k|    {
  182|  4.49k|        auto it = scn::ranges::begin(source);
  183|  69.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  69.2k|            auto result = scn::scan_value<T>(
  185|  69.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  69.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.49k, False: 64.7k]
  ------------------
  187|  4.49k|                break;
  188|  4.49k|            }
  189|  64.7k|            it = result->begin();
  190|  64.7k|        }
  191|  4.49k|    }
  192|  4.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.49k|{
  151|       |    // Regular scan
  152|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 26.9k, False: 4.49k]
  ------------------
  153|  26.9k|        auto it = scn::ranges::begin(source);
  154|  49.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  49.4k|            auto result = scn::scan<T>(
  156|  49.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  49.4k|                scn::runtime_format(f));
  158|  49.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 26.9k, False: 22.4k]
  ------------------
  159|  26.9k|                break;
  160|  26.9k|            }
  161|  22.4k|            it = result->begin();
  162|  22.4k|        }
  163|  26.9k|    }
  164|       |
  165|       |    // scan localized
  166|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 26.9k, False: 4.49k]
  ------------------
  167|  26.9k|        auto it = scn::ranges::begin(source);
  168|  49.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  49.4k|            auto result = scn::scan<T>(
  170|  49.4k|                global_locale,
  171|  49.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  49.4k|                scn::runtime_format(f));
  173|  49.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 26.9k, False: 22.4k]
  ------------------
  174|  26.9k|                break;
  175|  26.9k|            }
  176|  22.4k|            it = result->begin();
  177|  22.4k|        }
  178|  26.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.49k|    {
  182|  4.49k|        auto it = scn::ranges::begin(source);
  183|  8.98k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.98k|            auto result = scn::scan_value<T>(
  185|  8.98k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.98k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.49k, False: 4.48k]
  ------------------
  187|  4.49k|                break;
  188|  4.49k|            }
  189|  4.48k|            it = result->begin();
  190|  4.48k|        }
  191|  4.49k|    }
  192|  4.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.49k|{
  151|       |    // Regular scan
  152|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 26.9k, False: 4.49k]
  ------------------
  153|  26.9k|        auto it = scn::ranges::begin(source);
  154|  49.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  49.4k|            auto result = scn::scan<T>(
  156|  49.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  49.4k|                scn::runtime_format(f));
  158|  49.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 26.9k, False: 22.4k]
  ------------------
  159|  26.9k|                break;
  160|  26.9k|            }
  161|  22.4k|            it = result->begin();
  162|  22.4k|        }
  163|  26.9k|    }
  164|       |
  165|       |    // scan localized
  166|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 26.9k, False: 4.49k]
  ------------------
  167|  26.9k|        auto it = scn::ranges::begin(source);
  168|  49.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  49.4k|            auto result = scn::scan<T>(
  170|  49.4k|                global_locale,
  171|  49.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  49.4k|                scn::runtime_format(f));
  173|  49.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 26.9k, False: 22.4k]
  ------------------
  174|  26.9k|                break;
  175|  26.9k|            }
  176|  22.4k|            it = result->begin();
  177|  22.4k|        }
  178|  26.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.49k|    {
  182|  4.49k|        auto it = scn::ranges::begin(source);
  183|  8.98k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.98k|            auto result = scn::scan_value<T>(
  185|  8.98k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.98k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.49k, False: 4.48k]
  ------------------
  187|  4.49k|                break;
  188|  4.49k|            }
  189|  4.48k|            it = result->begin();
  190|  4.48k|        }
  191|  4.49k|    }
  192|  4.49k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.49k|{
  151|       |    // Regular scan
  152|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 26.9k, False: 4.49k]
  ------------------
  153|  26.9k|        auto it = scn::ranges::begin(source);
  154|  49.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  49.4k|            auto result = scn::scan<T>(
  156|  49.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  49.4k|                scn::runtime_format(f));
  158|  49.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 26.9k, False: 22.4k]
  ------------------
  159|  26.9k|                break;
  160|  26.9k|            }
  161|  22.4k|            it = result->begin();
  162|  22.4k|        }
  163|  26.9k|    }
  164|       |
  165|       |    // scan localized
  166|  26.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 26.9k, False: 4.49k]
  ------------------
  167|  26.9k|        auto it = scn::ranges::begin(source);
  168|  49.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  49.4k|            auto result = scn::scan<T>(
  170|  49.4k|                global_locale,
  171|  49.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  49.4k|                scn::runtime_format(f));
  173|  49.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 26.9k, False: 22.4k]
  ------------------
  174|  26.9k|                break;
  175|  26.9k|            }
  176|  22.4k|            it = result->begin();
  177|  22.4k|        }
  178|  26.9k|    }
  179|       |
  180|       |    // scan_value
  181|  4.49k|    {
  182|  4.49k|        auto it = scn::ranges::begin(source);
  183|  8.98k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.98k|            auto result = scn::scan_value<T>(
  185|  8.98k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.98k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.49k, False: 4.48k]
  ------------------
  187|  4.49k|                break;
  188|  4.49k|            }
  189|  4.48k|            it = result->begin();
  190|  4.48k|        }
  191|  4.49k|    }
  192|  4.49k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  4.49k|{
  109|  4.49k|    using char_type = ranges::range_value_t<Source>;
  110|  4.49k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  4.49k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  4.49k|              std::back_inserter(deque));
  113|  4.49k|    return deque;
  114|  4.49k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  4.49k|{
   98|  4.49k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  4.49k|        return noncontiguous_buffer;
  100|  4.49k|    }
  101|  4.49k|    else {
  102|  4.49k|        return wnoncontiguous_buffer;
  103|  4.49k|    }
  104|  4.49k|}

