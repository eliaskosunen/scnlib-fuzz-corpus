_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.21M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.21M|  chars_format const fmt = options.format;
  277|  2.21M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.21M|  parsed_number_string_t<UC> answer;
  280|  2.21M|  answer.valid = false;
  281|  2.21M|  answer.too_many_digits = false;
  282|  2.21M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.21M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.21M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.21M|  UC const * const start_digits = p;
  303|       |
  304|  2.21M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  13.0M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 12.0M, False: 1.07M]
  |  Branch (306:25): [True: 10.8M, False: 1.14M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  10.8M|    i = 10 * i +
  310|  10.8M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  10.8M|    ++p;
  312|  10.8M|  }
  313|  2.21M|  UC const * const end_of_integer_part = p;
  314|  2.21M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.21M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.21M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.21M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.21M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.21M|  int64_t exponent = 0;
  324|  2.21M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.14M, False: 1.07M]
  |  Branch (324:49): [True: 377k, False: 768k]
  ------------------
  325|  2.21M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 377k, False: 1.84M]
  ------------------
  326|   377k|    ++p;
  327|   377k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   377k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.50M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.28M, False: 224k]
  |  Branch (332:27): [True: 1.13M, False: 153k]
  ------------------
  333|  1.13M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.13M|      ++p;
  335|  1.13M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.13M|    }
  337|   377k|    exponent = before - p;
  338|   377k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   377k|    digit_count -= exponent;
  340|   377k|  }
  341|  2.21M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.21M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.21M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.21M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.21M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.21M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.21M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.94M, False: 271k]
  ------------------
  352|  2.21M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 921k, False: 1.02M]
  ------------------
  353|  2.21M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 237k, False: 683k]
  |  Branch (353:29): [True: 82.3k, False: 600k]
  ------------------
  354|  2.21M|       ||
  355|  2.21M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.89M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.89M]
  ------------------
  356|  1.89M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.89M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   320k|    UC const * location_of_e = p;
  359|   320k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 237k, False: 82.3k]
  |  Branch (359:28): [True: 82.3k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   320k|      ++p;
  361|   320k|    }
  362|   320k|    bool neg_exp = false;
  363|   320k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 320k, False: 215]
  |  Branch (363:24): [True: 22.7k, False: 297k]
  ------------------
  364|  22.7k|      neg_exp = true;
  365|  22.7k|      ++p;
  366|   297k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 297k, False: 215]
  |  Branch (366:31): [True: 58.6k, False: 238k]
  ------------------
  367|  58.6k|      ++p;
  368|  58.6k|    }
  369|   320k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 255, False: 320k]
  |  Branch (369:24): [True: 945, False: 319k]
  ------------------
  370|  1.20k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.20k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.20k|      p = location_of_e;
  376|   319k|    } else {
  377|  1.03M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 825k, False: 214k]
  |  Branch (377:29): [True: 720k, False: 104k]
  ------------------
  378|   720k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   720k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 673k, False: 47.2k]
  ------------------
  380|   673k|          exp_number = 10 * exp_number + digit;
  381|   673k|        }
  382|   720k|        ++p;
  383|   720k|      }
  384|   319k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 22.6k, False: 296k]
  ------------------
  385|   319k|      exponent += exp_number;
  386|   319k|    }
  387|  1.89M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.89M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.62M, False: 271k]
  |  Branch (389:44): [True: 0, False: 1.62M]
  ------------------
  390|  1.89M|  }
  391|  2.21M|  answer.lastmatch = p;
  392|  2.21M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.21M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 348k, False: 1.87M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   348k|    UC const * start = start_digits;
  405|  3.21M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.20M, False: 14.6k]
  |  Branch (405:32): [True: 2.80M, False: 398k]
  |  Branch (405:53): [True: 64.2k, False: 334k]
  ------------------
  406|  2.86M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.80M, False: 64.2k]
  ------------------
  407|  2.86M|      start++;
  408|  2.86M|    }
  409|       |
  410|   348k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 297k, False: 51.2k]
  ------------------
  411|   297k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   297k|      i = 0;
  416|   297k|      p = answer.integer.ptr;
  417|   297k|      UC const* int_end = p + answer.integer.len();
  418|   297k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  4.06M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.97M, False: 96.5k]
  |  Branch (419:54): [True: 3.77M, False: 201k]
  ------------------
  420|  3.77M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.77M|        ++p;
  422|  3.77M|      }
  423|   297k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 96.5k, False: 201k]
  ------------------
  424|  96.5k|        exponent = end_of_integer_part - p + exp_number;
  425|  96.5k|      }
  426|   201k|      else { // We have a value with a fractional component.
  427|   201k|        p = answer.fraction.ptr;
  428|   201k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.81M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.61M, False: 201k]
  |  Branch (429:56): [True: 3.61M, False: 0]
  ------------------
  430|  3.61M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.61M|          ++p;
  432|  3.61M|        }
  433|   201k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   201k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   297k|    }
  437|   348k|  }
  438|  2.21M|  answer.exponent = exponent;
  439|  2.21M|  answer.mantissa = i;
  440|  2.21M|  return answer;
  441|  2.21M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  14.4M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  14.4M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 363k, False: 14.0M]
  |  Branch (36:27): [True: 1.04M, False: 13.0M]
  ------------------
   37|  14.4M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   377k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.54M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.30M, False: 244k]
  |  Branch (249:43): [True: 1.16M, False: 132k]
  ------------------
  250|  1.16M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.16M|    p += 8;
  252|  1.16M|  }
  253|   377k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.30M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.30M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.30M|     0x8080808080808080));
  172|  1.30M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.92M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.92M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.92M|  uint64_t val;
   63|  2.92M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.92M|  return val;
   69|  2.92M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.62M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.62M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.62M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.62M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.62M|  val -= 0x3030303030303030;
  151|  1.62M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.62M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.62M|  return uint32_t(val);
  154|  1.62M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   454k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   454k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   454k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   454k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   454k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  79.4k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  79.4k|  chars_format const fmt = options.format;
  277|  79.4k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  79.4k|  parsed_number_string_t<UC> answer;
  280|  79.4k|  answer.valid = false;
  281|  79.4k|  answer.too_many_digits = false;
  282|  79.4k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  79.4k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 79.4k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  79.4k|  UC const * const start_digits = p;
  303|       |
  304|  79.4k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   163k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 107k, False: 55.8k]
  |  Branch (306:25): [True: 84.1k, False: 23.5k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  84.1k|    i = 10 * i +
  310|  84.1k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  84.1k|    ++p;
  312|  84.1k|  }
  313|  79.4k|  UC const * const end_of_integer_part = p;
  314|  79.4k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  79.4k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  79.4k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  79.4k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 79.4k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  79.4k|  int64_t exponent = 0;
  324|  79.4k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 23.5k, False: 55.8k]
  |  Branch (324:49): [True: 72, False: 23.5k]
  ------------------
  325|  79.4k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 72, False: 79.3k]
  ------------------
  326|     72|    ++p;
  327|     72|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|     72|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|     72|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 20, False: 52]
  |  Branch (332:27): [True: 0, False: 20]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|     72|    exponent = before - p;
  338|     72|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|     72|    digit_count -= exponent;
  340|     72|  }
  341|  79.4k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  79.4k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 79.4k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  79.4k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 79.4k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  79.4k|  int64_t exp_number = 0;            // explicit exponential part
  351|  79.4k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 61.8k, False: 17.5k]
  ------------------
  352|  79.4k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 23.5k, False: 38.3k]
  ------------------
  353|  79.4k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 56, False: 23.4k]
  |  Branch (353:29): [True: 2.79k, False: 20.6k]
  ------------------
  354|  79.4k|       ||
  355|  79.4k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  76.5k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 76.5k]
  ------------------
  356|  76.5k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  76.5k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  2.85k|    UC const * location_of_e = p;
  359|  2.85k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 56, False: 2.79k]
  |  Branch (359:28): [True: 2.79k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  2.85k|      ++p;
  361|  2.85k|    }
  362|  2.85k|    bool neg_exp = false;
  363|  2.85k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 2.84k, False: 10]
  |  Branch (363:24): [True: 272, False: 2.57k]
  ------------------
  364|    272|      neg_exp = true;
  365|    272|      ++p;
  366|  2.58k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 2.57k, False: 10]
  |  Branch (366:31): [True: 0, False: 2.57k]
  ------------------
  367|      0|      ++p;
  368|      0|    }
  369|  2.85k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 2.84k]
  |  Branch (369:24): [True: 420, False: 2.42k]
  ------------------
  370|    430|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 430]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    430|      p = location_of_e;
  376|  2.42k|    } else {
  377|  7.36k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 5.58k, False: 1.77k]
  |  Branch (377:29): [True: 4.93k, False: 650]
  ------------------
  378|  4.93k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  4.93k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 4.93k, False: 0]
  ------------------
  380|  4.93k|          exp_number = 10 * exp_number + digit;
  381|  4.93k|        }
  382|  4.93k|        ++p;
  383|  4.93k|      }
  384|  2.42k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 252, False: 2.17k]
  ------------------
  385|  2.42k|      exponent += exp_number;
  386|  2.42k|    }
  387|  76.5k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  76.5k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 59.0k, False: 17.5k]
  |  Branch (389:44): [True: 0, False: 59.0k]
  ------------------
  390|  76.5k|  }
  391|  79.4k|  answer.lastmatch = p;
  392|  79.4k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  79.4k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 79.4k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|  79.4k|  answer.exponent = exponent;
  439|  79.4k|  answer.mantissa = i;
  440|  79.4k|  return answer;
  441|  79.4k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   116k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   116k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 24.2k, False: 91.8k]
  |  Branch (36:27): [True: 402, False: 91.4k]
  ------------------
   37|   116k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|     72|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|     72|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|     72|    return;
  240|     72|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  99.0k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   218k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   352k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   352k|    return small_mul(vec, y);
  565|   352k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   540k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   540k|  limb carry = 0;
  284|  2.60M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.06M, False: 540k]
  ------------------
  285|  2.06M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.06M|  }
  287|   540k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 349k, False: 191k]
  ------------------
  288|   349k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   349k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
  289|   349k|  }
  290|   540k|  return true;
  291|   540k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.62M|  constexpr size_t len() const noexcept {
   77|  4.62M|    return length;
   78|  4.62M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.06M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.06M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.06M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.06M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.06M|  carry = limb(z >> limb_bits);
  235|  2.06M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.06M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.47M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.47M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.47M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.47M|    return data[index];
   60|  5.47M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   472k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   472k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 472k, False: 0]
  ------------------
   93|   472k|      push_unchecked(value);
   94|   472k|      return true;
   95|   472k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   472k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   575k|  constexpr size_t capacity() const noexcept {
   83|   575k|    return size;
   84|   575k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   556k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   556k|    data[length] = value;
   88|   556k|    length++;
   89|   556k|  }
_ZN10fast_float6bigint3addEm:
  567|   352k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   352k|    return small_add(vec, y);
  569|   352k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   352k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   352k|  return small_add_from(vec, y, 0);
  277|   352k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   352k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   352k|  size_t index = start;
  259|   352k|  limb carry = y;
  260|   352k|  bool overflow;
  261|   522k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 268k, False: 253k]
  |  Branch (261:24): [True: 169k, False: 99.0k]
  ------------------
  262|   169k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   169k|    carry = limb(overflow);
  264|   169k|    index += 1;
  265|   169k|  }
  266|   352k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 99.0k, False: 253k]
  ------------------
  267|  99.0k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  99.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 99.0k]
  |  |  ------------------
  ------------------
  268|  99.0k|  }
  269|   352k|  return true;
  270|   352k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   568k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   568k|  limb z;
  211|       |// gcc and clang
  212|   568k|#if defined(__has_builtin)
  213|   568k|  #if __has_builtin(__builtin_add_overflow)
  214|   568k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   568k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   568k|      return z;
  217|   568k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   568k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  15.1k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  15.1k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  15.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.1k]
  |  |  ------------------
  ------------------
  611|  15.1k|    return pow2(exp);
  612|  15.1k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  99.0k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  99.0k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  99.0k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|   107k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.86k, False: 99.0k]
  ------------------
  582|  8.86k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.86k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
  583|  8.86k|      exp -= large_step;
  584|  8.86k|    }
  585|  99.0k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  99.0k|    uint32_t small_step = 27;
  587|  99.0k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   163k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 64.4k, False: 99.0k]
  ------------------
  593|  64.4k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  64.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 64.4k]
  |  |  ------------------
  ------------------
  594|  64.4k|      exp -= small_step;
  595|  64.4k|    }
  596|  99.0k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 79.3k, False: 19.7k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  79.3k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  79.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 79.3k]
  |  |  ------------------
  ------------------
  601|  79.3k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  79.3k|      );
  603|  79.3k|    }
  604|       |
  605|  99.0k|    return true;
  606|  99.0k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.86k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.86k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.86k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.86k|  } else {
  368|  8.86k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.86k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
  369|  8.86k|  }
  370|  8.86k|  return true;
  371|  8.86k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.86k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.86k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.86k|  stackvec<size> z(xs);
  338|  8.86k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.86k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.86k, False: 0]
  ------------------
  341|  8.86k|    limb y0 = y[0];
  342|  8.86k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.86k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.86k]
  |  |  ------------------
  ------------------
  343|  44.3k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 35.4k, False: 8.86k]
  ------------------
  344|  35.4k|      limb yi = y[index];
  345|  35.4k|      stackvec<size> zi;
  346|  35.4k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 35.4k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  35.4k|        zi.set_len(0);
  349|  35.4k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  35.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.4k]
  |  |  ------------------
  ------------------
  350|  35.4k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  35.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.4k]
  |  |  ------------------
  ------------------
  351|  35.4k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  35.4k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  35.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.4k]
  |  |  ------------------
  ------------------
  353|  35.4k|      }
  354|  35.4k|    }
  355|  8.86k|  }
  356|       |
  357|  8.86k|  x.normalize();
  358|  8.86k|  return true;
  359|  8.86k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.86k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.86k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.86k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.86k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   138k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   138k|    length = uint16_t(len);
   75|   138k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  44.3k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  44.3k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 44.3k, False: 0]
  ------------------
  108|  44.3k|      extend_unchecked(s);
  109|  44.3k|      return true;
  110|  44.3k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  44.3k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  44.3k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  44.3k|    limb* ptr = data + length;
  102|  44.3k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  44.3k|    set_len(len() + s.len());
  104|  44.3k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  35.4k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  35.4k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 35.4k]
  |  Branch (300:26): [True: 35.0k, False: 396]
  ------------------
  301|  35.0k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  35.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.0k]
  |  |  ------------------
  ------------------
  302|  35.0k|  }
  303|       |
  304|  35.4k|  bool carry = false;
  305|   325k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 289k, False: 35.4k]
  ------------------
  306|   289k|    limb xi = x[index + start];
  307|   289k|    limb yi = y[index];
  308|   289k|    bool c1 = false;
  309|   289k|    bool c2 = false;
  310|   289k|    xi = scalar_add(xi, yi, c1);
  311|   289k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 108k, False: 181k]
  ------------------
  312|   108k|      xi = scalar_add(xi, 1, c2);
  313|   108k|    }
  314|   289k|    x[index + start] = xi;
  315|   289k|    carry = c1 | c2;
  316|   289k|  }
  317|       |
  318|       |  // handle overflow
  319|  35.4k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 35.4k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  35.4k|  return true;
  323|  35.4k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  35.0k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  35.0k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 35.0k]
  ------------------
  132|      0|      return false;
  133|  35.0k|    } else {
  134|  35.0k|      resize_unchecked(new_len, value);
  135|  35.0k|      return true;
  136|  35.0k|    }
  137|  35.0k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  35.0k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  35.0k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 35.0k, False: 0]
  ------------------
  120|  35.0k|      size_t count = new_len - len();
  121|  35.0k|      limb* first = data + len();
  122|  35.0k|      limb* last = first + count;
  123|  35.0k|      ::std::fill(first, last, value);
  124|  35.0k|      set_len(new_len);
  125|  35.0k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  35.0k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  92.8k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  92.8k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 92.8k, False: 0]
  |  Branch (152:25): [True: 0, False: 92.8k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  92.8k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   137k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   137k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   137k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   137k|    size_t rindex = length - index - 1;
   69|   137k|    return data[rindex];
   70|   137k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  98.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  98.9k|    return shl(exp);
  574|  98.9k|  }
_ZN10fast_float6bigint3shlEm:
  530|  98.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  98.9k|    size_t rem = n % limb_bits;
  532|  98.9k|    size_t div = n / limb_bits;
  533|  98.9k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 83.6k, False: 15.3k]
  ------------------
  534|  83.6k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  83.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 83.6k]
  |  |  ------------------
  ------------------
  535|  83.6k|    }
  536|  98.9k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 23.2k, False: 75.7k]
  ------------------
  537|  23.2k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  23.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 23.2k]
  |  |  ------------------
  ------------------
  538|  23.2k|    }
  539|  98.9k|    return true;
  540|  98.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  83.6k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  83.6k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  83.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  83.6k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  83.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  83.6k|    size_t shl = n;
  493|  83.6k|    size_t shr = limb_bits - shl;
  494|  83.6k|    limb prev = 0;
  495|   302k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 218k, False: 83.6k]
  ------------------
  496|   218k|      limb xi = vec[index];
  497|   218k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   218k|      prev = xi;
  499|   218k|    }
  500|       |
  501|  83.6k|    limb carry = prev >> shr;
  502|  83.6k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 24.0k, False: 59.6k]
  ------------------
  503|  24.0k|      return vec.try_push(carry);
  504|  24.0k|    }
  505|  59.6k|    return true;
  506|  83.6k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  23.2k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  23.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  23.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  23.2k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 23.2k]
  ------------------
  512|      0|      return false;
  513|  23.2k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 23.2k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  23.2k|      limb* dst = vec.data + n;
  516|  23.2k|      const limb* src = vec.data;
  517|  23.2k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  23.2k|      limb* first = vec.data;
  520|  23.2k|      limb* last = first + n;
  521|  23.2k|      ::std::fill(first, last, 0);
  522|  23.2k|      vec.set_len(n + vec.len());
  523|  23.2k|      return true;
  524|  23.2k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  23.2k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  38.3k|  constexpr bool is_empty() const noexcept {
   80|  38.3k|    return length == 0;
   81|  38.3k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  15.1k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  15.1k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  15.1k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 15.1k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  15.1k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.90k, False: 13.2k]
  ------------------
  435|  1.90k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.2k|    } else {
  437|  13.2k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.2k|      truncated |= vec.nonzero(2);
  439|  13.2k|      return result;
  440|  13.2k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  15.1k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.90k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.90k|  truncated = false;
  167|  1.90k|  int shl = leading_zeroes(r0);
  168|  1.90k|  return r0 << shl;
  169|  1.90k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.2k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.2k|  int shl = leading_zeroes(r0);
  174|  13.2k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.1k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.1k|  } else {
  178|  13.1k|    int shr = 64 - shl;
  179|  13.1k|    truncated = (r1 << shl) != 0;
  180|  13.1k|    return (r0 << shl) | (r1 >> shr);
  181|  13.1k|  }
  182|  13.2k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.2k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.2k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 838, False: 12.4k]
  ------------------
  143|    838|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 784, False: 54]
  ------------------
  144|    784|        return true;
  145|    784|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.4k|    return false;
  149|  13.2k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  15.1k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  15.1k|    int lz = ctlz();
  560|  15.1k|    return int(limb_bits * vec.len()) - lz;
  561|  15.1k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  15.1k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  15.1k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 15.1k]
  ------------------
  545|      0|      return 0;
  546|  15.1k|    } else {
  547|  15.1k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  15.1k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  15.1k|    }
  555|  15.1k|  }
_ZN10fast_float6bigintC2Em:
  418|  83.9k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  83.9k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  83.9k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  83.9k|    vec.normalize();
  426|  83.9k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  83.9k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  83.9k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 83.9k]
  ------------------
  464|      0|      return 1;
  465|  83.9k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 83.9k]
  ------------------
  466|      0|      return -1;
  467|  83.9k|    } else {
  468|   165k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 156k, False: 9.08k]
  ------------------
  469|   156k|        limb xi = vec[index - 1];
  470|   156k|        limb yi = other.vec[index - 1];
  471|   156k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 12.2k, False: 144k]
  ------------------
  472|  12.2k|          return 1;
  473|   144k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 62.6k, False: 81.8k]
  ------------------
  474|  62.6k|          return -1;
  475|  62.6k|        }
  476|   156k|      }
  477|  9.08k|      return 0;
  478|  83.9k|    }
  479|  83.9k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   313k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   313k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   313k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   313k|    return data[index];
   64|   313k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   444k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   444k|  adjusted_mantissa answer;
   96|   444k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 12.9k, False: 431k]
  |  Branch (96:19): [True: 1.96k, False: 429k]
  ------------------
   97|  14.9k|    answer.power2 = 0;
   98|  14.9k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  14.9k|    return answer;
  101|  14.9k|  }
  102|   429k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 9.19k, False: 420k]
  ------------------
  103|       |    // we want to get infinity:
  104|  9.19k|    answer.power2 = binary::infinite_power();
  105|  9.19k|    answer.mantissa = 0;
  106|  9.19k|    return answer;
  107|  9.19k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   420k|  int lz = leading_zeroes(w);
  112|   420k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   420k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   420k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   420k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   420k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   420k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 883, False: 419k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    883|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 847]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    847|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    847|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    847|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    847|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 847, False: 0]
  ------------------
  156|    847|    return answer;
  157|    883|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   419k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 156k, False: 262k]
  |  Branch (162:30): [True: 155k, False: 1.10k]
  |  Branch (162:77): [True: 138k, False: 17.1k]
  ------------------
  163|   419k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 25.1k, False: 113k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  25.1k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.5k, False: 13.6k]
  ------------------
  168|  11.5k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.5k|    }
  170|  25.1k|  }
  171|       |
  172|   419k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   419k|  answer.mantissa >>= 1;
  174|   419k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 16.4k, False: 403k]
  ------------------
  175|  16.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  16.4k|    answer.power2++; // undo previous addition
  177|  16.4k|  }
  178|       |
  179|   419k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   419k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.86k, False: 416k]
  ------------------
  181|  2.86k|    answer.power2 = binary::infinite_power();
  182|  2.86k|    answer.mantissa = 0;
  183|  2.86k|  }
  184|   419k|  return answer;
  185|   420k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   464k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   464k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   464k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   464k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   464k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   464k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   464k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 73.3k, False: 391k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  73.3k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  73.3k|    firstproduct.low += secondproduct.high;
   35|  73.3k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 60.7k, False: 12.6k]
  ------------------
   36|  60.7k|      firstproduct.high++;
   37|  60.7k|    }
   38|  73.3k|  }
   39|   464k|  return firstproduct;
   40|   464k|}
_ZN10fast_float6detail5powerEi:
   58|   923k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   923k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   923k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  44.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  44.3k|  int lz = leading_zeroes(w);
   82|  44.3k|  w <<= lz;
   83|  44.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  44.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  44.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  44.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  44.3k|  int hilz = int(w >> 63) ^ 1;
   69|  44.3k|  adjusted_mantissa answer;
   70|  44.3k|  answer.mantissa = w << hilz;
   71|  44.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  44.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  44.3k|  return answer;
   74|  44.3k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   416k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   416k|  adjusted_mantissa answer;
   96|   416k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 7.69k, False: 409k]
  |  Branch (96:19): [True: 404, False: 408k]
  ------------------
   97|  8.09k|    answer.power2 = 0;
   98|  8.09k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  8.09k|    return answer;
  101|  8.09k|  }
  102|   408k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.58k, False: 404k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.58k|    answer.power2 = binary::infinite_power();
  105|  4.58k|    answer.mantissa = 0;
  106|  4.58k|    return answer;
  107|  4.58k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   404k|  int lz = leading_zeroes(w);
  112|   404k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   404k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   404k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   404k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   404k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   404k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 14.3k, False: 389k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  14.3k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 14.2k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  14.2k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  14.2k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  14.2k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  14.2k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 14.2k, False: 0]
  ------------------
  156|  14.2k|    return answer;
  157|  14.3k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   389k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 121k, False: 268k]
  |  Branch (162:30): [True: 70.5k, False: 50.5k]
  |  Branch (162:77): [True: 62.3k, False: 8.16k]
  ------------------
  163|   389k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 22.7k, False: 39.6k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  22.7k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 14.9k, False: 7.78k]
  ------------------
  168|  14.9k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  14.9k|    }
  170|  22.7k|  }
  171|       |
  172|   389k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   389k|  answer.mantissa >>= 1;
  174|   389k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.9k, False: 376k]
  ------------------
  175|  12.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.9k|    answer.power2++; // undo previous addition
  177|  12.9k|  }
  178|       |
  179|   389k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   389k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 284, False: 389k]
  ------------------
  181|    284|    answer.power2 = binary::infinite_power();
  182|    284|    answer.mantissa = 0;
  183|    284|  }
  184|   389k|  return answer;
  185|   404k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   458k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   458k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   458k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   458k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   458k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   458k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   458k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 119k, False: 339k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   119k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   119k|    firstproduct.low += secondproduct.high;
   35|   119k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 57.7k, False: 61.6k]
  ------------------
   36|  57.7k|      firstproduct.high++;
   37|  57.7k|    }
   38|   119k|  }
   39|   458k|  return firstproduct;
   40|   458k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  54.7k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  54.7k|  int lz = leading_zeroes(w);
   82|  54.7k|  w <<= lz;
   83|  54.7k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  54.7k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  54.7k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  54.7k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  54.7k|  int hilz = int(w >> 63) ^ 1;
   69|  54.7k|  adjusted_mantissa answer;
   70|  54.7k|  answer.mantissa = w << hilz;
   71|  54.7k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  54.7k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  54.7k|  return answer;
   74|  54.7k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  44.3k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  44.3k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  44.3k|  int32_t sci_exp = scientific_exponent(num);
  411|  44.3k|  size_t max_digits = binary_format<T>::max_digits();
  412|  44.3k|  size_t digits = 0;
  413|  44.3k|  bigint bigmant;
  414|  44.3k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  44.3k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  44.3k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 878, False: 43.4k]
  ------------------
  418|    878|    return positive_digit_comp<T>(bigmant, exponent);
  419|  43.4k|  } else {
  420|  43.4k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  43.4k|  }
  422|  44.3k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  99.0k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  99.0k|  uint64_t mantissa = num.mantissa;
   30|  99.0k|  int32_t exponent = int32_t(num.exponent);
   31|   495k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 396k, False: 99.0k]
  ------------------
   32|   396k|    mantissa /= 10000;
   33|   396k|    exponent += 4;
   34|   396k|  }
   35|   198k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 99.0k, False: 99.0k]
  ------------------
   36|  99.0k|    mantissa /= 100;
   37|  99.0k|    exponent += 2;
   38|  99.0k|  }
   39|  99.0k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 99.0k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  99.0k|  return exponent;
   44|  99.0k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  99.0k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  99.0k|  size_t counter = 0;
  245|  99.0k|  digits = 0;
  246|  99.0k|  limb value = 0;
  247|  99.0k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  99.0k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  99.0k|  UC const * p = num.integer.ptr;
  255|  99.0k|  UC const * pend = p + num.integer.len();
  256|  99.0k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   215k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 116k, False: 98.6k]
  ------------------
  259|   218k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 129k, False: 89.5k]
  |  Branch (259:45): [True: 102k, False: 26.8k]
  |  Branch (259:70): [True: 102k, False: 414]
  ------------------
  260|   102k|      parse_eight_digits(p, value, counter, digits);
  261|   102k|    }
  262|   425k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 391k, False: 33.3k]
  |  Branch (262:30): [True: 308k, False: 83.0k]
  |  Branch (262:43): [True: 308k, False: 414]
  ------------------
  263|   308k|      parse_one_digit(p, value, counter, digits);
  264|   308k|    }
  265|   116k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 414, False: 116k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    414|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    414|      bool truncated = is_truncated(p, pend);
  269|    414|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 382, False: 32]
  ------------------
  270|    382|        truncated |= is_truncated(num.fraction);
  271|    382|      }
  272|    414|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 226, False: 188]
  ------------------
  273|    226|        round_up_bigint(result, digits);
  274|    226|      }
  275|    414|      return;
  276|   116k|    } else {
  277|   116k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   116k|      counter = 0;
  279|   116k|      value = 0;
  280|   116k|    }
  281|   116k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  98.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 84.5k, False: 14.1k]
  ------------------
  285|  84.5k|    p = num.fraction.ptr;
  286|  84.5k|    pend = p + num.fraction.len();
  287|  84.5k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.6k, False: 68.8k]
  ------------------
  288|  15.6k|      skip_zeros(p, pend);
  289|  15.6k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   308k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 231k, False: 77.1k]
  ------------------
  292|   583k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 483k, False: 99.9k]
  |  Branch (292:47): [True: 354k, False: 129k]
  |  Branch (292:72): [True: 352k, False: 2.50k]
  ------------------
  293|   352k|        parse_eight_digits(p, value, counter, digits);
  294|   352k|      }
  295|   961k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 810k, False: 150k]
  |  Branch (295:32): [True: 734k, False: 76.1k]
  |  Branch (295:45): [True: 729k, False: 5.04k]
  ------------------
  296|   729k|        parse_one_digit(p, value, counter, digits);
  297|   729k|      }
  298|   231k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 7.36k, False: 224k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  7.36k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  7.36k|        bool truncated = is_truncated(p, pend);
  302|  7.36k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 4.10k, False: 3.26k]
  ------------------
  303|  4.10k|          round_up_bigint(result, digits);
  304|  4.10k|        }
  305|  7.36k|        return;
  306|   224k|      } else {
  307|   224k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   224k|        counter = 0;
  309|   224k|        value = 0;
  310|   224k|      }
  311|   231k|    }
  312|  84.5k|  }
  313|       |
  314|  91.3k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 91.3k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  91.3k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   114k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   114k|  uint64_t val;
  161|   186k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 135k, False: 51.1k]
  ------------------
  162|   135k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   135k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 63.5k, False: 72.0k]
  ------------------
  164|  63.5k|      break;
  165|  63.5k|    }
  166|  72.0k|    first += int_cmp_len<UC>();
  167|  72.0k|  }
  168|   281k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 265k, False: 15.6k]
  ------------------
  169|   265k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 99.0k, False: 166k]
  ------------------
  170|  99.0k|      break;
  171|  99.0k|    }
  172|   166k|    first++;
  173|   166k|  }
  174|   114k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   454k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   454k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   454k|  p += 8;
  210|   454k|  counter += 8;
  211|   454k|  count += 8;
  212|   454k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  1.03M|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  1.03M|  value = value * 10 + limb(*p - UC('0'));
  218|  1.03M|  p++;
  219|  1.03M|  counter++;
  220|  1.03M|  count++;
  221|  1.03M|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   352k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   352k|  big.mul(power);
  226|   352k|  big.add(value);
  227|   352k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  8.16k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  8.16k|  uint64_t val;
  183|  19.4k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 13.2k, False: 6.18k]
  ------------------
  184|  13.2k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  13.2k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.97k, False: 11.2k]
  ------------------
  186|  1.97k|      return true;
  187|  1.97k|    }
  188|  11.2k|    first += int_cmp_len<UC>();
  189|  11.2k|  }
  190|  10.2k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 6.44k, False: 3.76k]
  ------------------
  191|  6.44k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.42k, False: 4.01k]
  ------------------
  192|  2.42k|      return true;
  193|  2.42k|    }
  194|  4.01k|    ++first;
  195|  4.01k|  }
  196|  3.76k|  return false;
  197|  6.18k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    382|bool is_truncated(span<const UC> s) noexcept {
  201|    382|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    382|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  4.32k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  4.32k|  add_native(big, 10, 1);
  234|  4.32k|  count++;
  235|  4.32k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    878|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    878|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    878|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    878|  adjusted_mantissa answer;
  324|    878|  bool truncated;
  325|    878|  answer.mantissa = bigmant.hi64(truncated);
  326|    878|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    878|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
  334|       |
  335|    878|  return answer;
  336|    878|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    878|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    878|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    878|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 878]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    878|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    878|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 878]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    878|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    878|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 878]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    878|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    878|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    878|  const uint64_t mask
  125|    878|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 878]
  ------------------
  126|    878|    ? UINT64_MAX
  127|    878|    : (uint64_t(1) << shift) - 1;
  128|    878|  const uint64_t halfway
  129|    878|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 878]
  ------------------
  130|    878|    ? 0
  131|    878|    : uint64_t(1) << (shift - 1);
  132|    878|  uint64_t truncated_bits = am.mantissa & mask;
  133|    878|  bool is_above = truncated_bits > halfway;
  134|    878|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    878|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 878]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    878|  } else {
  140|    878|    am.mantissa >>= shift;
  141|    878|  }
  142|    878|  am.power2 += shift;
  143|       |
  144|    878|  bool is_odd = (am.mantissa & 1) == 1;
  145|    878|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    878|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 792]
  |  Branch (331:27): [True: 644, False: 148]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 94, False: 630]
  |  Branch (331:66): [True: 32, False: 62]
  ------------------
  332|    878|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  43.4k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  43.4k|  bigint& real_digits = bigmant;
  347|  43.4k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  43.4k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  43.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  43.4k|  T b;
  354|  43.4k|  to_float(false, am_b, b);
  355|  43.4k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  43.4k|  bigint theor_digits(theor.mantissa);
  357|  43.4k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  43.4k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  43.4k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  43.4k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 43.4k, False: 0]
  ------------------
  363|  43.4k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  43.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  43.4k|  }
  365|  43.4k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 43.4k, False: 0]
  ------------------
  366|  43.4k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  43.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  43.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  43.4k|  int ord = real_digits.compare(theor_digits);
  373|  43.4k|  adjusted_mantissa answer = am;
  374|  43.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  43.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  43.4k|      (void)_;  // not needed, since we've done our comparison
  377|  43.4k|      (void)__; // not needed, since we've done our comparison
  378|  43.4k|      if (ord > 0) {
  379|  43.4k|        return true;
  380|  43.4k|      } else if (ord < 0) {
  381|  43.4k|        return false;
  382|  43.4k|      } else {
  383|  43.4k|        return is_odd;
  384|  43.4k|      }
  385|  43.4k|    });
  386|  43.4k|  });
  387|       |
  388|  43.4k|  return answer;
  389|  43.4k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  43.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  43.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  43.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 43.4k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  43.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  43.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 43.4k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  43.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  43.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 43.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  43.4k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  43.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  83.9k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  83.9k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 83.9k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  83.9k|  } else {
  153|  83.9k|    am.mantissa >>= shift;
  154|  83.9k|  }
  155|  83.9k|  am.power2 += shift;
  156|  83.9k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  43.4k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  43.4k|  adjusted_mantissa am = to_extended(value);
   84|  43.4k|  am.mantissa <<= 1;
   85|  43.4k|  am.mantissa += 1;
   86|  43.4k|  am.power2 -= 1;
   87|  43.4k|  return am;
   88|  43.4k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  43.4k|adjusted_mantissa to_extended(T value) noexcept {
   50|  43.4k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  43.4k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  43.4k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  43.4k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  43.4k|  adjusted_mantissa am;
   56|  43.4k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  43.4k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  43.4k|  ::memcpy(&bits, &value, sizeof(T));
   62|  43.4k|#endif
   63|  43.4k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 43.4k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  43.4k|  } else {
   68|       |    // normal
   69|  43.4k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  43.4k|    am.power2 -= bias;
   71|  43.4k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  43.4k|  }
   73|       |
   74|  43.4k|  return am;
   75|  43.4k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  43.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  43.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  43.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 43.4k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  43.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  43.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 43.4k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  43.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  43.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 43.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  43.4k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  43.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  43.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  43.4k|      (void)_;  // not needed, since we've done our comparison
  377|  43.4k|      (void)__; // not needed, since we've done our comparison
  378|  43.4k|      if (ord > 0) {
  379|  43.4k|        return true;
  380|  43.4k|      } else if (ord < 0) {
  381|  43.4k|        return false;
  382|  43.4k|      } else {
  383|  43.4k|        return is_odd;
  384|  43.4k|      }
  385|  43.4k|    });
  386|  43.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  43.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  43.4k|  const uint64_t mask
  125|  43.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 43.4k]
  ------------------
  126|  43.4k|    ? UINT64_MAX
  127|  43.4k|    : (uint64_t(1) << shift) - 1;
  128|  43.4k|  const uint64_t halfway
  129|  43.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 43.4k]
  ------------------
  130|  43.4k|    ? 0
  131|  43.4k|    : uint64_t(1) << (shift - 1);
  132|  43.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  43.4k|  bool is_above = truncated_bits > halfway;
  134|  43.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  43.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 43.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  43.4k|  } else {
  140|  43.4k|    am.mantissa >>= shift;
  141|  43.4k|  }
  142|  43.4k|  am.power2 += shift;
  143|       |
  144|  43.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  43.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  43.4k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  43.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  43.4k|      (void)_;  // not needed, since we've done our comparison
  377|  43.4k|      (void)__; // not needed, since we've done our comparison
  378|  43.4k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 542, False: 42.9k]
  ------------------
  379|    542|        return true;
  380|  42.9k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 34.8k, False: 8.06k]
  ------------------
  381|  34.8k|        return false;
  382|  34.8k|      } else {
  383|  8.06k|        return is_odd;
  384|  8.06k|      }
  385|  43.4k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  54.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  54.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  54.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  54.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  54.7k|  size_t digits = 0;
  413|  54.7k|  bigint bigmant;
  414|  54.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  54.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  54.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 14.2k, False: 40.5k]
  ------------------
  418|  14.2k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  40.5k|  } else {
  420|  40.5k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  40.5k|  }
  422|  54.7k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.2k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.2k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  14.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.2k|  adjusted_mantissa answer;
  324|  14.2k|  bool truncated;
  325|  14.2k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.2k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.2k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.2k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.2k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.2k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.2k|    });
  333|  14.2k|  });
  334|       |
  335|  14.2k|  return answer;
  336|  14.2k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.01k, False: 13.2k]
  ------------------
  109|  1.01k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.01k|    am.power2++;
  111|  1.01k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.2k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.2k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.2k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.2k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.2k|    });
  333|  14.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.2k|  const uint64_t mask
  125|  14.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.2k]
  ------------------
  126|  14.2k|    ? UINT64_MAX
  127|  14.2k|    : (uint64_t(1) << shift) - 1;
  128|  14.2k|  const uint64_t halfway
  129|  14.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.2k]
  ------------------
  130|  14.2k|    ? 0
  131|  14.2k|    : uint64_t(1) << (shift - 1);
  132|  14.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.2k|  bool is_above = truncated_bits > halfway;
  134|  14.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.2k|  } else {
  140|  14.2k|    am.mantissa >>= shift;
  141|  14.2k|  }
  142|  14.2k|  am.power2 += shift;
  143|       |
  144|  14.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.2k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.2k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.2k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.16k, False: 13.0k]
  |  Branch (331:27): [True: 12.1k, False: 978]
  |  Branch (331:41): [True: 3.97k, False: 8.14k]
  |  Branch (331:56): [True: 366, False: 8.75k]
  |  Branch (331:66): [True: 82, False: 284]
  ------------------
  332|  14.2k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  40.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  40.5k|  bigint& real_digits = bigmant;
  347|  40.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  40.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  40.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  40.5k|  T b;
  354|  40.5k|  to_float(false, am_b, b);
  355|  40.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  40.5k|  bigint theor_digits(theor.mantissa);
  357|  40.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  40.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  40.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  40.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 40.5k, False: 0]
  ------------------
  363|  40.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  40.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  40.5k|  }
  365|  40.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 5.41k, False: 35.1k]
  ------------------
  366|  5.41k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  5.41k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  35.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 34.9k, False: 144]
  ------------------
  368|  34.9k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  34.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  34.9k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  40.5k|  int ord = real_digits.compare(theor_digits);
  373|  40.5k|  adjusted_mantissa answer = am;
  374|  40.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  40.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.5k|      (void)_;  // not needed, since we've done our comparison
  377|  40.5k|      (void)__; // not needed, since we've done our comparison
  378|  40.5k|      if (ord > 0) {
  379|  40.5k|        return true;
  380|  40.5k|      } else if (ord < 0) {
  381|  40.5k|        return false;
  382|  40.5k|      } else {
  383|  40.5k|        return is_odd;
  384|  40.5k|      }
  385|  40.5k|    });
  386|  40.5k|  });
  387|       |
  388|  40.5k|  return answer;
  389|  40.5k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  40.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  40.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  40.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 182, False: 40.3k]
  ------------------
   96|       |    // have a denormal float
   97|    182|    int32_t shift = -am.power2 + 1;
   98|    182|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    182|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 182, False: 0]
  ------------------
  101|    182|    return;
  102|    182|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  40.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  40.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 40.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  40.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  40.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 40.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  40.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  40.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  40.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  40.5k|  adjusted_mantissa am = to_extended(value);
   84|  40.5k|  am.mantissa <<= 1;
   85|  40.5k|  am.mantissa += 1;
   86|  40.5k|  am.power2 -= 1;
   87|  40.5k|  return am;
   88|  40.5k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  40.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  40.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  40.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  40.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  40.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  40.5k|  adjusted_mantissa am;
   56|  40.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  40.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  40.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  40.5k|#endif
   63|  40.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 182, False: 40.3k]
  ------------------
   64|       |    // denormal
   65|    182|    am.power2 = 1 - bias;
   66|    182|    am.mantissa = bits & mantissa_mask;
   67|  40.3k|  } else {
   68|       |    // normal
   69|  40.3k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  40.3k|    am.power2 -= bias;
   71|  40.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  40.3k|  }
   73|       |
   74|  40.5k|  return am;
   75|  40.5k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  40.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  40.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  40.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 182, False: 40.3k]
  ------------------
   96|       |    // have a denormal float
   97|    182|    int32_t shift = -am.power2 + 1;
   98|    182|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    182|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 182, False: 0]
  ------------------
  101|    182|    return;
  102|    182|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  40.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  40.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 118, False: 40.2k]
  ------------------
  109|    118|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    118|    am.power2++;
  111|    118|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  40.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  40.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 40.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  40.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  40.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  40.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.5k|      (void)_;  // not needed, since we've done our comparison
  377|  40.5k|      (void)__; // not needed, since we've done our comparison
  378|  40.5k|      if (ord > 0) {
  379|  40.5k|        return true;
  380|  40.5k|      } else if (ord < 0) {
  381|  40.5k|        return false;
  382|  40.5k|      } else {
  383|  40.5k|        return is_odd;
  384|  40.5k|      }
  385|  40.5k|    });
  386|  40.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  40.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  40.5k|  const uint64_t mask
  125|  40.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 40.5k]
  ------------------
  126|  40.5k|    ? UINT64_MAX
  127|  40.5k|    : (uint64_t(1) << shift) - 1;
  128|  40.5k|  const uint64_t halfway
  129|  40.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 40.5k]
  ------------------
  130|  40.5k|    ? 0
  131|  40.5k|    : uint64_t(1) << (shift - 1);
  132|  40.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  40.5k|  bool is_above = truncated_bits > halfway;
  134|  40.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  40.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 40.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  40.5k|  } else {
  140|  40.5k|    am.mantissa >>= shift;
  141|  40.5k|  }
  142|  40.5k|  am.power2 += shift;
  143|       |
  144|  40.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  40.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  40.5k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  40.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  40.5k|      (void)_;  // not needed, since we've done our comparison
  377|  40.5k|      (void)__; // not needed, since we've done our comparison
  378|  40.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.7k, False: 28.8k]
  ------------------
  379|  11.7k|        return true;
  380|  28.8k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 27.7k, False: 1.01k]
  ------------------
  381|  27.7k|        return false;
  382|  27.7k|      } else {
  383|  1.01k|        return is_odd;
  384|  1.01k|      }
  385|  40.5k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.43M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.59M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   682k|  constexpr size_t len() const noexcept {
  238|   682k|    return length;
  239|   682k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.10M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.10M|  return -10;
  469|  1.10M|#endif
  470|  1.10M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  1.03M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  1.03M|  return 10;
  517|  1.03M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   868k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   868k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   868k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.91M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.91M|  return 23;
  477|  2.91M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   798k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   798k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   798k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  1.05M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   431k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   431k|  return -65;
  568|   431k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   429k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   429k|  return 38;
  559|   429k|}
_ZN10fast_float14leading_zeroesEm:
  268|   953k|int leading_zeroes(uint64_t input_num) {
  269|   953k|  assert(input_num > 0);
  270|   953k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   953k|  return __builtin_clzll(input_num);
  285|   953k|#endif
  286|   953k|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.11M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.11M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.11M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.11M|  answer.low = uint64_t(r);
  337|  1.11M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.11M|  return answer;
  342|  1.11M|}
_ZN10fast_float8value128C2Ev:
  251|  1.11M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   509k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   509k|  return -127;
  500|   509k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   156k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   156k|  return -17;
  493|   156k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   155k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   155k|  return 10;
  485|   155k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   297k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   297k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 99.0k, False: 198k]
  |  Branch (352:38): [True: 0, False: 198k]
  ------------------
  353|   297k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  44.3k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  44.3k|  return 114;
  575|  44.3k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   289k|{
  650|   289k|    return sizeof(uint64_t) / sizeof(UC);
  651|   289k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   148k|{
  644|   148k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   148k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   148k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   152k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   590k|  constexpr size_t len() const noexcept {
  238|   590k|    return length;
  239|   590k|  }
_ZNK10fast_float4spanImEixEm:
  241|   334k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   334k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   334k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   334k|    return ptr[index];
  244|   334k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   345k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   345k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   345k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   345k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   345k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   345k|  ::memcpy(&value, &word, sizeof(T));
  615|   345k|#endif
  616|   345k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   345k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   820k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   820k|  return 0xFF;
  507|   820k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.21M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   158k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  79.4k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  79.4k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.19M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.19M|  return -22;
  461|  1.19M|#endif
  462|  1.19M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.16M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.16M|  return 22;
  514|  1.16M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   956k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   956k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   956k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.92M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.92M|  return 52;
  474|  2.92M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   937k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   937k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   937k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   409k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   409k|  return -342;
  564|   409k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   408k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   408k|  return 308;
  555|   408k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   513k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   513k|  return -1023;
  497|   513k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   121k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   121k|  return -4;
  489|   121k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  70.5k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  70.5k|  return 23;
  481|  70.5k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  54.7k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  54.7k|  return 769;
  572|  54.7k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   302k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   302k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   302k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   302k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   302k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   302k|  ::memcpy(&value, &word, sizeof(T));
  615|   302k|#endif
  616|   302k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   302k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   750k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   750k|  return 0x7FF;
  504|   750k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.06M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.06M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.06M|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  1.06M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.06M|    return from_chars_advanced(first, last, value, options);
  143|  1.06M|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.06M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.06M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.06M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.06M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.06M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.06M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.06M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.06M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.06M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.06M|  answer.ec = std::errc(); // be optimistic
  221|  1.06M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.06M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 994k, False: 65.7k]
  |  Branch (227:69): [True: 923k, False: 71.5k]
  |  Branch (227:131): [True: 829k, False: 93.9k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   829k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 829k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   829k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 759k, False: 70.1k]
  ------------------
  239|   759k|        value = T(pns.mantissa);
  240|   759k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 12.5k, False: 746k]
  ------------------
  241|   746k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   759k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 759k]
  ------------------
  243|   759k|        return answer;
  244|   759k|      }
  245|   829k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   829k|  }
  262|   301k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   301k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 142k, False: 159k]
  |  Branch (263:29): [True: 142k, False: 0]
  ------------------
  264|   142k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 44.3k, False: 98.0k]
  ------------------
  265|  44.3k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  44.3k|    }
  267|   142k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   301k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 44.3k, False: 257k]
  ------------------
  271|   301k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   301k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 288k, False: 12.9k]
  |  Branch (273:29): [True: 21.3k, False: 267k]
  |  Branch (273:49): [True: 1.62k, False: 19.7k]
  |  Branch (273:68): [True: 8.38k, False: 291k]
  ------------------
  274|  10.0k|    answer.ec = std::errc::result_out_of_range;
  275|  10.0k|  }
  276|   301k|  return answer;
  277|  1.06M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.82M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.82M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.82M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.82M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.82M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.82M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  39.7k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  39.7k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  39.7k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  39.7k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  39.7k|    return from_chars_advanced(first, last, value, options);
  143|  39.7k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  39.7k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  39.7k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  39.7k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  39.7k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  39.7k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 39.7k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  39.7k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  39.7k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 39.7k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  39.7k|  answer.ec = std::errc(); // be optimistic
  221|  39.7k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  39.7k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 39.6k, False: 90]
  |  Branch (227:69): [True: 38.9k, False: 670]
  |  Branch (227:131): [True: 38.9k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  38.9k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 38.9k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  38.9k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 38.9k, False: 0]
  ------------------
  239|  38.9k|        value = T(pns.mantissa);
  240|  38.9k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 38.9k]
  ------------------
  241|  38.9k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  38.9k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 38.9k]
  ------------------
  243|  38.9k|        return answer;
  244|  38.9k|      }
  245|  38.9k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  38.9k|  }
  262|    760|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    760|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 760]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    760|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 760]
  ------------------
  271|    760|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    760|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 742, False: 18]
  |  Branch (273:29): [True: 664, False: 78]
  |  Branch (273:49): [True: 72, False: 592]
  |  Branch (273:68): [True: 592, False: 96]
  ------------------
  274|    664|    answer.ec = std::errc::result_out_of_range;
  275|    664|  }
  276|    760|  return answer;
  277|  39.7k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.15M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.15M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.15M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.15M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.15M|    return from_chars_advanced(first, last, value, options);
  143|  1.15M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.15M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.15M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.15M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.15M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.15M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.15M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.15M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.15M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.15M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.15M|  answer.ec = std::errc(); // be optimistic
  221|  1.15M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.15M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.12M, False: 36.5k]
  |  Branch (227:69): [True: 1.04M, False: 74.4k]
  |  Branch (227:131): [True: 917k, False: 130k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   917k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 917k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   917k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 898k, False: 19.6k]
  ------------------
  239|   898k|        value = T(pns.mantissa);
  240|   898k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 47.0k, False: 851k]
  ------------------
  241|   851k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   898k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 898k]
  ------------------
  243|   898k|        return answer;
  244|   898k|      }
  245|   917k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   917k|  }
  262|   260k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   260k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 155k, False: 105k]
  |  Branch (263:29): [True: 155k, False: 0]
  ------------------
  264|   155k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 54.7k, False: 100k]
  ------------------
  265|  54.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  54.7k|    }
  267|   155k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   260k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 54.7k, False: 205k]
  ------------------
  271|   260k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   260k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 253k, False: 7.67k]
  |  Branch (273:29): [True: 11.5k, False: 241k]
  |  Branch (273:49): [True: 440, False: 11.1k]
  |  Branch (273:68): [True: 3.96k, False: 256k]
  ------------------
  274|  4.40k|    answer.ec = std::errc::result_out_of_range;
  275|  4.40k|  }
  276|   260k|  return answer;
  277|  1.15M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  39.7k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  39.7k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  39.7k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  39.7k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  39.7k|    return from_chars_advanced(first, last, value, options);
  143|  39.7k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  39.7k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  39.7k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  39.7k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  39.7k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  39.7k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 39.7k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  39.7k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  39.7k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 39.7k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  39.7k|  answer.ec = std::errc(); // be optimistic
  221|  39.7k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  39.7k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 39.6k, False: 90]
  |  Branch (227:69): [True: 39.0k, False: 628]
  |  Branch (227:131): [True: 39.0k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  39.0k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 39.0k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  39.0k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 39.0k, False: 0]
  ------------------
  239|  39.0k|        value = T(pns.mantissa);
  240|  39.0k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 38.9k]
  ------------------
  241|  38.9k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  39.0k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 39.0k]
  ------------------
  243|  39.0k|        return answer;
  244|  39.0k|      }
  245|  39.0k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  39.0k|  }
  262|    718|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    718|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 718]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    718|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 718]
  ------------------
  271|    718|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    718|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 700, False: 18]
  |  Branch (273:29): [True: 368, False: 332]
  |  Branch (273:49): [True: 0, False: 368]
  |  Branch (273:68): [True: 368, False: 350]
  ------------------
  274|    368|    answer.ec = std::errc::result_out_of_range;
  275|    368|  }
  276|    718|  return answer;
  277|  39.7k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  7.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   830k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  6.75M|{
 3803|  6.75M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  6.75M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  6.75M|    }
 3806|  6.75M|    else if constexpr (sizeof(U) == 2) {
 3807|  6.75M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  6.75M|    }
 3809|  6.75M|    else {
 3810|       |        // utf-32
 3811|  6.75M|        static_assert(sizeof(U) == 4);
 3812|  6.75M|        SCN_UNUSED(ch);
 3813|  6.75M|        return 1;
 3814|  6.75M|    }
 3815|  6.75M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  6.75M|{
 3767|  6.75M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  6.75M|    SCN_GCC_COMPAT_PUSH
 3770|  6.75M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  6.75M|    constexpr char lengths[] =
 3772|  6.75M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  6.75M|        "\1\1\1\1\1\1\1\1"
 3774|  6.75M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  6.75M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  6.75M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  6.75M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  6.75M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  6.75M|    SCN_GCC_COMPAT_POP
 3781|  6.75M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  6.33M|{
 4009|  6.33M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  6.33M|        return decode_utf8_code_point_exhaustive(input);
 4011|  6.33M|    }
 4012|  6.33M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  6.33M|        return decode_utf16_code_point_exhaustive(input);
 4014|  6.33M|    }
 4015|  6.33M|    else {
 4016|  6.33M|        SCN_EXPECT(input.size() == 1);
 4017|  6.33M|        auto cp = static_cast<char32_t>(input.front());
 4018|  6.33M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  6.33M|            return invalid_code_point;
 4020|  6.33M|        }
 4021|  6.33M|        return cp;
 4022|  6.33M|    }
 4023|  6.33M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  6.33M|{
 3822|  6.33M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  6.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  6.33M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  6.33M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  6.33M|    };
 3827|       |
 3828|  6.33M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 6.05M, False: 280k]
  ------------------
 3829|  6.05M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 831, False: 6.05M]
  ------------------
 3830|    831|            SCN_UNLIKELY_ATTR
 3831|    831|            return invalid_code_point;
 3832|    831|        }
 3833|  6.05M|        return static_cast<char32_t>(input[0]);
 3834|  6.05M|    }
 3835|       |
 3836|   280k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 247k, False: 32.9k]
  ------------------
 3837|   247k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 145, False: 247k]
  ------------------
 3838|    145|            SCN_UNLIKELY_ATTR
 3839|    145|            return invalid_code_point;
 3840|    145|        }
 3841|   247k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 53.2k, False: 194k]
  ------------------
 3842|  53.2k|            SCN_UNLIKELY_ATTR
 3843|  53.2k|            return invalid_code_point;
 3844|  53.2k|        }
 3845|       |
 3846|   194k|        char32_t cp{};
 3847|   194k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   194k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   194k|        return cp;
 3850|   247k|    }
 3851|       |
 3852|  32.9k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 14.4k, False: 18.5k]
  ------------------
 3853|  14.4k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 173, False: 14.2k]
  ------------------
 3854|    173|            SCN_UNLIKELY_ATTR
 3855|    173|            return invalid_code_point;
 3856|    173|        }
 3857|  14.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 6.66k, False: 7.56k]
  ------------------
 3858|  14.2k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 1.45k, False: 6.10k]
  ------------------
 3859|  8.12k|            SCN_UNLIKELY_ATTR
 3860|  8.12k|            return invalid_code_point;
 3861|  8.12k|        }
 3862|       |
 3863|  6.10k|        char32_t cp{};
 3864|  6.10k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  6.10k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  6.10k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  6.10k|        return cp;
 3868|  14.2k|    }
 3869|       |
 3870|  18.5k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 18.5k, False: 0]
  ------------------
 3871|  18.5k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 18.5k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  18.5k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 2.72k, False: 15.8k]
  ------------------
 3876|  2.72k|            SCN_UNLIKELY_ATTR
 3877|  2.72k|            return invalid_code_point;
 3878|  2.72k|        }
 3879|  15.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 3.71k, False: 12.1k]
  ------------------
 3880|  15.8k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 1.18k, False: 10.9k]
  ------------------
 3881|  15.8k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 1.74k, False: 9.17k]
  ------------------
 3882|  6.64k|            SCN_UNLIKELY_ATTR
 3883|  6.64k|            return invalid_code_point;
 3884|  6.64k|        }
 3885|       |
 3886|  9.17k|        char32_t cp{};
 3887|  9.17k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  9.17k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  9.17k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  9.17k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  9.17k|        return cp;
 3892|  15.8k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   308k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   308k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   308k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  13.1M|{
 3695|  13.1M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  13.1M|                                          decltype(first), decltype(last)> &&
 3697|  13.1M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  13.1M|        return {first, last};
 3699|  13.1M|    }
 3700|  13.1M|    else {
 3701|  13.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  13.1M|                                       to_address(first), to_address(last)))};
 3703|  13.1M|    }
 3704|  13.1M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  40.1M|{
  322|  40.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  40.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  40.1M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  44.7M|{
  302|  44.7M|    return p;
  303|  44.7M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  19.6M|{
 3726|  19.6M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  19.6M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  19.6M|                      decltype(it)> &&
 3729|  19.6M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  19.6M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  19.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  19.6M|        return it;
 3732|  19.6M|    }
 3733|  19.6M|    else {
 3734|  19.6M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  19.6M|    }
 3736|  19.6M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   131k|    {
 2720|   131k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   131k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   131k|    {
 2701|   131k|        return decay_copy(t.begin());
 2702|   131k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|  27.1M|{
 1945|  27.1M|    return SCN_FWD(t);
  ------------------
  |  |  930|  27.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  27.1M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  5.08M|    {
 2777|  5.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  5.08M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  5.08M|    {
 2759|  5.08M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  5.08M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   360k|{
 8863|   360k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   360k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   360k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   360k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5391|  1.45M|{
 5392|  1.45M|    detail::check_scan_arg_types<Args...>();
 5393|  1.45M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.45M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5130|  1.82M|{
 5131|  1.82M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.82M|                  "Scan argument types must be default constructible");
 5133|  1.82M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.82M|                  "Scan argument types must be Destructible");
 5135|  1.82M|    static_assert(
 5136|  1.82M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.82M|        "Scan argument types must not be references");
 5138|  1.82M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5344|  1.45M|    {
 5345|  1.45M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.45M|    {
 5356|  1.45M|        return {detail::make_arg<
 5357|  1.45M|            kind, Context,
 5358|  1.45M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.45M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.45M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|  1.45M|{
 5166|  1.45M|    return make_value<Context>(value).ref_value;
 5167|  1.45M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5115|  1.60M|{
 5116|  1.60M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.60M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.60M|                                  needs_context_tag>) {
 5120|  1.60M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.60M|    }
 5122|  1.60M|    else {
 5123|  1.60M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.60M|            value, context_tag<Context>{}));
 5125|  1.60M|    }
 5126|  1.60M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4954|  1.60M|    {                                                                        \
 4955|  1.60M|        return val;                                                          \
 4956|  1.60M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5084|  1.82M|{
 5085|  1.82M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.82M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.82M|    constexpr bool scannable_char =
 5089|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.82M|    static_assert(scannable_char,
 5091|  1.82M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.82M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.82M|    constexpr bool scannable_const =
 5095|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.82M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.82M|    constexpr bool scannable_disabled =
 5099|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.82M|    static_assert(scannable_disabled,
 5101|  1.82M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.82M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.82M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.82M|    static_assert(
 5106|  1.82M|        scannable,
 5107|  1.82M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.82M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.82M|    return arg_value{arg};
 5111|  1.82M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4897|  1.82M|    {
 4898|  1.82M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.14M|{
 8650|  1.14M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.14M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|  1.14M|{
 8587|  1.14M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.14M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.3k, False: 1.08M]
  |  |  ------------------
  ------------------
 8591|  59.3k|        return unexpected(result.error());
 8592|  59.3k|    }
 8593|  1.08M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.14M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4715|  2.53M|{
 4716|  2.53M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.53M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.53M|                  "\n"
 4720|  2.53M|                  "Unsupported range type given as input to a scanning "
 4721|  2.53M|                  "function.\n"
 4722|  2.53M|                  "A range needs to have a character type (value type) "
 4723|  2.53M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.53M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.53M|                  "to be included.\n"
 4726|  2.53M|                  "See the scnlib documentation for more details.");
 4727|  2.53M|    static_assert(
 4728|  2.53M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.53M|        "\n"
 4730|  2.53M|        "Unsupported range type given as input to a scanning "
 4731|  2.53M|        "function.\n"
 4732|  2.53M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.53M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.53M|        "not supported.");
 4735|  2.53M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.53M|                  "\n"
 4737|  2.53M|                  "Unsupported range type given as input to a scanning "
 4738|  2.53M|                  "function.\n"
 4739|  2.53M|                  "file_marker_found cannot be used as an "
 4740|  2.53M|                  "source range type to scn::scan.\n"
 4741|  2.53M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.53M|                  "and do not provide an explicit source range, "
 4743|  2.53M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.53M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.53M|                  "\n"
 4746|  2.53M|                  "Unsupported range type given as input to a scanning "
 4747|  2.53M|                  "function.\n"
 4748|  2.53M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.53M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.53M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.53M|                  "\n"
 4752|  2.53M|                  "Unsupported range type given as input to a scanning "
 4753|  2.53M|                  "function.\n"
 4754|  2.53M|                  "A range needs to model forward_range and have a valid "
 4755|  2.53M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.53M|                  "Examples of scannable ranges are std::string, "
 4757|  2.53M|                  "std::string_view, "
 4758|  2.53M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.53M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.53M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.53M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|  2.53M|{
 4655|  2.53M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|  2.53M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|  2.53M|    }
 4658|  2.53M|    else {
 4659|  2.53M|        return invalid_char_type{};
 4660|  2.53M|    }
 4661|  2.53M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.53M|    {
 2851|  2.53M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.53M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.53M|    {
 2832|  2.53M|        return t.data();
 2833|  2.53M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3226|  2.53M|    {
 3227|  2.53M|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 21.7k, False: 2.51M]
  ------------------
 3228|  2.53M|                   ? nullptr
 3229|  2.53M|                   : std::addressof(*ranges::begin(derived()));
 3230|  2.53M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  2.53M|    {
 3001|  2.53M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  2.53M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  2.53M|    {
 2974|  2.53M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  2.53M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|  14.0M|    {
 3335|  14.0M|        return m_iterator == m_sentinel;
 3336|  14.0M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3180|  5.05M|    {
 3181|  5.05M|        return static_cast<const D&>(*this);
 3182|  5.05M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.92M|    {
 2720|  4.92M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.92M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.92M|    {
 2701|  4.92M|        return decay_copy(t.begin());
 2702|  4.92M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  59.8M|    {
 3326|  59.8M|        return m_iterator;
 3327|  59.8M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|  2.53M|    {
 2926|  2.53M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  2.53M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  2.53M|    {
 2892|  2.53M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  2.53M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|  7.86M|{
 1945|  7.86M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  7.86M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|  14.1M|    {
 3342|  14.1M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  14.1M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|  19.0M|    {
 1594|  19.0M|        return has_value();
 1595|  19.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  37.6M|    {
  481|  37.6M|        return m_has_value;
  482|  37.6M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|  1.16M|    {
 1600|  1.16M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.16M|        return this->get_unexpected().error();
 1602|  1.16M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.16M|    {
  464|  1.16M|        return m_unexpected;
  465|  1.16M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  9.02M|    {
  357|  9.02M|        return m_unexpected;
  358|  9.02M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  4.41M|    {
  343|  4.41M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.41M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  4.41M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   128k|    {
 1472|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   128k|    {
  443|   128k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  10.5M|    {
  352|  10.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  10.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  10.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.53M|    {
 1173|  2.53M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  2.40M|{
 5919|  2.40M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.40M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.40M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.40M|    }
 5923|  2.40M|    else {
 5924|  2.40M|        auto it = ranges::begin(source);
 5925|  2.40M|        while (n > 0) {
 5926|  2.40M|            --n;
 5927|  2.40M|            ++it;
 5928|  2.40M|        }
 5929|  2.40M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.40M|    }
 5931|  2.40M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  14.5M|    {
 2720|  14.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  14.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  14.5M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  14.5M|    {
 2701|  14.5M|        return decay_copy(t.begin());
 2702|  14.5M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5905|  2.40M|{
 5906|  2.40M|    return ranges::end(source);
 5907|  2.40M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.40M|    {
 2777|  2.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.40M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.40M|    {
 2759|  2.40M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.40M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  30.0M|    {
 3330|  30.0M|        return m_sentinel;
 3331|  30.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  7.50M|    {
 1649|  7.50M|        return value();
 1650|  7.50M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  17.4M|    {
 1623|  17.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.4M|        return this->get_value();
 1625|  17.4M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  17.4M|    {
  447|  17.4M|        return m_value;
  448|  17.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.40M|    {
 1426|  2.40M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.40M|    {
  433|  2.40M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   720k|    {
 7971|   720k|        return m_str;
 7972|   720k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.45M|    {
 5422|  1.45M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5374|  1.45M|    {
 5375|  1.45M|        return m_argptrs;
 5376|  1.45M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  4.60M|    {
 5474|  4.60M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   720k|{
 8816|   720k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.5k, False: 680k]
  |  |  ------------------
  ------------------
 8817|  39.5k|        return unexpected(result.error());
 8818|  39.5k|    }
 8819|   680k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   680k|    static_cast<    \
  |  |  929|   680k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   680k|    static_cast<    \
  |  |  929|   680k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   720k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  2.53M|    {
 1594|  2.53M|        return has_value();
 1595|  2.53M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.07M|    {
  481|  5.07M|        return m_has_value;
  482|  5.07M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|   128k|    {
 1600|   128k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   128k|        return this->get_unexpected().error();
 1602|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   128k|    {
  464|   128k|        return m_unexpected;
  465|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  42.8k|    {
 1472|  42.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  42.8k|    {
  443|  42.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   798k|    {
 1173|   798k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  2.16M|    {
 1649|  2.16M|        return value();
 1650|  2.16M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.40M|    {
 1623|  2.40M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.40M|        return this->get_value();
 1625|  2.40M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.40M|    {
  447|  2.40M|        return m_value;
  448|  2.40M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|   755k|    {
 5826|   755k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.40M|    {
 5677|  2.40M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5611|  1.56M|    {
 5612|  1.56M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   755k|    {
 1426|   755k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   755k|    {
  433|   755k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5369|  1.45M|    {
 5370|  1.45M|        return m_args;
 5371|  1.45M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|  24.0M|    {
 3312|  24.0M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  4.60M|{
 7687|  4.60M|    return s;
 7688|  4.60M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  4.60M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   720k|    {
 7967|   720k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   798k|    {
 1594|   798k|        return has_value();
 1595|   798k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.55M|    {
  481|  1.55M|        return m_has_value;
  482|  1.55M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|   755k|    {
 1669|   755k|        return &value();
 1670|   755k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   755k|    {
 1623|   755k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   755k|        return this->get_value();
 1625|   755k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   755k|    {
  447|   755k|        return m_value;
  448|   755k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5693|  2.40M|    {
 5694|  2.40M|        return ranges::begin(m_range);
 5695|  2.40M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   360k|{
 8930|   360k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   360k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   360k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   360k|    static_cast<    \
  |  |  929|   360k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   360k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.14M|{
 8668|  1.14M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.14M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|  1.14M|{
 8603|  1.14M|#if !SCN_DISABLE_LOCALE
 8604|  1.14M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.14M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.14M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.14M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.14M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.3k, False: 1.08M]
  |  |  ------------------
  ------------------
 8611|  59.3k|        return unexpected(result.error());
 8612|  59.3k|    }
 8613|  1.08M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.14M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  78.8k|{
 8969|  78.8k|    T value;
 8970|  78.8k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  78.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.29k, False: 75.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.29k|    }                                                  \
  |  |  |  | 3667|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  75.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  75.5k|    static_cast<    \
  |  |  929|  75.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  75.5k|    static_cast<    \
  |  |  929|  75.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  78.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|   153k|{
 5151|   153k|    check_scan_arg_types<T>();
 5152|       |
 5153|   153k|    basic_scan_arg<Context> arg;
 5154|   153k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   153k|    arg.m_value = make_value<Context>(value);
 5156|   153k|    return arg;
 5157|   153k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  5.10M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  5.76M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   255k|{
 8681|   255k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   255k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   255k|{
 8627|   255k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   255k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   255k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.89k, False: 245k]
  |  |  ------------------
  ------------------
 8631|  9.89k|        return unexpected(result.error());
 8632|  9.89k|    }
 8633|   245k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   255k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   245k|    {
 1659|   245k|        return std::move(value());
 1660|   245k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   388k|{
 8863|   388k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   388k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   388k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5391|  1.56M|{
 5392|  1.56M|    detail::check_scan_arg_types<Args...>();
 5393|  1.56M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.56M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5130|  1.95M|{
 5131|  1.95M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.95M|                  "Scan argument types must be default constructible");
 5133|  1.95M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.95M|                  "Scan argument types must be Destructible");
 5135|  1.95M|    static_assert(
 5136|  1.95M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.95M|        "Scan argument types must not be references");
 5138|  1.95M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5344|  1.56M|    {
 5345|  1.56M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.56M|    {
 5356|  1.56M|        return {detail::make_arg<
 5357|  1.56M|            kind, Context,
 5358|  1.56M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.56M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.56M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  1.56M|{
 5166|  1.56M|    return make_value<Context>(value).ref_value;
 5167|  1.56M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5115|  1.73M|{
 5116|  1.73M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.73M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.73M|                                  needs_context_tag>) {
 5120|  1.73M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.73M|    }
 5122|  1.73M|    else {
 5123|  1.73M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.73M|            value, context_tag<Context>{}));
 5125|  1.73M|    }
 5126|  1.73M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4954|  1.73M|    {                                                                        \
 4955|  1.73M|        return val;                                                          \
 4956|  1.73M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5084|  1.95M|{
 5085|  1.95M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.95M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.95M|    constexpr bool scannable_char =
 5089|  1.95M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.95M|    static_assert(scannable_char,
 5091|  1.95M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.95M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.95M|    constexpr bool scannable_const =
 5095|  1.95M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.95M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.95M|    constexpr bool scannable_disabled =
 5099|  1.95M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.95M|    static_assert(scannable_disabled,
 5101|  1.95M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.95M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.95M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.95M|    static_assert(
 5106|  1.95M|        scannable,
 5107|  1.95M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.95M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.95M|    return arg_value{arg};
 5111|  1.95M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4897|  1.95M|    {
 4898|  1.95M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   776k|    {
 7971|   776k|        return m_str;
 7972|   776k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.56M|    {
 5422|  1.56M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5374|  1.56M|    {
 5375|  1.56M|        return m_argptrs;
 5376|  1.56M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   776k|{
 8816|   776k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   776k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.5k, False: 737k]
  |  |  ------------------
  ------------------
 8817|  39.5k|        return unexpected(result.error());
 8818|  39.5k|    }
 8819|   737k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   737k|    static_cast<    \
  |  |  929|   737k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   737k|    static_cast<    \
  |  |  929|   737k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   776k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  42.8k|    {
 1472|  42.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  42.8k|    {
  443|  42.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   864k|    {
 1173|   864k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|   821k|    {
 5826|   821k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5611|  1.70M|    {
 5612|  1.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   821k|    {
 1426|   821k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   821k|    {
  433|   821k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5369|  1.56M|    {
 5370|  1.56M|        return m_args;
 5371|  1.56M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   776k|    {
 7967|   776k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   864k|    {
 1594|   864k|        return has_value();
 1595|   864k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.68M|    {
  481|  1.68M|        return m_has_value;
  482|  1.68M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|   821k|    {
 1669|   821k|        return &value();
 1670|   821k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   821k|    {
 1623|   821k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   821k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   821k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   821k|        return this->get_value();
 1625|   821k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   821k|    {
  447|   821k|        return m_value;
  448|   821k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   388k|{
 8930|   388k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   388k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   388k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   388k|    static_cast<    \
  |  |  929|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   388k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  87.2k|{
 8969|  87.2k|    T value;
 8970|  87.2k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  87.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  87.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  87.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  87.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  87.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.29k, False: 83.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.29k|    }                                                  \
  |  |  |  | 3667|  87.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  83.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.9k|    static_cast<    \
  |  |  929|  83.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  83.9k|    static_cast<    \
  |  |  929|  83.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  87.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|   169k|{
 5151|   169k|    check_scan_arg_types<T>();
 5152|       |
 5153|   169k|    basic_scan_arg<Context> arg;
 5154|   169k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   169k|    arg.m_value = make_value<Context>(value);
 5156|   169k|    return arg;
 5157|   169k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   393k|{
 8863|   393k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   393k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   393k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   393k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   393k|    static_cast<    \
  |  |  929|   393k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   393k|    static_cast<    \
  |  |  929|   393k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   393k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5391|  1.58M|{
 5392|  1.58M|    detail::check_scan_arg_types<Args...>();
 5393|  1.58M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.58M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5130|  1.97M|{
 5131|  1.97M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.97M|                  "Scan argument types must be default constructible");
 5133|  1.97M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.97M|                  "Scan argument types must be Destructible");
 5135|  1.97M|    static_assert(
 5136|  1.97M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.97M|        "Scan argument types must not be references");
 5138|  1.97M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5344|  1.58M|    {
 5345|  1.58M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.58M|    {
 5356|  1.58M|        return {detail::make_arg<
 5357|  1.58M|            kind, Context,
 5358|  1.58M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.58M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.58M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|  1.58M|{
 5166|  1.58M|    return make_value<Context>(value).ref_value;
 5167|  1.58M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5115|  1.75M|{
 5116|  1.75M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.75M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.75M|                                  needs_context_tag>) {
 5120|  1.75M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.75M|    }
 5122|  1.75M|    else {
 5123|  1.75M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.75M|            value, context_tag<Context>{}));
 5125|  1.75M|    }
 5126|  1.75M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4954|  1.75M|    {                                                                        \
 4955|  1.75M|        return val;                                                          \
 4956|  1.75M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5084|  1.97M|{
 5085|  1.97M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.97M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.97M|    constexpr bool scannable_char =
 5089|  1.97M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.97M|    static_assert(scannable_char,
 5091|  1.97M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.97M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.97M|    constexpr bool scannable_const =
 5095|  1.97M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.97M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.97M|    constexpr bool scannable_disabled =
 5099|  1.97M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.97M|    static_assert(scannable_disabled,
 5101|  1.97M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.97M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.97M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.97M|    static_assert(
 5106|  1.97M|        scannable,
 5107|  1.97M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.97M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.97M|    return arg_value{arg};
 5111|  1.97M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4897|  1.97M|    {
 4898|  1.97M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   786k|    {
 7971|   786k|        return m_str;
 7972|   786k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.58M|    {
 5422|  1.58M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5374|  1.58M|    {
 5375|  1.58M|        return m_argptrs;
 5376|  1.58M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   786k|{
 8816|   786k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.5k, False: 747k]
  |  |  ------------------
  ------------------
 8817|  39.5k|        return unexpected(result.error());
 8818|  39.5k|    }
 8819|   747k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   747k|    static_cast<    \
  |  |  929|   747k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   747k|    static_cast<    \
  |  |  929|   747k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   786k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  42.8k|    {
 1472|  42.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  42.8k|    {
  443|  42.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   875k|    {
 1173|   875k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|   832k|    {
 5826|   832k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5611|  1.72M|    {
 5612|  1.72M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   832k|    {
 1426|   832k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   832k|    {
  433|   832k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5369|  1.58M|    {
 5370|  1.58M|        return m_args;
 5371|  1.58M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   786k|    {
 7967|   786k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   875k|    {
 1594|   875k|        return has_value();
 1595|   875k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.70M|    {
  481|  1.70M|        return m_has_value;
  482|  1.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|   832k|    {
 1669|   832k|        return &value();
 1670|   832k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   832k|    {
 1623|   832k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   832k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   832k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   832k|        return this->get_value();
 1625|   832k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   832k|    {
  447|   832k|        return m_value;
  448|   832k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   393k|{
 8930|   393k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   393k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   393k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   393k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   393k|    static_cast<    \
  |  |  929|   393k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   393k|    static_cast<    \
  |  |  929|   393k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   393k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  88.8k|{
 8969|  88.8k|    T value;
 8970|  88.8k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  88.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  88.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  88.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  88.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.29k, False: 85.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.29k|    }                                                  \
  |  |  |  | 3667|  88.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  85.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  85.5k|    static_cast<    \
  |  |  929|  85.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  85.5k|    static_cast<    \
  |  |  929|  85.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  88.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|   172k|{
 5151|   172k|    check_scan_arg_types<T>();
 5152|       |
 5153|   172k|    basic_scan_arg<Context> arg;
 5154|   172k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   172k|    arg.m_value = make_value<Context>(value);
 5156|   172k|    return arg;
 5157|   172k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   128k|    {
 2720|   128k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   128k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   128k|    {
 2701|   128k|        return decay_copy(t.begin());
 2702|   128k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1944|   113M|{
 1945|   113M|    return SCN_FWD(t);
  ------------------
  |  |  930|   113M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   113M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  5.13M|    {
 2777|  5.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  5.13M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  5.13M|    {
 2759|  5.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  5.13M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   366k|{
 8863|   366k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   366k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   366k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.16M|{
 8650|  1.16M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.16M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|  1.16M|{
 8587|  1.16M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.16M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.16M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.3k, False: 1.10M]
  |  |  ------------------
  ------------------
 8591|  59.3k|        return unexpected(result.error());
 8592|  59.3k|    }
 8593|  1.10M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.16M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4715|  2.56M|{
 4716|  2.56M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.56M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.56M|                  "\n"
 4720|  2.56M|                  "Unsupported range type given as input to a scanning "
 4721|  2.56M|                  "function.\n"
 4722|  2.56M|                  "A range needs to have a character type (value type) "
 4723|  2.56M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.56M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.56M|                  "to be included.\n"
 4726|  2.56M|                  "See the scnlib documentation for more details.");
 4727|  2.56M|    static_assert(
 4728|  2.56M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.56M|        "\n"
 4730|  2.56M|        "Unsupported range type given as input to a scanning "
 4731|  2.56M|        "function.\n"
 4732|  2.56M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.56M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.56M|        "not supported.");
 4735|  2.56M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.56M|                  "\n"
 4737|  2.56M|                  "Unsupported range type given as input to a scanning "
 4738|  2.56M|                  "function.\n"
 4739|  2.56M|                  "file_marker_found cannot be used as an "
 4740|  2.56M|                  "source range type to scn::scan.\n"
 4741|  2.56M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.56M|                  "and do not provide an explicit source range, "
 4743|  2.56M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.56M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.56M|                  "\n"
 4746|  2.56M|                  "Unsupported range type given as input to a scanning "
 4747|  2.56M|                  "function.\n"
 4748|  2.56M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.56M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.56M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.56M|                  "\n"
 4752|  2.56M|                  "Unsupported range type given as input to a scanning "
 4753|  2.56M|                  "function.\n"
 4754|  2.56M|                  "A range needs to model forward_range and have a valid "
 4755|  2.56M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.56M|                  "Examples of scannable ranges are std::string, "
 4757|  2.56M|                  "std::string_view, "
 4758|  2.56M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.56M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.56M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.56M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|  2.56M|{
 4686|  2.56M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|  2.56M|        return file_marker_found{};
 4688|  2.56M|    }
 4689|  2.56M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|  2.56M|        if constexpr (ranges::range<Range>) {
 4691|  2.56M|            return insufficient_range{};
 4692|  2.56M|        }
 4693|  2.56M|        else {
 4694|  2.56M|            return invalid_input_range{};
 4695|  2.56M|        }
 4696|  2.56M|    }
 4697|  2.56M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|  2.56M|        return invalid_char_type{};
 4699|  2.56M|    }
 4700|  2.56M|    else {
 4701|  2.56M|        return make_forward_scan_buffer(r);
 4702|  2.56M|    }
 4703|  2.56M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4519|  2.56M|{
 4520|  2.56M|    return basic_scan_forward_buffer_impl(range);
 4521|  2.56M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|  2.56M|    {
 4407|  2.56M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4377|  2.56M|    {
 4378|  2.56M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4146|  2.56M|    {
 4147|  2.56M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4061|  2.56M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  5.00M|    {
 2720|  5.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  5.00M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  5.00M|    {
 2701|  5.00M|        return decay_copy(t.begin());
 2702|  5.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  7.43M|    {
 3326|  7.43M|        return m_iterator;
 3327|  7.43M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4410|  32.9M|    {
 4411|  32.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 425k, False: 32.5M]
  ------------------
 4412|   425k|            return false;
 4413|   425k|        }
 4414|  32.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  32.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  32.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  32.5M|        }
 4417|  32.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 29.9M, False: 2.54M]
  ------------------
 4418|  29.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|  29.9M|                                          this->m_current_view.begin(),
 4420|  29.9M|                                          this->m_current_view.end());
 4421|  29.9M|        }
 4422|  32.5M|        m_latest = *m_cursor;
 4423|  32.5M|        ++m_cursor;
 4424|  32.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  32.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  32.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  32.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  32.5M|        }
 4428|  32.5M|        return true;
 4429|  32.5M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  98.0M|    {
 2777|  98.0M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  98.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  98.0M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  98.0M|    {
 2759|  98.0M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  98.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  98.0M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|   100M|    {
 3330|   100M|        return m_sentinel;
 3331|   100M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4066|  2.56M|    {
 4067|  2.56M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|  2.56M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   128k|    {
 1472|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   128k|    {
  443|   128k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.56M|    {
 1173|  2.56M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  2.43M|{
 5919|  2.43M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.43M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.43M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.43M|    }
 5923|  2.43M|    else {
 5924|  2.43M|        auto it = ranges::begin(source);
 5925|  2.43M|        while (n > 0) {
 5926|  2.43M|            --n;
 5927|  2.43M|            ++it;
 5928|  2.43M|        }
 5929|  2.43M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.43M|    }
 5931|  2.43M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.43M|    {
 2720|  2.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.43M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.43M|    {
 2701|  2.43M|        return decay_copy(t.begin());
 2702|  2.43M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5905|  2.43M|{
 5906|  2.43M|    return ranges::end(source);
 5907|  2.43M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.43M|    {
 2777|  2.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.43M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.43M|    {
 2759|  2.43M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.43M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  2.43M|    {
 1426|  2.43M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.43M|    {
  433|  2.43M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   733k|    {
 7971|   733k|        return m_str;
 7972|   733k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   733k|{
 8816|   733k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.5k, False: 693k]
  |  |  ------------------
  ------------------
 8817|  39.5k|        return unexpected(result.error());
 8818|  39.5k|    }
 8819|   693k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   693k|    static_cast<    \
  |  |  929|   693k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   693k|    static_cast<    \
  |  |  929|   693k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   733k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1593|  2.56M|    {
 1594|  2.56M|        return has_value();
 1595|  2.56M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.13M|    {
  481|  5.13M|        return m_has_value;
  482|  5.13M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   128k|    {
 1600|   128k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   128k|        return this->get_unexpected().error();
 1602|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   128k|    {
  464|   128k|        return m_unexpected;
  465|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  42.8k|    {
 1472|  42.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  42.8k|    {
  443|  42.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   808k|    {
 1173|   808k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  2.20M|    {
 1649|  2.20M|        return value();
 1650|  2.20M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  2.43M|    {
 1623|  2.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.43M|        return this->get_value();
 1625|  2.43M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.43M|    {
  447|  2.43M|        return m_value;
  448|  2.43M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|   765k|    {
 5826|   765k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5676|  2.43M|    {
 5677|  2.43M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   765k|    {
 1426|   765k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   765k|    {
  433|   765k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3311|  5.00M|    {
 3312|  5.00M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   733k|    {
 7967|   733k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   808k|    {
 1594|   808k|        return has_value();
 1595|   808k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.57M|    {
  481|  1.57M|        return m_has_value;
  482|  1.57M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|   765k|    {
 1669|   765k|        return &value();
 1670|   765k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   765k|    {
 1623|   765k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   765k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   765k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   765k|        return this->get_value();
 1625|   765k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   765k|    {
  447|   765k|        return m_value;
  448|   765k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5693|  2.43M|    {
 5694|  2.43M|        return ranges::begin(m_range);
 5695|  2.43M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   366k|{
 8930|   366k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   366k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   366k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.16M|{
 8668|  1.16M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.16M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|  1.16M|{
 8603|  1.16M|#if !SCN_DISABLE_LOCALE
 8604|  1.16M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.16M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.16M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.16M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.16M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.3k, False: 1.10M]
  |  |  ------------------
  ------------------
 8611|  59.3k|        return unexpected(result.error());
 8612|  59.3k|    }
 8613|  1.10M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.16M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  74.5k|{
 8969|  74.5k|    T value;
 8970|  74.5k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  74.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  74.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.29k, False: 71.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.29k|    }                                                  \
  |  |  |  | 3667|  74.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  71.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.2k|    static_cast<    \
  |  |  929|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.2k|    static_cast<    \
  |  |  929|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  74.5k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   240k|{
 8681|   240k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   240k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   240k|{
 8627|   240k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   240k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   240k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.89k, False: 230k]
  |  |  ------------------
  ------------------
 8631|  9.89k|        return unexpected(result.error());
 8632|  9.89k|    }
 8633|   230k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   240k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|   230k|    {
 1659|   230k|        return std::move(value());
 1660|   230k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   395k|{
 8863|   395k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   395k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   395k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   395k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   791k|    {
 7971|   791k|        return m_str;
 7972|   791k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   791k|{
 8816|   791k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   791k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.5k, False: 751k]
  |  |  ------------------
  ------------------
 8817|  39.5k|        return unexpected(result.error());
 8818|  39.5k|    }
 8819|   751k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   751k|    static_cast<    \
  |  |  929|   751k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   751k|    static_cast<    \
  |  |  929|   751k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   791k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  42.8k|    {
 1472|  42.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  42.8k|    {
  443|  42.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   873k|    {
 1173|   873k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|   830k|    {
 5826|   830k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   830k|    {
 1426|   830k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   830k|    {
  433|   830k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   791k|    {
 7967|   791k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   873k|    {
 1594|   873k|        return has_value();
 1595|   873k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.70M|    {
  481|  1.70M|        return m_has_value;
  482|  1.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|   830k|    {
 1669|   830k|        return &value();
 1670|   830k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   830k|    {
 1623|   830k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   830k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   830k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   830k|        return this->get_value();
 1625|   830k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   830k|    {
  447|   830k|        return m_value;
  448|   830k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   395k|{
 8930|   395k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   395k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   395k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   395k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  82.4k|{
 8969|  82.4k|    T value;
 8970|  82.4k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  82.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  82.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  82.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  82.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.29k, False: 79.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.29k|    }                                                  \
  |  |  |  | 3667|  82.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  79.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.1k|    static_cast<    \
  |  |  929|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.1k|    static_cast<    \
  |  |  929|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  82.4k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   400k|{
 8863|   400k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   400k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   400k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   400k|    static_cast<    \
  |  |  929|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   400k|    static_cast<    \
  |  |  929|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   400k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   800k|    {
 7971|   800k|        return m_str;
 7972|   800k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   800k|{
 8816|   800k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.5k, False: 760k]
  |  |  ------------------
  ------------------
 8817|  39.5k|        return unexpected(result.error());
 8818|  39.5k|    }
 8819|   760k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   760k|    static_cast<    \
  |  |  929|   760k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   760k|    static_cast<    \
  |  |  929|   760k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   800k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  42.8k|    {
 1472|  42.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  42.8k|    {
  443|  42.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   883k|    {
 1173|   883k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|   840k|    {
 5826|   840k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   840k|    {
 1426|   840k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   840k|    {
  433|   840k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   800k|    {
 7967|   800k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   883k|    {
 1594|   883k|        return has_value();
 1595|   883k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.72M|    {
  481|  1.72M|        return m_has_value;
  482|  1.72M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|   840k|    {
 1669|   840k|        return &value();
 1670|   840k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   840k|    {
 1623|   840k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   840k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   840k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   840k|        return this->get_value();
 1625|   840k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   840k|    {
  447|   840k|        return m_value;
  448|   840k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   400k|{
 8930|   400k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   400k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   400k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   400k|    static_cast<    \
  |  |  929|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   400k|    static_cast<    \
  |  |  929|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   400k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  83.5k|{
 8969|  83.5k|    T value;
 8970|  83.5k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  83.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  83.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.29k, False: 80.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.29k|    }                                                  \
  |  |  |  | 3667|  83.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  80.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  80.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  80.2k|    static_cast<    \
  |  |  929|  80.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  80.2k|    static_cast<    \
  |  |  929|  80.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  83.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   263k|    {
 2720|   263k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   263k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   263k|    {
 2701|   263k|        return decay_copy(t.begin());
 2702|   263k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  1.83M|{
 1945|  1.83M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.83M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   666k|    {
 2777|   666k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   666k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   666k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   666k|    {
 2759|   666k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   666k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   666k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5391|   202k|{
 5392|   202k|    detail::check_scan_arg_types<Args...>();
 5393|   202k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   202k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5344|   202k|    {
 5345|   202k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   202k|    {
 5356|   202k|        return {detail::make_arg<
 5357|   202k|            kind, Context,
 5358|   202k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   202k|                                 typename Context::char_type>::value>(args)...};
 5360|   202k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|   202k|{
 5166|   202k|    return make_value<Context>(value).ref_value;
 5167|   202k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5115|   219k|{
 5116|   219k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   219k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   219k|                                  needs_context_tag>) {
 5120|   219k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   219k|    }
 5122|   219k|    else {
 5123|   219k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   219k|            value, context_tag<Context>{}));
 5125|   219k|    }
 5126|   219k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4954|   219k|    {                                                                        \
 4955|   219k|        return val;                                                          \
 4956|   219k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|   151k|{
 8587|   151k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   151k|    auto result = vscan_impl(buffer, format, args);
 8590|   151k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118k, False: 33.1k]
  |  |  ------------------
  ------------------
 8591|   118k|        return unexpected(result.error());
 8592|   118k|    }
 8593|  33.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   151k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4715|   330k|{
 4716|   330k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   330k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   330k|                  "\n"
 4720|   330k|                  "Unsupported range type given as input to a scanning "
 4721|   330k|                  "function.\n"
 4722|   330k|                  "A range needs to have a character type (value type) "
 4723|   330k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   330k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   330k|                  "to be included.\n"
 4726|   330k|                  "See the scnlib documentation for more details.");
 4727|   330k|    static_assert(
 4728|   330k|        !std::is_same_v<T, custom_char_traits>,
 4729|   330k|        "\n"
 4730|   330k|        "Unsupported range type given as input to a scanning "
 4731|   330k|        "function.\n"
 4732|   330k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   330k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   330k|        "not supported.");
 4735|   330k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   330k|                  "\n"
 4737|   330k|                  "Unsupported range type given as input to a scanning "
 4738|   330k|                  "function.\n"
 4739|   330k|                  "file_marker_found cannot be used as an "
 4740|   330k|                  "source range type to scn::scan.\n"
 4741|   330k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   330k|                  "and do not provide an explicit source range, "
 4743|   330k|                  "or use scn::scan with a FILE* directly.");
 4744|   330k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   330k|                  "\n"
 4746|   330k|                  "Unsupported range type given as input to a scanning "
 4747|   330k|                  "function.\n"
 4748|   330k|                  "In order to be scannable, a range needs to satisfy "
 4749|   330k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   330k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   330k|                  "\n"
 4752|   330k|                  "Unsupported range type given as input to a scanning "
 4753|   330k|                  "function.\n"
 4754|   330k|                  "A range needs to model forward_range and have a valid "
 4755|   330k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   330k|                  "Examples of scannable ranges are std::string, "
 4757|   330k|                  "std::string_view, "
 4758|   330k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   330k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   330k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   330k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|   330k|{
 4655|   330k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|   330k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|   330k|    }
 4658|   330k|    else {
 4659|   330k|        return invalid_char_type{};
 4660|   330k|    }
 4661|   330k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   330k|    {
 2851|   330k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   330k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   330k|    {
 2832|   330k|        return t.data();
 2833|   330k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3226|   330k|    {
 3227|   330k|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 519, False: 329k]
  ------------------
 3228|   330k|                   ? nullptr
 3229|   330k|                   : std::addressof(*ranges::begin(derived()));
 3230|   330k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   330k|    {
 3001|   330k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   330k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   330k|    {
 2974|   330k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   330k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|   540k|    {
 3335|   540k|        return m_iterator == m_sentinel;
 3336|   540k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3180|   659k|    {
 3181|   659k|        return static_cast<const D&>(*this);
 3182|   659k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   402k|    {
 2720|   402k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   402k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   402k|    {
 2701|   402k|        return decay_copy(t.begin());
 2702|   402k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  8.76M|    {
 3326|  8.76M|        return m_iterator;
 3327|  8.76M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|   330k|    {
 2926|   330k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|   330k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|   330k|    {
 2892|   330k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|   330k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  1.37M|    {
 3342|  1.37M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.37M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   257k|    {
 1472|   257k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   257k|    {
  443|   257k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   330k|    {
 1173|   330k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  72.7k|{
 5919|  72.7k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  72.7k|                      ranges::iterator_t<SourceRange>>) {
 5921|  72.7k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  72.7k|    }
 5923|  72.7k|    else {
 5924|  72.7k|        auto it = ranges::begin(source);
 5925|  72.7k|        while (n > 0) {
 5926|  72.7k|            --n;
 5927|  72.7k|            ++it;
 5928|  72.7k|        }
 5929|  72.7k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  72.7k|    }
 5931|  72.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   427k|    {
 2720|   427k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   427k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   427k|    {
 2701|   427k|        return decay_copy(t.begin());
 2702|   427k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5905|  72.7k|{
 5906|  72.7k|    return ranges::end(source);
 5907|  72.7k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  72.7k|    {
 2777|  72.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  72.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  72.7k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  72.7k|    {
 2759|  72.7k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  72.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  72.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  4.54M|    {
 3330|  4.54M|        return m_sentinel;
 3331|  4.54M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  72.7k|    {
 1426|  72.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  72.7k|    {
  433|  72.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|   101k|    {
 7971|   101k|        return m_str;
 7972|   101k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   202k|    {
 5422|   202k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5374|   202k|    {
 5375|   202k|        return m_argptrs;
 5376|   202k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   607k|    {
 5474|   607k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   101k|{
 8816|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.1k, False: 21.9k]
  |  |  ------------------
  ------------------
 8817|  79.1k|        return unexpected(result.error());
 8818|  79.1k|    }
 8819|  21.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  21.9k|    static_cast<    \
  |  |  929|  21.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  21.9k|    static_cast<    \
  |  |  929|  21.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   101k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   330k|    {
 1594|   330k|        return has_value();
 1595|   330k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   660k|    {
  481|   660k|        return m_has_value;
  482|   660k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   257k|    {
 1600|   257k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   257k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   257k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   257k|        return this->get_unexpected().error();
 1602|   257k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   257k|    {
  464|   257k|        return m_unexpected;
  465|   257k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  85.7k|    {
 1472|  85.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  85.7k|    {
  443|  85.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   109k|    {
 1173|   109k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  66.2k|    {
 1649|  66.2k|        return value();
 1650|  66.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  72.7k|    {
 1623|  72.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  72.7k|        return this->get_value();
 1625|  72.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  72.7k|    {
  447|  72.7k|        return m_value;
  448|  72.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|  24.0k|    {
 5826|  24.0k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|  72.7k|    {
 5677|  72.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  24.0k|    {
 1426|  24.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  24.0k|    {
  433|  24.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5369|   202k|    {
 5370|   202k|        return m_args;
 5371|   202k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|  3.11M|    {
 3312|  3.11M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   607k|{
 7692|   607k|    return s;
 7693|   607k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   607k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|   101k|    {
 7967|   101k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   109k|    {
 1594|   109k|        return has_value();
 1595|   109k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   133k|    {
  481|   133k|        return m_has_value;
  482|   133k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|  24.0k|    {
 1669|  24.0k|        return &value();
 1670|  24.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  24.0k|    {
 1623|  24.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  24.0k|        return this->get_value();
 1625|  24.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.0k|    {
  447|  24.0k|        return m_value;
  448|  24.0k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5693|  72.7k|    {
 5694|  72.7k|        return ranges::begin(m_range);
 5695|  72.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|   151k|{
 8603|   151k|#if !SCN_DISABLE_LOCALE
 8604|   151k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   151k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   151k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   151k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   151k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118k, False: 33.1k]
  |  |  ------------------
  ------------------
 8611|   118k|        return unexpected(result.error());
 8612|   118k|    }
 8613|  33.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   151k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|  17.5k|{
 5151|  17.5k|    check_scan_arg_types<T>();
 5152|       |
 5153|  17.5k|    basic_scan_arg<Context> arg;
 5154|  17.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  17.5k|    arg.m_value = make_value<Context>(value);
 5156|  17.5k|    return arg;
 5157|  17.5k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|   659k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  26.3k|{
 8627|  26.3k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  26.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  26.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.7k, False: 6.55k]
  |  |  ------------------
  ------------------
 8631|  19.7k|        return unexpected(result.error());
 8632|  19.7k|    }
 8633|  6.55k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  6.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  26.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  6.55k|    {
 1659|  6.55k|        return std::move(value());
 1660|  6.55k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5391|   202k|{
 5392|   202k|    detail::check_scan_arg_types<Args...>();
 5393|   202k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   202k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5344|   202k|    {
 5345|   202k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   202k|    {
 5356|   202k|        return {detail::make_arg<
 5357|   202k|            kind, Context,
 5358|   202k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   202k|                                 typename Context::char_type>::value>(args)...};
 5360|   202k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|   202k|{
 5166|   202k|    return make_value<Context>(value).ref_value;
 5167|   202k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5115|   219k|{
 5116|   219k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   219k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   219k|                                  needs_context_tag>) {
 5120|   219k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   219k|    }
 5122|   219k|    else {
 5123|   219k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   219k|            value, context_tag<Context>{}));
 5125|   219k|    }
 5126|   219k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4954|   219k|    {                                                                        \
 4955|   219k|        return val;                                                          \
 4956|   219k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|   101k|    {
 7971|   101k|        return m_str;
 7972|   101k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   202k|    {
 5422|   202k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5374|   202k|    {
 5375|   202k|        return m_argptrs;
 5376|   202k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   101k|{
 8816|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.1k, False: 22.0k]
  |  |  ------------------
  ------------------
 8817|  79.1k|        return unexpected(result.error());
 8818|  79.1k|    }
 8819|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.0k|    static_cast<    \
  |  |  929|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.0k|    static_cast<    \
  |  |  929|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   101k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  85.7k|    {
 1472|  85.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  85.7k|    {
  443|  85.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   109k|    {
 1173|   109k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|  24.2k|    {
 5826|  24.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  24.2k|    {
 1426|  24.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  24.2k|    {
  433|  24.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5369|   202k|    {
 5370|   202k|        return m_args;
 5371|   202k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|   101k|    {
 7967|   101k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   109k|    {
 1594|   109k|        return has_value();
 1595|   109k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   134k|    {
  481|   134k|        return m_has_value;
  482|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|  24.2k|    {
 1669|  24.2k|        return &value();
 1670|  24.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  24.2k|    {
 1623|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  24.2k|        return this->get_value();
 1625|  24.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.2k|    {
  447|  24.2k|        return m_value;
  448|  24.2k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|  17.5k|{
 5151|  17.5k|    check_scan_arg_types<T>();
 5152|       |
 5153|  17.5k|    basic_scan_arg<Context> arg;
 5154|  17.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  17.5k|    arg.m_value = make_value<Context>(value);
 5156|  17.5k|    return arg;
 5157|  17.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5391|   202k|{
 5392|   202k|    detail::check_scan_arg_types<Args...>();
 5393|   202k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   202k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5344|   202k|    {
 5345|   202k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   202k|    {
 5356|   202k|        return {detail::make_arg<
 5357|   202k|            kind, Context,
 5358|   202k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   202k|                                 typename Context::char_type>::value>(args)...};
 5360|   202k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|   202k|{
 5166|   202k|    return make_value<Context>(value).ref_value;
 5167|   202k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5115|   220k|{
 5116|   220k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   220k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   220k|                                  needs_context_tag>) {
 5120|   220k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   220k|    }
 5122|   220k|    else {
 5123|   220k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   220k|            value, context_tag<Context>{}));
 5125|   220k|    }
 5126|   220k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4954|   220k|    {                                                                        \
 4955|   220k|        return val;                                                          \
 4956|   220k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|   101k|    {
 7971|   101k|        return m_str;
 7972|   101k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   202k|    {
 5422|   202k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5374|   202k|    {
 5375|   202k|        return m_argptrs;
 5376|   202k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   101k|{
 8816|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.1k, False: 22.2k]
  |  |  ------------------
  ------------------
 8817|  79.1k|        return unexpected(result.error());
 8818|  79.1k|    }
 8819|  22.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.2k|    static_cast<    \
  |  |  929|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.2k|    static_cast<    \
  |  |  929|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   101k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  85.7k|    {
 1472|  85.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  85.7k|    {
  443|  85.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   110k|    {
 1173|   110k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|  24.4k|    {
 5826|  24.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  24.4k|    {
 1426|  24.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  24.4k|    {
  433|  24.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5369|   202k|    {
 5370|   202k|        return m_args;
 5371|   202k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|   101k|    {
 7967|   101k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   110k|    {
 1594|   110k|        return has_value();
 1595|   110k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   134k|    {
  481|   134k|        return m_has_value;
  482|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|  24.4k|    {
 1669|  24.4k|        return &value();
 1670|  24.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  24.4k|    {
 1623|  24.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  24.4k|        return this->get_value();
 1625|  24.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.4k|    {
  447|  24.4k|        return m_value;
  448|  24.4k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|  17.5k|{
 5151|  17.5k|    check_scan_arg_types<T>();
 5152|       |
 5153|  17.5k|    basic_scan_arg<Context> arg;
 5154|  17.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  17.5k|    arg.m_value = make_value<Context>(value);
 5156|  17.5k|    return arg;
 5157|  17.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   257k|    {
 2720|   257k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   257k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   257k|    {
 2701|   257k|        return decay_copy(t.begin());
 2702|   257k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1944|  5.58M|{
 1945|  5.58M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  5.58M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   659k|    {
 2777|   659k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   659k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   659k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   659k|    {
 2759|   659k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   659k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   659k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|   151k|{
 8587|   151k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   151k|    auto result = vscan_impl(buffer, format, args);
 8590|   151k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118k, False: 33.0k]
  |  |  ------------------
  ------------------
 8591|   118k|        return unexpected(result.error());
 8592|   118k|    }
 8593|  33.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   151k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4715|   329k|{
 4716|   329k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   329k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   329k|                  "\n"
 4720|   329k|                  "Unsupported range type given as input to a scanning "
 4721|   329k|                  "function.\n"
 4722|   329k|                  "A range needs to have a character type (value type) "
 4723|   329k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   329k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   329k|                  "to be included.\n"
 4726|   329k|                  "See the scnlib documentation for more details.");
 4727|   329k|    static_assert(
 4728|   329k|        !std::is_same_v<T, custom_char_traits>,
 4729|   329k|        "\n"
 4730|   329k|        "Unsupported range type given as input to a scanning "
 4731|   329k|        "function.\n"
 4732|   329k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   329k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   329k|        "not supported.");
 4735|   329k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   329k|                  "\n"
 4737|   329k|                  "Unsupported range type given as input to a scanning "
 4738|   329k|                  "function.\n"
 4739|   329k|                  "file_marker_found cannot be used as an "
 4740|   329k|                  "source range type to scn::scan.\n"
 4741|   329k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   329k|                  "and do not provide an explicit source range, "
 4743|   329k|                  "or use scn::scan with a FILE* directly.");
 4744|   329k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   329k|                  "\n"
 4746|   329k|                  "Unsupported range type given as input to a scanning "
 4747|   329k|                  "function.\n"
 4748|   329k|                  "In order to be scannable, a range needs to satisfy "
 4749|   329k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   329k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   329k|                  "\n"
 4752|   329k|                  "Unsupported range type given as input to a scanning "
 4753|   329k|                  "function.\n"
 4754|   329k|                  "A range needs to model forward_range and have a valid "
 4755|   329k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   329k|                  "Examples of scannable ranges are std::string, "
 4757|   329k|                  "std::string_view, "
 4758|   329k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   329k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   329k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   329k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|   329k|{
 4686|   329k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|   329k|        return file_marker_found{};
 4688|   329k|    }
 4689|   329k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|   329k|        if constexpr (ranges::range<Range>) {
 4691|   329k|            return insufficient_range{};
 4692|   329k|        }
 4693|   329k|        else {
 4694|   329k|            return invalid_input_range{};
 4695|   329k|        }
 4696|   329k|    }
 4697|   329k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|   329k|        return invalid_char_type{};
 4699|   329k|    }
 4700|   329k|    else {
 4701|   329k|        return make_forward_scan_buffer(r);
 4702|   329k|    }
 4703|   329k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4519|   329k|{
 4520|   329k|    return basic_scan_forward_buffer_impl(range);
 4521|   329k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|   329k|    {
 4407|   329k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4377|   329k|    {
 4378|   329k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4146|   329k|    {
 4147|   329k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4061|   329k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   402k|    {
 2720|   402k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   402k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   402k|    {
 2701|   402k|        return decay_copy(t.begin());
 2702|   402k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   474k|    {
 3326|   474k|        return m_iterator;
 3327|   474k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4410|  1.47M|    {
 4411|  1.47M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 153k, False: 1.32M]
  ------------------
 4412|   153k|            return false;
 4413|   153k|        }
 4414|  1.32M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  1.32M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  1.32M|        }
 4417|  1.32M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 992k, False: 329k]
  ------------------
 4418|   992k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|   992k|                                          this->m_current_view.begin(),
 4420|   992k|                                          this->m_current_view.end());
 4421|   992k|        }
 4422|  1.32M|        m_latest = *m_cursor;
 4423|  1.32M|        ++m_cursor;
 4424|  1.32M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  1.32M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  1.32M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  1.32M|        }
 4428|  1.32M|        return true;
 4429|  1.32M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  4.11M|    {
 2777|  4.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  4.11M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  4.11M|    {
 2759|  4.11M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  4.11M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  4.19M|    {
 3330|  4.19M|        return m_sentinel;
 3331|  4.19M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4066|   329k|    {
 4067|   329k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   329k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|   329k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   257k|    {
 1472|   257k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   257k|    {
  443|   257k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   329k|    {
 1173|   329k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  72.5k|{
 5919|  72.5k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  72.5k|                      ranges::iterator_t<SourceRange>>) {
 5921|  72.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  72.5k|    }
 5923|  72.5k|    else {
 5924|  72.5k|        auto it = ranges::begin(source);
 5925|  72.5k|        while (n > 0) {
 5926|  72.5k|            --n;
 5927|  72.5k|            ++it;
 5928|  72.5k|        }
 5929|  72.5k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  72.5k|    }
 5931|  72.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  72.5k|    {
 2720|  72.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  72.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  72.5k|    {
 2701|  72.5k|        return decay_copy(t.begin());
 2702|  72.5k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5905|  72.5k|{
 5906|  72.5k|    return ranges::end(source);
 5907|  72.5k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  72.5k|    {
 2777|  72.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  72.5k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  72.5k|    {
 2759|  72.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  72.5k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  72.5k|    {
 1426|  72.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  72.5k|    {
  433|  72.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|   101k|    {
 7971|   101k|        return m_str;
 7972|   101k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   101k|{
 8816|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.1k, False: 21.8k]
  |  |  ------------------
  ------------------
 8817|  79.1k|        return unexpected(result.error());
 8818|  79.1k|    }
 8819|  21.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  21.8k|    static_cast<    \
  |  |  929|  21.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  21.8k|    static_cast<    \
  |  |  929|  21.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   101k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1593|   329k|    {
 1594|   329k|        return has_value();
 1595|   329k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   659k|    {
  481|   659k|        return m_has_value;
  482|   659k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   257k|    {
 1600|   257k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   257k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   257k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   257k|        return this->get_unexpected().error();
 1602|   257k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   257k|    {
  464|   257k|        return m_unexpected;
  465|   257k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  85.7k|    {
 1472|  85.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  85.7k|    {
  443|  85.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   109k|    {
 1173|   109k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  66.0k|    {
 1649|  66.0k|        return value();
 1650|  66.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  72.5k|    {
 1623|  72.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  72.5k|        return this->get_value();
 1625|  72.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  72.5k|    {
  447|  72.5k|        return m_value;
  448|  72.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|  24.0k|    {
 5826|  24.0k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5676|  72.5k|    {
 5677|  72.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  24.0k|    {
 1426|  24.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  24.0k|    {
  433|  24.0k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3311|   402k|    {
 3312|   402k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|   101k|    {
 7967|   101k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   109k|    {
 1594|   109k|        return has_value();
 1595|   109k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   133k|    {
  481|   133k|        return m_has_value;
  482|   133k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|  24.0k|    {
 1669|  24.0k|        return &value();
 1670|  24.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  24.0k|    {
 1623|  24.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  24.0k|        return this->get_value();
 1625|  24.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.0k|    {
  447|  24.0k|        return m_value;
  448|  24.0k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5693|  72.5k|    {
 5694|  72.5k|        return ranges::begin(m_range);
 5695|  72.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|   151k|{
 8603|   151k|#if !SCN_DISABLE_LOCALE
 8604|   151k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   151k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   151k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   151k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   151k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118k, False: 33.0k]
  |  |  ------------------
  ------------------
 8611|   118k|        return unexpected(result.error());
 8612|   118k|    }
 8613|  33.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   151k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  26.3k|{
 8627|  26.3k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  26.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  26.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.7k, False: 6.52k]
  |  |  ------------------
  ------------------
 8631|  19.7k|        return unexpected(result.error());
 8632|  19.7k|    }
 8633|  6.52k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  6.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  26.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|  6.52k|    {
 1659|  6.52k|        return std::move(value());
 1660|  6.52k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|   101k|    {
 7971|   101k|        return m_str;
 7972|   101k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   101k|{
 8816|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.1k, False: 22.0k]
  |  |  ------------------
  ------------------
 8817|  79.1k|        return unexpected(result.error());
 8818|  79.1k|    }
 8819|  22.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.0k|    static_cast<    \
  |  |  929|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.0k|    static_cast<    \
  |  |  929|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   101k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  85.7k|    {
 1472|  85.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  85.7k|    {
  443|  85.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   109k|    {
 1173|   109k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|  24.1k|    {
 5826|  24.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  24.1k|    {
 1426|  24.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  24.1k|    {
  433|  24.1k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|   101k|    {
 7967|   101k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   109k|    {
 1594|   109k|        return has_value();
 1595|   109k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   134k|    {
  481|   134k|        return m_has_value;
  482|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|  24.1k|    {
 1669|  24.1k|        return &value();
 1670|  24.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  24.1k|    {
 1623|  24.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  24.1k|        return this->get_value();
 1625|  24.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.1k|    {
  447|  24.1k|        return m_value;
  448|  24.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|   101k|    {
 7971|   101k|        return m_str;
 7972|   101k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   101k|{
 8816|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.1k, False: 22.1k]
  |  |  ------------------
  ------------------
 8817|  79.1k|        return unexpected(result.error());
 8818|  79.1k|    }
 8819|  22.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.1k|    static_cast<    \
  |  |  929|  22.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  22.1k|    static_cast<    \
  |  |  929|  22.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   101k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  85.7k|    {
 1472|  85.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  85.7k|    {
  443|  85.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   110k|    {
 1173|   110k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|  24.3k|    {
 5826|  24.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  24.3k|    {
 1426|  24.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  24.3k|    {
  433|  24.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|   101k|    {
 7967|   101k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   110k|    {
 1594|   110k|        return has_value();
 1595|   110k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   134k|    {
  481|   134k|        return m_has_value;
  482|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|  24.3k|    {
 1669|  24.3k|        return &value();
 1670|  24.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  24.3k|    {
 1623|  24.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  24.3k|        return this->get_value();
 1625|  24.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.3k|    {
  447|  24.3k|        return m_value;
  448|  24.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|  6.20M|    {
 3564|  6.20M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  6.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  6.20M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  26.5M|    {
 3570|  26.5M|        return m_code == good;
 3571|  26.5M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   593k|    {
 3581|   593k|        return m_code;
 3582|   593k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   115M|    {
 3326|   115M|        return m_iterator;
 3327|   115M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  11.1M|    {
 3326|  11.1M|        return m_iterator;
 3327|  11.1M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  4.11M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|  1.14M|    {
 6268|  1.14M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.14M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|  1.14M|            m_specs.localized = true;
 6270|  1.14M|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|  1.14M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  2.97M|    {
 6299|  2.97M|        m_specs.type = type;
 6300|  2.97M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  4.11M|    {
 6372|  4.11M|        return static_cast<bool>(m_error);
 6373|  4.11M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   593k|{
 3605|   593k|    return a.code() == b;
 3606|   593k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   593k|{
 3609|   593k|    return !(a == b);
 3610|   593k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|  1.14M|{
 7059|  1.14M|    switch (type) {
 7060|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 0, False: 1.14M]
  ------------------
 7061|      0|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 1.14M]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.14M]
  ------------------
 7065|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 0, False: 1.14M]
  ------------------
 7066|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 1.14M]
  ------------------
 7067|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.14M]
  ------------------
 7068|      0|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.14M]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.14M]
  ------------------
 7072|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 0, False: 1.14M]
  ------------------
 7073|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 1.14M]
  ------------------
 7074|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.14M]
  ------------------
 7075|      0|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.14M]
  ------------------
 7078|      0|            return arg_type_category::pointer;
 7079|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 1.14M]
  ------------------
 7080|      0|            return arg_type_category::boolean;
 7081|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.14M]
  ------------------
 7082|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 1.14M]
  ------------------
 7083|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.14M]
  ------------------
 7084|      0|            return arg_type_category::character;
 7085|       |
 7086|   356k|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 356k, False: 789k]
  ------------------
 7087|   748k|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 391k, False: 754k]
  ------------------
 7088|  1.14M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 398k, False: 748k]
  ------------------
 7089|  1.14M|            return arg_type_category::floating;
 7090|       |
 7091|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 1.14M]
  ------------------
 7092|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.14M]
  ------------------
 7093|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 1.14M]
  ------------------
 7094|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 1.14M]
  ------------------
 7095|      0|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.14M]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 1.14M]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|  1.14M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|  1.14M|            SCN_CLANG_POP
 7106|  1.14M|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.14M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  4.99M|    {
 2892|  4.99M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  4.99M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2925|  4.99M|    {
 2926|  4.99M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  4.99M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2948|  4.99M|    {
 2949|  4.99M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|  4.99M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2957|  4.99M|    {
 2958|  4.99M|        return fn::impl(std::forward<T>(t));
 2959|  4.99M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|  1.34k|{
 3650|  1.34k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.34k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.33k|{
 3650|  2.33k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.33k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  37.5k|{
 3650|  37.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  37.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  37.5k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  4.11M|{
 7189|  4.11M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 2.97M, False: 1.14M]
  ------------------
 7190|  4.11M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7190:10): [True: 0, False: 2.97M]
  ------------------
 7191|  2.97M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7191:10): [True: 0, False: 2.97M]
  ------------------
 7192|      0|        SCN_UNLIKELY_ATTR
 7193|      0|        return handler.on_error("Invalid type specifier for float type");
 7194|      0|    }
 7195|  4.11M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4190|   743M|    {
 4191|   743M|        return m_end == nullptr;
 4192|   743M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  2.00M|{
 3711|  2.00M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  2.00M|                                          const CharT*, const CharT*>) {
 3713|  2.00M|        return {first, last};
 3714|  2.00M|    }
 3715|  2.00M|    else {
 3716|  2.00M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  2.00M|    }
 3718|  2.00M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4206|  9.75M|    {
 4207|  9.75M|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 9.75M]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|  9.75M|        return parent()->get_segment_starting_at(position());
 4213|  9.75M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4200|   414M|    {
 4201|   414M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   414M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   414M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|   414M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|   414M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4096|  9.75M|    {
 4097|  9.75M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  9.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.30M, False: 5.44M]
  |  |  ------------------
  ------------------
 4098|  9.75M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  4.30M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  4.30M|        }
 4101|  5.44M|        const auto start = pos - m_putback_buffer.size();
 4102|  5.44M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|  5.44M|        return m_current_view.substr(start);
 4104|  5.44M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4195|  6.80M|    {
 4196|  6.80M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  6.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|  6.80M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|  6.80M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4185|  17.8M|    {
 4186|  17.8M|        return m_position;
 4187|  17.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4118|  7.69M|    {
 4119|  7.69M|        return m_is_contiguous;
 4120|  7.69M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4190|  32.3M|    {
 4191|  32.3M|        return m_end == nullptr;
 4192|  32.3M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  69.7k|{
 3711|  69.7k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  69.7k|                                          const CharT*, const CharT*>) {
 3713|  69.7k|        return {first, last};
 3714|  69.7k|    }
 3715|  69.7k|    else {
 3716|  69.7k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  69.7k|    }
 3718|  69.7k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4206|   476k|    {
 4207|   476k|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 476k]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|   476k|        return parent()->get_segment_starting_at(position());
 4213|   476k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4200|  17.4M|    {
 4201|  17.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  17.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|  17.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|  17.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4096|   476k|    {
 4097|   476k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142k, False: 333k]
  |  |  ------------------
  ------------------
 4098|   476k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|   142k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|   142k|        }
 4101|   333k|        const auto start = pos - m_putback_buffer.size();
 4102|   333k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   333k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   333k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|   333k|        return m_current_view.substr(start);
 4104|   333k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4195|   838k|    {
 4196|   838k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|   838k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|   838k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4185|  1.34M|    {
 4186|  1.34M|        return m_position;
 4187|  1.34M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4118|   989k|    {
 4119|   989k|        return m_is_contiguous;
 4120|   989k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|  23.0M|    {
 3176|  23.0M|        return static_cast<D&>(*this);
 3177|  23.0M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  11.5M|    {
 2974|  11.5M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  11.5M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  11.5M|    {
 3001|  11.5M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  11.5M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|  11.5M|    {
 3217|  11.5M|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 18.6k, False: 11.5M]
  ------------------
 3218|  11.5M|                   ? nullptr
 3219|  11.5M|                   : std::addressof(*ranges::begin(derived()));
 3220|  11.5M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|   419k|    {
 3176|   419k|        return static_cast<D&>(*this);
 3177|   419k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   209k|    {
 2974|   209k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   209k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   209k|    {
 3001|   209k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   209k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|   209k|    {
 3217|   209k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 0, False: 209k]
  ------------------
 3218|   209k|                   ? nullptr
 3219|   209k|                   : std::addressof(*ranges::begin(derived()));
 3220|   209k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8164|  1.84M|    {
 8165|  1.84M|        return ranges::subrange{begin(), end()};
 8166|  1.84M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8148|  5.43M|    {
 8149|  5.43M|        return m_current;
 8150|  5.43M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8156|  1.84M|    {
 8157|  1.84M|        return ranges::default_sentinel;
 8158|  1.84M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  28.5M|    {
 3312|  28.5M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|  8.82M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.56M|    {
 1833|  2.56M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.56M|                                            std::forward<F>(f));
 1835|  2.56M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  2.56M|{
 1319|  2.56M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.56M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.56M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.56M|            return result(*std::forward<Exp>(exp));
 1323|  2.56M|        }
 1324|       |
 1325|  2.56M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.56M|        return result(unexpect, monostate{});
 1327|  2.56M|    }
 1328|  2.56M|    else {
 1329|  2.56M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.56M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.56M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.53M, False: 29.2k]
  |  |  ------------------
  ------------------
 1331|  2.56M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.56M|                   : result(unexpect,
 1333|  29.2k|                            trivial_invoke(std::forward<F>(f),
 1334|  29.2k|                                           std::forward<Exp>(exp).error()));
 1335|  2.56M|    }
 1336|  2.56M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  27.5M|    {
  481|  27.5M|        return m_has_value;
  482|  27.5M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  9.28M|    {
 1659|  9.28M|        return std::move(value());
 1660|  9.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  10.6M|    {
 1623|  10.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  10.6M|        return this->get_value();
 1625|  10.6M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  10.6M|    {
  447|  10.6M|        return m_value;
  448|  10.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|  9.82M|    {
 1426|  9.82M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.82M|    {
  433|  9.82M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.5M|    {
 1173|  14.5M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|  59.7k|{
 1207|  59.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  59.7k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  81.9k|    {
 1610|  81.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  81.9k|        return std::move(this->get_unexpected().error());
 1612|  81.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|   111k|    {
  464|   111k|        return m_unexpected;
  465|   111k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   501k|    {
  357|   501k|        return m_unexpected;
  358|   501k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.50M|    {
 1482|  2.50M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.81M|    {
  443|  2.81M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8164|   250k|    {
 8165|   250k|        return ranges::subrange{begin(), end()};
 8166|   250k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8148|   554k|    {
 8149|   554k|        return m_current;
 8150|   554k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8156|   250k|    {
 8157|   250k|        return ranges::default_sentinel;
 8158|   250k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  2.61M|    {
 3312|  2.61M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   329k|    {
 1833|   329k|        return detail::transform_error_impl(std::move(*this),
 1834|   329k|                                            std::forward<F>(f));
 1835|   329k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   329k|{
 1319|   329k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   329k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   329k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   329k|            return result(*std::forward<Exp>(exp));
 1323|   329k|        }
 1324|       |
 1325|   329k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   329k|        return result(unexpect, monostate{});
 1327|   329k|    }
 1328|   329k|    else {
 1329|   329k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   329k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   329k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 327k, False: 2.22k]
  |  |  ------------------
  ------------------
 1331|   329k|                   ? result(*std::forward<Exp>(exp))
 1332|   329k|                   : result(unexpect,
 1333|  2.22k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.22k|                                           std::forward<Exp>(exp).error()));
 1335|   329k|    }
 1336|   329k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.80M|    {
  481|  2.80M|        return m_has_value;
  482|  2.80M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  1.11M|    {
 1659|  1.11M|        return std::move(value());
 1660|  1.11M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  1.11M|    {
 1623|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.11M|        return this->get_value();
 1625|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  1.11M|    {
  447|  1.11M|        return m_value;
  448|  1.11M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|   546k|    {
 1426|   546k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   546k|    {
  433|   546k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.89M|    {
 1173|  1.89M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  52.3k|    {
 1610|  52.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  52.3k|        return std::move(this->get_unexpected().error());
 1612|  52.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  53.1k|    {
  464|  53.1k|        return m_unexpected;
  465|  53.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|   582k|    {
 1482|   582k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.29M|    {
  443|  1.29M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   220k|    {
  343|   220k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   220k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   220k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   280k|    {
 1472|   280k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  2.71M|    {
  443|  2.71M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.3M|    {
 1173|  14.3M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  9.80M|    {
 1426|  9.80M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  9.80M|    {
  433|  9.80M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|  16.8M|    {
 1594|  16.8M|        return has_value();
 1595|  16.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  26.2M|    {
  481|  26.2M|        return m_has_value;
  482|  26.2M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|   338k|    {
 1600|   338k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   338k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   338k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   338k|        return this->get_unexpected().error();
 1602|   338k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   338k|    {
  464|   338k|        return m_unexpected;
  465|   338k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  7.38M|    {
 1659|  7.38M|        return std::move(value());
 1660|  7.38M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  9.15M|    {
 1623|  9.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  9.15M|        return this->get_value();
 1625|  9.15M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  9.15M|    {
  447|  9.15M|        return m_value;
  448|  9.15M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   572k|    {
 1472|   572k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  1.01M|    {
  443|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.89M|    {
 1173|  1.89M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|   820k|    {
 1426|   820k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   820k|    {
  433|   820k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  2.22M|    {
 1594|  2.22M|        return has_value();
 1595|  2.22M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  3.57M|    {
  481|  3.57M|        return m_has_value;
  482|  3.57M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|   691k|    {
 1600|   691k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   691k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   691k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   691k|        return this->get_unexpected().error();
 1602|   691k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   691k|    {
  464|   691k|        return m_unexpected;
  465|   691k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|   610k|    {
 1659|   610k|        return std::move(value());
 1660|   610k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|   663k|    {
 1623|   663k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   663k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   663k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   663k|        return this->get_value();
 1625|   663k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   663k|    {
  447|   663k|        return m_value;
  448|   663k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  2.53M|    {
 1833|  2.53M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.53M|                                            std::forward<F>(f));
 1835|  2.53M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  2.53M|{
 1319|  2.53M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.53M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.53M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.53M|            return result(*std::forward<Exp>(exp));
 1323|  2.53M|        }
 1324|       |
 1325|  2.53M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.53M|        return result(unexpect, monostate{});
 1327|  2.53M|    }
 1328|  2.53M|    else {
 1329|  2.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.51M, False: 26.0k]
  |  |  ------------------
  ------------------
 1331|  2.53M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.53M|                   : result(unexpect,
 1333|  26.0k|                            trivial_invoke(std::forward<F>(f),
 1334|  26.0k|                                           std::forward<Exp>(exp).error()));
 1335|  2.53M|    }
 1336|  2.53M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  9.74M|    {
  481|  9.74M|        return m_has_value;
  482|  9.74M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  2.51M|    {
 1659|  2.51M|        return std::move(value());
 1660|  2.51M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  3.44M|    {
 1623|  3.44M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.44M|        return this->get_value();
 1625|  3.44M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  3.44M|    {
  447|  3.44M|        return m_value;
  448|  3.44M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|  26.0k|    {
 1610|  26.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  26.0k|        return std::move(this->get_unexpected().error());
 1612|  26.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  33.0k|    {
  464|  33.0k|        return m_unexpected;
  465|  33.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.43M|    {
 1482|  2.43M|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  18.3M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   314k|    {
 1472|   314k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4234|  62.4M|    {
 4235|  62.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  62.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  62.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 62.4M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  62.4M|        auto res = read_at_position();
 4244|  62.4M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  62.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  62.4M|        return parent()->get_character_at(m_position);
 4246|  62.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4299|   243M|    {
 4300|   243M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   243M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   243M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|   243M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 243M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|   243M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   243M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 210M, False: 32.9M]
  |  |  ------------------
  ------------------
 4307|   210M|            return true;
 4308|   210M|        }
 4309|       |
 4310|  65.4M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 32.9M, False: 32.5M]
  ------------------
 4311|  32.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 425k, False: 32.5M]
  ------------------
 4312|   425k|                return false;
 4313|   425k|            }
 4314|  32.9M|        }
 4315|  32.5M|        return true;
 4316|  32.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4076|   315M|    {
 4077|   315M|        return m_putback_buffer.size() + m_current_view.size();
 4078|   315M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4107|  62.4M|    {
 4108|  62.4M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  62.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.0M, False: 23.4M]
  |  |  ------------------
  ------------------
 4109|  62.4M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  39.0M|            return m_putback_buffer[pos];
 4111|  39.0M|        }
 4112|  23.4M|        const auto start = pos - m_putback_buffer.size();
 4113|  23.4M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  23.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|  23.4M|        return m_current_view[start];
 4115|  23.4M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4220|   124M|    {
 4221|   124M|        ++m_position;
 4222|   124M|        (void)read_at_position();
 4223|   124M|        return *this;
 4224|   124M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4269|  59.4M|    {
 4270|  59.4M|        return !(lhs == rhs);
 4271|  59.4M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4264|  66.1M|    {
 4265|  66.1M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 66.1M, False: 0]
  |  Branch (4265:46): [True: 8.62M, False: 57.5M]
  ------------------
 4266|  66.1M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  22.7M|    {
 4276|  22.7M|        return x.is_at_end();
 4277|  22.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4319|  56.5M|    {
 4320|  56.5M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 56.5M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  56.5M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 56.5M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  56.5M|        return !read_at_position();
 4327|  56.5M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  16.5M|    {
 1426|  16.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  16.5M|    {
  433|  16.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.7M|    {
 1173|  16.7M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|   153k|    {
  343|   153k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   153k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   111k|    {
 1472|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   111k|    {
  443|   111k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   251k|    {
  352|   251k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   251k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   251k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|  7.33M|    {
 1594|  7.33M|        return has_value();
 1595|  7.33M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.40M|    {
 1649|  1.40M|        return value();
 1650|  1.40M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  97.5k|    {
  343|  97.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  97.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  97.5k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  21.9k|    {
 1472|  21.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  21.9k|    {
  443|  21.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.57M|    {
 1173|  3.57M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  3.55M|    {
 1426|  3.55M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  3.55M|    {
  433|  3.55M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|  3.57M|    {
 1594|  3.57M|        return has_value();
 1595|  3.57M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  7.14M|    {
  481|  7.14M|        return m_has_value;
  482|  7.14M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  21.9k|    {
 1600|  21.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  21.9k|        return this->get_unexpected().error();
 1602|  21.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  21.9k|    {
  464|  21.9k|        return m_unexpected;
  465|  21.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.55M|    {
 1659|  3.55M|        return std::move(value());
 1660|  3.55M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.55M|    {
 1623|  3.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.55M|        return this->get_value();
 1625|  3.55M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.55M|    {
  447|  3.55M|        return m_value;
  448|  3.55M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  80.5M|    {
 3330|  80.5M|        return m_sentinel;
 3331|  80.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  94.7k|    {
  343|  94.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  94.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  94.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  22.0M|    {
  357|  22.0M|        return m_unexpected;
  358|  22.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  6.02M|    {
  352|  6.02M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.02M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  6.02M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  27.1M|    {
  343|  27.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  27.1M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  27.1M|    {
  357|  27.1M|        return m_unexpected;
  358|  27.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  27.1M|    {
  352|  27.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  27.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  27.1M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|   153k|{
 1207|   153k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|   153k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  5.77M|    {
  343|  5.77M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.77M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  5.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|  29.7k|    {
 1600|  29.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  29.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  29.7k|        return this->get_unexpected().error();
 1602|  29.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  2.57M|    {
 1472|  2.57M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.63M|    {
  443|  2.63M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  28.4M|    {
 1173|  28.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  1.42M|    {
 1426|  1.42M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.42M|    {
  433|  1.42M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  14.4M|    {
 1472|  14.4M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  14.4M|    {
  443|  14.4M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  30.9M|    {
 1594|  30.9M|        return has_value();
 1595|  30.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  54.4M|    {
  481|  54.4M|        return m_has_value;
  482|  54.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  7.03M|    {
 1600|  7.03M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  7.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  7.03M|        return this->get_unexpected().error();
 1602|  7.03M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  7.03M|    {
  464|  7.03M|        return m_unexpected;
  465|  7.03M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|  2.78M|    {
 1426|  2.78M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.78M|    {
  433|  2.78M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.78M|    {
 1173|  2.78M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|    512|    {
 1472|    512|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|    512|    {
  443|    512|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|  7.22M|    {
 1649|  7.22M|        return value();
 1650|  7.22M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|  13.9M|    {
 1623|  13.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  13.9M|        return this->get_value();
 1625|  13.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  13.9M|    {
  447|  13.9M|        return m_value;
  448|  13.9M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|   252k|    {
 1594|   252k|        return has_value();
 1595|   252k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  5.57M|    {
  481|  5.57M|        return m_has_value;
  482|  5.57M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.53M|    {
 1659|  2.53M|        return std::move(value());
 1660|  2.53M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.78M|    {
 1623|  2.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.78M|        return this->get_value();
 1625|  2.78M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.78M|    {
  447|  2.78M|        return m_value;
  448|  2.78M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  6.80M|    {
 1833|  6.80M|        return detail::transform_error_impl(std::move(*this),
 1834|  6.80M|                                            std::forward<F>(f));
 1835|  6.80M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  6.80M|{
 1319|  6.80M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  6.80M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  6.80M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  6.80M|            return result(*std::forward<Exp>(exp));
 1323|  6.80M|        }
 1324|       |
 1325|  6.80M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  6.80M|        return result(unexpect, monostate{});
 1327|  6.80M|    }
 1328|  6.80M|    else {
 1329|  6.80M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  6.80M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.80M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.74M, False: 52.7k]
  |  |  ------------------
  ------------------
 1331|  6.80M|                   ? result(*std::forward<Exp>(exp))
 1332|  6.80M|                   : result(unexpect,
 1333|  52.7k|                            trivial_invoke(std::forward<F>(f),
 1334|  52.7k|                                           std::forward<Exp>(exp).error()));
 1335|  6.80M|    }
 1336|  6.80M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|  9.90M|    {
 1426|  9.90M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.90M|    {
  433|  9.90M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  52.7k|    {
 1482|  52.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|  6.74M|    {
 1659|  6.74M|        return std::move(value());
 1660|  6.74M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  2.93M|    {
 3326|  2.93M|        return m_iterator;
 3327|  2.93M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  2.93M|    {
 3330|  2.93M|        return m_sentinel;
 3331|  2.93M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  17.0M|    {
 1594|  17.0M|        return has_value();
 1595|  17.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  26.6M|    {
  481|  26.6M|        return m_has_value;
  482|  26.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   415k|    {
 1600|   415k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   415k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   415k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   415k|        return this->get_unexpected().error();
 1602|   415k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   415k|    {
  464|   415k|        return m_unexpected;
  465|   415k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|  7.41M|    {
 1659|  7.41M|        return std::move(value());
 1660|  7.41M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|  9.26M|    {
 1623|  9.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  9.26M|        return this->get_value();
 1625|  9.26M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  9.26M|    {
  447|  9.26M|        return m_value;
  448|  9.26M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  4.63M|{
  322|  4.63M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.63M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  2.31M|    {
 3312|  2.31M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|  33.7M|    {
 4287|  33.7M|        return !x.is_at_end();
 4288|  33.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  1.88M|    {
 1426|  1.88M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.88M|    {
  433|  1.88M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  33.0k|    {
 1472|  33.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  33.0k|    {
  443|  33.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  6.26M|    {
 1173|  6.26M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  6.23M|    {
 1426|  6.23M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  6.23M|    {
  433|  6.23M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  3.72M|    {
 1594|  3.72M|        return has_value();
 1595|  3.72M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|   934k|    {
 1649|   934k|        return value();
 1650|   934k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  18.6k|    {
 1472|  18.6k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  18.6k|    {
  443|  18.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.43M|    {
 1173|  3.43M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  3.41M|    {
 1426|  3.41M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  3.41M|    {
  433|  3.41M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  3.43M|    {
 1594|  3.43M|        return has_value();
 1595|  3.43M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.86M|    {
  481|  6.86M|        return m_has_value;
  482|  6.86M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|  18.6k|    {
 1600|  18.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  18.6k|        return this->get_unexpected().error();
 1602|  18.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.6k|    {
  464|  18.6k|        return m_unexpected;
  465|  18.6k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  3.41M|    {
 1659|  3.41M|        return std::move(value());
 1660|  3.41M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  3.41M|    {
 1623|  3.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.41M|        return this->get_value();
 1625|  3.41M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.41M|    {
  447|  3.41M|        return m_value;
  448|  3.41M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1599|  6.95k|    {
 1600|  6.95k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.95k|        return this->get_unexpected().error();
 1602|  6.95k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  2.53M|    {
 1472|  2.53M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.53M|    {
  443|  2.53M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.3M|    {
 1173|  14.3M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|   950k|    {
 1426|   950k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   950k|    {
  433|   950k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  9.78M|    {
 1472|  9.78M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  9.78M|    {
  443|  9.78M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  16.8M|    {
 1594|  16.8M|        return has_value();
 1595|  16.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  28.7M|    {
  481|  28.7M|        return m_has_value;
  482|  28.7M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  6.74M|    {
 1600|  6.74M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.74M|        return this->get_unexpected().error();
 1602|  6.74M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.74M|    {
  464|  6.74M|        return m_unexpected;
  465|  6.74M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  2.59M|    {
 1426|  2.59M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.59M|    {
  433|  2.59M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.59M|    {
 1173|  2.59M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|    162|    {
 1472|    162|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|    162|    {
  443|    162|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.72M|    {
 1649|  2.72M|        return value();
 1650|  2.72M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  2.72M|    {
 1623|  2.72M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.72M|        return this->get_value();
 1625|  2.72M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  2.72M|    {
  447|  2.72M|        return m_value;
  448|  2.72M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  80.8k|    {
 1594|  80.8k|        return has_value();
 1595|  80.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  5.18M|    {
  481|  5.18M|        return m_has_value;
  482|  5.18M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.51M|    {
 1659|  2.51M|        return std::move(value());
 1660|  2.51M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.59M|    {
 1623|  2.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.59M|        return this->get_value();
 1625|  2.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.59M|    {
  447|  2.59M|        return m_value;
  448|  2.59M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  1.06M|    {
 1426|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.06M|    {
  433|  1.06M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  4.86M|    {
 2851|  4.86M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  4.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  4.86M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  4.86M|    {
 2832|  4.86M|        return t.data();
 2833|  4.86M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.81M|    {
 1426|  1.81M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.81M|    {
  433|  1.81M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|  1.16M|    {
 1472|  1.16M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  1.16M|    {
  443|  1.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.1M|    {
 1173|  16.1M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  14.7M|    {
 1426|  14.7M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  14.7M|    {
  433|  14.7M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1658|  9.98M|    {
 1659|  9.98M|        return std::move(value());
 1660|  9.98M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1206|  5.90M|{
 1207|  5.90M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  5.90M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|  2.53M|    {
 1833|  2.53M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.53M|                                            std::forward<F>(f));
 1835|  2.53M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|  2.53M|{
 1319|  2.53M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.53M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.53M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.53M|            return result(*std::forward<Exp>(exp));
 1323|  2.53M|        }
 1324|       |
 1325|  2.53M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.53M|        return result(unexpect, monostate{});
 1327|  2.53M|    }
 1328|  2.53M|    else {
 1329|  2.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.53M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.53M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.53M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.53M|    }
 1336|  2.53M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  2.53M|    {
 1426|  2.53M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.53M|    {
  433|  2.53M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.53M|    {
 1173|  2.53M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.53M|    {
 1594|  2.53M|        return has_value();
 1595|  2.53M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.07M|    {
  481|  5.07M|        return m_has_value;
  482|  5.07M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.53M|    {
 1659|  2.53M|        return std::move(value());
 1660|  2.53M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.53M|    {
 1623|  2.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.53M|        return this->get_value();
 1625|  2.53M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.53M|    {
  447|  2.53M|        return m_value;
  448|  2.53M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|  2.47M|    {
 1819|  2.47M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.47M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|  2.47M|{
 1319|  2.47M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.47M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.47M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.47M|            return result(*std::forward<Exp>(exp));
 1323|  2.47M|        }
 1324|       |
 1325|  2.47M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.47M|        return result(unexpect, monostate{});
 1327|  2.47M|    }
 1328|  2.47M|    else {
 1329|  2.47M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.47M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.47M]
  |  |  ------------------
  ------------------
 1331|  2.47M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.47M|                   : result(unexpect,
 1333|  2.47M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.47M|                                           std::forward<Exp>(exp).error()));
 1335|  2.47M|    }
 1336|  2.47M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.84M|    {
 1649|  1.84M|        return value();
 1650|  1.84M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   621k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|   251k|    {
 1669|   251k|        return &value();
 1670|   251k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|  1.77M|    {
 2720|  1.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.77M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|  1.77M|    {
 2701|  1.77M|        return decay_copy(t.begin());
 2702|  1.77M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|  1.77M|{
 1945|  1.77M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.77M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|  1.10M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|  2.51M|    {
 1833|  2.51M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.51M|                                            std::forward<F>(f));
 1835|  2.51M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|  2.51M|{
 1319|  2.51M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.51M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.51M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.51M|            return result(*std::forward<Exp>(exp));
 1323|  2.51M|        }
 1324|       |
 1325|  2.51M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.51M|        return result(unexpect, monostate{});
 1327|  2.51M|    }
 1328|  2.51M|    else {
 1329|  2.51M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.51M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.51M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.51M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.51M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.51M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.51M|    }
 1336|  2.51M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.51M|    {
 1426|  2.51M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.51M|    {
  433|  2.51M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.51M|    {
 1173|  2.51M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.51M|    {
 1594|  2.51M|        return has_value();
 1595|  2.51M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.02M|    {
  481|  5.02M|        return m_has_value;
  482|  5.02M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.51M|    {
 1659|  2.51M|        return std::move(value());
 1660|  2.51M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.51M|    {
 1623|  2.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.51M|        return this->get_value();
 1625|  2.51M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.51M|    {
  447|  2.51M|        return m_value;
  448|  2.51M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1818|  2.40M|    {
 1819|  2.40M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.40M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|  2.40M|{
 1319|  2.40M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.40M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.40M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.40M|            return result(*std::forward<Exp>(exp));
 1323|  2.40M|        }
 1324|       |
 1325|  2.40M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.40M|        return result(unexpect, monostate{});
 1327|  2.40M|    }
 1328|  2.40M|    else {
 1329|  2.40M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.40M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.40M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.40M]
  |  |  ------------------
  ------------------
 1331|  2.40M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.40M|                   : result(unexpect,
 1333|  2.40M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.40M|                                           std::forward<Exp>(exp).error()));
 1335|  2.40M|    }
 1336|  2.40M|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|  2.40M|    {
 3644|  2.40M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.77M|    {
 1649|  1.77M|        return value();
 1650|  1.77M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|  80.7k|    {
 1669|  80.7k|        return &value();
 1670|  80.7k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|  2.47M|    {
 3644|  2.47M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   709k|    {
 1472|   709k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4234|  2.97M|    {
 4235|  2.97M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  2.97M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 2.97M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  2.97M|        auto res = read_at_position();
 4244|  2.97M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  2.97M|        return parent()->get_character_at(m_position);
 4246|  2.97M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4299|  9.75M|    {
 4300|  9.75M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  9.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|  9.75M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 9.75M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|  9.75M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  9.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.27M, False: 1.47M]
  |  |  ------------------
  ------------------
 4307|  8.27M|            return true;
 4308|  8.27M|        }
 4309|       |
 4310|  2.79M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 1.47M, False: 1.32M]
  ------------------
 4311|  1.47M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 153k, False: 1.32M]
  ------------------
 4312|   153k|                return false;
 4313|   153k|            }
 4314|  1.47M|        }
 4315|  1.32M|        return true;
 4316|  1.47M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4076|  13.3M|    {
 4077|  13.3M|        return m_putback_buffer.size() + m_current_view.size();
 4078|  13.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4107|  2.97M|    {
 4108|  2.97M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.51M, False: 461k]
  |  |  ------------------
  ------------------
 4109|  2.97M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  2.51M|            return m_putback_buffer[pos];
 4111|  2.51M|        }
 4112|   461k|        const auto start = pos - m_putback_buffer.size();
 4113|   461k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|   461k|        return m_current_view[start];
 4115|   461k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4220|  3.52M|    {
 4221|  3.52M|        ++m_position;
 4222|  3.52M|        (void)read_at_position();
 4223|  3.52M|        return *this;
 4224|  3.52M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4269|  1.15M|    {
 4270|  1.15M|        return !(lhs == rhs);
 4271|  1.15M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4264|  1.62M|    {
 4265|  1.62M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 1.62M, False: 0]
  |  Branch (4265:46): [True: 519k, False: 1.10M]
  ------------------
 4266|  1.62M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  2.30M|    {
 4276|  2.30M|        return x.is_at_end();
 4277|  2.30M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4319|  3.24M|    {
 4320|  3.24M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 3.24M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  3.24M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 3.24M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  3.24M|        return !read_at_position();
 4327|  3.24M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   936k|{
 3803|   936k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   936k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   936k|    }
 3806|   936k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   936k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   936k|    }
 3809|   936k|    else {
 3810|       |        // utf-32
 3811|   936k|        static_assert(sizeof(U) == 4);
 3812|   936k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   936k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   936k|        return 1;
 3814|   936k|    }
 3815|   936k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  1.58M|    {
 1426|  1.58M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.58M|    {
  433|  1.58M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.63M|    {
 1173|  1.63M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  53.1k|    {
 1472|  53.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  53.1k|    {
  443|  53.1k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|   467k|    {
 1594|   467k|        return has_value();
 1595|   467k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  3.64k|    {
 1649|  3.64k|        return value();
 1650|  3.64k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   936k|{
 4009|   936k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   936k|        return decode_utf8_code_point_exhaustive(input);
 4011|   936k|    }
 4012|   936k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   936k|        return decode_utf16_code_point_exhaustive(input);
 4014|   936k|    }
 4015|   936k|    else {
 4016|   936k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   936k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   936k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   936k|        auto cp = static_cast<char32_t>(input.front());
 4018|   936k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   936k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266k, False: 669k]
  |  |  ------------------
  ------------------
 4019|   266k|            return invalid_code_point;
 4020|   266k|        }
 4021|   669k|        return cp;
 4022|   936k|    }
 4023|   936k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.66k|    {
 1472|  1.66k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.66k|    {
  443|  1.66k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   303k|    {
 1173|   303k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   301k|    {
 1426|   301k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   301k|    {
  433|   301k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|   303k|    {
 1594|   303k|        return has_value();
 1595|   303k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   606k|    {
  481|   606k|        return m_has_value;
  482|   606k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  1.66k|    {
 1600|  1.66k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.66k|        return this->get_unexpected().error();
 1602|  1.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.66k|    {
  464|  1.66k|        return m_unexpected;
  465|  1.66k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   301k|    {
 1659|   301k|        return std::move(value());
 1660|   301k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   301k|    {
 1623|   301k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   301k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   301k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   301k|        return this->get_value();
 1625|   301k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   301k|    {
  447|   301k|        return m_value;
  448|   301k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  5.27M|    {
 3330|  5.27M|        return m_sentinel;
 3331|  5.27M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|    855|    {
 1600|    855|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    855|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    855|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    855|        return this->get_unexpected().error();
 1602|    855|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   378k|    {
 1472|   378k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   428k|    {
  443|   428k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.87M|    {
 1173|  2.87M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  3.64k|    {
 1426|  3.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  3.64k|    {
  433|  3.64k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  1.57M|    {
 1472|  1.57M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.57M|    {
  443|  1.57M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  3.20M|    {
 1594|  3.20M|        return has_value();
 1595|  3.20M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  6.01M|    {
  481|  6.01M|        return m_has_value;
  482|  6.01M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  1.28M|    {
 1600|  1.28M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.28M|        return this->get_unexpected().error();
 1602|  1.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.28M|    {
  464|  1.28M|        return m_unexpected;
  465|  1.28M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|   330k|    {
 1426|   330k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   330k|    {
  433|   330k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   330k|    {
 1173|   330k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|     27|    {
 1472|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|     27|    {
  443|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|   155k|    {
 1649|   155k|        return value();
 1650|   155k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|   943k|    {
 1623|   943k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   943k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   943k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   943k|        return this->get_value();
 1625|   943k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   943k|    {
  447|   943k|        return m_value;
  448|   943k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|  3.06k|    {
 1594|  3.06k|        return has_value();
 1595|  3.06k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   661k|    {
  481|   661k|        return m_has_value;
  482|   661k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|   327k|    {
 1659|   327k|        return std::move(value());
 1660|   327k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|   330k|    {
 1623|   330k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   330k|        return this->get_value();
 1625|   330k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   330k|    {
  447|   330k|        return m_value;
  448|   330k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   838k|    {
 1833|   838k|        return detail::transform_error_impl(std::move(*this),
 1834|   838k|                                            std::forward<F>(f));
 1835|   838k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   838k|{
 1319|   838k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   838k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   838k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   838k|            return result(*std::forward<Exp>(exp));
 1323|   838k|        }
 1324|       |
 1325|   838k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   838k|        return result(unexpect, monostate{});
 1327|   838k|    }
 1328|   838k|    else {
 1329|   838k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   838k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   838k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 788k, False: 50.1k]
  |  |  ------------------
  ------------------
 1331|   838k|                   ? result(*std::forward<Exp>(exp))
 1332|   838k|                   : result(unexpect,
 1333|  50.1k|                            trivial_invoke(std::forward<F>(f),
 1334|  50.1k|                                           std::forward<Exp>(exp).error()));
 1335|   838k|    }
 1336|   838k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|   865k|    {
 1426|   865k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   865k|    {
  433|   865k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  50.1k|    {
 1482|  50.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|   788k|    {
 1659|   788k|        return std::move(value());
 1660|   788k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  79.9k|    {
 3326|  79.9k|        return m_iterator;
 3327|  79.9k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  79.9k|    {
 3330|  79.9k|        return m_sentinel;
 3331|  79.9k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  2.21M|    {
 1594|  2.21M|        return has_value();
 1595|  2.21M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.70M|    {
  481|  3.70M|        return m_has_value;
  482|  3.70M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   964k|    {
 1600|   964k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   964k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   964k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   964k|        return this->get_unexpected().error();
 1602|   964k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   964k|    {
  464|   964k|        return m_unexpected;
  465|   964k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|   473k|    {
 1659|   473k|        return std::move(value());
 1660|   473k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|   526k|    {
 1623|   526k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   526k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   526k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   526k|        return this->get_value();
 1625|   526k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   526k|    {
  447|   526k|        return m_value;
  448|   526k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   146k|{
  302|   146k|    return p;
  303|   146k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   146k|{
  322|   146k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   146k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  73.1k|    {
 3312|  73.1k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|   941k|    {
 4287|   941k|        return !x.is_at_end();
 4288|   941k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  52.9k|    {
 1426|  52.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  52.9k|    {
  433|  52.9k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  52.6k|    {
 1472|  52.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  52.6k|    {
  443|  52.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.54M|    {
 1173|  1.54M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  1.48M|    {
 1426|  1.48M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.48M|    {
  433|  1.48M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|   372k|    {
 1594|   372k|        return has_value();
 1595|   372k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.71M|    {
  481|  2.71M|        return m_has_value;
  482|  2.71M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.63k|    {
 1649|  1.63k|        return value();
 1650|  1.63k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  1.11M|    {
 1623|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.11M|        return this->get_value();
 1625|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  1.11M|    {
  447|  1.11M|        return m_value;
  448|  1.11M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  1.66k|    {
 1472|  1.66k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.66k|    {
  443|  1.66k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   303k|    {
 1173|   303k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|   302k|    {
 1426|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   302k|    {
  433|   302k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   330k|    {
 1833|   330k|        return detail::transform_error_impl(std::move(*this),
 1834|   330k|                                            std::forward<F>(f));
 1835|   330k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   330k|{
 1319|   330k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   330k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   330k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   330k|            return result(*std::forward<Exp>(exp));
 1323|   330k|        }
 1324|       |
 1325|   330k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   330k|        return result(unexpect, monostate{});
 1327|   330k|    }
 1328|   330k|    else {
 1329|   330k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   330k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   330k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 327k, False: 2.22k]
  |  |  ------------------
  ------------------
 1331|   330k|                   ? result(*std::forward<Exp>(exp))
 1332|   330k|                   : result(unexpect,
 1333|  2.22k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.22k|                                           std::forward<Exp>(exp).error()));
 1335|   330k|    }
 1336|   330k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  1.11M|    {
 1659|  1.11M|        return std::move(value());
 1660|  1.11M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|  52.4k|    {
 1610|  52.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  52.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  52.4k|        return std::move(this->get_unexpected().error());
 1612|  52.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  52.6k|    {
  464|  52.6k|        return m_unexpected;
  465|  52.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|   446k|    {
 1482|   446k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|   303k|    {
 1594|   303k|        return has_value();
 1595|   303k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   607k|    {
  481|   607k|        return m_has_value;
  482|   607k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1599|  1.66k|    {
 1600|  1.66k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.66k|        return this->get_unexpected().error();
 1602|  1.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.66k|    {
  464|  1.66k|        return m_unexpected;
  465|  1.66k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|   302k|    {
 1659|   302k|        return std::move(value());
 1660|   302k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|   302k|    {
 1623|   302k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   302k|        return this->get_value();
 1625|   302k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   302k|    {
  447|   302k|        return m_value;
  448|   302k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1599|    248|    {
 1600|    248|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    248|        return this->get_unexpected().error();
 1602|    248|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|   378k|    {
 1472|   378k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   428k|    {
  443|   428k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.55M|    {
 1173|  2.55M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|  1.63k|    {
 1426|  1.63k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.63k|    {
  433|  1.63k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  1.30M|    {
 1472|  1.30M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.30M|    {
  443|  1.30M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  2.88M|    {
 1594|  2.88M|        return has_value();
 1595|  2.88M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  5.32M|    {
  481|  5.32M|        return m_has_value;
  482|  5.32M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|  1.15M|    {
 1600|  1.15M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.15M|        return this->get_unexpected().error();
 1602|  1.15M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.15M|    {
  464|  1.15M|        return m_unexpected;
  465|  1.15M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|   329k|    {
 1426|   329k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   329k|    {
  433|   329k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   329k|    {
 1173|   329k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|     12|    {
 1472|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|     12|    {
  443|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  59.4k|    {
 1649|  59.4k|        return value();
 1650|  59.4k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|   848k|    {
 1623|   848k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   848k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   848k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   848k|        return this->get_value();
 1625|   848k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   848k|    {
  447|   848k|        return m_value;
  448|   848k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  1.24k|    {
 1594|  1.24k|        return has_value();
 1595|  1.24k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   658k|    {
  481|   658k|        return m_has_value;
  482|   658k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|   327k|    {
 1659|   327k|        return std::move(value());
 1660|   327k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|   329k|    {
 1623|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   329k|        return this->get_value();
 1625|   329k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   329k|    {
  447|   329k|        return m_value;
  448|   329k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   838k|    {
 1833|   838k|        return detail::transform_error_impl(std::move(*this),
 1834|   838k|                                            std::forward<F>(f));
 1835|   838k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   838k|{
 1319|   838k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   838k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   838k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   838k|            return result(*std::forward<Exp>(exp));
 1323|   838k|        }
 1324|       |
 1325|   838k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   838k|        return result(unexpect, monostate{});
 1327|   838k|    }
 1328|   838k|    else {
 1329|   838k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   838k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   838k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 788k, False: 50.1k]
  |  |  ------------------
  ------------------
 1331|   838k|                   ? result(*std::forward<Exp>(exp))
 1332|   838k|                   : result(unexpect,
 1333|  50.1k|                            trivial_invoke(std::forward<F>(f),
 1334|  50.1k|                                           std::forward<Exp>(exp).error()));
 1335|   838k|    }
 1336|   838k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|   818k|    {
 1426|   818k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   818k|    {
  433|   818k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|  50.1k|    {
 1482|  50.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|   788k|    {
 1659|   788k|        return std::move(value());
 1660|   788k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   209k|    {
 2851|   209k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   209k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   209k|    {
 2832|   209k|        return t.data();
 2833|   209k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  53.0k|    {
 1426|  53.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  53.0k|    {
  433|  53.0k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|   327k|    {
 1833|   327k|        return detail::transform_error_impl(std::move(*this),
 1834|   327k|                                            std::forward<F>(f));
 1835|   327k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|   327k|{
 1319|   327k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   327k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   327k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   327k|            return result(*std::forward<Exp>(exp));
 1323|   327k|        }
 1324|       |
 1325|   327k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   327k|        return result(unexpect, monostate{});
 1327|   327k|    }
 1328|   327k|    else {
 1329|   327k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   327k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   327k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 327k, False: 0]
  |  |  ------------------
  ------------------
 1331|   327k|                   ? result(*std::forward<Exp>(exp))
 1332|   327k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   327k|    }
 1336|   327k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   327k|    {
 1426|   327k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   327k|    {
  433|   327k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   327k|    {
 1173|   327k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   327k|    {
 1594|   327k|        return has_value();
 1595|   327k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   655k|    {
  481|   655k|        return m_has_value;
  482|   655k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|   327k|    {
 1659|   327k|        return std::move(value());
 1660|   327k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   327k|    {
 1623|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   327k|        return this->get_value();
 1625|   327k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   327k|    {
  447|   327k|        return m_value;
  448|   327k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|   580k|    {
 1819|   580k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   580k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|   580k|{
 1319|   580k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   580k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   580k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   580k|            return result(*std::forward<Exp>(exp));
 1323|   580k|        }
 1324|       |
 1325|   580k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   580k|        return result(unexpect, monostate{});
 1327|   580k|    }
 1328|   580k|    else {
 1329|   580k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   580k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   580k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 580k]
  |  |  ------------------
  ------------------
 1331|   580k|                   ? result(*std::forward<Exp>(exp))
 1332|   580k|                   : result(unexpect,
 1333|   580k|                            trivial_invoke(std::forward<F>(f),
 1334|   580k|                                           std::forward<Exp>(exp).error()));
 1335|   580k|    }
 1336|   580k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  52.9k|    {
 1649|  52.9k|        return value();
 1650|  52.9k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|  52.7k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|  3.03k|    {
 1669|  3.03k|        return &value();
 1670|  3.03k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|   274k|    {
 2720|   274k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   274k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|   274k|    {
 2701|   274k|        return decay_copy(t.begin());
 2702|   274k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|   274k|{
 1945|   274k|    return SCN_FWD(t);
  ------------------
  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   274k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   130k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|   327k|    {
 1833|   327k|        return detail::transform_error_impl(std::move(*this),
 1834|   327k|                                            std::forward<F>(f));
 1835|   327k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|   327k|{
 1319|   327k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   327k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   327k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   327k|            return result(*std::forward<Exp>(exp));
 1323|   327k|        }
 1324|       |
 1325|   327k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   327k|        return result(unexpect, monostate{});
 1327|   327k|    }
 1328|   327k|    else {
 1329|   327k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   327k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   327k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 327k, False: 0]
  |  |  ------------------
  ------------------
 1331|   327k|                   ? result(*std::forward<Exp>(exp))
 1332|   327k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   327k|    }
 1336|   327k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   327k|    {
 1426|   327k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   327k|    {
  433|   327k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   327k|    {
 1173|   327k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   327k|    {
 1594|   327k|        return has_value();
 1595|   327k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   655k|    {
  481|   655k|        return m_has_value;
  482|   655k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   327k|    {
 1659|   327k|        return std::move(value());
 1660|   327k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   327k|    {
 1623|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   327k|        return this->get_value();
 1625|   327k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   327k|    {
  447|   327k|        return m_value;
  448|   327k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1818|   443k|    {
 1819|   443k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   443k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|   443k|{
 1319|   443k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   443k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   443k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   443k|            return result(*std::forward<Exp>(exp));
 1323|   443k|        }
 1324|       |
 1325|   443k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   443k|        return result(unexpect, monostate{});
 1327|   443k|    }
 1328|   443k|    else {
 1329|   443k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   443k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   443k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
 1331|   443k|                   ? result(*std::forward<Exp>(exp))
 1332|   443k|                   : result(unexpect,
 1333|   443k|                            trivial_invoke(std::forward<F>(f),
 1334|   443k|                                           std::forward<Exp>(exp).error()));
 1335|   443k|    }
 1336|   443k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|   443k|    {
 3644|   443k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  53.0k|    {
 1649|  53.0k|        return value();
 1650|  53.0k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|  1.23k|    {
 1669|  1.23k|        return &value();
 1670|  1.23k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|   580k|    {
 3644|   580k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1425|   264k|    {
 1426|   264k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|   264k|    {
  433|   264k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   179k|{
 3650|   179k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   179k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.26M|    {
 2851|  2.26M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.26M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.26M|    {
 2832|  2.26M|        return t.data();
 2833|  2.26M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  4.60M|    {
 5462|  4.60M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60M]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  4.60M|        return static_cast<std::size_t>(m_desc &
 5467|  4.60M|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  4.60M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|  9.21M|    {
 5487|  9.21M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  9.21M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  4.60M|    {
 5430|  4.60M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60M]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  4.60M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60M]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.60M|        const auto t = type(id);
 5442|  4.60M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60M]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|  4.60M|        basic_scan_arg<Context> arg;
 5447|  4.60M|        arg.m_type = t;
 5448|  4.60M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 4.60M, False: 0]
  ------------------
 5449|  4.60M|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  4.60M|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  4.60M|        return arg;
 5455|  4.60M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  4.60M|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  4.60M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  4.60M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  4.60M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  4.60M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  4.60M|    {
 5491|  4.60M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  4.60M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|  8.72M|    {
 5243|  8.72M|        return m_type != detail::arg_type::none_type;
 5244|  8.72M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   765k|{
 8413|   765k|#define SCN_VISIT(Type)                                         \
 8414|   765k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   765k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   765k|    }                                                           \
 8417|   765k|    else {                                                      \
 8418|   765k|        return vis(monostate_val);                              \
 8419|   765k|    }
 8420|       |
 8421|   765k|    monostate monostate_val{};
 8422|       |
 8423|   765k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 765k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 765k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 765k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 765k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 765k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 765k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 765k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 765k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 765k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 765k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 765k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 765k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 765k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 765k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 765k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   236k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 236k, False: 528k]
  ------------------
 8455|   236k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   236k|    }                                                           \
  |  | 8417|   236k|    else {                                                      \
  |  | 8418|   236k|        return vis(monostate_val);                              \
  |  | 8419|   236k|    }
  ------------------
 8456|   261k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 261k, False: 503k]
  ------------------
 8457|   261k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   261k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   261k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   261k|    }                                                           \
  |  | 8417|   261k|    else {                                                      \
  |  | 8418|   261k|        return vis(monostate_val);                              \
  |  | 8419|   261k|    }
  ------------------
 8458|   266k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 266k, False: 498k]
  ------------------
 8459|   266k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   266k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   266k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   266k|    }                                                           \
  |  | 8417|   266k|    else {                                                      \
  |  | 8418|   266k|        return vis(monostate_val);                              \
  |  | 8419|   266k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 765k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 765k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 765k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 765k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 765k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 765k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 765k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 765k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 765k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   765k|            SCN_CLANG_POP
 8491|   765k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  3.61M|    {
 5541|  3.61M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|  1.84M|    {
 8134|  1.84M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  3.61M|    {
 8052|  3.61M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4339|  2.56M|{
 4340|  2.56M|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 2.56M]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|  2.56M|    return ranges::subrange{forward_iterator{this, 0},
 4345|  2.56M|                            ranges::default_sentinel};
 4346|  2.56M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4172|  2.56M|    {
 4173|  2.56M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|  2.56M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|  2.56M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   721k|{
 8413|   721k|#define SCN_VISIT(Type)                                         \
 8414|   721k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   721k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   721k|    }                                                           \
 8417|   721k|    else {                                                      \
 8418|   721k|        return vis(monostate_val);                              \
 8419|   721k|    }
 8420|       |
 8421|   721k|    monostate monostate_val{};
 8422|       |
 8423|   721k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 721k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 721k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 721k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 721k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 721k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 721k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 721k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 721k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 721k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 721k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 721k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 721k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 721k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 721k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 721k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   223k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 223k, False: 498k]
  ------------------
 8455|   223k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   223k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   223k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   223k|    }                                                           \
  |  | 8417|   223k|    else {                                                      \
  |  | 8418|   223k|        return vis(monostate_val);                              \
  |  | 8419|   223k|    }
  ------------------
 8456|   247k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 247k, False: 474k]
  ------------------
 8457|   247k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   247k|    }                                                           \
  |  | 8417|   247k|    else {                                                      \
  |  | 8418|   247k|        return vis(monostate_val);                              \
  |  | 8419|   247k|    }
  ------------------
 8458|   250k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 250k, False: 471k]
  ------------------
 8459|   250k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   250k|    }                                                           \
  |  | 8417|   250k|    else {                                                      \
  |  | 8418|   250k|        return vis(monostate_val);                              \
  |  | 8419|   250k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 721k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 721k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 721k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 721k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 721k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 721k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 721k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 721k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 721k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   721k|            SCN_CLANG_POP
 8491|   721k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.77M|{
 7040|  1.77M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.77M|    handler.check_args_exhausted();
 7042|  1.77M|    return handler.get_error();
 7043|  1.77M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.77M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.77M|    auto begin = format.data();
 7009|  1.77M|    auto it = begin;
 7010|  1.77M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.44M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.77M, False: 1.67M]
  ------------------
 7013|  1.77M|        const auto ch = *it++;
 7014|  1.77M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.77M, False: 0]
  ------------------
 7015|  1.77M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.77M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.77M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 98.9k, False: 1.67M]
  ------------------
 7019|  98.9k|                return;
 7020|  98.9k|            }
 7021|  1.77M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.77M|    }
 7032|       |
 7033|  1.67M|    handler.on_literal_text(begin, end);
 7034|  1.67M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  1.77M|{
 6938|  1.77M|    struct id_adapter {
 6939|  1.77M|        constexpr void operator()()
 6940|  1.77M|        {
 6941|  1.77M|            arg_id = handler.on_arg_id();
 6942|  1.77M|        }
 6943|  1.77M|        constexpr void operator()(std::size_t id)
 6944|  1.77M|        {
 6945|  1.77M|            arg_id = handler.on_arg_id(id);
 6946|  1.77M|        }
 6947|       |
 6948|  1.77M|        constexpr void on_error(const char* msg)
 6949|  1.77M|        {
 6950|  1.77M|            SCN_UNLIKELY_ATTR
 6951|  1.77M|            handler.on_error(msg);
 6952|  1.77M|        }
 6953|       |
 6954|  1.77M|        Handler& handler;
 6955|  1.77M|        std::size_t arg_id;
 6956|  1.77M|    };
 6957|       |
 6958|  1.77M|    ++begin;
 6959|  1.77M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.77M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.77M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.77M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.77M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.77M|    else {
 6971|  1.77M|        auto adapter = id_adapter{handler, 0};
 6972|  1.77M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.77M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.77M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.77M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.77M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.77M, False: 0]
  ------------------
 6983|  1.77M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.77M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.77M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  |  Branch (859:45): [True: 0, False: 1.77M]
  |  |  |  Branch (859:45): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.77M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.77M|    }
 6999|  1.77M|    return begin + 1;
 7000|  1.77M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  3.61M|    {
 8035|  3.61M|        return m_args.get(id);
 8036|  3.61M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  3.61M|    {
 8045|  3.61M|        return m_locale;
 8046|  3.61M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  3.61M|    {
 5562|  3.61M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.61M]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|  3.61M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  3.61M|        do_check_arg_id(id);
 5570|  3.61M|        return id;
 5571|  3.61M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  3.61M|{
 6050|  3.61M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  3.61M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  3.61M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.77M|{
 6439|  1.77M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.77M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.77M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.77M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.77M|    handler();
 6445|  1.77M|    return begin;
 6446|  1.77M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.77M|        {
 6941|  1.77M|            arg_id = handler.on_arg_id();
 6942|  1.77M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|  7.23M|    {
 5248|  7.23M|        return m_type;
 5249|  7.23M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  3.61M|    {
 5557|  3.61M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  3.61M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|  7.23M|    {
 5546|  7.23M|        return m_format.data();
 5547|  7.23M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  1.77M|    {
 7118|  1.77M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.77M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  1.77M|{
 6854|  1.77M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.77M|        if (*begin == CharT{'['}) {
 6856|  1.77M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.77M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.77M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.77M|                return begin;
 6862|  1.77M|            }
 6863|  1.77M|            handler.on_character_set_string(set);
 6864|  1.77M|            return begin;
 6865|  1.77M|        }
 6866|  1.77M|        if (*begin == CharT{'/'}) {
 6867|  1.77M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.77M|        }
 6869|  1.77M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.77M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.77M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.77M|            return begin;
 6873|  1.77M|        }
 6874|  1.77M|        handler.on_type(type);
 6875|  1.77M|        return begin;
 6876|  1.77M|    };
 6877|       |
 6878|  1.77M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.77M, False: 0]
  |  Branch (6878:28): [True: 1.77M, False: 0]
  ------------------
 6879|  1.77M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.77M, False: 0]
  |  Branch (6879:36): [True: 1.26M, False: 510k]
  ------------------
 6880|  1.26M|        return do_presentation();
 6881|  1.26M|    }
 6882|       |
 6883|   510k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   510k|    begin = parse_align(begin, end, handler);
 6889|   510k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   510k|    begin = parse_width(begin, end, handler);
 6895|   510k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   510k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 510k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   510k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 510k, False: 0]
  ------------------
 6914|   510k|        handler.on_localized();
 6915|   510k|        ++begin;
 6916|   510k|    }
 6917|   510k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   510k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 510k, False: 0]
  |  Branch (6922:25): [True: 0, False: 510k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   510k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   510k|    return begin;
 6931|   510k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  3.61M|{
 6503|  3.61M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 2.57M, False: 1.04M]
  |  Branch (6503:33): [True: 2.57M, False: 0]
  ------------------
 6504|  3.61M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 1.04M, False: 0]
  |  Branch (6504:33): [True: 1.04M, False: 0]
  ------------------
 6505|  3.61M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  1.26M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.26M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.26M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.26M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.26M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.26M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.26M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.26M|        handler.on_type(type);
 6875|  1.26M|        return begin;
 6876|  1.26M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  2.57M|{
 6451|  2.57M|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 2.57M]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 2.57M]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.57M]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 2.57M]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.57M]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 2.57M]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.57M]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 2.57M]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 2.57M]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.57M]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|  1.16M|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 1.16M, False: 1.40M]
  ------------------
 6470|  1.16M|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.57M]
  ------------------
 6471|  1.16M|            return presentation_type::float_hex;
 6472|  70.3k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 70.3k, False: 2.50M]
  ------------------
 6473|  70.3k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 2.57M]
  ------------------
 6474|  70.3k|            return presentation_type::float_scientific;
 6475|   462k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 462k, False: 2.11M]
  ------------------
 6476|   462k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 2.57M]
  ------------------
 6477|   462k|            return presentation_type::float_fixed;
 6478|   875k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 875k, False: 1.70M]
  ------------------
 6479|   875k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 2.57M]
  ------------------
 6480|   875k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 2.57M]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.57M]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.57M]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.57M]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.57M]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.57M]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 2.57M]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|  2.57M|    }
 6498|  2.57M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|   510k|{
 6528|   510k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   510k|    auto check_align = [](wchar_t ch) {
 6531|   510k|        switch (ch) {
 6532|   510k|            case L'<':
 6533|   510k|                return align_type::left;
 6534|   510k|            case L'>':
 6535|   510k|                return align_type::right;
 6536|   510k|            case L'^':
 6537|   510k|                return align_type::center;
 6538|   510k|            default:
 6539|   510k|                return align_type::none;
 6540|   510k|        }
 6541|   510k|    };
 6542|       |
 6543|   510k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   510k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  |  Branch (859:45): [True: 0, False: 510k]
  |  |  |  Branch (859:45): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6545|   510k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   510k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   510k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   510k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   510k|    const auto begin_before_fill = begin;
 6555|   510k|    begin += potential_fill_len;
 6556|       |
 6557|   510k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 510k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   510k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   510k|    const auto begin_after_fill = begin;
 6563|   510k|    ++begin;
 6564|       |
 6565|   510k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 510k, False: 0]
  ------------------
 6566|   510k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   510k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 510k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   510k|    }
 6574|       |
 6575|   510k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 510k, False: 0]
  ------------------
 6576|   510k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 510k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   510k|        return begin_before_fill;
 6581|   510k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   510k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|  1.04M|{
 6510|  1.04M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  1.04M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  1.04M|        return 1;
 6513|  1.04M|    }
 6514|  1.04M|    else {
 6515|  1.04M|        const auto lengths =
 6516|  1.04M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  1.04M|            "\3\4";
 6518|  1.04M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  1.04M|        return len;
 6520|  1.04M|    }
 6521|  1.04M|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  1.02M|    auto check_align = [](wchar_t ch) {
 6531|  1.02M|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 1.02M]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 1.02M]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.02M]
  ------------------
 6537|      0|                return align_type::center;
 6538|  1.02M|            default:
  ------------------
  |  Branch (6538:13): [True: 1.02M, False: 0]
  ------------------
 6539|  1.02M|                return align_type::none;
 6540|  1.02M|        }
 6541|  1.02M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|   510k|{
 6593|   510k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   510k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 510k, False: 0]
  |  Branch (6595:33): [True: 0, False: 510k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   510k|    return begin;
 6606|   510k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|   510k|    {
 7123|   510k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   510k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 510k, False: 0]
  ------------------
 7125|   510k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 510k, False: 0]
  ------------------
 7126|   510k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 510k]
  ------------------
 7127|   510k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   510k|        Handler::on_localized();
 7135|   510k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.77M|{
 8413|  1.77M|#define SCN_VISIT(Type)                                         \
 8414|  1.77M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.77M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.77M|    }                                                           \
 8417|  1.77M|    else {                                                      \
 8418|  1.77M|        return vis(monostate_val);                              \
 8419|  1.77M|    }
 8420|       |
 8421|  1.77M|    monostate monostate_val{};
 8422|       |
 8423|  1.77M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.77M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.77M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.77M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.77M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.77M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.77M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.77M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.77M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.77M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.77M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.77M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.77M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.77M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.77M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.77M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   562k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 562k, False: 1.21M]
  ------------------
 8455|   562k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   562k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   562k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   562k|    }                                                           \
  |  | 8417|   562k|    else {                                                      \
  |  | 8418|   562k|        return vis(monostate_val);                              \
  |  | 8419|   562k|    }
  ------------------
 8456|   602k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 602k, False: 1.17M]
  ------------------
 8457|   602k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   602k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   602k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   602k|    }                                                           \
  |  | 8417|   602k|    else {                                                      \
  |  | 8418|   602k|        return vis(monostate_val);                              \
  |  | 8419|   602k|    }
  ------------------
 8458|   608k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 608k, False: 1.16M]
  ------------------
 8459|   608k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   608k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   608k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   608k|    }                                                           \
  |  | 8417|   608k|    else {                                                      \
  |  | 8418|   608k|        return vis(monostate_val);                              \
  |  | 8419|   608k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.77M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.77M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.77M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.77M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.77M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.77M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.77M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.77M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.77M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.77M|            SCN_CLANG_POP
 8491|  1.77M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.84M|{
 7040|  1.84M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.84M|    handler.check_args_exhausted();
 7042|  1.84M|    return handler.get_error();
 7043|  1.84M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.84M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.84M|    auto begin = format.data();
 7009|  1.84M|    auto it = begin;
 7010|  1.84M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.58M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.84M, False: 1.74M]
  ------------------
 7013|  1.84M|        const auto ch = *it++;
 7014|  1.84M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.84M, False: 0]
  ------------------
 7015|  1.84M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.84M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.84M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 98.9k, False: 1.74M]
  ------------------
 7019|  98.9k|                return;
 7020|  98.9k|            }
 7021|  1.84M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.84M|    }
 7032|       |
 7033|  1.74M|    handler.on_literal_text(begin, end);
 7034|  1.74M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8170|  1.74M|    {
 8171|  1.74M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.74M|    static_cast<    \
  |  |  929|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  1.74M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6937|  1.84M|{
 6938|  1.84M|    struct id_adapter {
 6939|  1.84M|        constexpr void operator()()
 6940|  1.84M|        {
 6941|  1.84M|            arg_id = handler.on_arg_id();
 6942|  1.84M|        }
 6943|  1.84M|        constexpr void operator()(std::size_t id)
 6944|  1.84M|        {
 6945|  1.84M|            arg_id = handler.on_arg_id(id);
 6946|  1.84M|        }
 6947|       |
 6948|  1.84M|        constexpr void on_error(const char* msg)
 6949|  1.84M|        {
 6950|  1.84M|            SCN_UNLIKELY_ATTR
 6951|  1.84M|            handler.on_error(msg);
 6952|  1.84M|        }
 6953|       |
 6954|  1.84M|        Handler& handler;
 6955|  1.84M|        std::size_t arg_id;
 6956|  1.84M|    };
 6957|       |
 6958|  1.84M|    ++begin;
 6959|  1.84M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.84M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.84M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.84M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.84M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.84M|    else {
 6971|  1.84M|        auto adapter = id_adapter{handler, 0};
 6972|  1.84M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.84M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.84M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.84M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.84M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.84M, False: 0]
  ------------------
 6983|  1.84M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.84M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.84M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.84M]
  |  |  |  Branch (859:45): [True: 0, False: 1.84M]
  |  |  |  Branch (859:45): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.84M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.84M|    }
 6999|  1.84M|    return begin + 1;
 7000|  1.84M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.84M|{
 6439|  1.84M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.84M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.84M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.84M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.84M|    handler();
 6445|  1.84M|    return begin;
 6446|  1.84M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.84M|        {
 6941|  1.84M|            arg_id = handler.on_arg_id();
 6942|  1.84M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|  1.84M|    {
 7118|  1.84M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.84M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6853|  1.84M|{
 6854|  1.84M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.84M|        if (*begin == CharT{'['}) {
 6856|  1.84M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.84M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.84M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.84M|                return begin;
 6862|  1.84M|            }
 6863|  1.84M|            handler.on_character_set_string(set);
 6864|  1.84M|            return begin;
 6865|  1.84M|        }
 6866|  1.84M|        if (*begin == CharT{'/'}) {
 6867|  1.84M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.84M|        }
 6869|  1.84M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.84M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.84M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.84M|            return begin;
 6873|  1.84M|        }
 6874|  1.84M|        handler.on_type(type);
 6875|  1.84M|        return begin;
 6876|  1.84M|    };
 6877|       |
 6878|  1.84M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.84M, False: 0]
  |  Branch (6878:28): [True: 1.84M, False: 0]
  ------------------
 6879|  1.84M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.84M, False: 0]
  |  Branch (6879:36): [True: 1.31M, False: 531k]
  ------------------
 6880|  1.31M|        return do_presentation();
 6881|  1.31M|    }
 6882|       |
 6883|   531k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   531k|    begin = parse_align(begin, end, handler);
 6889|   531k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   531k|    begin = parse_width(begin, end, handler);
 6895|   531k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   531k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 531k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   531k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 531k, False: 0]
  ------------------
 6914|   531k|        handler.on_localized();
 6915|   531k|        ++begin;
 6916|   531k|    }
 6917|   531k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   531k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 531k, False: 0]
  |  Branch (6922:25): [True: 0, False: 531k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   531k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   531k|    return begin;
 6931|   531k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|  1.31M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.31M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.31M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.31M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.31M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.31M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.31M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.31M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.31M|        handler.on_type(type);
 6875|  1.31M|        return begin;
 6876|  1.31M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6527|   531k|{
 6528|   531k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   531k|    auto check_align = [](wchar_t ch) {
 6531|   531k|        switch (ch) {
 6532|   531k|            case L'<':
 6533|   531k|                return align_type::left;
 6534|   531k|            case L'>':
 6535|   531k|                return align_type::right;
 6536|   531k|            case L'^':
 6537|   531k|                return align_type::center;
 6538|   531k|            default:
 6539|   531k|                return align_type::none;
 6540|   531k|        }
 6541|   531k|    };
 6542|       |
 6543|   531k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   531k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  |  Branch (859:45): [True: 0, False: 531k]
  |  |  |  Branch (859:45): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6545|   531k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   531k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   531k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   531k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   531k|    const auto begin_before_fill = begin;
 6555|   531k|    begin += potential_fill_len;
 6556|       |
 6557|   531k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 531k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   531k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   531k|    const auto begin_after_fill = begin;
 6563|   531k|    ++begin;
 6564|       |
 6565|   531k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 531k, False: 0]
  ------------------
 6566|   531k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   531k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 531k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   531k|    }
 6574|       |
 6575|   531k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 531k, False: 0]
  ------------------
 6576|   531k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 531k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   531k|        return begin_before_fill;
 6581|   531k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   531k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|  1.06M|    auto check_align = [](wchar_t ch) {
 6531|  1.06M|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 1.06M]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 1.06M]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 1.06M]
  ------------------
 6537|      0|                return align_type::center;
 6538|  1.06M|            default:
  ------------------
  |  Branch (6538:13): [True: 1.06M, False: 0]
  ------------------
 6539|  1.06M|                return align_type::none;
 6540|  1.06M|        }
 6541|  1.06M|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6592|   531k|{
 6593|   531k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   531k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 531k, False: 0]
  |  Branch (6595:33): [True: 0, False: 531k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   531k|    return begin;
 6606|   531k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7122|   531k|    {
 7123|   531k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   531k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 531k, False: 0]
  ------------------
 7125|   531k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 531k, False: 0]
  ------------------
 7126|   531k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 531k]
  ------------------
 7127|   531k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   531k|        Handler::on_localized();
 7135|   531k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.84M|{
 8413|  1.84M|#define SCN_VISIT(Type)                                         \
 8414|  1.84M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.84M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.84M|    }                                                           \
 8417|  1.84M|    else {                                                      \
 8418|  1.84M|        return vis(monostate_val);                              \
 8419|  1.84M|    }
 8420|       |
 8421|  1.84M|    monostate monostate_val{};
 8422|       |
 8423|  1.84M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.84M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.84M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.84M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.84M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.84M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.84M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.84M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.84M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.84M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.84M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.84M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.84M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.84M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.84M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.84M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   584k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 584k, False: 1.25M]
  ------------------
 8455|   584k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   584k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   584k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   584k|    }                                                           \
  |  | 8417|   584k|    else {                                                      \
  |  | 8418|   584k|        return vis(monostate_val);                              \
  |  | 8419|   584k|    }
  ------------------
 8456|   626k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 626k, False: 1.21M]
  ------------------
 8457|   626k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   626k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   626k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   626k|    }                                                           \
  |  | 8417|   626k|    else {                                                      \
  |  | 8418|   626k|        return vis(monostate_val);                              \
  |  | 8419|   626k|    }
  ------------------
 8458|   633k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 633k, False: 1.21M]
  ------------------
 8459|   633k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   633k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   633k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   633k|    }                                                           \
  |  | 8417|   633k|    else {                                                      \
  |  | 8418|   633k|        return vis(monostate_val);                              \
  |  | 8419|   633k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.84M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.84M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.84M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.84M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.84M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.84M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.84M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.84M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.84M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.84M|            SCN_CLANG_POP
 8491|  1.84M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4071|   128k|    {
 4072|   128k|        sync(0);
 4073|   128k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   607k|    {
 5462|   607k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   607k|        return static_cast<std::size_t>(m_desc &
 5467|   607k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   607k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|  1.21M|    {
 5487|  1.21M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  1.21M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|   607k|    {
 5430|   607k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|   607k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   607k|        const auto t = type(id);
 5442|   607k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 607k]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|   607k|        basic_scan_arg<Context> arg;
 5447|   607k|        arg.m_type = t;
 5448|   607k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 607k, False: 0]
  ------------------
 5449|   607k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|   607k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|   607k|        return arg;
 5455|   607k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|   607k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|   607k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|   607k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|   607k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|   607k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|   607k|    {
 5491|   607k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|   607k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  1.16M|    {
 5243|  1.16M|        return m_type != detail::arg_type::none_type;
 5244|  1.16M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  79.0k|{
 8413|  79.0k|#define SCN_VISIT(Type)                                         \
 8414|  79.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  79.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  79.0k|    }                                                           \
 8417|  79.0k|    else {                                                      \
 8418|  79.0k|        return vis(monostate_val);                              \
 8419|  79.0k|    }
 8420|       |
 8421|  79.0k|    monostate monostate_val{};
 8422|       |
 8423|  79.0k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 79.0k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 79.0k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 79.0k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 79.0k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 79.0k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 79.0k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 79.0k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 79.0k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 79.0k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 79.0k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 79.0k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 79.0k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 79.0k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 79.0k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 79.0k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  26.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 26.2k, False: 52.7k]
  ------------------
 8455|  26.2k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  26.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  26.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  26.2k|    }                                                           \
  |  | 8417|  26.2k|    else {                                                      \
  |  | 8418|  26.2k|        return vis(monostate_val);                              \
  |  | 8419|  26.2k|    }
  ------------------
 8456|  26.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 26.3k, False: 52.6k]
  ------------------
 8457|  26.3k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  26.3k|    }                                                           \
  |  | 8417|  26.3k|    else {                                                      \
  |  | 8418|  26.3k|        return vis(monostate_val);                              \
  |  | 8419|  26.3k|    }
  ------------------
 8458|  26.4k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 26.4k, False: 52.6k]
  ------------------
 8459|  26.4k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  26.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  26.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  26.4k|    }                                                           \
  |  | 8417|  26.4k|    else {                                                      \
  |  | 8418|  26.4k|        return vis(monostate_val);                              \
  |  | 8419|  26.4k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 79.0k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 79.0k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 79.0k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 79.0k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 79.0k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 79.0k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 79.0k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 79.0k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 79.0k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  79.0k|            SCN_CLANG_POP
 8491|  79.0k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   501k|    {
 5541|   501k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|   250k|    {
 8134|   250k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   501k|    {
 8052|   501k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   250k|{
 7040|   250k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   250k|    handler.check_args_exhausted();
 7042|   250k|    return handler.get_error();
 7043|   250k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   250k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   250k|    auto begin = format.data();
 7009|   250k|    auto it = begin;
 7010|   250k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   304k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 250k, False: 53.0k]
  ------------------
 7013|   250k|        const auto ch = *it++;
 7014|   250k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 250k, False: 0]
  ------------------
 7015|   250k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   250k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   250k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 197k, False: 53.0k]
  ------------------
 7019|   197k|                return;
 7020|   197k|            }
 7021|   250k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   250k|    }
 7032|       |
 7033|  53.0k|    handler.on_literal_text(begin, end);
 7034|  53.0k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|   250k|{
 6938|   250k|    struct id_adapter {
 6939|   250k|        constexpr void operator()()
 6940|   250k|        {
 6941|   250k|            arg_id = handler.on_arg_id();
 6942|   250k|        }
 6943|   250k|        constexpr void operator()(std::size_t id)
 6944|   250k|        {
 6945|   250k|            arg_id = handler.on_arg_id(id);
 6946|   250k|        }
 6947|       |
 6948|   250k|        constexpr void on_error(const char* msg)
 6949|   250k|        {
 6950|   250k|            SCN_UNLIKELY_ATTR
 6951|   250k|            handler.on_error(msg);
 6952|   250k|        }
 6953|       |
 6954|   250k|        Handler& handler;
 6955|   250k|        std::size_t arg_id;
 6956|   250k|    };
 6957|       |
 6958|   250k|    ++begin;
 6959|   250k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   250k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 250k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   250k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 250k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   250k|    else {
 6971|   250k|        auto adapter = id_adapter{handler, 0};
 6972|   250k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   250k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   250k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 250k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   250k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 250k, False: 0]
  ------------------
 6983|   250k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   250k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   250k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  |  Branch (859:45): [True: 0, False: 250k]
  |  |  |  Branch (859:45): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   250k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   250k|    }
 6999|   250k|    return begin + 1;
 7000|   250k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|   501k|    {
 8035|   501k|        return m_args.get(id);
 8036|   501k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|   501k|    {
 8045|   501k|        return m_locale;
 8046|   501k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|   501k|    {
 5562|   501k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 501k]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|   501k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|   501k|        do_check_arg_id(id);
 5570|   501k|        return id;
 5571|   501k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|   501k|{
 6050|   501k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|   501k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|   501k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   250k|{
 6439|   250k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   250k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 250k, False: 0]
  |  Branch (6440:26): [True: 0, False: 250k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   250k|    handler();
 6445|   250k|    return begin;
 6446|   250k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   250k|        {
 6941|   250k|            arg_id = handler.on_arg_id();
 6942|   250k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|  1.00M|    {
 5248|  1.00M|        return m_type;
 5249|  1.00M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|   501k|    {
 5557|   501k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|   501k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4339|   329k|{
 4340|   329k|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 329k]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|   329k|    return ranges::subrange{forward_iterator{this, 0},
 4345|   329k|                            ranges::default_sentinel};
 4346|   329k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4172|   329k|    {
 4173|   329k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|   329k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|   329k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|  1.00M|    {
 5546|  1.00M|        return m_format.data();
 5547|  1.00M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|   250k|    {
 7118|   250k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   250k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|   250k|{
 6854|   250k|    auto do_presentation = [&]() -> const CharT* {
 6855|   250k|        if (*begin == CharT{'['}) {
 6856|   250k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   250k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   250k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   250k|                return begin;
 6862|   250k|            }
 6863|   250k|            handler.on_character_set_string(set);
 6864|   250k|            return begin;
 6865|   250k|        }
 6866|   250k|        if (*begin == CharT{'/'}) {
 6867|   250k|            return parse_presentation_regex(begin, end, handler);
 6868|   250k|        }
 6869|   250k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   250k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   250k|            handler.on_error("Invalid type specifier in format string");
 6872|   250k|            return begin;
 6873|   250k|        }
 6874|   250k|        handler.on_type(type);
 6875|   250k|        return begin;
 6876|   250k|    };
 6877|       |
 6878|   250k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 250k, False: 0]
  |  Branch (6878:28): [True: 250k, False: 0]
  ------------------
 6879|   250k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 250k, False: 0]
  |  Branch (6879:36): [True: 198k, False: 52.6k]
  ------------------
 6880|   198k|        return do_presentation();
 6881|   198k|    }
 6882|       |
 6883|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  52.6k|    begin = parse_align(begin, end, handler);
 6889|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  52.6k|    begin = parse_width(begin, end, handler);
 6895|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  52.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 52.6k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  52.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 52.6k, False: 0]
  ------------------
 6914|  52.6k|        handler.on_localized();
 6915|  52.6k|        ++begin;
 6916|  52.6k|    }
 6917|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  52.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 52.6k, False: 0]
  |  Branch (6922:25): [True: 0, False: 52.6k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  52.6k|    return begin;
 6931|  52.6k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|   501k|{
 6503|   501k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 396k, False: 105k]
  |  Branch (6503:33): [True: 396k, False: 0]
  ------------------
 6504|   501k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 105k, False: 0]
  |  Branch (6504:33): [True: 105k, False: 0]
  ------------------
 6505|   501k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|   198k|    auto do_presentation = [&]() -> const CharT* {
 6855|   198k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 198k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   198k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 198k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   198k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   198k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   198k|        handler.on_type(type);
 6875|   198k|        return begin;
 6876|   198k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|   396k|{
 6451|   396k|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 396k]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 396k]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 396k]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 396k]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 396k]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 396k]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 396k]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 396k]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 396k]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 396k]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|   106k|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 106k, False: 290k]
  ------------------
 6470|   106k|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 396k]
  ------------------
 6471|   106k|            return presentation_type::float_hex;
 6472|  79.5k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 79.5k, False: 316k]
  ------------------
 6473|  79.5k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 396k]
  ------------------
 6474|  79.5k|            return presentation_type::float_scientific;
 6475|   105k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 105k, False: 291k]
  ------------------
 6476|   105k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 396k]
  ------------------
 6477|   105k|            return presentation_type::float_fixed;
 6478|   105k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 105k, False: 291k]
  ------------------
 6479|   105k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 396k]
  ------------------
 6480|   105k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 396k]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 396k]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 396k]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 396k]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 396k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 396k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 396k]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|   396k|    }
 6498|   396k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  52.6k|{
 6528|  52.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  52.6k|    auto check_align = [](wchar_t ch) {
 6531|  52.6k|        switch (ch) {
 6532|  52.6k|            case L'<':
 6533|  52.6k|                return align_type::left;
 6534|  52.6k|            case L'>':
 6535|  52.6k|                return align_type::right;
 6536|  52.6k|            case L'^':
 6537|  52.6k|                return align_type::center;
 6538|  52.6k|            default:
 6539|  52.6k|                return align_type::none;
 6540|  52.6k|        }
 6541|  52.6k|    };
 6542|       |
 6543|  52.6k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  52.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  |  Branch (859:45): [True: 0, False: 52.6k]
  |  |  |  Branch (859:45): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6545|  52.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  52.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  52.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  52.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  52.6k|    const auto begin_before_fill = begin;
 6555|  52.6k|    begin += potential_fill_len;
 6556|       |
 6557|  52.6k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 52.6k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  52.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  52.6k|    const auto begin_after_fill = begin;
 6563|  52.6k|    ++begin;
 6564|       |
 6565|  52.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 52.6k, False: 0]
  ------------------
 6566|  52.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  52.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 52.6k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  52.6k|    }
 6574|       |
 6575|  52.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 52.6k, False: 0]
  ------------------
 6576|  52.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 52.6k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  52.6k|        return begin_before_fill;
 6581|  52.6k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  52.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|   105k|{
 6510|   105k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|   105k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|   105k|        return 1;
 6513|   105k|    }
 6514|   105k|    else {
 6515|   105k|        const auto lengths =
 6516|   105k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|   105k|            "\3\4";
 6518|   105k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|   105k|        return len;
 6520|   105k|    }
 6521|   105k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   105k|    auto check_align = [](wchar_t ch) {
 6531|   105k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 105k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 105k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 105k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   105k|            default:
  ------------------
  |  Branch (6538:13): [True: 105k, False: 0]
  ------------------
 6539|   105k|                return align_type::none;
 6540|   105k|        }
 6541|   105k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  52.6k|{
 6593|  52.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  52.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 52.6k, False: 0]
  |  Branch (6595:33): [True: 0, False: 52.6k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  52.6k|    return begin;
 6606|  52.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|  52.6k|    {
 7123|  52.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  52.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 52.6k, False: 0]
  ------------------
 7125|  52.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 52.6k, False: 0]
  ------------------
 7126|  52.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 52.6k]
  ------------------
 7127|  52.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  52.6k|        Handler::on_localized();
 7135|  52.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   250k|{
 8413|   250k|#define SCN_VISIT(Type)                                         \
 8414|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   250k|    }                                                           \
 8417|   250k|    else {                                                      \
 8418|   250k|        return vis(monostate_val);                              \
 8419|   250k|    }
 8420|       |
 8421|   250k|    monostate monostate_val{};
 8422|       |
 8423|   250k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 250k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 250k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 250k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 250k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 250k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 250k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 250k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 250k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 250k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 250k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 250k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 250k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 250k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 250k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 250k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  83.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 83.5k, False: 167k]
  ------------------
 8455|  83.5k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  83.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  83.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  83.5k|    }                                                           \
  |  | 8417|  83.5k|    else {                                                      \
  |  | 8418|  83.5k|        return vis(monostate_val);                              \
  |  | 8419|  83.5k|    }
  ------------------
 8456|  83.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 83.6k, False: 167k]
  ------------------
 8457|  83.6k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  83.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  83.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  83.6k|    }                                                           \
  |  | 8417|  83.6k|    else {                                                      \
  |  | 8418|  83.6k|        return vis(monostate_val);                              \
  |  | 8419|  83.6k|    }
  ------------------
 8458|  83.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 83.7k, False: 167k]
  ------------------
 8459|  83.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  83.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  83.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  83.7k|    }                                                           \
  |  | 8417|  83.7k|    else {                                                      \
  |  | 8418|  83.7k|        return vis(monostate_val);                              \
  |  | 8419|  83.7k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 250k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 250k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 250k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 250k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 250k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 250k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 250k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 250k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 250k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   250k|            SCN_CLANG_POP
 8491|   250k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  78.9k|{
 8413|  78.9k|#define SCN_VISIT(Type)                                         \
 8414|  78.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  78.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  78.9k|    }                                                           \
 8417|  78.9k|    else {                                                      \
 8418|  78.9k|        return vis(monostate_val);                              \
 8419|  78.9k|    }
 8420|       |
 8421|  78.9k|    monostate monostate_val{};
 8422|       |
 8423|  78.9k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 78.9k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 78.9k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 78.9k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 78.9k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 78.9k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 78.9k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 78.9k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 78.9k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 78.9k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 78.9k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 78.9k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 78.9k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 78.9k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 78.9k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 78.9k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  26.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 26.2k, False: 52.6k]
  ------------------
 8455|  26.2k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  26.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  26.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  26.2k|    }                                                           \
  |  | 8417|  26.2k|    else {                                                      \
  |  | 8418|  26.2k|        return vis(monostate_val);                              \
  |  | 8419|  26.2k|    }
  ------------------
 8456|  26.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 26.3k, False: 52.6k]
  ------------------
 8457|  26.3k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  26.3k|    }                                                           \
  |  | 8417|  26.3k|    else {                                                      \
  |  | 8418|  26.3k|        return vis(monostate_val);                              \
  |  | 8419|  26.3k|    }
  ------------------
 8458|  26.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 26.3k, False: 52.5k]
  ------------------
 8459|  26.3k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  26.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  26.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  26.3k|    }                                                           \
  |  | 8417|  26.3k|    else {                                                      \
  |  | 8418|  26.3k|        return vis(monostate_val);                              \
  |  | 8419|  26.3k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 78.9k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 78.9k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 78.9k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 78.9k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 78.9k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 78.9k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 78.9k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 78.9k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 78.9k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  78.9k|            SCN_CLANG_POP
 8491|  78.9k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   250k|{
 7040|   250k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   250k|    handler.check_args_exhausted();
 7042|   250k|    return handler.get_error();
 7043|   250k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   250k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   250k|    auto begin = format.data();
 7009|   250k|    auto it = begin;
 7010|   250k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   303k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 250k, False: 52.9k]
  ------------------
 7013|   250k|        const auto ch = *it++;
 7014|   250k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 250k, False: 0]
  ------------------
 7015|   250k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   250k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   250k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 197k, False: 52.9k]
  ------------------
 7019|   197k|                return;
 7020|   197k|            }
 7021|   250k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   250k|    }
 7032|       |
 7033|  52.9k|    handler.on_literal_text(begin, end);
 7034|  52.9k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8170|  52.9k|    {
 8171|  52.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  52.9k|    static_cast<    \
  |  |  929|  52.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  52.9k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6937|   250k|{
 6938|   250k|    struct id_adapter {
 6939|   250k|        constexpr void operator()()
 6940|   250k|        {
 6941|   250k|            arg_id = handler.on_arg_id();
 6942|   250k|        }
 6943|   250k|        constexpr void operator()(std::size_t id)
 6944|   250k|        {
 6945|   250k|            arg_id = handler.on_arg_id(id);
 6946|   250k|        }
 6947|       |
 6948|   250k|        constexpr void on_error(const char* msg)
 6949|   250k|        {
 6950|   250k|            SCN_UNLIKELY_ATTR
 6951|   250k|            handler.on_error(msg);
 6952|   250k|        }
 6953|       |
 6954|   250k|        Handler& handler;
 6955|   250k|        std::size_t arg_id;
 6956|   250k|    };
 6957|       |
 6958|   250k|    ++begin;
 6959|   250k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   250k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 250k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   250k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 250k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   250k|    else {
 6971|   250k|        auto adapter = id_adapter{handler, 0};
 6972|   250k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   250k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   250k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 250k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   250k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 250k, False: 0]
  ------------------
 6983|   250k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   250k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   250k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  |  Branch (859:45): [True: 0, False: 250k]
  |  |  |  Branch (859:45): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   250k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   250k|    }
 6999|   250k|    return begin + 1;
 7000|   250k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   250k|{
 6439|   250k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   250k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 250k, False: 0]
  |  Branch (6440:26): [True: 0, False: 250k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   250k|    handler();
 6445|   250k|    return begin;
 6446|   250k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   250k|        {
 6941|   250k|            arg_id = handler.on_arg_id();
 6942|   250k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|   250k|    {
 7118|   250k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   250k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6853|   250k|{
 6854|   250k|    auto do_presentation = [&]() -> const CharT* {
 6855|   250k|        if (*begin == CharT{'['}) {
 6856|   250k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   250k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   250k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   250k|                return begin;
 6862|   250k|            }
 6863|   250k|            handler.on_character_set_string(set);
 6864|   250k|            return begin;
 6865|   250k|        }
 6866|   250k|        if (*begin == CharT{'/'}) {
 6867|   250k|            return parse_presentation_regex(begin, end, handler);
 6868|   250k|        }
 6869|   250k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   250k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   250k|            handler.on_error("Invalid type specifier in format string");
 6872|   250k|            return begin;
 6873|   250k|        }
 6874|   250k|        handler.on_type(type);
 6875|   250k|        return begin;
 6876|   250k|    };
 6877|       |
 6878|   250k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 250k, False: 0]
  |  Branch (6878:28): [True: 250k, False: 0]
  ------------------
 6879|   250k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 250k, False: 0]
  |  Branch (6879:36): [True: 198k, False: 52.6k]
  ------------------
 6880|   198k|        return do_presentation();
 6881|   198k|    }
 6882|       |
 6883|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  52.6k|    begin = parse_align(begin, end, handler);
 6889|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  52.6k|    begin = parse_width(begin, end, handler);
 6895|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  52.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 52.6k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  52.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 52.6k, False: 0]
  ------------------
 6914|  52.6k|        handler.on_localized();
 6915|  52.6k|        ++begin;
 6916|  52.6k|    }
 6917|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  52.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 52.6k, False: 0]
  |  Branch (6922:25): [True: 0, False: 52.6k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  52.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  52.6k|    return begin;
 6931|  52.6k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|   198k|    auto do_presentation = [&]() -> const CharT* {
 6855|   198k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 198k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   198k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 198k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   198k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   198k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   198k|        handler.on_type(type);
 6875|   198k|        return begin;
 6876|   198k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6527|  52.6k|{
 6528|  52.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  52.6k|    auto check_align = [](wchar_t ch) {
 6531|  52.6k|        switch (ch) {
 6532|  52.6k|            case L'<':
 6533|  52.6k|                return align_type::left;
 6534|  52.6k|            case L'>':
 6535|  52.6k|                return align_type::right;
 6536|  52.6k|            case L'^':
 6537|  52.6k|                return align_type::center;
 6538|  52.6k|            default:
 6539|  52.6k|                return align_type::none;
 6540|  52.6k|        }
 6541|  52.6k|    };
 6542|       |
 6543|  52.6k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  52.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  |  Branch (859:45): [True: 0, False: 52.6k]
  |  |  |  Branch (859:45): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6545|  52.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  52.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  52.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  52.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  52.6k|    const auto begin_before_fill = begin;
 6555|  52.6k|    begin += potential_fill_len;
 6556|       |
 6557|  52.6k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 52.6k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  52.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  52.6k|    const auto begin_after_fill = begin;
 6563|  52.6k|    ++begin;
 6564|       |
 6565|  52.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 52.6k, False: 0]
  ------------------
 6566|  52.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52.6k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  52.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 52.6k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  52.6k|    }
 6574|       |
 6575|  52.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 52.6k, False: 0]
  ------------------
 6576|  52.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 52.6k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  52.6k|        return begin_before_fill;
 6581|  52.6k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  52.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|   105k|    auto check_align = [](wchar_t ch) {
 6531|   105k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 105k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 105k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 105k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   105k|            default:
  ------------------
  |  Branch (6538:13): [True: 105k, False: 0]
  ------------------
 6539|   105k|                return align_type::none;
 6540|   105k|        }
 6541|   105k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6592|  52.6k|{
 6593|  52.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  52.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 52.6k, False: 0]
  |  Branch (6595:33): [True: 0, False: 52.6k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  52.6k|    return begin;
 6606|  52.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7122|  52.6k|    {
 7123|  52.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  52.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 52.6k, False: 0]
  ------------------
 7125|  52.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 52.6k, False: 0]
  ------------------
 7126|  52.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 52.6k]
  ------------------
 7127|  52.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  52.6k|        Handler::on_localized();
 7135|  52.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   250k|{
 8413|   250k|#define SCN_VISIT(Type)                                         \
 8414|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   250k|    }                                                           \
 8417|   250k|    else {                                                      \
 8418|   250k|        return vis(monostate_val);                              \
 8419|   250k|    }
 8420|       |
 8421|   250k|    monostate monostate_val{};
 8422|       |
 8423|   250k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 250k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 250k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 250k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 250k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 250k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 250k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 250k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 250k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 250k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 250k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 250k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 250k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 250k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 250k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 250k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  83.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 83.5k, False: 167k]
  ------------------
 8455|  83.5k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  83.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  83.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  83.5k|    }                                                           \
  |  | 8417|  83.5k|    else {                                                      \
  |  | 8418|  83.5k|        return vis(monostate_val);                              \
  |  | 8419|  83.5k|    }
  ------------------
 8456|  83.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 83.6k, False: 167k]
  ------------------
 8457|  83.6k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  83.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  83.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  83.6k|    }                                                           \
  |  | 8417|  83.6k|    else {                                                      \
  |  | 8418|  83.6k|        return vis(monostate_val);                              \
  |  | 8419|  83.6k|    }
  ------------------
 8458|  83.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 83.7k, False: 167k]
  ------------------
 8459|  83.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  83.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  83.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  83.7k|    }                                                           \
  |  | 8417|  83.7k|    else {                                                      \
  |  | 8418|  83.7k|        return vis(monostate_val);                              \
  |  | 8419|  83.7k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 250k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 250k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 250k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 250k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 250k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 250k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 250k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 250k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 250k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   250k|            SCN_CLANG_POP
 8491|   250k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4071|   257k|    {
 4072|   257k|        sync(0);
 4073|   257k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5415|   495k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5415|  52.6k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  50.5k|{
   89|  50.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  50.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  50.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  50.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   151k|{
   44|   151k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   151k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  50.5k|{
  127|  50.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  50.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  50.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  50.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   151k|{
   60|   151k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   151k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  8.76k|{
  163|  8.76k|    T value;
  164|  8.76k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.76k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 2.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.59k|    }                                                  \
  |  |  |  | 3667|  8.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.16k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.16k|    static_cast<    \
  |  |  929|  2.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.16k|    static_cast<    \
  |  |  929|  2.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.76k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  26.3k|{
   72|  26.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  26.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  50.6k|{
   89|  50.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  50.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  50.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  50.6k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  50.6k|{
  127|  50.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  50.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  50.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  50.6k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  8.78k|{
  163|  8.78k|    T value;
  164|  8.78k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.78k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 2.18k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.59k|    }                                                  \
  |  |  |  | 3667|  8.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.18k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.18k|    static_cast<    \
  |  |  929|  2.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.18k|    static_cast<    \
  |  |  929|  2.18k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.78k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  50.6k|{
   89|  50.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  50.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  50.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  50.6k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  50.6k|{
  127|  50.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  50.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  50.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  50.6k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  8.80k|{
  163|  8.80k|    T value;
  164|  8.80k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.80k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 2.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.59k|    }                                                  \
  |  |  |  | 3667|  8.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.20k|    static_cast<    \
  |  |  929|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.20k|    static_cast<    \
  |  |  929|  2.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.80k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  50.5k|{
   89|  50.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  50.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  50.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  50.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   151k|{
   44|   151k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   151k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  50.5k|{
  127|  50.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  50.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  50.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  50.5k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   151k|{
   60|   151k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   151k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  8.75k|{
  163|  8.75k|    T value;
  164|  8.75k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.75k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 2.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.59k|    }                                                  \
  |  |  |  | 3667|  8.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.15k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.15k|    static_cast<    \
  |  |  929|  2.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.15k|    static_cast<    \
  |  |  929|  2.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.75k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  26.3k|{
   72|  26.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  26.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  50.5k|{
   89|  50.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  50.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  50.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  50.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  50.5k|{
  127|  50.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  50.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  50.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.5k|    static_cast<    \
  |  |  929|  50.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  50.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  8.77k|{
  163|  8.77k|    T value;
  164|  8.77k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.77k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 2.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.59k|    }                                                  \
  |  |  |  | 3667|  8.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.17k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.17k|    static_cast<    \
  |  |  929|  2.17k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.17k|    static_cast<    \
  |  |  929|  2.17k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.77k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  50.6k|{
   89|  50.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  50.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  50.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  50.6k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  50.6k|{
  127|  50.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  50.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  50.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  50.6k|    static_cast<    \
  |  |  929|  50.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  50.6k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  8.79k|{
  163|  8.79k|    T value;
  164|  8.79k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  8.79k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  8.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  8.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  8.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.59k, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.59k|    }                                                  \
  |  |  |  | 3667|  8.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  2.19k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.19k|    static_cast<    \
  |  |  929|  2.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.19k|    static_cast<    \
  |  |  929|  2.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  8.79k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.60M|{
  653|  2.60M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.60M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.13M|{
  659|  1.13M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.13M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 567k, False: 567k]
  ------------------
  661|  1.13M|                    : std::locale{};
  662|  1.13M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.54M|{
 1221|  1.54M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.54M|                                  m_nan_payload_buffer, value);
 1223|  1.54M|    value = this->setsign(value);
 1224|  1.54M|    return n;
 1225|  1.54M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  94.2k|{
 1221|  94.2k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  94.2k|                                  m_nan_payload_buffer, value);
 1223|  94.2k|    value = this->setsign(value);
 1224|  94.2k|    return n;
 1225|  94.2k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.67M|{
 1221|  1.67M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.67M|                                  m_nan_payload_buffer, value);
 1223|  1.67M|    value = this->setsign(value);
 1224|  1.67M|    return n;
 1225|  1.67M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  94.3k|{
 1221|  94.3k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  94.3k|                                  m_nan_payload_buffer, value);
 1223|  94.3k|    value = this->setsign(value);
 1224|  94.3k|    return n;
 1225|  94.3k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.69M|{
 1221|  1.69M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.69M|                                  m_nan_payload_buffer, value);
 1223|  1.69M|    value = this->setsign(value);
 1224|  1.69M|    return n;
 1225|  1.69M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  94.5k|{
 1221|  94.5k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  94.5k|                                  m_nan_payload_buffer, value);
 1223|  94.5k|    value = this->setsign(value);
 1224|  94.5k|    return n;
 1225|  94.5k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  1.14M|{
 2176|  1.14M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  1.14M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.16M|{
 2184|  1.16M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.16M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.10M, False: 59.3k]
  |  |  ------------------
  ------------------
 2186|  1.10M|        source.sync(*n);
 2187|  1.10M|    }
 2188|  59.3k|    else {
 2189|  59.3k|        source.sync_all();
 2190|  59.3k|    }
 2191|  1.16M|    return n;
 2192|  1.16M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   151k|{
 2200|   151k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   151k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   151k|{
 2208|   151k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   151k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   151k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.0k, False: 118k]
  |  |  ------------------
  ------------------
 2210|  33.0k|        source.sync(*n);
 2211|  33.0k|    }
 2212|   118k|    else {
 2213|   118k|        source.sync_all();
 2214|   118k|    }
 2215|   151k|    return n;
 2216|   151k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.26M|{
  194|  2.26M|    return find_classic_impl(
  195|  2.26M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.26M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.26M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  5.09M|{
  202|  5.09M|    return find_classic_impl(
  203|  5.09M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  5.09M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  5.09M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  1.14M|{
 2133|  1.14M|    return vscan_internal(source, format, args);
 2134|  1.14M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  1.16M|{
 2139|  1.16M|    auto n = vscan_internal(source, format, args);
 2140|  1.16M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.10M, False: 59.3k]
  |  |  ------------------
  ------------------
 2141|  1.10M|        source.sync(*n);
 2142|  1.10M|    }
 2143|  59.3k|    else {
 2144|  59.3k|        source.sync_all();
 2145|  59.3k|    }
 2146|  1.16M|    return n;
 2147|  1.16M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   151k|{
 2153|   151k|    return vscan_internal(source, format, args);
 2154|   151k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   151k|{
 2159|   151k|    auto n = vscan_internal(source, format, args);
 2160|   151k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   151k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.0k, False: 118k]
  |  |  ------------------
  ------------------
 2161|  33.0k|        source.sync(*n);
 2162|  33.0k|    }
 2163|   118k|    else {
 2164|   118k|        source.sync_all();
 2165|   118k|    }
 2166|   151k|    return n;
 2167|   151k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   255k|{
 2243|   255k|    return vscan_value_internal(source, arg);
 2244|   255k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   240k|{
 2248|   240k|    auto n = vscan_value_internal(source, arg);
 2249|   240k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   240k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230k, False: 9.89k]
  |  |  ------------------
  ------------------
 2250|   230k|        source.sync(*n);
 2251|   230k|    }
 2252|  9.89k|    else {
 2253|  9.89k|        source.sync_all();
 2254|  9.89k|    }
 2255|   240k|    return n;
 2256|   240k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  26.3k|{
 2262|  26.3k|    return vscan_value_internal(source, arg);
 2263|  26.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  26.3k|{
 2268|  26.3k|    auto n = vscan_value_internal(source, arg);
 2269|  26.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  26.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.52k, False: 19.7k]
  |  |  ------------------
  ------------------
 2270|  6.52k|        source.sync(*n);
 2271|  6.52k|    }
 2272|  19.7k|    else {
 2273|  19.7k|        source.sync_all();
 2274|  19.7k|    }
 2275|  26.3k|    return n;
 2276|  26.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.26M|{
  118|  2.26M|    auto it = source.begin();
  119|       |
  120|  9.18M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 7.81M, False: 1.37M]
  ------------------
  121|  7.81M|        auto sv =
  122|  7.81M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  7.81M|                .substr(0, 8);
  124|       |
  125|  7.81M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.62M, False: 186k]
  ------------------
  126|  7.62M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.62M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.62M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 815k, False: 6.81M]
  ------------------
  129|   815k|                break;
  130|   815k|            }
  131|  6.81M|            continue;
  132|  7.62M|        }
  133|       |
  134|   645k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 537k, False: 107k]
  ------------------
  135|   537k|            auto tmp =
  136|   537k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   537k|            auto res = get_next_code_point(tmp);
  138|   537k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 78.6k, False: 458k]
  ------------------
  139|  78.6k|                return it;
  140|  78.6k|            }
  141|   458k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   458k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   458k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   458k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   458k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   458k|        }
  145|   186k|    }
  146|       |
  147|  2.19M|    return detail::make_string_view_iterator(source, it);
  148|  2.26M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  11.0M|{
  105|  11.0M|    static_assert(sizeof(*source.data()) == 1);
  106|  11.0M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  11.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  11.0M|    uint64_t word{};
  108|  11.0M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  11.0M|    return has_byte_greater(word, 127) != 0;
  111|  11.0M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  50.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   537k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  5.09M|{
  118|  5.09M|    auto it = source.begin();
  119|       |
  120|  5.53M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.26M, False: 2.27M]
  ------------------
  121|  3.26M|        auto sv =
  122|  3.26M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.26M|                .substr(0, 8);
  124|       |
  125|  3.26M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.05M, False: 205k]
  ------------------
  126|  3.05M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.05M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.05M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.62M, False: 429k]
  ------------------
  129|  2.62M|                break;
  130|  2.62M|            }
  131|   429k|            continue;
  132|  3.05M|        }
  133|       |
  134|   391k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 375k, False: 16.2k]
  ------------------
  135|   375k|            auto tmp =
  136|   375k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   375k|            auto res = get_next_code_point(tmp);
  138|   375k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 188k, False: 186k]
  ------------------
  139|   188k|                return it;
  140|   188k|            }
  141|   186k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   186k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   186k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   186k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   186k|        }
  145|   205k|    }
  146|       |
  147|  4.90M|    return detail::make_string_view_iterator(source, it);
  148|  5.09M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.86M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   375k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.54M|{
 1138|  1.54M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.0k, False: 1.53M]
  ------------------
 1139|  14.0k|        value = std::numeric_limits<T>::infinity();
 1140|  14.0k|        return 3;
 1141|  14.0k|    }
 1142|  1.53M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.3k, False: 1.52M]
  ------------------
 1143|  10.3k|        value = std::numeric_limits<T>::infinity();
 1144|  10.3k|        return 8;
 1145|  10.3k|    }
 1146|  1.52M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 60.8k, False: 1.46M]
  ------------------
 1147|  60.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  60.8k|        return 3;
 1149|  60.8k|    }
 1150|  1.46M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.45M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.45M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.45M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 333k, False: 1.12M]
  ------------------
 1185|   333k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.50k, False: 329k]
  |  |  ------------------
  ------------------
 1186|  3.50k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.50k|                                         "Invalid floating-point digit");
 1188|  3.50k|        }
 1189|   333k|    }
 1190|  1.45M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.31k, False: 1.44M]
  |  |  ------------------
  ------------------
 1191|  9.31k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.31k|                                     "Invalid floating-point digit");
 1193|  9.31k|    }
 1194|       |
 1195|  1.44M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.44M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.44M|            double tmp{};
 1200|  1.44M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.44M|            value = tmp;
 1202|  1.44M|            return ret;
 1203|  1.44M|        }
 1204|  1.44M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.44M|            return fast_float_fallback(data, value);
 1208|  1.44M|        }
 1209|  1.44M|    }
 1210|  1.44M|    else {
 1211|       |        // Default to fast_float
 1212|  1.44M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.44M|    }
 1214|  1.44M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.44M|    {
 1078|  1.44M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  5.40M|    {
  712|  5.40M|        return {kind, options};
  713|  5.40M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.44M|    {
 1082|  1.44M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 329k, False: 1.11M]
  ------------------
 1083|  1.44M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 55.9k, False: 1.06M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   385k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   385k|                                              value);
 1087|   385k|        }
 1088|       |
 1089|  1.06M|        const auto flags = get_flags();
 1090|  1.06M|        const auto view = get_view();
 1091|  1.06M|        const auto result = fast_float::from_chars(
 1092|  1.06M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.06M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.06M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.0k, False: 1.05M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  10.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  10.0k|                                              value);
 1102|  10.0k|        }
 1103|       |
 1104|  1.05M|        return result.ptr - view.data();
 1105|  1.06M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   395k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   395k|    {
 1048|   395k|#if !SCN_DISABLE_STRTOD
 1049|   395k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   395k|    }
 1056|   395k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   395k|    {
  894|   395k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   405k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   395k|    {
  898|   395k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   395k|                           generic_strtod);
  900|   395k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   395k|    {
  732|   395k|        CharT* end{};
  733|   395k|        errno = 0;
  734|   395k|        value = strtod_cb(src, &end);
  735|   395k|        const auto saved_errno = errno;
  736|   395k|        auto chars_read = end - src;
  737|       |
  738|   395k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   395k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 383k]
  |  |  ------------------
  ------------------
  740|  11.9k|            return unexpected(e);
  741|  11.9k|        }
  742|       |
  743|   383k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 327k, False: 55.4k]
  ------------------
  744|   383k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 327k, False: 0]
  ------------------
  745|   327k|            chars_read -= 2;
  746|   327k|        }
  747|       |
  748|   383k|        return chars_read;
  749|   395k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   405k|    {
  778|   405k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 105k, False: 299k]
  |  Branch (778:37): [True: 0, False: 105k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   405k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 56.1k, False: 349k]
  ------------------
  785|   405k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 56.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   405k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 13.2k, False: 391k]
  |  Branch (791:34): [True: 1.87k, False: 11.3k]
  ------------------
  792|  1.87k|            SCN_UNLIKELY_ATTR
  793|  1.87k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.87k|        }
  795|       |
  796|   403k|        SCN_GCC_COMPAT_PUSH
  797|   403k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   403k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 403k, False: 0]
  ------------------
  800|   403k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 403k, False: 0]
  ------------------
  801|   403k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 10.7k, False: 392k]
  ------------------
  802|  10.7k|            SCN_UNLIKELY_ATTR
  803|  10.7k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  10.7k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   392k|            return {};
  809|   403k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   418k|{
  687|   418k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 107k, False: 310k]
  |  Branch (687:25): [True: 0, False: 310k]
  ------------------
  688|   418k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   395k|    {
  755|   395k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 388k, False: 6.97k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   388k|            auto first_space = read_until_classic_space(input.view());
  758|   388k|            input.assign(
  759|   388k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   388k|        }
  761|       |
  762|   395k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 329k, False: 65.9k]
  ------------------
  763|   329k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   329k|                input.get_allocated_string().insert(0, "0x");
  765|   329k|            }
  766|   329k|            else {
  767|   329k|                input.get_allocated_string().insert(0, L"0x");
  768|   329k|            }
  769|   329k|        }
  770|       |
  771|   395k|        return input.get_allocated_string().c_str();
  772|   395k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   395k|    {
  905|   395k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   395k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   395k|        }
  908|   395k|        else {
  909|   395k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   395k|        }
  911|   395k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   395k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   395k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   395k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   395k|            return std::strtof(str, str_end);
  839|   395k|        }
  840|   395k|        else if constexpr (std::is_same_v<T, double>) {
  841|   395k|            return std::strtod(str, str_end);
  842|   395k|        }
  843|   395k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   395k|            return std::strtold(str, str_end);
  845|   395k|        }
  846|   395k|#endif
  847|   395k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.29M|    {
 1061|  2.29M|        unsigned format_flags{};
 1062|  2.29M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.27M, False: 19.4k]
  ------------------
 1063|  2.27M|            format_flags |= fast_float::fixed;
 1064|  2.27M|        }
 1065|  2.29M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 2.00M, False: 289k]
  ------------------
 1066|  2.00M|            format_flags |= fast_float::scientific;
 1067|  2.00M|        }
 1068|       |
 1069|  2.29M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.29M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  1.06M|    {
 1110|  1.06M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.06M|            return m_input.view();
 1112|  1.06M|        }
 1113|  1.06M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.06M|            return std::u16string_view{
 1115|  1.06M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.06M|                m_input.view().size()};
 1117|  1.06M|        }
 1118|  1.06M|        else {
 1119|  1.06M|            return std::u32string_view{
 1120|  1.06M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.06M|                m_input.view().size()};
 1122|  1.06M|        }
 1123|  1.06M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  94.2k|{
 1138|  94.2k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 94.2k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  94.2k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 94.2k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  94.2k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 94.2k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  94.2k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 94.2k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  94.2k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  94.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  94.2k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 21.9k, False: 72.3k]
  ------------------
 1185|  21.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 8.97k]
  |  |  ------------------
  ------------------
 1186|  12.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.9k|                                         "Invalid floating-point digit");
 1188|  12.9k|        }
 1189|  21.9k|    }
 1190|  81.3k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 48.7k]
  |  |  ------------------
  ------------------
 1191|  32.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  32.5k|                                     "Invalid floating-point digit");
 1193|  32.5k|    }
 1194|       |
 1195|  48.7k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  48.7k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  48.7k|            double tmp{};
 1200|  48.7k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  48.7k|            value = tmp;
 1202|  48.7k|            return ret;
 1203|  48.7k|        }
 1204|  48.7k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  48.7k|            return fast_float_fallback(data, value);
 1208|  48.7k|        }
 1209|  48.7k|    }
 1210|  48.7k|    else {
 1211|       |        // Default to fast_float
 1212|  48.7k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  48.7k|    }
 1214|  48.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  48.7k|    {
 1078|  48.7k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   165k|    {
  712|   165k|        return {kind, options};
  713|   165k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  48.7k|    {
 1082|  48.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 8.92k, False: 39.8k]
  ------------------
 1083|  48.7k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 154, False: 39.7k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  9.08k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  9.08k|                                              value);
 1087|  9.08k|        }
 1088|       |
 1089|  39.7k|        const auto flags = get_flags();
 1090|  39.7k|        const auto view = get_view();
 1091|  39.7k|        const auto result = fast_float::from_chars(
 1092|  39.7k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  39.7k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  39.7k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 664, False: 39.0k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    664|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    664|                                              value);
 1102|    664|        }
 1103|       |
 1104|  39.0k|        return result.ptr - view.data();
 1105|  39.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  9.74k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  9.74k|    {
 1048|  9.74k|#if !SCN_DISABLE_STRTOD
 1049|  9.74k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  9.74k|    }
 1056|  9.74k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  9.74k|    {
  894|  9.74k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  9.74k|    {
  898|  9.74k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  9.74k|                           generic_strtod);
  900|  9.74k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  9.74k|    {
  732|  9.74k|        CharT* end{};
  733|  9.74k|        errno = 0;
  734|  9.74k|        value = strtod_cb(src, &end);
  735|  9.74k|        const auto saved_errno = errno;
  736|  9.74k|        auto chars_read = end - src;
  737|       |
  738|  9.74k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  9.74k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 680, False: 9.06k]
  |  |  ------------------
  ------------------
  740|    680|            return unexpected(e);
  741|    680|        }
  742|       |
  743|  9.06k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 8.91k, False: 154]
  ------------------
  744|  9.06k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 8.91k, False: 0]
  ------------------
  745|  8.91k|            chars_read -= 2;
  746|  8.91k|        }
  747|       |
  748|  9.06k|        return chars_read;
  749|  9.74k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  9.74k|    {
  755|  9.74k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 9.22k, False: 519]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  9.22k|            auto first_space = read_until_classic_space(input.view());
  758|  9.22k|            input.assign(
  759|  9.22k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  9.22k|        }
  761|       |
  762|  9.74k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 8.92k, False: 818]
  ------------------
  763|  8.92k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  8.92k|                input.get_allocated_string().insert(0, "0x");
  765|  8.92k|            }
  766|  8.92k|            else {
  767|  8.92k|                input.get_allocated_string().insert(0, L"0x");
  768|  8.92k|            }
  769|  8.92k|        }
  770|       |
  771|  9.74k|        return input.get_allocated_string().c_str();
  772|  9.74k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  9.74k|    {
  905|  9.74k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  9.74k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  9.74k|        }
  908|  9.74k|        else {
  909|  9.74k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  9.74k|        }
  911|  9.74k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  9.74k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  9.74k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  9.74k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  9.74k|            return std::wcstof(str, str_end);
  877|  9.74k|        }
  878|  9.74k|        else if constexpr (std::is_same_v<T, double>) {
  879|  9.74k|            return std::wcstod(str, str_end);
  880|  9.74k|        }
  881|  9.74k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  9.74k|            return std::wcstold(str, str_end);
  883|  9.74k|        }
  884|  9.74k|#endif
  885|  9.74k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  39.7k|    {
 1110|  39.7k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  39.7k|            return m_input.view();
 1112|  39.7k|        }
 1113|  39.7k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  39.7k|            return std::u16string_view{
 1115|  39.7k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  39.7k|                m_input.view().size()};
 1117|  39.7k|        }
 1118|  39.7k|        else {
 1119|  39.7k|            return std::u32string_view{
 1120|  39.7k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  39.7k|                m_input.view().size()};
 1122|  39.7k|        }
 1123|  39.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.67M|{
 1138|  1.67M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.3k, False: 1.65M]
  ------------------
 1139|  15.3k|        value = std::numeric_limits<T>::infinity();
 1140|  15.3k|        return 3;
 1141|  15.3k|    }
 1142|  1.65M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.9k, False: 1.64M]
  ------------------
 1143|  10.9k|        value = std::numeric_limits<T>::infinity();
 1144|  10.9k|        return 8;
 1145|  10.9k|    }
 1146|  1.64M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 62.7k, False: 1.58M]
  ------------------
 1147|  62.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  62.7k|        return 3;
 1149|  62.7k|    }
 1150|  1.58M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.58M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.58M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.58M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 346k, False: 1.23M]
  ------------------
 1185|   346k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.78k, False: 342k]
  |  |  ------------------
  ------------------
 1186|  3.78k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.78k|                                         "Invalid floating-point digit");
 1188|  3.78k|        }
 1189|   346k|    }
 1190|  1.57M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 1.56M]
  |  |  ------------------
  ------------------
 1191|  10.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.6k|                                     "Invalid floating-point digit");
 1193|  10.6k|    }
 1194|       |
 1195|  1.56M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.56M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.56M|            double tmp{};
 1200|  1.56M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.56M|            value = tmp;
 1202|  1.56M|            return ret;
 1203|  1.56M|        }
 1204|  1.56M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.56M|            return fast_float_fallback(data, value);
 1208|  1.56M|        }
 1209|  1.56M|    }
 1210|  1.56M|    else {
 1211|       |        // Default to fast_float
 1212|  1.56M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.56M|    }
 1214|  1.56M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.56M|    {
 1078|  1.56M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.56M|    {
 1082|  1.56M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 342k, False: 1.22M]
  ------------------
 1083|  1.56M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 64.5k, False: 1.15M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   407k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   407k|                                              value);
 1087|   407k|        }
 1088|       |
 1089|  1.15M|        const auto flags = get_flags();
 1090|  1.15M|        const auto view = get_view();
 1091|  1.15M|        const auto result = fast_float::from_chars(
 1092|  1.15M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.15M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.15M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.40k, False: 1.15M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.40k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.40k|                                              value);
 1102|  4.40k|        }
 1103|       |
 1104|  1.15M|        return result.ptr - view.data();
 1105|  1.15M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   411k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   411k|    {
 1048|   411k|#if !SCN_DISABLE_STRTOD
 1049|   411k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   411k|    }
 1056|   411k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   411k|    {
  894|   411k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   420k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   411k|    {
  898|   411k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   411k|                           generic_strtod);
  900|   411k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   411k|    {
  732|   411k|        CharT* end{};
  733|   411k|        errno = 0;
  734|   411k|        value = strtod_cb(src, &end);
  735|   411k|        const auto saved_errno = errno;
  736|   411k|        auto chars_read = end - src;
  737|       |
  738|   411k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   411k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.03k, False: 406k]
  |  |  ------------------
  ------------------
  740|  5.03k|            return unexpected(e);
  741|  5.03k|        }
  742|       |
  743|   406k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 341k, False: 64.4k]
  ------------------
  744|   406k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 341k, False: 0]
  ------------------
  745|   341k|            chars_read -= 2;
  746|   341k|        }
  747|       |
  748|   406k|        return chars_read;
  749|   411k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   420k|    {
  778|   420k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 107k, False: 313k]
  |  Branch (778:37): [True: 0, False: 107k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   420k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 64.6k, False: 356k]
  ------------------
  785|   420k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 64.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   420k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.41k, False: 415k]
  |  Branch (791:34): [True: 550, False: 4.86k]
  ------------------
  792|    550|            SCN_UNLIKELY_ATTR
  793|    550|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    550|        }
  795|       |
  796|   420k|        SCN_GCC_COMPAT_PUSH
  797|   420k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   420k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 420k, False: 0]
  ------------------
  800|   420k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 420k, False: 0]
  ------------------
  801|   420k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.86k, False: 415k]
  ------------------
  802|  4.86k|            SCN_UNLIKELY_ATTR
  803|  4.86k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.86k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   415k|            return {};
  809|   420k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   426k|{
  691|   426k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 108k, False: 318k]
  |  Branch (691:24): [True: 0, False: 318k]
  ------------------
  692|   426k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   411k|    {
  755|   411k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 406k, False: 4.96k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   406k|            auto first_space = read_until_classic_space(input.view());
  758|   406k|            input.assign(
  759|   406k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   406k|        }
  761|       |
  762|   411k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 342k, False: 68.9k]
  ------------------
  763|   342k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   342k|                input.get_allocated_string().insert(0, "0x");
  765|   342k|            }
  766|   342k|            else {
  767|   342k|                input.get_allocated_string().insert(0, L"0x");
  768|   342k|            }
  769|   342k|        }
  770|       |
  771|   411k|        return input.get_allocated_string().c_str();
  772|   411k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   411k|    {
  905|   411k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   411k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   411k|        }
  908|   411k|        else {
  909|   411k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   411k|        }
  911|   411k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   411k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   411k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   411k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   411k|            return std::strtof(str, str_end);
  839|   411k|        }
  840|   411k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   411k|            return std::strtod(str, str_end);
  842|   411k|        }
  843|   411k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   411k|            return std::strtold(str, str_end);
  845|   411k|        }
  846|   411k|#endif
  847|   411k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.15M|    {
 1110|  1.15M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.15M|            return m_input.view();
 1112|  1.15M|        }
 1113|  1.15M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.15M|            return std::u16string_view{
 1115|  1.15M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.15M|                m_input.view().size()};
 1117|  1.15M|        }
 1118|  1.15M|        else {
 1119|  1.15M|            return std::u32string_view{
 1120|  1.15M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.15M|                m_input.view().size()};
 1122|  1.15M|        }
 1123|  1.15M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  94.3k|{
 1138|  94.3k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 94.3k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  94.3k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 94.3k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  94.3k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 94.3k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  94.3k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 94.3k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  94.3k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  94.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  94.3k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 21.9k, False: 72.4k]
  ------------------
 1185|  21.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 8.97k]
  |  |  ------------------
  ------------------
 1186|  12.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.9k|                                         "Invalid floating-point digit");
 1188|  12.9k|        }
 1189|  21.9k|    }
 1190|  81.3k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 48.8k]
  |  |  ------------------
  ------------------
 1191|  32.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  32.5k|                                     "Invalid floating-point digit");
 1193|  32.5k|    }
 1194|       |
 1195|  48.8k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  48.8k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  48.8k|            double tmp{};
 1200|  48.8k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  48.8k|            value = tmp;
 1202|  48.8k|            return ret;
 1203|  48.8k|        }
 1204|  48.8k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  48.8k|            return fast_float_fallback(data, value);
 1208|  48.8k|        }
 1209|  48.8k|    }
 1210|  48.8k|    else {
 1211|       |        // Default to fast_float
 1212|  48.8k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  48.8k|    }
 1214|  48.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  48.8k|    {
 1078|  48.8k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  48.8k|    {
 1082|  48.8k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 8.92k, False: 39.8k]
  ------------------
 1083|  48.8k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 154, False: 39.7k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  9.08k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  9.08k|                                              value);
 1087|  9.08k|        }
 1088|       |
 1089|  39.7k|        const auto flags = get_flags();
 1090|  39.7k|        const auto view = get_view();
 1091|  39.7k|        const auto result = fast_float::from_chars(
 1092|  39.7k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  39.7k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  39.7k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 368, False: 39.3k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    368|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    368|                                              value);
 1102|    368|        }
 1103|       |
 1104|  39.3k|        return result.ptr - view.data();
 1105|  39.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  9.45k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  9.45k|    {
 1048|  9.45k|#if !SCN_DISABLE_STRTOD
 1049|  9.45k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  9.45k|    }
 1056|  9.45k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  9.45k|    {
  894|  9.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  9.45k|    {
  898|  9.45k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  9.45k|                           generic_strtod);
  900|  9.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  9.45k|    {
  732|  9.45k|        CharT* end{};
  733|  9.45k|        errno = 0;
  734|  9.45k|        value = strtod_cb(src, &end);
  735|  9.45k|        const auto saved_errno = errno;
  736|  9.45k|        auto chars_read = end - src;
  737|       |
  738|  9.45k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  9.45k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 380, False: 9.07k]
  |  |  ------------------
  ------------------
  740|    380|            return unexpected(e);
  741|    380|        }
  742|       |
  743|  9.07k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 8.91k, False: 154]
  ------------------
  744|  9.07k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 8.91k, False: 0]
  ------------------
  745|  8.91k|            chars_read -= 2;
  746|  8.91k|        }
  747|       |
  748|  9.07k|        return chars_read;
  749|  9.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  9.45k|    {
  755|  9.45k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 9.07k, False: 371]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  9.07k|            auto first_space = read_until_classic_space(input.view());
  758|  9.07k|            input.assign(
  759|  9.07k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  9.07k|        }
  761|       |
  762|  9.45k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 8.92k, False: 522]
  ------------------
  763|  8.92k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  8.92k|                input.get_allocated_string().insert(0, "0x");
  765|  8.92k|            }
  766|  8.92k|            else {
  767|  8.92k|                input.get_allocated_string().insert(0, L"0x");
  768|  8.92k|            }
  769|  8.92k|        }
  770|       |
  771|  9.45k|        return input.get_allocated_string().c_str();
  772|  9.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  9.45k|    {
  905|  9.45k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  9.45k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  9.45k|        }
  908|  9.45k|        else {
  909|  9.45k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  9.45k|        }
  911|  9.45k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  9.45k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  9.45k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  9.45k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  9.45k|            return std::wcstof(str, str_end);
  877|  9.45k|        }
  878|  9.45k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  9.45k|            return std::wcstod(str, str_end);
  880|  9.45k|        }
  881|  9.45k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  9.45k|            return std::wcstold(str, str_end);
  883|  9.45k|        }
  884|  9.45k|#endif
  885|  9.45k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  39.7k|    {
 1110|  39.7k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  39.7k|            return m_input.view();
 1112|  39.7k|        }
 1113|  39.7k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  39.7k|            return std::u16string_view{
 1115|  39.7k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  39.7k|                m_input.view().size()};
 1117|  39.7k|        }
 1118|  39.7k|        else {
 1119|  39.7k|            return std::u32string_view{
 1120|  39.7k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  39.7k|                m_input.view().size()};
 1122|  39.7k|        }
 1123|  39.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.69M|{
 1138|  1.69M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.8k, False: 1.67M]
  ------------------
 1139|  15.8k|        value = std::numeric_limits<T>::infinity();
 1140|  15.8k|        return 3;
 1141|  15.8k|    }
 1142|  1.67M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 11.1k, False: 1.66M]
  ------------------
 1143|  11.1k|        value = std::numeric_limits<T>::infinity();
 1144|  11.1k|        return 8;
 1145|  11.1k|    }
 1146|  1.66M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 63.2k, False: 1.59M]
  ------------------
 1147|  63.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  63.2k|        return 3;
 1149|  63.2k|    }
 1150|  1.59M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.59M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.59M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.59M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 347k, False: 1.25M]
  ------------------
 1185|   347k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.92k, False: 343k]
  |  |  ------------------
  ------------------
 1186|  3.92k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.92k|                                         "Invalid floating-point digit");
 1188|  3.92k|        }
 1189|   347k|    }
 1190|  1.59M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 1.58M]
  |  |  ------------------
  ------------------
 1191|  11.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.3k|                                     "Invalid floating-point digit");
 1193|  11.3k|    }
 1194|       |
 1195|  1.58M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.58M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.58M|            double tmp{};
 1200|  1.58M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.58M|            value = tmp;
 1202|  1.58M|            return ret;
 1203|  1.58M|        }
 1204|  1.58M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.58M|            return fast_float_fallback(data, value);
 1208|  1.58M|        }
 1209|  1.58M|    }
 1210|  1.58M|    else {
 1211|       |        // Default to fast_float
 1212|  1.58M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.58M|    }
 1214|  1.58M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.58M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.58M|    {
 1048|  1.58M|#if !SCN_DISABLE_STRTOD
 1049|  1.58M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.58M|    }
 1056|  1.58M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.58M|    {
  894|  1.58M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.63M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.58M|    {
  898|  1.58M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.58M|                           generic_strtod);
  900|  1.58M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.58M|    {
  732|  1.58M|        CharT* end{};
  733|  1.58M|        errno = 0;
  734|  1.58M|        value = strtod_cb(src, &end);
  735|  1.58M|        const auto saved_errno = errno;
  736|  1.58M|        auto chars_read = end - src;
  737|       |
  738|  1.58M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.58M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36k, False: 1.58M]
  |  |  ------------------
  ------------------
  740|  1.36k|            return unexpected(e);
  741|  1.36k|        }
  742|       |
  743|  1.58M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 343k, False: 1.23M]
  ------------------
  744|  1.58M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 343k, False: 0]
  ------------------
  745|   343k|            chars_read -= 2;
  746|   343k|        }
  747|       |
  748|  1.58M|        return chars_read;
  749|  1.58M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.63M|    {
  778|  1.63M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 462k, False: 1.16M]
  |  Branch (778:37): [True: 0, False: 462k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.63M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 64.7k, False: 1.56M]
  ------------------
  785|  1.63M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 64.7k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.63M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.39k, False: 1.63M]
  |  Branch (791:34): [True: 140, False: 1.25k]
  ------------------
  792|    140|            SCN_UNLIKELY_ATTR
  793|    140|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    140|        }
  795|       |
  796|  1.63M|        SCN_GCC_COMPAT_PUSH
  797|  1.63M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.63M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.63M, False: 0]
  ------------------
  800|  1.63M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.63M, False: 0]
  ------------------
  801|  1.63M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.25k, False: 1.63M]
  ------------------
  802|  1.25k|            SCN_UNLIKELY_ATTR
  803|  1.25k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.25k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.63M|            return {};
  809|  1.63M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.63M|{
  695|  1.63M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 462k, False: 1.17M]
  |  Branch (695:26): [True: 0, False: 1.17M]
  ------------------
  696|  1.63M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.58M|    {
  755|  1.58M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.47M, False: 109k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.47M|            auto first_space = read_until_classic_space(input.view());
  758|  1.47M|            input.assign(
  759|  1.47M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.47M|        }
  761|       |
  762|  1.58M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 343k, False: 1.23M]
  ------------------
  763|   343k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   343k|                input.get_allocated_string().insert(0, "0x");
  765|   343k|            }
  766|   343k|            else {
  767|   343k|                input.get_allocated_string().insert(0, L"0x");
  768|   343k|            }
  769|   343k|        }
  770|       |
  771|  1.58M|        return input.get_allocated_string().c_str();
  772|  1.58M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.58M|    {
  905|  1.58M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.58M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.58M|        }
  908|  1.58M|        else {
  909|  1.58M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.58M|        }
  911|  1.58M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.58M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.58M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.58M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.58M|            return std::strtof(str, str_end);
  839|  1.58M|        }
  840|  1.58M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.58M|            return std::strtod(str, str_end);
  842|  1.58M|        }
  843|  1.58M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.58M|            return std::strtold(str, str_end);
  845|  1.58M|        }
  846|  1.58M|#endif
  847|  1.58M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  94.5k|{
 1138|  94.5k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 94.5k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  94.5k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 94.5k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  94.5k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 94.5k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  94.5k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 94.5k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  94.5k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  94.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  94.5k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 21.9k, False: 72.5k]
  ------------------
 1185|  21.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 8.97k]
  |  |  ------------------
  ------------------
 1186|  12.9k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.9k|                                         "Invalid floating-point digit");
 1188|  12.9k|        }
 1189|  21.9k|    }
 1190|  81.5k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  81.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.6k, False: 48.8k]
  |  |  ------------------
  ------------------
 1191|  32.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  32.6k|                                     "Invalid floating-point digit");
 1193|  32.6k|    }
 1194|       |
 1195|  48.8k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  48.8k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  48.8k|            double tmp{};
 1200|  48.8k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  48.8k|            value = tmp;
 1202|  48.8k|            return ret;
 1203|  48.8k|        }
 1204|  48.8k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  48.8k|            return fast_float_fallback(data, value);
 1208|  48.8k|        }
 1209|  48.8k|    }
 1210|  48.8k|    else {
 1211|       |        // Default to fast_float
 1212|  48.8k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  48.8k|    }
 1214|  48.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  48.8k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  48.8k|    {
 1048|  48.8k|#if !SCN_DISABLE_STRTOD
 1049|  48.8k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  48.8k|    }
 1056|  48.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  48.8k|    {
  894|  48.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  48.8k|    {
  898|  48.8k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  48.8k|                           generic_strtod);
  900|  48.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  48.8k|    {
  732|  48.8k|        CharT* end{};
  733|  48.8k|        errno = 0;
  734|  48.8k|        value = strtod_cb(src, &end);
  735|  48.8k|        const auto saved_errno = errno;
  736|  48.8k|        auto chars_read = end - src;
  737|       |
  738|  48.8k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  48.8k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 48.8k]
  |  |  ------------------
  ------------------
  740|     36|            return unexpected(e);
  741|     36|        }
  742|       |
  743|  48.8k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 8.92k, False: 39.8k]
  ------------------
  744|  48.8k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 8.92k, False: 0]
  ------------------
  745|  8.92k|            chars_read -= 2;
  746|  8.92k|        }
  747|       |
  748|  48.8k|        return chars_read;
  749|  48.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  48.8k|    {
  755|  48.8k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 47.7k, False: 1.13k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  47.7k|            auto first_space = read_until_classic_space(input.view());
  758|  47.7k|            input.assign(
  759|  47.7k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  47.7k|        }
  761|       |
  762|  48.8k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 8.92k, False: 39.9k]
  ------------------
  763|  8.92k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  8.92k|                input.get_allocated_string().insert(0, "0x");
  765|  8.92k|            }
  766|  8.92k|            else {
  767|  8.92k|                input.get_allocated_string().insert(0, L"0x");
  768|  8.92k|            }
  769|  8.92k|        }
  770|       |
  771|  48.8k|        return input.get_allocated_string().c_str();
  772|  48.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  48.8k|    {
  905|  48.8k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  48.8k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  48.8k|        }
  908|  48.8k|        else {
  909|  48.8k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  48.8k|        }
  911|  48.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  48.8k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  48.8k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  48.8k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  48.8k|            return std::wcstof(str, str_end);
  877|  48.8k|        }
  878|  48.8k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  48.8k|            return std::wcstod(str, str_end);
  880|  48.8k|        }
  881|  48.8k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  48.8k|            return std::wcstold(str, str_end);
  883|  48.8k|        }
  884|  48.8k|#endif
  885|  48.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.32M|{
 2065|  2.32M|    const auto argcount = args.size();
 2066|  2.32M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 481k, False: 1.84M]
  |  Branch (2066:60): [True: 481k, False: 0]
  ------------------
 2067|   481k|        auto arg = args.get(0);
 2068|   481k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   481k|    }
 2070|       |
 2071|  1.84M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.84M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.84M|    SCN_UNLIKELY_ATTR
 2079|  1.84M|    {
 2080|  1.84M|        auto handler = format_handler<false, CharT>{
 2081|  1.84M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.84M|    static_cast<    \
  |  |  929|  1.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.84M|    static_cast<    \
  |  |  929|  1.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.84M|        return vscan_parse_format_string(format, handler);
 2083|  1.84M|    }
 2084|  1.84M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.60M|{
 1625|  4.60M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.61M, False: 991k]
  ------------------
 1626|  3.61M|        return false;
 1627|  3.61M|    }
 1628|   991k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 991k, False: 0]
  |  Branch (1628:39): [True: 991k, False: 0]
  ------------------
 1629|  4.60M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   721k|{
 1658|   721k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 721k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   721k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   721k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 721k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   721k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   721k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   721k|    static_cast<    \
  |  |  929|   721k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   721k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   721k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   721k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   721k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.6k, False: 691k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  29.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  29.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  29.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  29.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  29.6k|    }                                                  \
  |  |  |  | 3667|   721k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   691k|    return it.position();
 1675|   721k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.77M|    {
 1903|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  4.11M|    {
 1722|  4.11M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.11M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.77M|    {
 1853|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.77M|{
 2030|  1.77M|    const auto beg = handler.get_ctx().begin();
 2031|  1.77M|    detail::parse_format_string<false>(format, handler);
 2032|  1.77M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.9k, False: 1.67M]
  |  |  ------------------
  ------------------
 2033|  98.9k|        return unexpected(handler.error);
 2034|  98.9k|    }
 2035|  1.67M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.77M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  12.2M|    {
 2014|  12.2M|        return ctx.get();
 2015|  12.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  12.2M|    {
 1857|  12.2M|        return contiguous_ctx;
 1858|  12.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.44M|    {
 1907|  3.44M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.44M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.44M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.77M|{
 1681|  1.77M|    auto arg = ctx.arg(id);
 1682|  1.77M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.77M|    return arg;
 1686|  1.77M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.11M|    {
 1797|  4.11M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.11M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.11M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.11M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.11M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.11M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.11M|            visited_args_lower64 |= (1ull << id);
 1808|  4.11M|            return;
 1809|  4.11M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.11M|    {
 1782|  4.11M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.11M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.11M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.11M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.11M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.11M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   593k|    {
 1766|   593k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 593k, False: 0]
  |  |  ------------------
  ------------------
 1767|   593k|            error = err;
 1768|   593k|        }
 1769|   593k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.77M|    {
 1936|  1.77M|        return parse_ctx.next_arg_id();
 1937|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.77M|    {
 1977|  1.77M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.77M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.77M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.77M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.77M|        auto specs = detail::format_specs{};
 1990|  1.77M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.77M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.77M|            arg.type()};
 1993|       |
 1994|  1.77M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.77M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.77M]
  |  Branch (1995:29): [True: 0, False: 1.77M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.77M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.77M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.77M|        on_visit_scan_arg(
 2006|  1.77M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.77M|                                           get_ctx().locale()},
 2008|  1.77M|            arg);
 2009|  1.77M|        return parse_ctx.begin();
 2010|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.77M|    {
 1701|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.77M|    {
 1948|  1.77M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.77M]
  |  Branch (1948:23): [True: 0, False: 1.77M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.77M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.77M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.9k, False: 1.67M]
  |  |  ------------------
  ------------------
 1955|  98.9k|            on_error(r.error());
 1956|  98.9k|        }
 1957|  1.67M|        else {
 1958|  1.67M|            get_ctx().advance_to(*r);
 1959|  1.67M|        }
 1960|  1.77M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.11M|    {
 1729|  4.11M|        {
 1730|  4.11M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.11M]
  ------------------
 1731|  4.11M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.11M]
  ------------------
 1732|  4.11M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.11M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.11M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.11M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.11M|        }
 1739|       |
 1740|  4.11M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.11M, False: 0]
  ------------------
 1741|  4.11M|            return;
 1742|  4.11M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.11M|    {
 1777|  4.11M|        return error;
 1778|  4.11M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  12.3M|    {
 1773|  12.3M|        return static_cast<bool>(error);
 1774|  12.3M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.84M|    {
 1903|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.84M|    {
 1830|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.84M|{
 2030|  1.84M|    const auto beg = handler.get_ctx().begin();
 2031|  1.84M|    detail::parse_format_string<false>(format, handler);
 2032|  1.84M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.9k, False: 1.74M]
  |  |  ------------------
  ------------------
 2033|  98.9k|        return unexpected(handler.error);
 2034|  98.9k|    }
 2035|  1.74M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.84M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  12.7M|    {
 2014|  12.7M|        return ctx.get();
 2015|  12.7M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  12.7M|    {
 1834|  12.7M|        return ctx;
 1835|  12.7M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.58M|    {
 1907|  3.58M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.58M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.58M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.84M|{
 1681|  1.84M|    auto arg = ctx.arg(id);
 1682|  1.84M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.84M|    return arg;
 1686|  1.84M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.84M|    {
 1936|  1.84M|        return parse_ctx.next_arg_id();
 1937|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.84M|    {
 1977|  1.84M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.84M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.84M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.84M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.84M|        auto specs = detail::format_specs{};
 1990|  1.84M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.84M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.84M|            arg.type()};
 1993|       |
 1994|  1.84M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.84M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.84M]
  |  Branch (1995:29): [True: 0, False: 1.84M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.84M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.84M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.84M|        on_visit_scan_arg(
 2006|  1.84M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.84M|                                           get_ctx().locale()},
 2008|  1.84M|            arg);
 2009|  1.84M|        return parse_ctx.begin();
 2010|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.84M|    {
 1701|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.84M|    {
 1948|  1.84M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.84M]
  |  Branch (1948:23): [True: 0, False: 1.84M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.84M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.84M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.9k, False: 1.74M]
  |  |  ------------------
  ------------------
 1955|  98.9k|            on_error(r.error());
 1956|  98.9k|        }
 1957|  1.74M|        else {
 1958|  1.74M|            get_ctx().advance_to(*r);
 1959|  1.74M|        }
 1960|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.28M|{
 2045|  2.28M|    const auto argcount = args.size();
 2046|  2.28M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 510k, False: 1.77M]
  |  Branch (2046:60): [True: 510k, False: 0]
  ------------------
 2047|   510k|        auto arg = args.get(0);
 2048|   510k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   510k|    static_cast<    \
  |  |  929|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   510k|    }
 2050|       |
 2051|  1.77M|    auto handler = format_handler<true, CharT>{
 2052|  1.77M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.77M|                                       source.data() + source.size()},
 2054|  1.77M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.77M|    static_cast<    \
  |  |  929|  1.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.77M|    static_cast<    \
  |  |  929|  1.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.77M|    return vscan_parse_format_string(format, handler);
 2056|  2.28M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   765k|{
 1638|   765k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 765k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   765k|    auto reader =
 1644|   765k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   765k|            ranges::subrange<const CharT*>{source.data(),
 1646|   765k|                                           source.data() + source.size()},
 1647|   765k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   765k|    static_cast<    \
  |  |  929|   765k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   765k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   765k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   765k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   765k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.6k, False: 735k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  29.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  29.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  29.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  29.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  29.6k|    }                                                  \
  |  |  |  | 3667|   765k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   735k|    return ranges::distance(source.data(), it);
 1650|   765k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   303k|{
 2045|   303k|    const auto argcount = args.size();
 2046|   303k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 52.6k, False: 250k]
  |  Branch (2046:60): [True: 52.6k, False: 0]
  ------------------
 2047|  52.6k|        auto arg = args.get(0);
 2048|  52.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  52.6k|    static_cast<    \
  |  |  929|  52.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  52.6k|    }
 2050|       |
 2051|   250k|    auto handler = format_handler<true, CharT>{
 2052|   250k|        ranges::subrange<const CharT*>{source.data(),
 2053|   250k|                                       source.data() + source.size()},
 2054|   250k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   250k|    static_cast<    \
  |  |  929|   250k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   250k|    static_cast<    \
  |  |  929|   250k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   250k|    return vscan_parse_format_string(format, handler);
 2056|   303k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   607k|{
 1625|   607k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 501k, False: 105k]
  ------------------
 1626|   501k|        return false;
 1627|   501k|    }
 1628|   105k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 105k, False: 0]
  |  Branch (1628:39): [True: 105k, False: 0]
  ------------------
 1629|   607k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  79.0k|{
 1638|  79.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  79.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 79.0k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  79.0k|    auto reader =
 1644|  79.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  79.0k|            ranges::subrange<const CharT*>{source.data(),
 1646|  79.0k|                                           source.data() + source.size()},
 1647|  79.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  79.0k|    static_cast<    \
  |  |  929|  79.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  79.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  79.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  79.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  79.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.3k, False: 19.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  59.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  59.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  59.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  59.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  59.3k|    }                                                  \
  |  |  |  | 3667|  79.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  19.6k|    return ranges::distance(source.data(), it);
 1650|  79.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   250k|    {
 1903|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   250k|    {
 1853|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   250k|{
 2030|   250k|    const auto beg = handler.get_ctx().begin();
 2031|   250k|    detail::parse_format_string<false>(format, handler);
 2032|   250k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 197k, False: 53.0k]
  |  |  ------------------
  ------------------
 2033|   197k|        return unexpected(handler.error);
 2034|   197k|    }
 2035|  53.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   250k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.36M|    {
 2014|  1.36M|        return ctx.get();
 2015|  1.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.36M|    {
 1857|  1.36M|        return contiguous_ctx;
 1858|  1.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   304k|    {
 1907|   304k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 304k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   304k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   250k|{
 1681|   250k|    auto arg = ctx.arg(id);
 1682|   250k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   250k|    return arg;
 1686|   250k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   250k|    {
 1936|   250k|        return parse_ctx.next_arg_id();
 1937|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   250k|    {
 1977|   250k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   250k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   250k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 250k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   250k|        auto specs = detail::format_specs{};
 1990|   250k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   250k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   250k|            arg.type()};
 1993|       |
 1994|   250k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   250k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 250k]
  |  Branch (1995:29): [True: 0, False: 250k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   250k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   250k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   250k|        on_visit_scan_arg(
 2006|   250k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   250k|                                           get_ctx().locale()},
 2008|   250k|            arg);
 2009|   250k|        return parse_ctx.begin();
 2010|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   250k|    {
 1701|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   250k|    {
 1948|   250k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 250k]
  |  Branch (1948:23): [True: 0, False: 250k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   250k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   250k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 197k, False: 53.0k]
  |  |  ------------------
  ------------------
 1955|   197k|            on_error(r.error());
 1956|   197k|        }
 1957|  53.0k|        else {
 1958|  53.0k|            get_ctx().advance_to(*r);
 1959|  53.0k|        }
 1960|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   303k|{
 2065|   303k|    const auto argcount = args.size();
 2066|   303k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 52.6k, False: 250k]
  |  Branch (2066:60): [True: 52.6k, False: 0]
  ------------------
 2067|  52.6k|        auto arg = args.get(0);
 2068|  52.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  52.6k|    static_cast<    \
  |  |  929|  52.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  52.6k|    }
 2070|       |
 2071|   250k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 250k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   250k|    SCN_UNLIKELY_ATTR
 2079|   250k|    {
 2080|   250k|        auto handler = format_handler<false, CharT>{
 2081|   250k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   250k|    static_cast<    \
  |  |  929|   250k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   250k|    static_cast<    \
  |  |  929|   250k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   250k|        return vscan_parse_format_string(format, handler);
 2083|   250k|    }
 2084|   250k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  78.9k|{
 1658|  78.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  78.9k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  78.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  78.9k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  78.9k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  78.9k|    static_cast<    \
  |  |  929|  78.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  78.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  78.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.3k, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  59.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  59.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  59.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  59.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  59.3k|    }                                                  \
  |  |  |  | 3667|  78.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  19.5k|    return it.position();
 1675|  78.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   250k|    {
 1903|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   250k|    {
 1830|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   250k|{
 2030|   250k|    const auto beg = handler.get_ctx().begin();
 2031|   250k|    detail::parse_format_string<false>(format, handler);
 2032|   250k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 197k, False: 52.9k]
  |  |  ------------------
  ------------------
 2033|   197k|        return unexpected(handler.error);
 2034|   197k|    }
 2035|  52.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   250k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  1.36M|    {
 2014|  1.36M|        return ctx.get();
 2015|  1.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.36M|    {
 1834|  1.36M|        return ctx;
 1835|  1.36M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   303k|    {
 1907|   303k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 303k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   303k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   250k|{
 1681|   250k|    auto arg = ctx.arg(id);
 1682|   250k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   250k|    return arg;
 1686|   250k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   250k|    {
 1936|   250k|        return parse_ctx.next_arg_id();
 1937|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   250k|    {
 1977|   250k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   250k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   250k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 250k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   250k|        auto specs = detail::format_specs{};
 1990|   250k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   250k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   250k|            arg.type()};
 1993|       |
 1994|   250k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   250k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 250k]
  |  Branch (1995:29): [True: 0, False: 250k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   250k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   250k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   250k|        on_visit_scan_arg(
 2006|   250k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   250k|                                           get_ctx().locale()},
 2008|   250k|            arg);
 2009|   250k|        return parse_ctx.begin();
 2010|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   250k|    {
 1701|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   250k|    {
 1948|   250k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 250k]
  |  Branch (1948:23): [True: 0, False: 250k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   250k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   250k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 197k, False: 52.9k]
  |  |  ------------------
  ------------------
 1955|   197k|            on_error(r.error());
 1956|   197k|        }
 1957|  52.9k|        else {
 1958|  52.9k|            get_ctx().advance_to(*r);
 1959|  52.9k|        }
 1960|   250k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   255k|{
 2091|   255k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   255k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   240k|{
 2091|   240k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   240k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  26.3k|{
 2091|  26.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  26.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  26.3k|{
 2091|  26.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  26.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  26.3k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.29k|{
 1363|  3.29k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.29k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  3.29k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  3.29k|            std::u32string tmp;
 1368|  3.29k|            transcode_to_string_impl_to32(src, tmp);
 1369|  3.29k|            return transcode_to_string_impl_32to16<false>(
 1370|  3.29k|                std::u32string_view{tmp}, dest);
 1371|  3.29k|        }
 1372|  3.29k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  3.29k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.29k|        }
 1375|  3.29k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.29k|{
 1256|  3.29k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.29k|    auto it = src.begin();
 1259|  1.18M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.17M, False: 3.29k]
  ------------------
 1260|  1.17M|        auto res = get_next_code_point(
 1261|  1.17M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.17M|                                                                 src.end()));
 1263|  1.17M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.05k, False: 1.17M]
  |  |  ------------------
  ------------------
 1264|  3.05k|            dest.push_back(DestCharT{0xfffd});
 1265|  3.05k|        }
 1266|  1.17M|        else {
 1267|  1.17M|            dest.push_back(res.value);
 1268|  1.17M|        }
 1269|  1.17M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.17M|    }
 1271|  3.29k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.08M|{
 1169|  2.08M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.08M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.08M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.6k, False: 2.05M]
  |  |  ------------------
  ------------------
 1173|  34.6k|        return {get_start_for_next_code_point(input),
 1174|  34.6k|                detail::invalid_code_point};
 1175|  34.6k|    }
 1176|  2.05M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  2.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.19k, False: 2.04M]
  |  |  ------------------
  ------------------
 1177|  6.19k|        return {input.end(), detail::invalid_code_point};
 1178|  6.19k|    }
 1179|       |
 1180|  2.04M|    return {input.begin() + len,
 1181|  2.04M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  2.05M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  34.6k|{
 1155|  34.6k|    auto it = input.begin();
 1156|   290k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 281k, False: 9.38k]
  ------------------
 1157|   281k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 25.3k, False: 255k]
  ------------------
 1158|  25.3k|            break;
 1159|  25.3k|        }
 1160|   281k|    }
 1161|  34.6k|    return it;
 1162|  34.6k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  43.7M|    {
  809|  43.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  43.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  43.7M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  16.3M|    {
  823|  16.3M|        return a.m_code == b.m_code;
  824|  16.3M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.45M|    {
 1728|  2.45M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.45M|        std::strcpy(m_locbuf, loc);
 1730|  2.45M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.45M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.45M|        std::setlocale(m_category, m_locbuf);
 1735|  2.45M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.45M|    {
 1757|  2.45M|        std::setlocale(cat, "C");
 1758|  2.45M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  4.11M|    {
 2936|  4.11M|        return m_msg == nullptr;
 2937|  4.11M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  4.07M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  55.0M|{
  458|  55.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  55.0M|        static_cast<unsigned char>(ch))];
  460|  55.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  48.1k|{
  469|  48.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  48.1k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  11.0M|{
  539|  11.0M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  11.0M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  19.3M|{
  784|  19.3M|    return e != eof_error::good;
  785|  19.3M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  59.7k|{
  798|  59.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  59.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  59.7k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  59.7k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   247k|{
  845|   247k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   247k|    return parse_error::eof;
  847|   247k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.90M|{
  854|  5.90M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.90M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.90M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 88.6k, False: 5.81M]
  ------------------
  859|  88.6k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  88.6k|    }
  861|       |
  862|  5.81M|    return scan_error{code, msg};
  863|  5.90M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.90M|{
  868|  5.90M|    return [code, msg](parse_error err) {
  869|  5.90M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.90M|    };
  871|  5.90M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  6.13M|{
 1200|       |    // Pattern_White_Space property
 1201|  6.13M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 5.84M, False: 284k]
  |  Branch (1201:27): [True: 1.99M, False: 3.85M]
  ------------------
 1202|  6.13M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 138k, False: 3.99M]
  ------------------
 1203|  6.13M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 184k, False: 3.81M]
  ------------------
 1204|  6.13M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 5.08k, False: 3.80M]
  ------------------
 1205|  6.13M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 19.7k, False: 3.78M]
  ------------------
 1206|  6.13M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 133k, False: 3.65M]
  ------------------
 1207|  6.13M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 3.65M]
  ------------------
 1208|  6.13M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  6.69M|{
 2220|  6.69M|    unsigned char running_diff{0};
 2221|  25.1M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 18.4M, False: 6.69M]
  ------------------
 2222|  18.4M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  18.4M|    }
 2224|  6.69M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 212k, False: 6.48M]
  |  Branch (2224:33): [True: 33.6k, False: 6.44M]
  ------------------
 2225|  6.69M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  41.6M|{
 3123|  41.6M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  41.6M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.00M|{
 3127|  1.00M|#if WCHAR_MIN < 0
 3128|  1.00M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 990k, False: 13.7k]
  |  Branch (3128:20): [True: 574k, False: 416k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   574k|        return char_to_int(static_cast<char>(ch));
 3133|   574k|    }
 3134|   429k|    return 255;
 3135|  1.00M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.52M|{
 6008|  3.52M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.52M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.52M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.52M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.52M|    return {};
 6023|  3.52M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.45M|    {
  304|  7.45M|        ranges::advance(x, n);
  305|  7.45M|        return x;
  306|  7.45M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.45M|    {
  268|  7.45M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.45M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.45M|    {
  151|  7.45M|        i += n;
  152|  7.45M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.87M|    {
  108|  8.87M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.87M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.87M|    {
   87|  8.87M|        return s - i;
   88|  8.87M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   861k|    {
  304|   861k|        ranges::advance(x, n);
  305|   861k|        return x;
  306|   861k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   861k|    {
  268|   861k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   861k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   861k|    {
  151|   861k|        i += n;
  152|   861k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   101k|    {
  108|   101k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   101k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   101k|    {
   87|   101k|        return s - i;
   88|   101k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.56M|{
  981|  2.56M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.56M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.56M|        return true;
  984|  2.56M|    }
  985|  2.56M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.56M|                           ranges::const_iterator_t<Range>,
  987|  2.56M|                           typename detail::basic_scan_buffer<
  988|  2.56M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.56M|        auto beg = r.begin();
  990|  2.56M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.56M, False: 0]
  ------------------
  991|  2.56M|            return false;
  992|  2.56M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.56M|    else {
 1006|  2.56M|        return false;
 1007|  2.56M|    }
 1008|  2.56M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.84M|    {
 6037|  1.84M|        const bool need_skipped_width =
 6038|  1.84M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.84M]
  |  Branch (6038:33): [True: 0, False: 1.84M]
  ------------------
 6039|  1.84M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.84M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.84M]
  ------------------
 6043|  1.84M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.84M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.84M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.84M, False: 0]
  |  Branch (6047:56): [True: 1.84M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.84M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.84M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.66M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.84M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.84M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.84M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.9k, False: 1.82M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  21.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  21.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  21.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  21.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  21.9k|    }                                                  \
  |  |  |  | 3667|  1.84M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.82M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.66M|                            make_eof_scan_error));
 6058|       |
 6059|  3.66M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.82M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.82M|            return result_type{it, 0};
 6067|  3.66M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.84M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.98M|{
 1976|  4.98M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.98M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.98M|{
 1957|  4.98M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.98M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.98M|    }
 1960|  4.98M|    else {
 1961|  4.98M|        auto first = range.begin();
 1962|  27.4M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 27.4M, False: 39.3k]
  ------------------
 1963|  27.4M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.94M, False: 22.4M]
  ------------------
 1964|  4.94M|                return first;
 1965|  4.94M|            }
 1966|  27.4M|        }
 1967|  39.3k|        return first;
 1968|  4.98M|    }
 1969|  4.98M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  70.8M|    {
  763|  70.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  70.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  70.8M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  6.33M|    {
  754|  6.33M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  35.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.4M|              cvref<T> obj = *get<T>(fn);
  745|  35.4M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  35.4M|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.4M|              }
  748|  35.4M|              else {
  749|  35.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.4M|              }
  751|  35.4M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  35.4M|    {
  684|  35.4M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  35.4M|            return static_cast<T*>(s.m_cp);
  686|  35.4M|        }
  687|  35.4M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  35.4M|            return static_cast<T*>(s.m_p);
  689|  35.4M|        }
  690|  35.4M|        else {
  691|  35.4M|            return reinterpret_cast<T*>(s.m_fp);
  692|  35.4M|        }
  693|  35.4M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  6.33M|        {
  662|  6.33M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  4.38M|    {
  108|  4.38M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.38M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  4.38M|    {
   94|  4.38M|        iter_difference_t<I> counter{0};
   95|  44.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 40.1M, False: 4.38M]
  ------------------
   96|  40.1M|            ++i;
   97|  40.1M|            ++counter;
   98|  40.1M|        }
   99|  4.38M|        return counter;
  100|  4.38M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  6.80M|{
 1857|  6.80M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.80M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.80M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.80M|        if (sz < count) {
 1862|  6.80M|            return unexpected(eof_error::eof);
 1863|  6.80M|        }
 1864|       |
 1865|  6.80M|        return ranges::next(range.begin(), count);
 1866|  6.80M|    }
 1867|  6.80M|    else {
 1868|  6.80M|        auto it = range.begin();
 1869|  6.80M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 4.19M, False: 2.60M]
  ------------------
 1870|  4.19M|            return ranges::next(it, count);
 1871|  4.19M|        }
 1872|       |
 1873|  10.3M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.84M, False: 2.54M]
  ------------------
 1874|  7.84M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 52.7k, False: 7.79M]
  ------------------
 1875|  52.7k|                return unexpected(eof_error::eof);
 1876|  52.7k|            }
 1877|  7.84M|        }
 1878|       |
 1879|  2.54M|        return it;
 1880|  2.60M|    }
 1881|  6.80M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  6.80M|{
 1095|  6.80M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  6.80M|        return r.size();
 1097|  6.80M|    }
 1098|  6.80M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  6.80M|                           ranges::const_iterator_t<Range>,
 1100|  6.80M|                           typename detail::basic_scan_buffer<
 1101|  6.80M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  6.80M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  6.80M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  6.80M|        }
 1105|  6.80M|        else {
 1106|  6.80M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 6.80M, False: 0]
  ------------------
 1107|  6.80M|                return static_cast<size_t>(
 1108|  6.80M|                    r.begin().parent()->chars_available() -
 1109|  6.80M|                    r.begin().position());
 1110|  6.80M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  6.80M|        }
 1113|  6.80M|    }
 1114|  6.80M|    else {
 1115|  6.80M|        return 0;
 1116|  6.80M|    }
 1117|  6.80M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  10.2M|    {
  763|  10.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.2M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.91M|    {
  754|  2.91M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  5.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.07M|              cvref<T> obj = *get<T>(fn);
  745|  5.07M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.07M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.07M|              }
  748|  5.07M|              else {
  749|  5.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.07M|              }
  751|  5.07M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.07M|    {
  684|  5.07M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.07M|            return static_cast<T*>(s.m_cp);
  686|  5.07M|        }
  687|  5.07M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.07M|            return static_cast<T*>(s.m_p);
  689|  5.07M|        }
  690|  5.07M|        else {
  691|  5.07M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.07M|        }
  693|  5.07M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.91M|        {
  662|  2.91M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.90M|    return [code, msg](parse_error err) {
  869|  5.90M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.90M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  1.03M|    {
 1780|  1.03M|        auto stdloc = loc.get<std::locale>();
 1781|  1.03M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  1.03M|        grouping = numpunct.grouping();
 1783|  1.03M|        thousands_sep =
 1784|  1.03M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 1.03M]
  ------------------
 1785|  1.03M|        decimal_point = numpunct.decimal_point();
 1786|  1.03M|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  1.03M|{
 1717|  1.03M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 1.03M, False: 0]
  ------------------
 1718|  1.03M|        return std::use_facet<Facet>(stdloc);
 1719|  1.03M|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  1.03M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  7.33M|{
 1846|  7.33M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 7.30M]
  |  |  ------------------
  ------------------
 1847|  29.7k|        return unexpected(e);
 1848|  29.7k|    }
 1849|       |
 1850|  7.30M|    return ranges::next(range.begin());
 1851|  7.33M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  10.6M|{
  950|  10.6M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  10.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.0k, False: 10.5M]
  |  |  ------------------
  ------------------
  951|  59.0k|        return eof_error::eof;
  952|  59.0k|    }
  953|  10.5M|    return eof_error::good;
  954|  10.6M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  14.9M|{
  944|  14.9M|    return is_range_eof(r.begin(), r.end());
  945|  14.9M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  14.9M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  14.9M|    {
  937|  14.9M|        return begin == end;
  938|  14.9M|    }
  939|  14.9M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  7.30M|    {
  296|  7.30M|        ++x;
  297|  7.30M|        return x;
  298|  7.30M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.78M|{
 3141|  2.78M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.78M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.01M, False: 771k]
  ------------------
 3143|  2.01M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.01M, False: 512]
  ------------------
 3144|  2.01M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.01M|        }
 3146|    512|        return unexpected(eof_error::eof);
 3147|  2.01M|    }
 3148|       |
 3149|   771k|    auto& it = *r;
 3150|   771k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 309k, False: 462k]
  ------------------
 3151|   309k|        return std::pair{it, sign_type::minus_sign};
 3152|   309k|    }
 3153|   462k|    return std::pair{it, sign_type::plus_sign};
 3154|   771k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  4.90M|{
 2272|  4.90M|    auto it = read_code_unit(range);
 2273|  4.90M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.4k, False: 4.89M]
  |  |  ------------------
  ------------------
 2274|  17.4k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  17.4k|    }
 2276|       |
 2277|  9.13M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 9.13M, False: 3.86M]
  ------------------
 2278|  9.13M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.02M, False: 8.10M]
  ------------------
 2279|  1.02M|            return *it;
 2280|  1.02M|        }
 2281|  9.13M|    }
 2282|       |
 2283|  3.86M|    return unexpected(parse_error::error);
 2284|  4.89M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  6.80M|{
 2231|  6.80M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.80M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.80M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.80M|        if (range.size() < str.size()) {
 2236|  6.80M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.80M|        }
 2238|  6.80M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.80M|            return unexpected(parse_error::error);
 2240|  6.80M|        }
 2241|  6.80M|        return ranges::next(range.begin(), str.size());
 2242|  6.80M|    }
 2243|  6.80M|    else {
 2244|  6.80M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.80M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.80M|                return ch;
 2247|  6.80M|            }
 2248|  6.80M|            return static_cast<char_type>(ch +
 2249|  6.80M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.80M|        };
 2251|       |
 2252|  6.80M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  6.80M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.80M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.80M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 52.7k, False: 6.74M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  52.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  52.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  52.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  52.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  52.7k|    }                                                  \
  |  |  |  | 3667|  6.80M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.74M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.74M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.74M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.50M, False: 244k]
  |  |  ------------------
  ------------------
 2257|  6.74M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.74M|                    return ascii_tolower(a) ==
 2259|  6.74M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.74M|                }))) {
 2261|  6.50M|            return unexpected(parse_error::error);
 2262|  6.50M|        }
 2263|       |
 2264|   244k|        return it;
 2265|  6.74M|    }
 2266|  6.80M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  7.88M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.88M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 7.10M, False: 781k]
  |  Branch (2245:29): [True: 663k, False: 117k]
  ------------------
 2246|  7.76M|                return ch;
 2247|  7.76M|            }
 2248|   117k|            return static_cast<char_type>(ch +
 2249|   117k|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.88M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.42M|{
 2146|  2.42M|    auto it = read_code_unit(range);
 2147|  2.42M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 2.41M]
  |  |  ------------------
  ------------------
 2148|  12.3k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  12.3k|    }
 2150|       |
 2151|  2.41M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.03M, False: 381k]
  |  |  ------------------
  ------------------
 2152|  2.41M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.03M|        return unexpected(parse_error::error);
 2154|  2.03M|    }
 2155|       |
 2156|   381k|    return *it;
 2157|  2.41M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  4.98M|{
 1996|  4.98M|    auto it = read_while_code_unit(range, pred);
 1997|  4.98M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.08M, False: 2.89M]
  ------------------
 1998|  2.08M|        return unexpected(parse_error::error);
 1999|  2.08M|    }
 2000|  2.89M|    return it;
 2001|  4.98M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.31M|    {
 1621|  2.31M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.31M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.31M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.31M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.31M|            m_storage.reset();
 1627|  2.31M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.31M|        }
 1629|  2.31M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.31M|                                          std::basic_string<CharT>>) {
 1631|  2.31M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.31M|            m_view = string_view_type{*m_storage};
 1633|  2.31M|        }
 1634|  2.31M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.31M|                                          typename detail::basic_scan_buffer<
 1636|  2.31M|                                              value_t>::forward_iterator> &&
 1637|  2.31M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.31M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.31M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.31M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 311k, False: 2.00M]
  |  |  ------------------
  ------------------
 1641|  2.31M|                             detail::to_address(end_seg.end()))) {
 1642|   311k|                auto& str = m_storage.emplace();
 1643|   311k|                str.reserve(range.end().position() - range.begin().position());
 1644|   311k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   311k|                m_view = string_view_type{str};
 1646|   311k|                return;
 1647|   311k|            }
 1648|       |
 1649|  2.00M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.00M|                                                            end_seg.data());
 1651|  2.00M|            m_storage.reset();
 1652|  2.00M|        }
 1653|  2.31M|        else {
 1654|  2.31M|            auto& str = m_storage.emplace();
 1655|  2.31M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.31M|                str.reserve(range.size());
 1657|  2.31M|            }
 1658|  2.31M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.31M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.31M|                          std::back_inserter(str));
 1661|  2.31M|            }
 1662|  2.31M|            else {
 1663|  2.31M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.31M|                     ++it) {
 1665|  2.31M|                    str.push_back(*it);
 1666|  2.31M|                }
 1667|  2.31M|            }
 1668|  2.31M|            m_view = string_view_type{str};
 1669|  2.31M|        }
 1670|  2.31M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  17.0M|    {
 1582|  17.0M|        return m_view;
 1583|  17.0M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  10.0M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.72M|    {
 6079|  1.72M|        const bool need_skipped_width =
 6080|  1.72M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.72M]
  |  Branch (6080:33): [True: 0, False: 1.72M]
  ------------------
 6081|  1.72M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.72M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.72M]
  ------------------
 6084|  1.72M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.72M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.72M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.72M, False: 0]
  ------------------
 6089|  1.72M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.72M]
  ------------------
 6090|  1.72M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.72M|        return result_type{rng.begin(), 0};
 6114|  1.72M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.72M|{
 1846|  3.72M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.95k, False: 3.72M]
  |  |  ------------------
  ------------------
 1847|  6.95k|        return unexpected(e);
 1848|  6.95k|    }
 1849|       |
 1850|  3.72M|    return ranges::next(range.begin());
 1851|  3.72M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  7.02M|{
  950|  7.02M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.0k, False: 6.99M]
  |  |  ------------------
  ------------------
  951|  33.0k|        return eof_error::eof;
  952|  33.0k|    }
  953|  6.99M|    return eof_error::good;
  954|  7.02M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  7.02M|{
  944|  7.02M|    return is_range_eof(r.begin(), r.end());
  945|  7.02M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  7.02M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.02M|    {
  937|  7.02M|        return begin == end;
  938|  7.02M|    }
  939|  7.02M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.72M|    {
  296|  3.72M|        ++x;
  297|  3.72M|        return x;
  298|  3.72M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.59M|{
 3141|  2.59M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.59M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.85M, False: 733k]
  ------------------
 3143|  1.85M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.85M, False: 162]
  ------------------
 3144|  1.85M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.85M|        }
 3146|    162|        return unexpected(eof_error::eof);
 3147|  1.85M|    }
 3148|       |
 3149|   733k|    auto& it = *r;
 3150|   733k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 295k, False: 437k]
  ------------------
 3151|   295k|        return std::pair{it, sign_type::minus_sign};
 3152|   295k|    }
 3153|   437k|    return std::pair{it, sign_type::plus_sign};
 3154|   733k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.00M|{
 2272|  3.00M|    auto it = read_code_unit(range);
 2273|  3.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.24k, False: 3.00M]
  |  |  ------------------
  ------------------
 2274|  3.24k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.24k|    }
 2276|       |
 2277|  5.51M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.51M, False: 2.19M]
  ------------------
 2278|  5.51M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 814k, False: 4.69M]
  ------------------
 2279|   814k|            return *it;
 2280|   814k|        }
 2281|  5.51M|    }
 2282|       |
 2283|  2.19M|    return unexpected(parse_error::error);
 2284|  3.00M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.75M|{
 2231|  6.75M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.75M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.75M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.75M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 56.9k, False: 6.69M]
  ------------------
 2236|  56.9k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  56.9k|        }
 2238|  6.69M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 6.44M, False: 246k]
  ------------------
 2239|  6.44M|            return unexpected(parse_error::error);
 2240|  6.44M|        }
 2241|   246k|        return ranges::next(range.begin(), str.size());
 2242|  6.69M|    }
 2243|  6.75M|    else {
 2244|  6.75M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.75M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.75M|                return ch;
 2247|  6.75M|            }
 2248|  6.75M|            return static_cast<char_type>(ch +
 2249|  6.75M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.75M|        };
 2251|       |
 2252|  6.75M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  6.75M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.75M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.75M|        if (SCN_UNLIKELY(!std::equal(
 2257|  6.75M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.75M|                    return ascii_tolower(a) ==
 2259|  6.75M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.75M|                }))) {
 2261|  6.75M|            return unexpected(parse_error::error);
 2262|  6.75M|        }
 2263|       |
 2264|  6.75M|        return it;
 2265|  6.75M|    }
 2266|  6.75M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   717k|{
 2146|   717k|    auto it = read_code_unit(range);
 2147|   717k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.71k, False: 713k]
  |  |  ------------------
  ------------------
 2148|  3.71k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.71k|    }
 2150|       |
 2151|   713k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 593k, False: 119k]
  |  |  ------------------
  ------------------
 2152|   713k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   593k|        return unexpected(parse_error::error);
 2154|   593k|    }
 2155|       |
 2156|   119k|    return *it;
 2157|   713k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  9.60M|    {
 1503|  9.60M|        return sv;
 1504|  9.60M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.34M|{
 1976|  1.34M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.34M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.34M|{
 1957|  1.34M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.34M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.34M|    }
 1960|  1.34M|    else {
 1961|  1.34M|        auto first = range.begin();
 1962|  1.34M|        for (; first != range.end(); ++first) {
 1963|  1.34M|            if (pred(*first)) {
 1964|  1.34M|                return first;
 1965|  1.34M|            }
 1966|  1.34M|        }
 1967|  1.34M|        return first;
 1968|  1.34M|    }
 1969|  1.34M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.53M|{
 2951|  2.53M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.53M, False: 0]
  ------------------
 2952|  2.53M|        auto it = read_while_classic_space(range);
 2953|  2.53M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.53M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 2.51M]
  |  |  ------------------
  ------------------
 2955|  19.8k|            return unexpected(e);
 2956|  19.8k|        }
 2957|       |
 2958|  2.51M|        return it;
 2959|  2.53M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.53M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.53M|{
 2117|  2.53M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.53M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.53M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.53M|        auto buf = make_contiguous_buffer(range);
 2121|  2.53M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.53M|        return ranges::next(range.begin(),
 2123|  2.53M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.53M|    }
 2125|  2.53M|    else {
 2126|  2.53M|        auto it = range.begin();
 2127|       |
 2128|  2.53M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.53M|            auto seg = get_contiguous_beginning(range);
 2130|  2.53M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.53M|                seg_it != seg.end()) {
 2132|  2.53M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.53M|            }
 2134|  2.53M|            ranges::advance(it, seg.size());
 2135|  2.53M|        }
 2136|       |
 2137|  2.53M|        return read_while_code_point(
 2138|  2.53M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.53M|    }
 2140|  2.53M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.53M|{
 1683|  2.53M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.53M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.53M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.53M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.53M|    }
 1688|  2.53M|    else {
 1689|  2.53M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.53M|    }
 1691|  2.53M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.53M|    {
 1490|  2.53M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  6.94M|    {
  304|  6.94M|        ranges::advance(x, n);
  305|  6.94M|        return x;
  306|  6.94M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  9.19M|    {
  268|  9.19M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.19M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  9.19M|    {
  181|  43.9M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 34.7M, False: 9.19M]
  ------------------
  182|  34.7M|            ++i;
  183|  34.7M|        }
  184|  9.19M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   584k|    {
 6178|   584k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   584k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   584k|            auto rd = make_reader<T, char_type>();
 6183|   584k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   584k|                return unexpected(e);
 6185|   584k|            }
 6186|       |
 6187|   584k|            return impl(rd, range, value);
 6188|   584k|        }
 6189|   584k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   584k|            auto rd = make_reader<T, char_type>();
 6191|   584k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 584k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   584k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 584k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   584k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   584k|                return impl(rd, range, value);
 6198|   584k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   584k|        else {
 6206|   584k|            SCN_EXPECT(false);
 6207|   584k|            SCN_UNREACHABLE;
 6208|   584k|        }
 6209|   584k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.61M|    {
 3040|  3.61M|        reader_error_handler eh{};
 3041|  3.61M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.61M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.61M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.61M|        return {};
 3046|  3.61M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.61M|    {
 3051|  3.61M|        return static_cast<Derived&>(*this);
 3052|  3.61M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.61M|    {
 4145|  3.61M|        detail::check_float_type_specs(specs, eh);
 4146|  3.61M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   584k|    {
 6120|   584k|        const bool need_skipped_width =
 6121|   584k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 584k]
  |  Branch (6121:33): [True: 0, False: 584k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   584k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   584k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   584k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   584k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.57k, False: 577k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.57k|    }                                                  \
  |  |  |  | 3667|   584k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   577k|        auto [it, prefix_width] = prefix_result;
 6126|   577k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   577k|        std::ptrdiff_t value_width = 0;
 6130|   577k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 577k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   577k|        else {
 6146|   577k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   577k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   577k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.4k, False: 551k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  26.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  26.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  26.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  26.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  26.4k|    }                                                  \
  |  | 3667|   577k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   551k|                                             specs, value, loc));
 6148|       |
 6149|   551k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 551k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   551k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   551k|        std::ptrdiff_t postfix_width = 0;
 6158|   551k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 546k, False: 5.04k]
  ------------------
 6159|   546k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   546k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   546k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   546k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 546k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   546k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   546k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   546k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   546k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   546k|                                 value_width));
 6163|   546k|            std::tie(it, postfix_width) = postfix_result;
 6164|   546k|        }
 6165|       |
 6166|   551k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   551k|                                                 value_width, postfix_width);
 6168|   551k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 551k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   551k|        return it;
 6173|   551k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  8.49M|    {
 3035|  8.49M|        return true;
 3036|  8.49M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  3.57M|    {
 4217|  3.57M|        unsigned options{};
 4218|  3.57M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 1.03M, False: 2.54M]
  ------------------
 4219|  1.03M|            options |= float_reader_base::allow_thsep;
 4220|  1.03M|        }
 4221|       |
 4222|  3.57M|        SCN_GCC_COMPAT_PUSH
 4223|  3.57M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  3.57M|        switch (specs.type) {
 4226|   458k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 458k, False: 3.11M]
  ------------------
 4227|   458k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  68.2k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 68.2k, False: 3.50M]
  ------------------
 4230|  68.2k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.15M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.15M, False: 2.42M]
  ------------------
 4233|  1.15M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   866k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 866k, False: 2.71M]
  ------------------
 4236|   866k|                return options | float_reader_base::allow_scientific |
 4237|   866k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  1.03M|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 1.03M, False: 2.54M]
  ------------------
 4240|  1.03M|                return options | float_reader_base::allow_scientific |
 4241|  1.03M|                       float_reader_base::allow_fixed |
 4242|  1.03M|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 3.57M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  3.57M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  3.57M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  3.57M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  3.57M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  5.04M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  10.0M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.54M|    {
 3691|  1.54M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.54M|        const std::ptrdiff_t sign_len =
 3694|  1.54M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 444k, False: 1.10M]
  ------------------
 3695|       |
 3696|  1.54M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.7k, False: 1.52M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  24.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  24.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  24.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  24.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  24.7k|    }                                                  \
  |  |  |  | 3667|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.52M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.54M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  4.90M|    {
 4057|  4.90M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 4.90M, False: 0]
  ------------------
 4058|  4.90M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 4.90M, False: 0]
  ------------------
 4059|  4.90M|            return;
 4060|  4.90M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  5.79M|    {
 1587|  5.79M|        return m_storage.has_value();
 1588|  5.79M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.40M|    {
 1592|  3.40M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.40M|        return *m_storage;
 1594|  3.40M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   577k|    {
 4170|   577k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   577k|#if !SCN_DISABLE_LOCALE
 4173|   577k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 162k, False: 415k]
  ------------------
 4174|   162k|            return read_impl<Range>(
 4175|   162k|                range, rd,
 4176|   162k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   162k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   162k|                },
 4179|   162k|                value, loc);
 4180|   162k|        }
 4181|   415k|#endif
 4182|       |
 4183|   415k|        return read_impl<Range>(
 4184|   415k|            range, rd,
 4185|   415k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   415k|                return r.read_source(SCN_FWD(args)...);
 4187|   415k|            },
 4188|   415k|            value);
 4189|   577k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   799k|    {
 4206|   799k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   799k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 771k]
  |  |  ------------------
  ------------------
 4208|  27.9k|            return unexpected(r.error());
 4209|  27.9k|        }
 4210|       |
 4211|   771k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   771k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   771k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   771k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.20k, False: 765k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.20k|    }                                                  \
  |  |  |  | 3667|   771k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   765k|        return ranges::next(range.begin(), n);
 4213|   771k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.53M|    {
  763|  2.53M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.53M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   162k|    {
  754|   162k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|   162k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   162k|                  obj(static_cast<decltype(args)>(args)...);
  747|   162k|              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   162k|    {
  684|   162k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   162k|            return static_cast<T*>(s.m_cp);
  686|   162k|        }
  687|   162k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   162k|            return static_cast<T*>(s.m_p);
  689|   162k|        }
  690|   162k|        else {
  691|   162k|            return reinterpret_cast<T*>(s.m_fp);
  692|   162k|        }
  693|   162k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   162k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   162k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   162k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   525k|    {
 3679|   525k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   525k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   525k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 525k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   525k|        return read_source_impl(range);
 3685|   525k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  2.53M|    {
 3705|  2.53M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.53M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.53M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.53M|        auto it = sign_result.first;
 3708|  2.53M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.53M|        auto digits_begin = it;
 3711|  2.53M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.53M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.53M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.53M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  2.53M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  2.53M|                SCN_TRY_ASSIGN(
 3717|  2.53M|                    it,
 3718|  2.53M|                    do_read_source_impl(
 3719|  2.53M|                        r,
 3720|  2.53M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  2.53M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  2.53M|            }
 3723|  2.53M|            else {
 3724|  2.53M|                auto cb = [&](const auto& rr)
 3725|  2.53M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.53M|                    auto res = read_all(rr);
 3727|  2.53M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.53M|                        return unexpected_scan_error(
 3729|  2.53M|                            scan_error::invalid_scanned_value,
 3730|  2.53M|                            "Invalid float value");
 3731|  2.53M|                    }
 3732|  2.53M|                    return res;
 3733|  2.53M|                };
 3734|  2.53M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  2.53M|            }
 3736|  2.53M|        }
 3737|  2.53M|        else {
 3738|  2.53M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  2.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 89.6k, False: 2.44M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  89.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  89.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  89.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  89.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  89.6k|    }                                                  \
  |  | 3667|  2.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  2.44M|                it,
 3740|  2.44M|                do_read_source_impl(
 3741|  2.44M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.44M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.44M|        }
 3744|       |
 3745|  2.44M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.44M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.42M, False: 22.8k]
  |  Branch (3747:48): [True: 2.40M, False: 16.3k]
  ------------------
 3748|  2.44M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.31M, False: 93.5k]
  ------------------
 3749|  2.44M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.31M, False: 2.66k]
  ------------------
 3750|  2.31M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.31M|        }
 3752|       |
 3753|  2.44M|        handle_separators();
 3754|       |
 3755|  2.44M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.44M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.44M|        return it;
 3768|  2.44M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  2.53M|    {
 4000|  2.53M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.53M|        const bool allowed_nonhex =
 4002|  2.53M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.53M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.53M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.49M, False: 39.1k]
  |  Branch (4005:45): [True: 0, False: 2.49M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.53M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 39.1k, False: 2.49M]
  ------------------
 4011|  39.1k|            return *r;
 4012|  39.1k|        }
 4013|       |
 4014|  2.49M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.40M, False: 96.2k]
  |  Branch (4014:45): [True: 1.19k, False: 2.39M]
  ------------------
 4015|  1.19k|            return unexpected(r.error());
 4016|  1.19k|        }
 4017|  2.49M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 96.2k, False: 2.39M]
  ------------------
 4018|  96.2k|            return *r;
 4019|  96.2k|        }
 4020|       |
 4021|  2.39M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.72M, False: 671k]
  |  Branch (4021:28): [True: 558k, False: 1.16M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   558k|            auto it = range.begin();
 4025|       |
 4026|   558k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 28.3k, False: 529k]
  ------------------
 4027|  28.3k|                m_kind = float_kind::hex_with_prefix;
 4028|  28.3k|                it = *r;
 4029|  28.3k|            }
 4030|   529k|            else {
 4031|   529k|                m_kind = float_kind::hex_without_prefix;
 4032|   529k|            }
 4033|       |
 4034|   558k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   558k|        }
 4036|  1.84M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 671k, False: 1.16M]
  |  Branch (4036:29): [True: 671k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   671k|            m_kind = float_kind::generic;
 4040|   671k|            return read_regular_float(range);
 4041|   671k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.16M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.5k, False: 1.10M]
  |  |  ------------------
  ------------------
 4047|  63.5k|            m_kind = float_kind::hex_with_prefix;
 4048|  63.5k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  63.5k|        }
 4050|       |
 4051|  1.10M|        m_kind = float_kind::generic;
 4052|  1.10M|        return read_regular(range);
 4053|  1.16M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  2.53M|    {
 3811|  2.53M|        auto it = range.begin();
 3812|  2.53M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.49M, False: 39.1k]
  ------------------
 3813|  2.49M|            return unexpected(r.error());
 3814|  2.49M|        }
 3815|  39.1k|        else {
 3816|  39.1k|            it = *r;
 3817|  39.1k|        }
 3818|       |
 3819|  39.1k|        if (auto r = read_matching_string_classic_nocase(
 3820|  39.1k|                ranges::subrange{it, range.end()}, "inity");
 3821|  39.1k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.8k, False: 16.3k]
  ------------------
 3822|  22.8k|            m_kind = float_kind::inf_short;
 3823|  22.8k|            return it;
 3824|  22.8k|        }
 3825|  16.3k|        else {
 3826|  16.3k|            m_kind = float_kind::inf_long;
 3827|  16.3k|            return *r;
 3828|  16.3k|        }
 3829|  39.1k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  2.49M|    {
 3834|  2.49M|        auto it = range.begin();
 3835|  2.49M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.39M, False: 97.4k]
  ------------------
 3836|  2.39M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.39M|                scan_error::invalid_scanned_value,
 3838|  2.39M|                "Invalid floating-point NaN value"));
 3839|  2.39M|        }
 3840|  97.4k|        else {
 3841|  97.4k|            it = *r;
 3842|  97.4k|        }
 3843|       |
 3844|  97.4k|        if (auto r =
 3845|  97.4k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  97.4k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 93.5k, False: 3.85k]
  ------------------
 3847|  93.5k|            m_kind = float_kind::nan_simple;
 3848|  93.5k|            return it;
 3849|  93.5k|        }
 3850|  3.85k|        else {
 3851|  3.85k|            it = *r;
 3852|  3.85k|        }
 3853|       |
 3854|  3.85k|        auto payload_beg_it = it;
 3855|  3.85k|        it = read_while_code_unit(
 3856|  3.85k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.85k|                return is_ascii_char(ch) &&
 3858|  3.85k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.85k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.85k|            });
 3861|  3.85k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.85k|        m_kind = float_kind::nan_with_payload;
 3864|  3.85k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.19k]
  ------------------
 3865|  3.85k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.19k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.19k|                                     "Invalid floating-point NaN payload");
 3870|  3.85k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.85k|    {
  754|  3.85k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  24.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.3k|              cvref<T> obj = *get<T>(fn);
  745|  24.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.3k|              }
  748|  24.3k|              else {
  749|  24.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.3k|              }
  751|  24.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  24.3k|    {
  684|  24.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.3k|            return static_cast<T*>(s.m_cp);
  686|  24.3k|        }
  687|  24.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.3k|            return static_cast<T*>(s.m_p);
  689|  24.3k|        }
  690|  24.3k|        else {
  691|  24.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.3k|        }
  693|  24.3k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  24.3k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  24.3k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 24.1k, False: 237]
  ------------------
 3858|  24.3k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 21.3k, False: 2.76k]
  |  Branch (3858:39): [True: 13.5k, False: 7.79k]
  |  Branch (3858:54): [True: 2.55k, False: 8.00k]
  |  Branch (3858:67): [True: 2.47k, False: 83]
  ------------------
 3859|  24.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.85k]
  ------------------
 3860|  24.3k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.85k|        {
  662|  3.85k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.72M|    {
 3804|  1.72M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.72M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   621k|    {
 3904|   621k|        auto it = range.begin();
 3905|       |
 3906|   621k|        std::ptrdiff_t digits_count = 0;
 3907|   621k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   621k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 610k]
  |  |  ------------------
  ------------------
 3909|  11.0k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  11.0k|                scan_error::invalid_scanned_value,
 3911|  11.0k|                "Invalid hexadecimal floating-point value"));
 3912|  11.0k|        }
 3913|   610k|        else {
 3914|   610k|            digits_count += ranges::distance(it, *r);
 3915|   610k|            it = *r;
 3916|   610k|        }
 3917|       |
 3918|   610k|        m_integral_part_length = digits_count;
 3919|   610k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 80.6k, False: 529k]
  ------------------
 3920|   610k|                                             m_locale_options.decimal_point)) {
 3921|  80.6k|            it = *r;
 3922|  80.6k|        }
 3923|       |
 3924|   610k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 64.6k, False: 545k]
  ------------------
 3925|   610k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  64.6k|            digits_count += ranges::distance(it, *r);
 3927|  64.6k|            it = *r;
 3928|  64.6k|        }
 3929|       |
 3930|   610k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 610k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   610k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   610k|        return it;
 3938|   610k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.23M|    {
 3789|  1.23M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.23M]
  |  |  |  Branch (859:45): [True: 0, False: 1.23M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.23M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.23M|        return read_while1_code_unit(
 3798|  1.23M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.23M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.23M|    {
  754|  1.23M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  6.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.39M|              cvref<T> obj = *get<T>(fn);
  745|  6.39M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.39M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.39M|              }
  748|  6.39M|              else {
  749|  6.39M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.39M|              }
  751|  6.39M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  6.39M|    {
  684|  6.39M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.39M|            return static_cast<T*>(s.m_cp);
  686|  6.39M|        }
  687|  6.39M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.39M|            return static_cast<T*>(s.m_p);
  689|  6.39M|        }
  690|  6.39M|        else {
  691|  6.39M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.39M|        }
  693|  6.39M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  6.39M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.23M|        {
  662|  1.23M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  2.11M|    {
 3876|  2.11M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 252k, False: 1.86M]
  ------------------
 3877|   252k|            auto beg_exp_it = range.begin();
 3878|   252k|            auto it = *r;
 3879|       |
 3880|   252k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 251k, False: 512]
  ------------------
 3881|   252k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   251k|                it = r_sign->first;
 3883|   251k|            }
 3884|       |
 3885|   252k|            if (auto r_exp = read_while1_code_unit(
 3886|   252k|                    ranges::subrange{it, range.end()},
 3887|   252k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   252k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.01k, False: 249k]
  |  |  ------------------
  ------------------
 3889|  3.01k|                it = beg_exp_it;
 3890|  3.01k|            }
 3891|   249k|            else {
 3892|   249k|                it = *r_exp;
 3893|   249k|            }
 3894|       |
 3895|   252k|            return it;
 3896|   252k|        }
 3897|  1.86M|        return range.begin();
 3898|  2.11M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   252k|    {
  754|   252k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   820k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   820k|              cvref<T> obj = *get<T>(fn);
  745|   820k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   820k|                  obj(static_cast<decltype(args)>(args)...);
  747|   820k|              }
  748|   820k|              else {
  749|   820k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   820k|              }
  751|   820k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   820k|    {
  684|   820k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   820k|            return static_cast<T*>(s.m_cp);
  686|   820k|        }
  687|   820k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   820k|            return static_cast<T*>(s.m_p);
  689|   820k|        }
  690|   820k|        else {
  691|   820k|            return reinterpret_cast<T*>(s.m_fp);
  692|   820k|        }
  693|   820k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   820k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   252k|        {
  662|   252k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.77M|    {
 3944|  1.77M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.77M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.55M, False: 225k]
  |  Branch (3945:50): [True: 32.4k, False: 1.52M]
  ------------------
 3946|       |
 3947|  1.77M|        auto it = ranges::begin(range);
 3948|  1.77M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.77M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.77M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.3k, False: 1.71M]
  |  |  ------------------
  ------------------
 3952|  60.3k|            return r.transform_error(
 3953|  60.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  60.3k|                                              "Invalid floating-point value"));
 3955|  60.3k|        }
 3956|  1.71M|        else {
 3957|  1.71M|            digits_count += ranges::distance(it, *r);
 3958|  1.71M|            it = *r;
 3959|  1.71M|        }
 3960|       |
 3961|  1.71M|        m_integral_part_length = digits_count;
 3962|  1.71M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 294k, False: 1.42M]
  ------------------
 3963|  1.71M|                                             m_locale_options.decimal_point)) {
 3964|   294k|            it = *r;
 3965|   294k|        }
 3966|       |
 3967|  1.71M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 251k, False: 1.46M]
  ------------------
 3968|  1.71M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   251k|            digits_count += ranges::distance(it, *r);
 3970|   251k|            it = *r;
 3971|   251k|        }
 3972|       |
 3973|  1.71M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.71M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.71M|        auto beg_exp_it = it;
 3979|  1.71M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.50M, False: 208k]
  ------------------
 3980|  1.50M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.50M|        }
 3982|  1.71M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 31.4k, False: 1.68M]
  |  Branch (3982:29): [True: 17.0k, False: 14.4k]
  ------------------
 3983|  17.0k|            return unexpected_scan_error(
 3984|  17.0k|                scan_error::invalid_scanned_value,
 3985|  17.0k|                "No exponent given to scientific float");
 3986|  17.0k|        }
 3987|       |
 3988|  1.70M|        m_kind =
 3989|  1.70M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.45M, False: 248k]
  ------------------
 3990|       |
 3991|  1.70M|        return it;
 3992|  1.71M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  3.49M|    {
 3774|  3.49M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.49M]
  |  |  |  Branch (859:45): [True: 0, False: 3.49M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  3.49M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  3.49M|        return read_while1_code_unit(
 3783|  3.49M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  3.49M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.49M|    {
  754|  3.49M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  20.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.1M|              cvref<T> obj = *get<T>(fn);
  745|  20.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.1M|              }
  748|  20.1M|              else {
  749|  20.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.1M|              }
  751|  20.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  20.1M|    {
  684|  20.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.1M|            return static_cast<T*>(s.m_cp);
  686|  20.1M|        }
  687|  20.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.1M|            return static_cast<T*>(s.m_p);
  689|  20.1M|        }
  690|  20.1M|        else {
  691|  20.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.1M|        }
  693|  20.1M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  20.1M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.49M|        {
  662|  3.49M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.31M|    {
 1577|  2.31M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.31M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   162k|        {
  662|   162k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   415k|    {
  754|   415k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   415k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   415k|              cvref<T> obj = *get<T>(fn);
  745|   415k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   415k|                  obj(static_cast<decltype(args)>(args)...);
  747|   415k|              }
  748|   415k|              else {
  749|   415k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   415k|              }
  751|   415k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   415k|    {
  684|   415k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   415k|            return static_cast<T*>(s.m_cp);
  686|   415k|        }
  687|   415k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   415k|            return static_cast<T*>(s.m_p);
  689|   415k|        }
  690|   415k|        else {
  691|   415k|            return reinterpret_cast<T*>(s.m_fp);
  692|   415k|        }
  693|   415k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   415k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   415k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   415k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   415k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  2.01M|    {
 3665|  2.01M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.01M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.01M|        return read_source_impl(range);
 3671|  2.01M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   415k|        {
  662|   415k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   556k|    {
 4170|   556k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   556k|#if !SCN_DISABLE_LOCALE
 4173|   556k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 156k, False: 400k]
  ------------------
 4174|   156k|            return read_impl<Range>(
 4175|   156k|                range, rd,
 4176|   156k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   156k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   156k|                },
 4179|   156k|                value, loc);
 4180|   156k|        }
 4181|   400k|#endif
 4182|       |
 4183|   400k|        return read_impl<Range>(
 4184|   400k|            range, rd,
 4185|   400k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   400k|                return r.read_source(SCN_FWD(args)...);
 4187|   400k|            },
 4188|   400k|            value);
 4189|   556k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   791k|    {
 4206|   791k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   791k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   791k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 774k]
  |  |  ------------------
  ------------------
 4208|  16.5k|            return unexpected(r.error());
 4209|  16.5k|        }
 4210|       |
 4211|   774k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   774k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   774k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   774k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   774k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.5k, False: 755k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.5k|    }                                                  \
  |  |  |  | 3667|   774k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   755k|        return ranges::next(range.begin(), n);
 4213|   774k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.51M|    {
  763|  2.51M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.51M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   156k|    {
  754|   156k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|   156k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   156k|                  obj(static_cast<decltype(args)>(args)...);
  747|   156k|              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   156k|    {
  684|   156k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   156k|            return static_cast<T*>(s.m_cp);
  686|   156k|        }
  687|   156k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   156k|            return static_cast<T*>(s.m_p);
  689|   156k|        }
  690|   156k|        else {
  691|   156k|            return reinterpret_cast<T*>(s.m_fp);
  692|   156k|        }
  693|   156k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   156k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   156k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   156k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   505k|    {
 3679|   505k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   505k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   505k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 505k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   505k|        return read_source_impl(range);
 3685|   505k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  2.51M|    {
 3705|  2.51M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.51M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.51M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.51M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.51M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.51M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.51M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.51M|        auto it = sign_result.first;
 3708|  2.51M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.51M|        auto digits_begin = it;
 3711|  2.51M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.51M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.51M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.51M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  5.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.51M]
  |  |  |  Branch (859:45): [True: 0, False: 2.51M]
  |  |  |  Branch (859:45): [True: 0, False: 2.51M]
  |  |  ------------------
  ------------------
 3715|  2.51M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  2.51M|            else {
 3724|  2.51M|                auto cb = [&](const auto& rr)
 3725|  2.51M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.51M|                    auto res = read_all(rr);
 3727|  2.51M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.51M|                        return unexpected_scan_error(
 3729|  2.51M|                            scan_error::invalid_scanned_value,
 3730|  2.51M|                            "Invalid float value");
 3731|  2.51M|                    }
 3732|  2.51M|                    return res;
 3733|  2.51M|                };
 3734|  2.51M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|  2.51M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.51M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 51.4k, False: 2.46M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  51.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  51.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  51.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  51.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  51.4k|    }                                                  \
  |  | 3667|  2.51M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.46M|            }
 3736|  2.51M|        }
 3737|  2.46M|        else {
 3738|  2.46M|            SCN_TRY_ASSIGN(
 3739|  2.46M|                it,
 3740|  2.46M|                do_read_source_impl(
 3741|  2.46M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.46M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.46M|        }
 3744|       |
 3745|  2.46M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.46M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.43M, False: 22.4k]
  |  Branch (3747:48): [True: 2.42M, False: 16.2k]
  ------------------
 3748|  2.46M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.32M, False: 93.3k]
  ------------------
 3749|  2.46M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.32M, False: 2.65k]
  ------------------
 3750|  2.32M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.32M|        }
 3752|       |
 3753|  2.46M|        handle_separators();
 3754|       |
 3755|  2.46M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.46M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.46M|        return it;
 3768|  2.46M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  2.51M|    {
 3811|  2.51M|        auto it = range.begin();
 3812|  2.51M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.47M, False: 38.6k]
  ------------------
 3813|  2.47M|            return unexpected(r.error());
 3814|  2.47M|        }
 3815|  38.6k|        else {
 3816|  38.6k|            it = *r;
 3817|  38.6k|        }
 3818|       |
 3819|  38.6k|        if (auto r = read_matching_string_classic_nocase(
 3820|  38.6k|                ranges::subrange{it, range.end()}, "inity");
 3821|  38.6k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.4k, False: 16.2k]
  ------------------
 3822|  22.4k|            m_kind = float_kind::inf_short;
 3823|  22.4k|            return it;
 3824|  22.4k|        }
 3825|  16.2k|        else {
 3826|  16.2k|            m_kind = float_kind::inf_long;
 3827|  16.2k|            return *r;
 3828|  16.2k|        }
 3829|  38.6k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  2.47M|    {
 3834|  2.47M|        auto it = range.begin();
 3835|  2.47M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.37M, False: 97.1k]
  ------------------
 3836|  2.37M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.37M|                scan_error::invalid_scanned_value,
 3838|  2.37M|                "Invalid floating-point NaN value"));
 3839|  2.37M|        }
 3840|  97.1k|        else {
 3841|  97.1k|            it = *r;
 3842|  97.1k|        }
 3843|       |
 3844|  97.1k|        if (auto r =
 3845|  97.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  97.1k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 93.3k, False: 3.79k]
  ------------------
 3847|  93.3k|            m_kind = float_kind::nan_simple;
 3848|  93.3k|            return it;
 3849|  93.3k|        }
 3850|  3.79k|        else {
 3851|  3.79k|            it = *r;
 3852|  3.79k|        }
 3853|       |
 3854|  3.79k|        auto payload_beg_it = it;
 3855|  3.79k|        it = read_while_code_unit(
 3856|  3.79k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.79k|                return is_ascii_char(ch) &&
 3858|  3.79k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.79k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.79k|            });
 3861|  3.79k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.79k|        m_kind = float_kind::nan_with_payload;
 3864|  3.79k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.13k]
  ------------------
 3865|  3.79k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.13k|                                     "Invalid floating-point NaN payload");
 3870|  3.79k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.79k|    {
  754|  3.79k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.7k|              cvref<T> obj = *get<T>(fn);
  745|  23.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.7k|              }
  748|  23.7k|              else {
  749|  23.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.7k|              }
  751|  23.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.7k|    {
  684|  23.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.7k|            return static_cast<T*>(s.m_cp);
  686|  23.7k|        }
  687|  23.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.7k|            return static_cast<T*>(s.m_p);
  689|  23.7k|        }
  690|  23.7k|        else {
  691|  23.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.7k|        }
  693|  23.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  23.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.6k, False: 185]
  ------------------
 3858|  23.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.8k, False: 2.76k]
  |  Branch (3858:39): [True: 13.0k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 8.00k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  23.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.84k]
  ------------------
 3860|  23.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.79k|        {
  662|  3.79k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.72M|    {
 3804|  1.72M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.72M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.34M|{
 1996|  1.34M|    auto it = read_while_code_unit(range, pred);
 1997|  1.34M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 551k, False: 794k]
  ------------------
 1998|   551k|        return unexpected(parse_error::error);
 1999|   551k|    }
 2000|   794k|    return it;
 2001|  1.34M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   416k|    {
 3876|   416k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 80.8k, False: 335k]
  ------------------
 3877|  80.8k|            auto beg_exp_it = range.begin();
 3878|  80.8k|            auto it = *r;
 3879|       |
 3880|  80.8k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 80.7k, False: 162]
  ------------------
 3881|  80.8k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  80.7k|                it = r_sign->first;
 3883|  80.7k|            }
 3884|       |
 3885|  80.8k|            if (auto r_exp = read_while1_code_unit(
 3886|  80.8k|                    ranges::subrange{it, range.end()},
 3887|  80.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  80.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 79.7k]
  |  |  ------------------
  ------------------
 3889|  1.07k|                it = beg_exp_it;
 3890|  1.07k|            }
 3891|  79.7k|            else {
 3892|  79.7k|                it = *r_exp;
 3893|  79.7k|            }
 3894|       |
 3895|  80.8k|            return it;
 3896|  80.8k|        }
 3897|   335k|        return range.begin();
 3898|   416k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  80.8k|    {
  754|  80.8k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   254k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   254k|              cvref<T> obj = *get<T>(fn);
  745|   254k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   254k|                  obj(static_cast<decltype(args)>(args)...);
  747|   254k|              }
  748|   254k|              else {
  749|   254k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   254k|              }
  751|   254k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   254k|    {
  684|   254k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   254k|            return static_cast<T*>(s.m_cp);
  686|   254k|        }
  687|   254k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   254k|            return static_cast<T*>(s.m_p);
  689|   254k|        }
  690|   254k|        else {
  691|   254k|            return reinterpret_cast<T*>(s.m_fp);
  692|   254k|        }
  693|   254k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   254k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  80.8k|        {
  662|  80.8k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   648k|    {
 3944|   648k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   648k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 431k, False: 217k]
  |  Branch (3945:50): [True: 32.6k, False: 398k]
  ------------------
 3946|       |
 3947|   648k|        auto it = ranges::begin(range);
 3948|   648k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   648k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   648k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.9k, False: 616k]
  |  |  ------------------
  ------------------
 3952|  31.9k|            return r.transform_error(
 3953|  31.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  31.9k|                                              "Invalid floating-point value"));
 3955|  31.9k|        }
 3956|   616k|        else {
 3957|   616k|            digits_count += ranges::distance(it, *r);
 3958|   616k|            it = *r;
 3959|   616k|        }
 3960|       |
 3961|   616k|        m_integral_part_length = digits_count;
 3962|   616k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 113k, False: 503k]
  ------------------
 3963|   616k|                                             m_locale_options.decimal_point)) {
 3964|   113k|            it = *r;
 3965|   113k|        }
 3966|       |
 3967|   616k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 98.0k, False: 518k]
  ------------------
 3968|   616k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  98.0k|            digits_count += ranges::distance(it, *r);
 3970|  98.0k|            it = *r;
 3971|  98.0k|        }
 3972|       |
 3973|   616k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   616k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 616k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   616k|        auto beg_exp_it = it;
 3979|   616k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 416k, False: 199k]
  ------------------
 3980|   416k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   416k|        }
 3982|   616k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 31.4k, False: 584k]
  |  Branch (3982:29): [True: 17.0k, False: 14.3k]
  ------------------
 3983|  17.0k|            return unexpected_scan_error(
 3984|  17.0k|                scan_error::invalid_scanned_value,
 3985|  17.0k|                "No exponent given to scientific float");
 3986|  17.0k|        }
 3987|       |
 3988|   599k|        m_kind =
 3989|   599k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 519k, False: 79.7k]
  ------------------
 3990|       |
 3991|   599k|        return it;
 3992|   616k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.26M|    {
 3774|  1.26M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.26M]
  |  |  |  Branch (859:45): [True: 0, False: 1.26M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.26M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.26M|        return read_while1_code_unit(
 3783|  1.26M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.26M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.26M|    {
  754|  1.26M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  7.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.71M|              cvref<T> obj = *get<T>(fn);
  745|  7.71M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.71M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.71M|              }
  748|  7.71M|              else {
  749|  7.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.71M|              }
  751|  7.71M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  7.71M|    {
  684|  7.71M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.71M|            return static_cast<T*>(s.m_cp);
  686|  7.71M|        }
  687|  7.71M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.71M|            return static_cast<T*>(s.m_p);
  689|  7.71M|        }
  690|  7.71M|        else {
  691|  7.71M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.71M|        }
  693|  7.71M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  7.71M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.26M|        {
  662|  1.26M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  2.51M|    {
 4000|  2.51M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.51M|        const bool allowed_nonhex =
 4002|  2.51M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.51M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.51M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.47M, False: 38.6k]
  |  Branch (4005:45): [True: 0, False: 2.47M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.51M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 38.6k, False: 2.47M]
  ------------------
 4011|  38.6k|            return *r;
 4012|  38.6k|        }
 4013|       |
 4014|  2.47M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.37M, False: 96.0k]
  |  Branch (4014:45): [True: 1.13k, False: 2.37M]
  ------------------
 4015|  1.13k|            return unexpected(r.error());
 4016|  1.13k|        }
 4017|  2.47M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 96.0k, False: 2.37M]
  ------------------
 4018|  96.0k|            return *r;
 4019|  96.0k|        }
 4020|       |
 4021|  2.37M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.72M, False: 648k]
  |  Branch (4021:28): [True: 534k, False: 1.19M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   534k|            auto it = range.begin();
 4025|       |
 4026|   534k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 27.3k, False: 507k]
  ------------------
 4027|  27.3k|                m_kind = float_kind::hex_with_prefix;
 4028|  27.3k|                it = *r;
 4029|  27.3k|            }
 4030|   507k|            else {
 4031|   507k|                m_kind = float_kind::hex_without_prefix;
 4032|   507k|            }
 4033|       |
 4034|   534k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   534k|        }
 4036|  1.84M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 648k, False: 1.19M]
  |  Branch (4036:29): [True: 648k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   648k|            m_kind = float_kind::generic;
 4040|   648k|            return read_regular_float(range);
 4041|   648k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.19M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.1k, False: 1.12M]
  |  |  ------------------
  ------------------
 4047|  67.1k|            m_kind = float_kind::hex_with_prefix;
 4048|  67.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  67.1k|        }
 4050|       |
 4051|  1.12M|        m_kind = float_kind::generic;
 4052|  1.12M|        return read_regular(range);
 4053|  1.19M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.72M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.72M|                    auto res = read_all(rr);
 3727|  1.72M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.28k, False: 1.72M]
  |  |  ------------------
  ------------------
 3728|  1.28k|                        return unexpected_scan_error(
 3729|  1.28k|                            scan_error::invalid_scanned_value,
 3730|  1.28k|                            "Invalid float value");
 3731|  1.28k|                    }
 3732|  1.72M|                    return res;
 3733|  1.72M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.72M|{
 1839|  1.72M|    return ranges::next(range.begin(), range.end());
 1840|  1.72M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.72M|    {
  313|  1.72M|        ranges::advance(x, bound);
  314|  1.72M|        return x;
  315|  1.72M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.72M|    {
  275|  1.72M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.72M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.72M|    {
  190|  1.72M|        i = std::move(bound);
  191|  1.72M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.33M|    {
 1577|  2.33M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.33M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.33M|    {
 1621|  2.33M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.33M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.33M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.33M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.33M|            m_storage.reset();
 1627|  2.33M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.33M|        }
 1629|  2.33M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.33M|                                          std::basic_string<CharT>>) {
 1631|  2.33M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.33M|            m_view = string_view_type{*m_storage};
 1633|  2.33M|        }
 1634|  2.33M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.33M|                                          typename detail::basic_scan_buffer<
 1636|  2.33M|                                              value_t>::forward_iterator> &&
 1637|  2.33M|                           ranges::common_range<Range>) {
 1638|  2.33M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.33M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.33M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.33M|                             detail::to_address(end_seg.end()))) {
 1642|  2.33M|                auto& str = m_storage.emplace();
 1643|  2.33M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.33M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.33M|                m_view = string_view_type{str};
 1646|  2.33M|                return;
 1647|  2.33M|            }
 1648|       |
 1649|  2.33M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.33M|                                                            end_seg.data());
 1651|  2.33M|            m_storage.reset();
 1652|  2.33M|        }
 1653|  2.33M|        else {
 1654|  2.33M|            auto& str = m_storage.emplace();
 1655|  2.33M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.33M|                str.reserve(range.size());
 1657|  2.33M|            }
 1658|  2.33M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.33M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.33M|                          std::back_inserter(str));
 1661|  2.33M|            }
 1662|  2.33M|            else {
 1663|  2.33M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.33M|                     ++it) {
 1665|  2.33M|                    str.push_back(*it);
 1666|  2.33M|                }
 1667|  2.33M|            }
 1668|  2.33M|            m_view = string_view_type{str};
 1669|  2.33M|        }
 1670|  2.33M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   156k|        {
  662|   156k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   400k|    {
  754|   400k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   400k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   400k|              cvref<T> obj = *get<T>(fn);
  745|   400k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   400k|                  obj(static_cast<decltype(args)>(args)...);
  747|   400k|              }
  748|   400k|              else {
  749|   400k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   400k|              }
  751|   400k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   400k|    {
  684|   400k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   400k|            return static_cast<T*>(s.m_cp);
  686|   400k|        }
  687|   400k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   400k|            return static_cast<T*>(s.m_p);
  689|   400k|        }
  690|   400k|        else {
  691|   400k|            return reinterpret_cast<T*>(s.m_fp);
  692|   400k|        }
  693|   400k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   400k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   400k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   400k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  2.00M|    {
 3665|  2.00M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  2.00M|        return read_source_impl(range);
 3671|  2.00M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   400k|        {
  662|   400k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   626k|    {
 6178|   626k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   626k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   626k|            auto rd = make_reader<T, char_type>();
 6183|   626k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   626k|                return unexpected(e);
 6185|   626k|            }
 6186|       |
 6187|   626k|            return impl(rd, range, value);
 6188|   626k|        }
 6189|   626k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   626k|            auto rd = make_reader<T, char_type>();
 6191|   626k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   626k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 626k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   626k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 626k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   626k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   626k|                return impl(rd, range, value);
 6198|   626k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   626k|        else {
 6206|   626k|            SCN_EXPECT(false);
 6207|   626k|            SCN_UNREACHABLE;
 6208|   626k|        }
 6209|   626k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   626k|    {
 6120|   626k|        const bool need_skipped_width =
 6121|   626k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 626k]
  |  Branch (6121:33): [True: 0, False: 626k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   626k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   626k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   626k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   626k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   626k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.45k, False: 618k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.45k|    }                                                  \
  |  |  |  | 3667|   626k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   618k|        auto [it, prefix_width] = prefix_result;
 6126|   618k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   618k|        std::ptrdiff_t value_width = 0;
 6130|   618k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 618k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   618k|        else {
 6146|   618k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   618k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   618k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.5k, False: 593k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  25.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  25.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  25.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  25.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  25.5k|    }                                                  \
  |  | 3667|   618k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   593k|                                             specs, value, loc));
 6148|       |
 6149|   593k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 593k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   593k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   593k|        std::ptrdiff_t postfix_width = 0;
 6158|   593k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 587k, False: 5.76k]
  ------------------
 6159|   587k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   587k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   587k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   587k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   587k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 587k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   587k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   587k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   587k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   587k|                                 value_width));
 6163|   587k|            std::tie(it, postfix_width) = postfix_result;
 6164|   587k|        }
 6165|       |
 6166|   593k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   593k|                                                 value_width, postfix_width);
 6168|   593k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 593k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   593k|        return it;
 6173|   593k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.67M|    {
 3691|  1.67M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.67M|        const std::ptrdiff_t sign_len =
 3694|  1.67M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 476k, False: 1.19M]
  ------------------
 3695|       |
 3696|  1.67M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.4k, False: 1.65M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.4k|    }                                                  \
  |  |  |  | 3667|  1.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.65M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.67M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   618k|    {
 4170|   618k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   618k|#if !SCN_DISABLE_LOCALE
 4173|   618k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 179k, False: 438k]
  ------------------
 4174|   179k|            return read_impl<Range>(
 4175|   179k|                range, rd,
 4176|   179k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   179k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   179k|                },
 4179|   179k|                value, loc);
 4180|   179k|        }
 4181|   438k|#endif
 4182|       |
 4183|   438k|        return read_impl<Range>(
 4184|   438k|            range, rd,
 4185|   438k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   438k|                return r.read_source(SCN_FWD(args)...);
 4187|   438k|            },
 4188|   438k|            value);
 4189|   618k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   863k|    {
 4206|   863k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   863k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   863k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.2k, False: 833k]
  |  |  ------------------
  ------------------
 4208|  30.2k|            return unexpected(r.error());
 4209|  30.2k|        }
 4210|       |
 4211|   833k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   833k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   833k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   833k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   833k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 830k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.68k|    }                                                  \
  |  |  |  | 3667|   833k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   830k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   830k|        return ranges::next(range.begin(), n);
 4213|   833k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   179k|    {
  754|   179k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|   179k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   179k|                  obj(static_cast<decltype(args)>(args)...);
  747|   179k|              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   179k|    {
  684|   179k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   179k|            return static_cast<T*>(s.m_cp);
  686|   179k|        }
  687|   179k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   179k|            return static_cast<T*>(s.m_p);
  689|   179k|        }
  690|   179k|        else {
  691|   179k|            return reinterpret_cast<T*>(s.m_fp);
  692|   179k|        }
  693|   179k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   179k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   179k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   179k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   179k|        {
  662|   179k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   438k|    {
  754|   438k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   438k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   438k|              cvref<T> obj = *get<T>(fn);
  745|   438k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   438k|                  obj(static_cast<decltype(args)>(args)...);
  747|   438k|              }
  748|   438k|              else {
  749|   438k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   438k|              }
  751|   438k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   438k|    {
  684|   438k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   438k|            return static_cast<T*>(s.m_cp);
  686|   438k|        }
  687|   438k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   438k|            return static_cast<T*>(s.m_p);
  689|   438k|        }
  690|   438k|        else {
  691|   438k|            return reinterpret_cast<T*>(s.m_fp);
  692|   438k|        }
  693|   438k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   438k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   438k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   438k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   438k|        {
  662|   438k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   595k|    {
 4170|   595k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   595k|#if !SCN_DISABLE_LOCALE
 4173|   595k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 172k, False: 422k]
  ------------------
 4174|   172k|            return read_impl<Range>(
 4175|   172k|                range, rd,
 4176|   172k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   172k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   172k|                },
 4179|   172k|                value, loc);
 4180|   172k|        }
 4181|   422k|#endif
 4182|       |
 4183|   422k|        return read_impl<Range>(
 4184|   422k|            range, rd,
 4185|   422k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   422k|                return r.read_source(SCN_FWD(args)...);
 4187|   422k|            },
 4188|   422k|            value);
 4189|   595k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   855k|    {
 4206|   855k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   855k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   855k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 838k]
  |  |  ------------------
  ------------------
 4208|  17.2k|            return unexpected(r.error());
 4209|  17.2k|        }
 4210|       |
 4211|   838k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   838k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   838k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   838k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 821k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  16.7k|    }                                                  \
  |  |  |  | 3667|   838k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   821k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   821k|        return ranges::next(range.begin(), n);
 4213|   838k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   172k|    {
  754|   172k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|   172k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   172k|                  obj(static_cast<decltype(args)>(args)...);
  747|   172k|              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   172k|    {
  684|   172k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   172k|            return static_cast<T*>(s.m_cp);
  686|   172k|        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   172k|            return static_cast<T*>(s.m_p);
  689|   172k|        }
  690|   172k|        else {
  691|   172k|            return reinterpret_cast<T*>(s.m_fp);
  692|   172k|        }
  693|   172k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   172k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   172k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   172k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   172k|        {
  662|   172k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   422k|    {
  754|   422k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   422k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   422k|              cvref<T> obj = *get<T>(fn);
  745|   422k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   422k|                  obj(static_cast<decltype(args)>(args)...);
  747|   422k|              }
  748|   422k|              else {
  749|   422k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   422k|              }
  751|   422k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   422k|    {
  684|   422k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   422k|            return static_cast<T*>(s.m_cp);
  686|   422k|        }
  687|   422k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   422k|            return static_cast<T*>(s.m_p);
  689|   422k|        }
  690|   422k|        else {
  691|   422k|            return reinterpret_cast<T*>(s.m_fp);
  692|   422k|        }
  693|   422k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   422k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   422k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   422k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   422k|        {
  662|   422k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   633k|    {
 6178|   633k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   633k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   633k|            auto rd = make_reader<T, char_type>();
 6183|   633k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   633k|                return unexpected(e);
 6185|   633k|            }
 6186|       |
 6187|   633k|            return impl(rd, range, value);
 6188|   633k|        }
 6189|   633k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   633k|            auto rd = make_reader<T, char_type>();
 6191|   633k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 633k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   633k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 633k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   633k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   633k|                return impl(rd, range, value);
 6198|   633k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   633k|        else {
 6206|   633k|            SCN_EXPECT(false);
 6207|   633k|            SCN_UNREACHABLE;
 6208|   633k|        }
 6209|   633k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   633k|    {
 6120|   633k|        const bool need_skipped_width =
 6121|   633k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 633k]
  |  Branch (6121:33): [True: 0, False: 633k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   633k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   633k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   633k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   633k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.89k, False: 625k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.89k|    }                                                  \
  |  |  |  | 3667|   633k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   625k|        auto [it, prefix_width] = prefix_result;
 6126|   625k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   625k|        std::ptrdiff_t value_width = 0;
 6130|   625k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 625k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   625k|        else {
 6146|   625k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   625k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   625k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.0k, False: 600k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  25.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  25.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  25.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  25.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  25.0k|    }                                                  \
  |  | 3667|   625k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   600k|                                             specs, value, loc));
 6148|       |
 6149|   600k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 600k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   600k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   600k|        std::ptrdiff_t postfix_width = 0;
 6158|   600k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 594k, False: 6.12k]
  ------------------
 6159|   594k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   594k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   594k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   594k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   594k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 594k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   594k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   594k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   594k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   594k|                                 value_width));
 6163|   594k|            std::tie(it, postfix_width) = postfix_result;
 6164|   594k|        }
 6165|       |
 6166|   600k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   600k|                                                 value_width, postfix_width);
 6168|   600k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 600k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   600k|        return it;
 6173|   600k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.69M|    {
 3691|  1.69M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.69M|        const std::ptrdiff_t sign_len =
 3694|  1.69M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 488k, False: 1.20M]
  ------------------
 3695|       |
 3696|  1.69M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.69M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.69M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.69M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 1.67M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  16.6k|    }                                                  \
  |  |  |  | 3667|  1.69M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.67M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.69M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   625k|    {
 4170|   625k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   625k|#if !SCN_DISABLE_LOCALE
 4173|   625k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 182k, False: 442k]
  ------------------
 4174|   182k|            return read_impl<Range>(
 4175|   182k|                range, rd,
 4176|   182k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   182k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   182k|                },
 4179|   182k|                value, loc);
 4180|   182k|        }
 4181|   442k|#endif
 4182|       |
 4183|   442k|        return read_impl<Range>(
 4184|   442k|            range, rd,
 4185|   442k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   442k|                return r.read_source(SCN_FWD(args)...);
 4187|   442k|            },
 4188|   442k|            value);
 4189|   625k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   873k|    {
 4206|   873k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   873k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 841k]
  |  |  ------------------
  ------------------
 4208|  31.5k|            return unexpected(r.error());
 4209|  31.5k|        }
 4210|       |
 4211|   841k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   841k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   841k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   841k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   841k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 838, False: 840k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    838|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    838|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    838|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    838|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    838|    }                                                  \
  |  |  |  | 3667|   841k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   840k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   840k|        return ranges::next(range.begin(), n);
 4213|   841k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   182k|    {
  754|   182k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   182k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   182k|              cvref<T> obj = *get<T>(fn);
  745|   182k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   182k|                  obj(static_cast<decltype(args)>(args)...);
  747|   182k|              }
  748|   182k|              else {
  749|   182k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   182k|              }
  751|   182k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   182k|    {
  684|   182k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   182k|            return static_cast<T*>(s.m_cp);
  686|   182k|        }
  687|   182k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   182k|            return static_cast<T*>(s.m_p);
  689|   182k|        }
  690|   182k|        else {
  691|   182k|            return reinterpret_cast<T*>(s.m_fp);
  692|   182k|        }
  693|   182k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   182k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   182k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   182k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   182k|        {
  662|   182k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   442k|    {
  754|   442k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   442k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   442k|              cvref<T> obj = *get<T>(fn);
  745|   442k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   442k|                  obj(static_cast<decltype(args)>(args)...);
  747|   442k|              }
  748|   442k|              else {
  749|   442k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   442k|              }
  751|   442k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   442k|    {
  684|   442k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   442k|            return static_cast<T*>(s.m_cp);
  686|   442k|        }
  687|   442k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   442k|            return static_cast<T*>(s.m_p);
  689|   442k|        }
  690|   442k|        else {
  691|   442k|            return reinterpret_cast<T*>(s.m_fp);
  692|   442k|        }
  693|   442k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   442k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   442k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   442k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   442k|        {
  662|   442k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   602k|    {
 4170|   602k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   602k|#if !SCN_DISABLE_LOCALE
 4173|   602k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 175k, False: 426k]
  ------------------
 4174|   175k|            return read_impl<Range>(
 4175|   175k|                range, rd,
 4176|   175k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   175k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   175k|                },
 4179|   175k|                value, loc);
 4180|   175k|        }
 4181|   426k|#endif
 4182|       |
 4183|   426k|        return read_impl<Range>(
 4184|   426k|            range, rd,
 4185|   426k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   426k|                return r.read_source(SCN_FWD(args)...);
 4187|   426k|            },
 4188|   426k|            value);
 4189|   602k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   866k|    {
 4206|   866k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   866k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.6k, False: 848k]
  |  |  ------------------
  ------------------
 4208|  17.6k|            return unexpected(r.error());
 4209|  17.6k|        }
 4210|       |
 4211|   848k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   848k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   848k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   848k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   848k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.8k, False: 832k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.8k|    }                                                  \
  |  |  |  | 3667|   848k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   832k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   832k|        return ranges::next(range.begin(), n);
 4213|   848k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   175k|    {
  754|   175k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   175k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   175k|              cvref<T> obj = *get<T>(fn);
  745|   175k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   175k|                  obj(static_cast<decltype(args)>(args)...);
  747|   175k|              }
  748|   175k|              else {
  749|   175k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   175k|              }
  751|   175k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   175k|    {
  684|   175k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   175k|            return static_cast<T*>(s.m_cp);
  686|   175k|        }
  687|   175k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   175k|            return static_cast<T*>(s.m_p);
  689|   175k|        }
  690|   175k|        else {
  691|   175k|            return reinterpret_cast<T*>(s.m_fp);
  692|   175k|        }
  693|   175k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   175k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   175k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   175k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   175k|        {
  662|   175k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   426k|    {
  754|   426k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   426k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   426k|              cvref<T> obj = *get<T>(fn);
  745|   426k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   426k|                  obj(static_cast<decltype(args)>(args)...);
  747|   426k|              }
  748|   426k|              else {
  749|   426k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   426k|              }
  751|   426k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   426k|    {
  684|   426k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   426k|            return static_cast<T*>(s.m_cp);
  686|   426k|        }
  687|   426k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   426k|            return static_cast<T*>(s.m_p);
  689|   426k|        }
  690|   426k|        else {
  691|   426k|            return reinterpret_cast<T*>(s.m_fp);
  692|   426k|        }
  693|   426k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   426k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   426k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   426k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   426k|        {
  662|   426k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.55M|{
 1039|  2.55M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.55M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.55M|        return r;
 1042|  2.55M|    }
 1043|  2.55M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.55M|                           ranges::const_iterator_t<Range>,
 1045|  2.55M|                           typename detail::basic_scan_buffer<
 1046|  2.55M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.55M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.55M|            auto seg = r.begin().contiguous_segment();
 1049|  2.55M|            auto dist =
 1050|  2.55M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.55M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.55M|        }
 1053|  2.55M|        else {
 1054|  2.55M|            return r.begin().contiguous_segment();
 1055|  2.55M|        }
 1056|  2.55M|    }
 1057|  2.55M|    else {
 1058|  2.55M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.55M|    }
 1060|  2.55M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.25M|{
 2061|  2.25M|    auto it = range.begin();
 2062|  4.31M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.29M, False: 23.0k]
  ------------------
 2063|  4.29M|        const auto val =
 2064|  4.29M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.29M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.28M, False: 9.08k]
  |  |  ------------------
  ------------------
 2066|  4.28M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.28M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.28M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.23M, False: 2.05M]
  ------------------
 2069|  2.23M|                return it;
 2070|  2.23M|            }
 2071|  4.28M|        }
 2072|  2.06M|        it = val.iterator;
 2073|  2.06M|    }
 2074|       |
 2075|  23.0k|    return it;
 2076|  2.25M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  4.29M|{
 1899|  4.29M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.29M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.29M|    auto it = range.begin();
 1903|  4.29M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.29M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.08k, False: 4.28M]
  |  |  ------------------
  ------------------
 1906|  9.08k|        ++it;
 1907|  9.08k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  9.08k|        return {it, {}};
 1909|  9.08k|    }
 1910|       |
 1911|  4.28M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.22M, False: 61.6k]
  ------------------
 1912|  4.22M|        ++it;
 1913|  4.22M|        return {it, string_type(1, *range.begin())};
 1914|  4.22M|    }
 1915|       |
 1916|  61.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  61.6k|    return {it, string_type{range.begin(), it}};
 1918|  4.28M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  9.08k|{
 1155|  9.08k|    auto it = input.begin();
 1156|  93.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 91.6k, False: 1.61k]
  ------------------
 1157|  91.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 7.47k, False: 84.2k]
  ------------------
 1158|  7.47k|            break;
 1159|  7.47k|        }
 1160|  91.6k|    }
 1161|  9.08k|    return it;
 1162|  9.08k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  61.6k|    {
  283|  61.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  61.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  61.6k|    {
  252|  61.6k|        constexpr iter_difference_t<I> zero{0};
  253|  61.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|   188k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 127k, False: 60.4k]
  |  Branch (255:30): [True: 126k, False: 1.14k]
  ------------------
  256|   126k|            ++i;
  257|   126k|            ++counter;
  258|   126k|        }
  259|       |
  260|  61.6k|        return counter;
  261|  61.6k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  4.29M|    {
 1890|  4.29M|        return !codepoint.empty();
 1891|  4.29M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.25M|{
 2082|  2.25M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.25M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.55M|{
 2951|  2.55M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.55M, False: 0]
  ------------------
 2952|  2.55M|        auto it = read_while_classic_space(range);
 2953|  2.55M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.55M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 2.53M]
  |  |  ------------------
  ------------------
 2955|  23.0k|            return unexpected(e);
 2956|  23.0k|        }
 2957|       |
 2958|  2.53M|        return it;
 2959|  2.55M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.55M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.55M|{
 2117|  2.55M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.55M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.55M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.55M|        auto buf = make_contiguous_buffer(range);
 2121|  2.55M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.55M|        return ranges::next(range.begin(),
 2123|  2.55M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.55M|    }
 2125|  2.55M|    else {
 2126|  2.55M|        auto it = range.begin();
 2127|       |
 2128|  2.55M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.55M|            auto seg = get_contiguous_beginning(range);
 2130|  2.55M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.55M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 305k, False: 2.25M]
  ------------------
 2132|   305k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   305k|            }
 2134|  2.25M|            ranges::advance(it, seg.size());
 2135|  2.25M|        }
 2136|       |
 2137|  2.25M|        return read_while_code_point(
 2138|  2.25M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.55M|    }
 2140|  2.55M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.25M|    {
  754|  2.25M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.28M|              cvref<T> obj = *get<T>(fn);
  745|  4.28M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.28M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.28M|              }
  748|  4.28M|              else {
  749|  4.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.28M|              }
  751|  4.28M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.28M|    {
  684|  4.28M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.28M|            return static_cast<T*>(s.m_cp);
  686|  4.28M|        }
  687|  4.28M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.28M|            return static_cast<T*>(s.m_p);
  689|  4.28M|        }
  690|  4.28M|        else {
  691|  4.28M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.28M|        }
  693|  4.28M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.28M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.25M|        {
  662|  2.25M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   329k|{
  981|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   329k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   329k|        return true;
  984|   329k|    }
  985|   329k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   329k|                           ranges::const_iterator_t<Range>,
  987|   329k|                           typename detail::basic_scan_buffer<
  988|   329k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   329k|        auto beg = r.begin();
  990|   329k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 329k, False: 0]
  ------------------
  991|   329k|            return false;
  992|   329k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   329k|    else {
 1006|   329k|        return false;
 1007|   329k|    }
 1008|   329k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   250k|    {
 6037|   250k|        const bool need_skipped_width =
 6038|   250k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 250k]
  |  Branch (6038:33): [True: 0, False: 250k]
  ------------------
 6039|   250k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   250k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 250k]
  ------------------
 6043|   250k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 250k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   250k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 250k, False: 0]
  |  Branch (6047:56): [True: 250k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   250k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 250k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   500k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.66k|    }                                                  \
  |  |  |  | 3667|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   500k|                            make_eof_scan_error));
 6058|       |
 6059|   500k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 249k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   249k|            return result_type{it, 0};
 6067|   500k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   250k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   405k|{
 1976|   405k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   405k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   405k|{
 1957|   405k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   405k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   405k|    }
 1960|   405k|    else {
 1961|   405k|        auto first = range.begin();
 1962|   490k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 489k, False: 1.22k]
  ------------------
 1963|   489k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 404k, False: 84.9k]
  ------------------
 1964|   404k|                return first;
 1965|   404k|            }
 1966|   489k|        }
 1967|  1.22k|        return first;
 1968|   405k|    }
 1969|   405k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  1.38M|    {
  763|  1.38M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.38M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   579k|    {
  754|   579k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   694k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   694k|              cvref<T> obj = *get<T>(fn);
  745|   694k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   694k|                  obj(static_cast<decltype(args)>(args)...);
  747|   694k|              }
  748|   694k|              else {
  749|   694k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   694k|              }
  751|   694k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   694k|    {
  684|   694k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   694k|            return static_cast<T*>(s.m_cp);
  686|   694k|        }
  687|   694k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   694k|            return static_cast<T*>(s.m_p);
  689|   694k|        }
  690|   694k|        else {
  691|   694k|            return reinterpret_cast<T*>(s.m_fp);
  692|   694k|        }
  693|   694k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   579k|        {
  662|   579k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   127k|    {
  108|   127k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   127k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   127k|    {
   94|   127k|        iter_difference_t<I> counter{0};
   95|   315k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 188k, False: 127k]
  ------------------
   96|   188k|            ++i;
   97|   188k|            ++counter;
   98|   188k|        }
   99|   127k|        return counter;
  100|   127k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   838k|{
 1857|   838k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   838k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   838k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   838k|        if (sz < count) {
 1862|   838k|            return unexpected(eof_error::eof);
 1863|   838k|        }
 1864|       |
 1865|   838k|        return ranges::next(range.begin(), count);
 1866|   838k|    }
 1867|   838k|    else {
 1868|   838k|        auto it = range.begin();
 1869|   838k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 482k, False: 356k]
  ------------------
 1870|   482k|            return ranges::next(it, count);
 1871|   482k|        }
 1872|       |
 1873|  1.34M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.03M, False: 305k]
  ------------------
 1874|  1.03M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 50.1k, False: 985k]
  ------------------
 1875|  50.1k|                return unexpected(eof_error::eof);
 1876|  50.1k|            }
 1877|  1.03M|        }
 1878|       |
 1879|   305k|        return it;
 1880|   356k|    }
 1881|   838k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   838k|{
 1095|   838k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   838k|        return r.size();
 1097|   838k|    }
 1098|   838k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   838k|                           ranges::const_iterator_t<Range>,
 1100|   838k|                           typename detail::basic_scan_buffer<
 1101|   838k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   838k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   838k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   838k|        }
 1105|   838k|        else {
 1106|   838k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 838k, False: 0]
  ------------------
 1107|   838k|                return static_cast<size_t>(
 1108|   838k|                    r.begin().parent()->chars_available() -
 1109|   838k|                    r.begin().position());
 1110|   838k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   838k|        }
 1113|   838k|    }
 1114|   838k|    else {
 1115|   838k|        return 0;
 1116|   838k|    }
 1117|   838k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   104k|    {
 1780|   104k|        auto stdloc = loc.get<std::locale>();
 1781|   104k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   104k|        grouping = numpunct.grouping();
 1783|   104k|        thousands_sep =
 1784|   104k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 104k]
  ------------------
 1785|   104k|        decimal_point = numpunct.decimal_point();
 1786|   104k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   104k|{
 1717|   104k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 104k, False: 0]
  ------------------
 1718|   104k|        return std::use_facet<Facet>(stdloc);
 1719|   104k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   104k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   467k|{
 1846|   467k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   467k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 855, False: 466k]
  |  |  ------------------
  ------------------
 1847|    855|        return unexpected(e);
 1848|    855|    }
 1849|       |
 1850|   466k|    return ranges::next(range.begin());
 1851|   467k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   875k|{
  950|   875k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   875k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.07k, False: 872k]
  |  |  ------------------
  ------------------
  951|  3.07k|        return eof_error::eof;
  952|  3.07k|    }
  953|   872k|    return eof_error::good;
  954|   875k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.27M|{
  944|  1.27M|    return is_range_eof(r.begin(), r.end());
  945|  1.27M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.27M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.27M|    {
  937|  1.27M|        return begin == end;
  938|  1.27M|    }
  939|  1.27M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   466k|    {
  296|   466k|        ++x;
  297|   466k|        return x;
  298|   466k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   330k|{
 3141|   330k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   330k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 330k, False: 492]
  ------------------
 3143|   330k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 330k, False: 27]
  ------------------
 3144|   330k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   330k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   330k|    }
 3148|       |
 3149|    492|    auto& it = *r;
 3150|    492|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 447, False: 45]
  ------------------
 3151|    447|        return std::pair{it, sign_type::minus_sign};
 3152|    447|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    492|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   392k|{
 2272|   392k|    auto it = read_code_unit(range);
 2273|   392k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 417, False: 391k]
  |  |  ------------------
  ------------------
 2274|    417|        return unexpected(make_eof_parse_error(it.error()));
 2275|    417|    }
 2276|       |
 2277|   783k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 783k, False: 388k]
  ------------------
 2278|   783k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.55k, False: 780k]
  ------------------
 2279|  3.55k|            return *it;
 2280|  3.55k|        }
 2281|   783k|    }
 2282|       |
 2283|   388k|    return unexpected(parse_error::error);
 2284|   391k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   838k|{
 2231|   838k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   838k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   838k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   838k|        if (range.size() < str.size()) {
 2236|   838k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   838k|        }
 2238|   838k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   838k|            return unexpected(parse_error::error);
 2240|   838k|        }
 2241|   838k|        return ranges::next(range.begin(), str.size());
 2242|   838k|    }
 2243|   838k|    else {
 2244|   838k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   838k|            if (ch < 'A' || ch > 'Z') {
 2246|   838k|                return ch;
 2247|   838k|            }
 2248|   838k|            return static_cast<char_type>(ch +
 2249|   838k|                                          static_cast<char_type>('a' - 'A'));
 2250|   838k|        };
 2251|       |
 2252|   838k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   838k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   838k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   838k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50.1k, False: 788k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  50.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  50.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  50.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  50.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  50.1k|    }                                                  \
  |  |  |  | 3667|   838k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   788k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   788k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   788k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   788k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   788k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 787k, False: 336]
  |  |  ------------------
  ------------------
 2257|   788k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   788k|                    return ascii_tolower(a) ==
 2259|   788k|                           static_cast<detail::char_t<Range>>(b);
 2260|   788k|                }))) {
 2261|   787k|            return unexpected(parse_error::error);
 2262|   787k|        }
 2263|       |
 2264|    336|        return it;
 2265|   788k|    }
 2266|   838k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   829k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   829k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 532k, False: 297k]
  |  Branch (2245:29): [True: 291k, False: 6.44k]
  ------------------
 2246|   823k|                return ch;
 2247|   823k|            }
 2248|  6.44k|            return static_cast<char_type>(ch +
 2249|  6.44k|                                          static_cast<char_type>('a' - 'A'));
 2250|   829k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  74.8k|{
 2146|  74.8k|    auto it = read_code_unit(range);
 2147|  74.8k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 438, False: 74.4k]
  |  |  ------------------
  ------------------
 2148|    438|        return unexpected(make_eof_parse_error(it.error()));
 2149|    438|    }
 2150|       |
 2151|  74.4k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  74.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.3k, False: 84]
  |  |  ------------------
  ------------------
 2152|  74.4k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  74.3k|        return unexpected(parse_error::error);
 2154|  74.3k|    }
 2155|       |
 2156|     84|    return *it;
 2157|  74.4k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   405k|{
 1996|   405k|    auto it = read_while_code_unit(range, pred);
 1997|   405k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 328k, False: 76.7k]
  ------------------
 1998|   328k|        return unexpected(parse_error::error);
 1999|   328k|    }
 2000|  76.7k|    return it;
 2001|   405k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  73.1k|    {
 1621|  73.1k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  73.1k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  73.1k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  73.1k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  73.1k|            m_storage.reset();
 1627|  73.1k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  73.1k|        }
 1629|  73.1k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  73.1k|                                          std::basic_string<CharT>>) {
 1631|  73.1k|            m_storage.emplace(SCN_FWD(range));
 1632|  73.1k|            m_view = string_view_type{*m_storage};
 1633|  73.1k|        }
 1634|  73.1k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  73.1k|                                          typename detail::basic_scan_buffer<
 1636|  73.1k|                                              value_t>::forward_iterator> &&
 1637|  73.1k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  73.1k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  73.1k|            auto end_seg = range.end().contiguous_segment();
 1640|  73.1k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.39k, False: 69.7k]
  |  |  ------------------
  ------------------
 1641|  73.1k|                             detail::to_address(end_seg.end()))) {
 1642|  3.39k|                auto& str = m_storage.emplace();
 1643|  3.39k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.39k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.39k|                m_view = string_view_type{str};
 1646|  3.39k|                return;
 1647|  3.39k|            }
 1648|       |
 1649|  69.7k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  69.7k|                                                            end_seg.data());
 1651|  69.7k|            m_storage.reset();
 1652|  69.7k|        }
 1653|  73.1k|        else {
 1654|  73.1k|            auto& str = m_storage.emplace();
 1655|  73.1k|            if constexpr (ranges::sized_range<Range>) {
 1656|  73.1k|                str.reserve(range.size());
 1657|  73.1k|            }
 1658|  73.1k|            if constexpr (ranges::common_range<Range>) {
 1659|  73.1k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  73.1k|                          std::back_inserter(str));
 1661|  73.1k|            }
 1662|  73.1k|            else {
 1663|  73.1k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  73.1k|                     ++it) {
 1665|  73.1k|                    str.push_back(*it);
 1666|  73.1k|                }
 1667|  73.1k|            }
 1668|  73.1k|            m_view = string_view_type{str};
 1669|  73.1k|        }
 1670|  73.1k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|   884k|    {
 1582|   884k|        return m_view;
 1583|   884k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.31M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  52.5k|    {
 6079|  52.5k|        const bool need_skipped_width =
 6080|  52.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 52.5k]
  |  Branch (6080:33): [True: 0, False: 52.5k]
  ------------------
 6081|  52.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  52.5k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 52.5k]
  ------------------
 6084|  52.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 52.5k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  52.5k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 52.5k, False: 0]
  ------------------
 6089|  52.5k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 52.5k]
  ------------------
 6090|  52.5k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  52.5k|        return result_type{rng.begin(), 0};
 6114|  52.5k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   838k|{
 1857|   838k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   838k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   838k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   838k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   838k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   838k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 50.1k, False: 788k]
  ------------------
 1862|  50.1k|            return unexpected(eof_error::eof);
 1863|  50.1k|        }
 1864|       |
 1865|   788k|        return ranges::next(range.begin(), count);
 1866|   838k|    }
 1867|   838k|    else {
 1868|   838k|        auto it = range.begin();
 1869|   838k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   838k|            return ranges::next(it, count);
 1871|   838k|        }
 1872|       |
 1873|   838k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   838k|            if (it == range.end()) {
 1875|   838k|                return unexpected(eof_error::eof);
 1876|   838k|            }
 1877|   838k|        }
 1878|       |
 1879|   838k|        return it;
 1880|   838k|    }
 1881|   838k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   540k|{
 1899|   540k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   540k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   540k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   540k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   540k|    auto it = range.begin();
 1903|   540k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   540k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 540k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   540k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 540k, False: 0]
  ------------------
 1912|   540k|        ++it;
 1913|   540k|        return {it, string_type(1, *range.begin())};
 1914|   540k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   540k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.32M|{
  944|  1.32M|    return is_range_eof(r.begin(), r.end());
  945|  1.32M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.32M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.32M|    {
  937|  1.32M|        return begin == end;
  938|  1.32M|    }
  939|  1.32M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   183k|    {
  190|   183k|        i = std::move(bound);
  191|   183k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   540k|    {
 1890|   540k|        return !codepoint.empty();
 1891|   540k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   781k|{
  950|   781k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.47k, False: 779k]
  |  |  ------------------
  ------------------
  951|  2.47k|        return eof_error::eof;
  952|  2.47k|    }
  953|   779k|    return eof_error::good;
  954|   781k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   372k|{
 1846|   372k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248, False: 372k]
  |  |  ------------------
  ------------------
 1847|    248|        return unexpected(e);
 1848|    248|    }
 1849|       |
 1850|   372k|    return ranges::next(range.begin());
 1851|   372k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   372k|    {
  296|   372k|        ++x;
  297|   372k|        return x;
  298|   372k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   329k|{
 3141|   329k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   329k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 328k, False: 357]
  ------------------
 3143|   328k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 328k, False: 12]
  ------------------
 3144|   328k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   328k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   328k|    }
 3148|       |
 3149|    357|    auto& it = *r;
 3150|    357|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 312, False: 45]
  ------------------
 3151|    312|        return std::pair{it, sign_type::minus_sign};
 3152|    312|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    357|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   344k|{
 2272|   344k|    auto it = read_code_unit(range);
 2273|   344k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 344k]
  |  |  ------------------
  ------------------
 2274|    106|        return unexpected(make_eof_parse_error(it.error()));
 2275|    106|    }
 2276|       |
 2277|   688k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 688k, False: 342k]
  ------------------
 2278|   688k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.60k, False: 686k]
  ------------------
 2279|  1.60k|            return *it;
 2280|  1.60k|        }
 2281|   688k|    }
 2282|       |
 2283|   342k|    return unexpected(parse_error::error);
 2284|   344k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   838k|{
 2231|   838k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   838k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   838k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   838k|        if (range.size() < str.size()) {
 2236|   838k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   838k|        }
 2238|   838k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   838k|            return unexpected(parse_error::error);
 2240|   838k|        }
 2241|   838k|        return ranges::next(range.begin(), str.size());
 2242|   838k|    }
 2243|   838k|    else {
 2244|   838k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   838k|            if (ch < 'A' || ch > 'Z') {
 2246|   838k|                return ch;
 2247|   838k|            }
 2248|   838k|            return static_cast<char_type>(ch +
 2249|   838k|                                          static_cast<char_type>('a' - 'A'));
 2250|   838k|        };
 2251|       |
 2252|   838k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   838k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   838k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   838k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 50.1k, False: 788k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  50.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  50.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  50.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  50.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  50.1k|    }                                                  \
  |  |  |  | 3667|   838k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   788k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   788k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   788k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   788k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   788k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 788k, False: 336]
  |  |  ------------------
  ------------------
 2257|   788k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   788k|                    return ascii_tolower(a) ==
 2259|   788k|                           static_cast<detail::char_t<Range>>(b);
 2260|   788k|                }))) {
 2261|   788k|            return unexpected(parse_error::error);
 2262|   788k|        }
 2263|       |
 2264|    336|        return it;
 2265|   788k|    }
 2266|   838k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   830k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   830k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 532k, False: 298k]
  |  Branch (2245:29): [True: 292k, False: 6.44k]
  ------------------
 2246|   824k|                return ch;
 2247|   824k|            }
 2248|  6.44k|            return static_cast<char_type>(ch +
 2249|  6.44k|                                          static_cast<char_type>('a' - 'A'));
 2250|   830k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  28.3k|{
 2146|  28.3k|    auto it = read_code_unit(range);
 2147|  28.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 28.2k]
  |  |  ------------------
  ------------------
 2148|    142|        return unexpected(make_eof_parse_error(it.error()));
 2149|    142|    }
 2150|       |
 2151|  28.2k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.2k, False: 36]
  |  |  ------------------
  ------------------
 2152|  28.2k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  28.2k|        return unexpected(parse_error::error);
 2154|  28.2k|    }
 2155|       |
 2156|     36|    return *it;
 2157|  28.2k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   174k|{
 1976|   174k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   174k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   174k|{
 1957|   174k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   174k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   174k|    }
 1960|   174k|    else {
 1961|   174k|        auto first = range.begin();
 1962|   174k|        for (; first != range.end(); ++first) {
 1963|   174k|            if (pred(*first)) {
 1964|   174k|                return first;
 1965|   174k|            }
 1966|   174k|        }
 1967|   174k|        return first;
 1968|   174k|    }
 1969|   174k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   329k|{
 2951|   329k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 329k, False: 0]
  ------------------
 2952|   329k|        auto it = read_while_classic_space(range);
 2953|   329k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   329k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.08k, False: 327k]
  |  |  ------------------
  ------------------
 2955|  2.08k|            return unexpected(e);
 2956|  2.08k|        }
 2957|       |
 2958|   327k|        return it;
 2959|   329k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   329k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   329k|{
 2117|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   329k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   329k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   329k|        auto buf = make_contiguous_buffer(range);
 2121|   329k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   329k|        return ranges::next(range.begin(),
 2123|   329k|                            ranges::distance(buf.view().begin(), it));
 2124|   329k|    }
 2125|   329k|    else {
 2126|   329k|        auto it = range.begin();
 2127|       |
 2128|   329k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   329k|            auto seg = get_contiguous_beginning(range);
 2130|   329k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   329k|                seg_it != seg.end()) {
 2132|   329k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   329k|            }
 2134|   329k|            ranges::advance(it, seg.size());
 2135|   329k|        }
 2136|       |
 2137|   329k|        return read_while_code_point(
 2138|   329k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   329k|    }
 2140|   329k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   329k|{
 2082|   329k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   329k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   395k|{
 2061|   395k|    auto it = range.begin();
 2062|   585k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 540k, False: 44.9k]
  ------------------
 2063|   540k|        const auto val =
 2064|   540k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   540k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   540k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 540k, False: 0]
  |  |  ------------------
  ------------------
 2066|   540k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   540k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   540k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 350k, False: 189k]
  ------------------
 2069|   350k|                return it;
 2070|   350k|            }
 2071|   540k|        }
 2072|   189k|        it = val.iterator;
 2073|   189k|    }
 2074|       |
 2075|  44.9k|    return it;
 2076|   395k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   329k|    {
  754|   329k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   396k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   396k|              cvref<T> obj = *get<T>(fn);
  745|   396k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   396k|                  obj(static_cast<decltype(args)>(args)...);
  747|   396k|              }
  748|   396k|              else {
  749|   396k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   396k|              }
  751|   396k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   396k|    {
  684|   396k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   396k|            return static_cast<T*>(s.m_cp);
  686|   396k|        }
  687|   396k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   396k|            return static_cast<T*>(s.m_p);
  689|   396k|        }
  690|   396k|        else {
  691|   396k|            return reinterpret_cast<T*>(s.m_fp);
  692|   396k|        }
  693|   396k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   396k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   329k|        {
  662|   329k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   554k|    {
  304|   554k|        ranges::advance(x, n);
  305|   554k|        return x;
  306|   554k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   554k|    {
  268|   554k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   554k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   554k|    {
  181|  1.90M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.35M, False: 554k]
  ------------------
  182|  1.35M|            ++i;
  183|  1.35M|        }
  184|   554k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  83.5k|    {
 6178|  83.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  83.5k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  83.5k|            auto rd = make_reader<T, char_type>();
 6183|  83.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  83.5k|                return unexpected(e);
 6185|  83.5k|            }
 6186|       |
 6187|  83.5k|            return impl(rd, range, value);
 6188|  83.5k|        }
 6189|  83.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  83.5k|            auto rd = make_reader<T, char_type>();
 6191|  83.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.5k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  83.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 83.5k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  83.5k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  83.5k|                return impl(rd, range, value);
 6198|  83.5k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  83.5k|        else {
 6206|  83.5k|            SCN_EXPECT(false);
 6207|  83.5k|            SCN_UNREACHABLE;
 6208|  83.5k|        }
 6209|  83.5k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   501k|    {
 3040|   501k|        reader_error_handler eh{};
 3041|   501k|        get_derived().check_specs_impl(specs, eh);
 3042|   501k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 501k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   501k|        return {};
 3046|   501k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   501k|    {
 3051|   501k|        return static_cast<Derived&>(*this);
 3052|   501k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   501k|    {
 4145|   501k|        detail::check_float_type_specs(specs, eh);
 4146|   501k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  83.5k|    {
 6120|  83.5k|        const bool need_skipped_width =
 6121|  83.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 83.5k]
  |  Branch (6121:33): [True: 0, False: 83.5k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  83.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  83.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 534, False: 82.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    534|    }                                                  \
  |  |  |  | 3667|  83.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  82.9k|        auto [it, prefix_width] = prefix_result;
 6126|  82.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  82.9k|        std::ptrdiff_t value_width = 0;
 6130|  82.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 82.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  82.9k|        else {
 6146|  82.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  82.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  82.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.4k, False: 17.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.4k|    }                                                  \
  |  | 3667|  82.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  17.5k|                                             specs, value, loc));
 6148|       |
 6149|  17.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 17.5k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  17.5k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  17.5k|        std::ptrdiff_t postfix_width = 0;
 6158|  17.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 17.4k, False: 118]
  ------------------
 6159|  17.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  17.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  17.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  17.4k|                                 value_width));
 6163|  17.4k|            std::tie(it, postfix_width) = postfix_result;
 6164|  17.4k|        }
 6165|       |
 6166|  17.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  17.5k|                                                 value_width, postfix_width);
 6168|  17.5k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 17.5k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  17.5k|        return it;
 6173|  17.5k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   765k|    {
 3035|   765k|        return true;
 3036|   765k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   498k|    {
 4217|   498k|        unsigned options{};
 4218|   498k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 104k, False: 393k]
  ------------------
 4219|   104k|            options |= float_reader_base::allow_thsep;
 4220|   104k|        }
 4221|       |
 4222|   498k|        SCN_GCC_COMPAT_PUSH
 4223|   498k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   498k|        switch (specs.type) {
 4226|   104k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 104k, False: 393k]
  ------------------
 4227|   104k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  79.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 79.3k, False: 419k]
  ------------------
 4230|  79.3k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   105k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 105k, False: 393k]
  ------------------
 4233|   105k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   104k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 104k, False: 393k]
  ------------------
 4236|   104k|                return options | float_reader_base::allow_scientific |
 4237|   104k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   104k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 104k, False: 393k]
  ------------------
 4240|   104k|                return options | float_reader_base::allow_scientific |
 4241|   104k|                       float_reader_base::allow_fixed |
 4242|   104k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 498k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   498k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   498k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   498k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   498k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   655k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.31M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  94.2k|    {
 3691|  94.2k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  94.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  94.2k|        const std::ptrdiff_t sign_len =
 3694|  94.2k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 65, False: 94.2k]
  ------------------
 3695|       |
 3696|  94.2k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  94.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.1k, False: 48.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  46.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  46.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  46.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  46.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  46.1k|    }                                                  \
  |  |  |  | 3667|  94.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  48.1k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  94.2k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   283k|    {
 4057|   283k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 283k, False: 0]
  ------------------
 4058|   283k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 283k, False: 0]
  ------------------
 4059|   283k|            return;
 4060|   283k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   162k|    {
 1587|   162k|        return m_storage.has_value();
 1588|   162k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  94.8k|    {
 1592|  94.8k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  94.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  94.8k|        return *m_storage;
 1594|  94.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  82.9k|    {
 4170|  82.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  82.9k|#if !SCN_DISABLE_LOCALE
 4173|  82.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 17.3k, False: 65.5k]
  ------------------
 4174|  17.3k|            return read_impl<Range>(
 4175|  17.3k|                range, rd,
 4176|  17.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  17.3k|                },
 4179|  17.3k|                value, loc);
 4180|  17.3k|        }
 4181|  65.5k|#endif
 4182|       |
 4183|  65.5k|        return read_impl<Range>(
 4184|  65.5k|            range, rd,
 4185|  65.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.5k|                return r.read_source(SCN_FWD(args)...);
 4187|  65.5k|            },
 4188|  65.5k|            value);
 4189|  82.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   109k|    {
 4206|   109k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   109k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.6k, False: 24.3k]
  |  |  ------------------
  ------------------
 4208|  84.6k|            return unexpected(r.error());
 4209|  84.6k|        }
 4210|       |
 4211|  24.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  24.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  24.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  24.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 362, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    362|    }                                                  \
  |  |  |  | 3667|  24.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  24.0k|        return ranges::next(range.begin(), n);
 4213|  24.3k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   327k|    {
  763|   327k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   327k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  17.3k|    {
  754|  17.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  17.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.3k|              cvref<T> obj = *get<T>(fn);
  745|  17.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.3k|              }
  748|  17.3k|              else {
  749|  17.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.3k|              }
  751|  17.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  17.3k|    {
  684|  17.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.3k|            return static_cast<T*>(s.m_cp);
  686|  17.3k|        }
  687|  17.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.3k|            return static_cast<T*>(s.m_p);
  689|  17.3k|        }
  690|  17.3k|        else {
  691|  17.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.3k|        }
  693|  17.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  17.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  17.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  52.2k|    {
 3679|  52.2k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  52.2k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  52.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 52.2k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  52.2k|        return read_source_impl(range);
 3685|  52.2k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   327k|    {
 3705|   327k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   327k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   327k|        auto it = sign_result.first;
 3708|   327k|        m_sign = sign_result.second;
 3709|       |
 3710|   327k|        auto digits_begin = it;
 3711|   327k|        auto r = ranges::subrange{it, range.end()};
 3712|   327k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   327k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   327k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   327k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   327k|                SCN_TRY_ASSIGN(
 3717|   327k|                    it,
 3718|   327k|                    do_read_source_impl(
 3719|   327k|                        r,
 3720|   327k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   327k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   327k|            }
 3723|   327k|            else {
 3724|   327k|                auto cb = [&](const auto& rr)
 3725|   327k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   327k|                    auto res = read_all(rr);
 3727|   327k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   327k|                        return unexpected_scan_error(
 3729|   327k|                            scan_error::invalid_scanned_value,
 3730|   327k|                            "Invalid float value");
 3731|   327k|                    }
 3732|   327k|                    return res;
 3733|   327k|                };
 3734|   327k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   327k|            }
 3736|   327k|        }
 3737|   327k|        else {
 3738|   327k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 254k, False: 73.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   254k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   254k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   254k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   254k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   254k|    }                                                  \
  |  | 3667|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  73.1k|                it,
 3740|  73.1k|                do_read_source_impl(
 3741|  73.1k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  73.1k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  73.1k|        }
 3744|       |
 3745|  73.1k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  73.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  73.1k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 73.1k, False: 0]
  |  Branch (3747:48): [True: 73.1k, False: 0]
  ------------------
 3748|  73.1k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 73.1k, False: 0]
  ------------------
 3749|  73.1k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 73.1k, False: 0]
  ------------------
 3750|  73.1k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  73.1k|        }
 3752|       |
 3753|  73.1k|        handle_separators();
 3754|       |
 3755|  73.1k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 73.1k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  73.1k|        return it;
 3768|  73.1k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   327k|    {
 4000|   327k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   327k|        const bool allowed_nonhex =
 4002|   327k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   327k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   327k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 327k, False: 0]
  |  Branch (4005:45): [True: 0, False: 327k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   327k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 327k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   327k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 327k, False: 0]
  |  Branch (4014:45): [True: 0, False: 327k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   327k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 327k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   327k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 183k, False: 144k]
  |  Branch (4021:28): [True: 52.4k, False: 130k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  52.4k|            auto it = range.begin();
 4025|       |
 4026|  52.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 96, False: 52.3k]
  ------------------
 4027|     96|                m_kind = float_kind::hex_with_prefix;
 4028|     96|                it = *r;
 4029|     96|            }
 4030|  52.3k|            else {
 4031|  52.3k|                m_kind = float_kind::hex_without_prefix;
 4032|  52.3k|            }
 4033|       |
 4034|  52.4k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  52.4k|        }
 4036|   275k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 144k, False: 130k]
  |  Branch (4036:29): [True: 144k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   144k|            m_kind = float_kind::generic;
 4040|   144k|            return read_regular_float(range);
 4041|   144k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   130k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240, False: 130k]
  |  |  ------------------
  ------------------
 4047|    240|            m_kind = float_kind::hex_with_prefix;
 4048|    240|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    240|        }
 4050|       |
 4051|   130k|        m_kind = float_kind::generic;
 4052|   130k|        return read_regular(range);
 4053|   130k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   327k|    {
 3811|   327k|        auto it = range.begin();
 3812|   327k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 327k, False: 0]
  ------------------
 3813|   327k|            return unexpected(r.error());
 3814|   327k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   327k|    {
 3834|   327k|        auto it = range.begin();
 3835|   327k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 327k, False: 0]
  ------------------
 3836|   327k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   327k|                scan_error::invalid_scanned_value,
 3838|   327k|                "Invalid floating-point NaN value"));
 3839|   327k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   183k|    {
 3804|   183k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   183k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  52.7k|    {
 3904|  52.7k|        auto it = range.begin();
 3905|       |
 3906|  52.7k|        std::ptrdiff_t digits_count = 0;
 3907|  52.7k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  52.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  52.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.1k, False: 13.5k]
  |  |  ------------------
  ------------------
 3909|  39.1k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  39.1k|                scan_error::invalid_scanned_value,
 3911|  39.1k|                "Invalid hexadecimal floating-point value"));
 3912|  39.1k|        }
 3913|  13.5k|        else {
 3914|  13.5k|            digits_count += ranges::distance(it, *r);
 3915|  13.5k|            it = *r;
 3916|  13.5k|        }
 3917|       |
 3918|  13.5k|        m_integral_part_length = digits_count;
 3919|  13.5k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 18, False: 13.5k]
  ------------------
 3920|  13.5k|                                             m_locale_options.decimal_point)) {
 3921|     18|            it = *r;
 3922|     18|        }
 3923|       |
 3924|  13.5k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 13.5k]
  ------------------
 3925|  13.5k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|  13.5k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.5k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  13.5k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  13.5k|        return it;
 3938|  13.5k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  66.2k|    {
 3789|  66.2k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  66.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.2k]
  |  |  |  Branch (859:45): [True: 0, False: 66.2k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  66.2k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  66.2k|        return read_while1_code_unit(
 3798|  66.2k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  66.2k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  66.2k|    {
  754|  66.2k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  82.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.0k|              cvref<T> obj = *get<T>(fn);
  745|  82.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  82.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.0k|              }
  748|  82.0k|              else {
  749|  82.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.0k|              }
  751|  82.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  82.0k|    {
  684|  82.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  82.0k|            return static_cast<T*>(s.m_cp);
  686|  82.0k|        }
  687|  82.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  82.0k|            return static_cast<T*>(s.m_p);
  689|  82.0k|        }
  690|  82.0k|        else {
  691|  82.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  82.0k|        }
  693|  82.0k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|  82.0k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  66.2k|        {
  662|  66.2k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  61.6k|    {
 3876|  61.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 3.06k, False: 58.6k]
  ------------------
 3877|  3.06k|            auto beg_exp_it = range.begin();
 3878|  3.06k|            auto it = *r;
 3879|       |
 3880|  3.06k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 3.03k, False: 27]
  ------------------
 3881|  3.06k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  3.03k|                it = r_sign->first;
 3883|  3.03k|            }
 3884|       |
 3885|  3.06k|            if (auto r_exp = read_while1_code_unit(
 3886|  3.06k|                    ranges::subrange{it, range.end()},
 3887|  3.06k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  3.06k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  3.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.18k, False: 1.88k]
  |  |  ------------------
  ------------------
 3889|  1.18k|                it = beg_exp_it;
 3890|  1.18k|            }
 3891|  1.88k|            else {
 3892|  1.88k|                it = *r_exp;
 3893|  1.88k|            }
 3894|       |
 3895|  3.06k|            return it;
 3896|  3.06k|        }
 3897|  58.6k|        return range.begin();
 3898|  61.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  3.06k|    {
  754|  3.06k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  6.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.72k|              cvref<T> obj = *get<T>(fn);
  745|  6.72k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.72k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.72k|              }
  748|  6.72k|              else {
  749|  6.72k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.72k|              }
  751|  6.72k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  6.72k|    {
  684|  6.72k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.72k|            return static_cast<T*>(s.m_cp);
  686|  6.72k|        }
  687|  6.72k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.72k|            return static_cast<T*>(s.m_p);
  689|  6.72k|        }
  690|  6.72k|        else {
  691|  6.72k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.72k|        }
  693|  6.72k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  6.72k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  3.06k|        {
  662|  3.06k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   274k|    {
 3944|   274k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   274k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 222k, False: 52.4k]
  |  Branch (3945:50): [True: 39.6k, False: 182k]
  ------------------
 3946|       |
 3947|   274k|        auto it = ranges::begin(range);
 3948|   274k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   274k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   274k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 213k, False: 61.2k]
  |  |  ------------------
  ------------------
 3952|   213k|            return r.transform_error(
 3953|   213k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   213k|                                              "Invalid floating-point value"));
 3955|   213k|        }
 3956|  61.2k|        else {
 3957|  61.2k|            digits_count += ranges::distance(it, *r);
 3958|  61.2k|            it = *r;
 3959|  61.2k|        }
 3960|       |
 3961|  61.2k|        m_integral_part_length = digits_count;
 3962|  61.2k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 66, False: 61.1k]
  ------------------
 3963|  61.2k|                                             m_locale_options.decimal_point)) {
 3964|     66|            it = *r;
 3965|     66|        }
 3966|       |
 3967|  61.2k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 61.2k]
  ------------------
 3968|  61.2k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  61.2k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 61.2k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  61.2k|        auto beg_exp_it = it;
 3979|  61.2k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 48.0k, False: 13.1k]
  ------------------
 3980|  48.0k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  48.0k|        }
 3982|  61.2k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.97k, False: 59.2k]
  |  Branch (3982:29): [True: 1.67k, False: 306]
  ------------------
 3983|  1.67k|            return unexpected_scan_error(
 3984|  1.67k|                scan_error::invalid_scanned_value,
 3985|  1.67k|                "No exponent given to scientific float");
 3986|  1.67k|        }
 3987|       |
 3988|  59.5k|        m_kind =
 3989|  59.5k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 57.7k, False: 1.81k]
  ------------------
 3990|       |
 3991|  59.5k|        return it;
 3992|  61.2k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   336k|    {
 3774|   336k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 336k]
  |  |  |  Branch (859:45): [True: 0, False: 336k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   336k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   336k|        return read_while1_code_unit(
 3783|   336k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   336k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   336k|    {
  754|   336k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   400k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   400k|              cvref<T> obj = *get<T>(fn);
  745|   400k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   400k|                  obj(static_cast<decltype(args)>(args)...);
  747|   400k|              }
  748|   400k|              else {
  749|   400k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   400k|              }
  751|   400k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   400k|    {
  684|   400k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   400k|            return static_cast<T*>(s.m_cp);
  686|   400k|        }
  687|   400k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   400k|            return static_cast<T*>(s.m_p);
  689|   400k|        }
  690|   400k|        else {
  691|   400k|            return reinterpret_cast<T*>(s.m_fp);
  692|   400k|        }
  693|   400k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   400k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   336k|        {
  662|   336k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  73.1k|    {
 1577|  73.1k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  73.1k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  17.3k|        {
  662|  17.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  65.5k|    {
  754|  65.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  65.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.5k|              cvref<T> obj = *get<T>(fn);
  745|  65.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.5k|              }
  748|  65.5k|              else {
  749|  65.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.5k|              }
  751|  65.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  65.5k|    {
  684|  65.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.5k|            return static_cast<T*>(s.m_cp);
  686|  65.5k|        }
  687|  65.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.5k|            return static_cast<T*>(s.m_p);
  689|  65.5k|        }
  690|  65.5k|        else {
  691|  65.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.5k|        }
  693|  65.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  65.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  65.5k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   275k|    {
 3665|   275k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 275k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   275k|        return read_source_impl(range);
 3671|   275k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  65.5k|        {
  662|  65.5k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  83.0k|    {
 4170|  83.0k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  83.0k|#if !SCN_DISABLE_LOCALE
 4173|  83.0k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 17.4k, False: 65.6k]
  ------------------
 4174|  17.4k|            return read_impl<Range>(
 4175|  17.4k|                range, rd,
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  17.4k|                },
 4179|  17.4k|                value, loc);
 4180|  17.4k|        }
 4181|  65.6k|#endif
 4182|       |
 4183|  65.6k|        return read_impl<Range>(
 4184|  65.6k|            range, rd,
 4185|  65.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.6k|                return r.read_source(SCN_FWD(args)...);
 4187|  65.6k|            },
 4188|  65.6k|            value);
 4189|  83.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   109k|    {
 4206|   109k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   109k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 69.9k]
  |  |  ------------------
  ------------------
 4208|  39.2k|            return unexpected(r.error());
 4209|  39.2k|        }
 4210|       |
 4211|  69.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.8k, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.8k|    }                                                  \
  |  |  |  | 3667|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  24.0k|        return ranges::next(range.begin(), n);
 4213|  69.9k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   327k|    {
  763|   327k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   327k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  17.4k|    {
  754|  17.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  17.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.4k|              cvref<T> obj = *get<T>(fn);
  745|  17.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.4k|              }
  748|  17.4k|              else {
  749|  17.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.4k|              }
  751|  17.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  17.4k|    {
  684|  17.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.4k|            return static_cast<T*>(s.m_cp);
  686|  17.4k|        }
  687|  17.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.4k|            return static_cast<T*>(s.m_p);
  689|  17.4k|        }
  690|  17.4k|        else {
  691|  17.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.4k|        }
  693|  17.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  17.4k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  52.3k|    {
 3679|  52.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  52.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  52.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 52.3k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  52.3k|        return read_source_impl(range);
 3685|  52.3k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   327k|    {
 3705|   327k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   327k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   327k|        auto it = sign_result.first;
 3708|   327k|        m_sign = sign_result.second;
 3709|       |
 3710|   327k|        auto digits_begin = it;
 3711|   327k|        auto r = ranges::subrange{it, range.end()};
 3712|   327k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   327k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   327k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 327k]
  |  |  |  Branch (859:45): [True: 0, False: 327k]
  |  |  |  Branch (859:45): [True: 0, False: 327k]
  |  |  ------------------
  ------------------
 3715|   327k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   327k|            else {
 3724|   327k|                auto cb = [&](const auto& rr)
 3725|   327k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   327k|                    auto res = read_all(rr);
 3727|   327k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   327k|                        return unexpected_scan_error(
 3729|   327k|                            scan_error::invalid_scanned_value,
 3730|   327k|                            "Invalid float value");
 3731|   327k|                    }
 3732|   327k|                    return res;
 3733|   327k|                };
 3734|   327k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 117k, False: 209k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   117k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   117k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   117k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   117k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   117k|    }                                                  \
  |  | 3667|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   209k|            }
 3736|   327k|        }
 3737|   209k|        else {
 3738|   209k|            SCN_TRY_ASSIGN(
 3739|   209k|                it,
 3740|   209k|                do_read_source_impl(
 3741|   209k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   209k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   209k|        }
 3744|       |
 3745|   209k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   209k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 209k, False: 0]
  |  Branch (3747:48): [True: 209k, False: 0]
  ------------------
 3748|   209k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 209k, False: 0]
  ------------------
 3749|   209k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 209k, False: 0]
  ------------------
 3750|   209k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   209k|        }
 3752|       |
 3753|   209k|        handle_separators();
 3754|       |
 3755|   209k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 209k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   209k|        return it;
 3768|   209k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   327k|    {
 3811|   327k|        auto it = range.begin();
 3812|   327k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 327k, False: 0]
  ------------------
 3813|   327k|            return unexpected(r.error());
 3814|   327k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   327k|    {
 3834|   327k|        auto it = range.begin();
 3835|   327k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 327k, False: 0]
  ------------------
 3836|   327k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   327k|                scan_error::invalid_scanned_value,
 3838|   327k|                "Invalid floating-point NaN value"));
 3839|   327k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   183k|    {
 3804|   183k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   183k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   174k|{
 1996|   174k|    auto it = read_while_code_unit(range, pred);
 1997|   174k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 144k, False: 29.1k]
  ------------------
 1998|   144k|        return unexpected(parse_error::error);
 1999|   144k|    }
 2000|  29.1k|    return it;
 2001|   174k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  15.2k|    {
 3876|  15.2k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 1.24k, False: 13.9k]
  ------------------
 3877|  1.24k|            auto beg_exp_it = range.begin();
 3878|  1.24k|            auto it = *r;
 3879|       |
 3880|  1.24k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 1.23k, False: 12]
  ------------------
 3881|  1.24k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  1.23k|                it = r_sign->first;
 3883|  1.23k|            }
 3884|       |
 3885|  1.24k|            if (auto r_exp = read_while1_code_unit(
 3886|  1.24k|                    ranges::subrange{it, range.end()},
 3887|  1.24k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  1.24k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 506, False: 738]
  |  |  ------------------
  ------------------
 3889|    506|                it = beg_exp_it;
 3890|    506|            }
 3891|    738|            else {
 3892|    738|                it = *r_exp;
 3893|    738|            }
 3894|       |
 3895|  1.24k|            return it;
 3896|  1.24k|        }
 3897|  13.9k|        return range.begin();
 3898|  15.2k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  1.24k|    {
  754|  1.24k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  2.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.64k|              cvref<T> obj = *get<T>(fn);
  745|  2.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.64k|              }
  748|  2.64k|              else {
  749|  2.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.64k|              }
  751|  2.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  2.64k|    {
  684|  2.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.64k|            return static_cast<T*>(s.m_cp);
  686|  2.64k|        }
  687|  2.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.64k|            return static_cast<T*>(s.m_p);
  689|  2.64k|        }
  690|  2.64k|        else {
  691|  2.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.64k|        }
  693|  2.64k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  2.64k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  1.24k|        {
  662|  1.24k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   144k|    {
 3944|   144k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   144k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 92.0k, False: 52.4k]
  |  Branch (3945:50): [True: 39.6k, False: 52.3k]
  ------------------
 3946|       |
 3947|   144k|        auto it = ranges::begin(range);
 3948|   144k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   144k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   144k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116k, False: 28.3k]
  |  |  ------------------
  ------------------
 3952|   116k|            return r.transform_error(
 3953|   116k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   116k|                                              "Invalid floating-point value"));
 3955|   116k|        }
 3956|  28.3k|        else {
 3957|  28.3k|            digits_count += ranges::distance(it, *r);
 3958|  28.3k|            it = *r;
 3959|  28.3k|        }
 3960|       |
 3961|  28.3k|        m_integral_part_length = digits_count;
 3962|  28.3k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 36, False: 28.3k]
  ------------------
 3963|  28.3k|                                             m_locale_options.decimal_point)) {
 3964|     36|            it = *r;
 3965|     36|        }
 3966|       |
 3967|  28.3k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 28.3k]
  ------------------
 3968|  28.3k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  28.3k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.3k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  28.3k|        auto beg_exp_it = it;
 3979|  28.3k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 15.2k, False: 13.1k]
  ------------------
 3980|  15.2k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  15.2k|        }
 3982|  28.3k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.97k, False: 26.4k]
  |  Branch (3982:29): [True: 1.67k, False: 306]
  ------------------
 3983|  1.67k|            return unexpected_scan_error(
 3984|  1.67k|                scan_error::invalid_scanned_value,
 3985|  1.67k|                "No exponent given to scientific float");
 3986|  1.67k|        }
 3987|       |
 3988|  26.7k|        m_kind =
 3989|  26.7k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 25.9k, False: 738]
  ------------------
 3990|       |
 3991|  26.7k|        return it;
 3992|  28.3k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   172k|    {
 3774|   172k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172k]
  |  |  |  Branch (859:45): [True: 0, False: 172k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   172k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   172k|        return read_while1_code_unit(
 3783|   172k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   172k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   172k|    {
  754|   172k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   202k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   202k|              cvref<T> obj = *get<T>(fn);
  745|   202k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   202k|                  obj(static_cast<decltype(args)>(args)...);
  747|   202k|              }
  748|   202k|              else {
  749|   202k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   202k|              }
  751|   202k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   202k|    {
  684|   202k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   202k|            return static_cast<T*>(s.m_cp);
  686|   202k|        }
  687|   202k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   202k|            return static_cast<T*>(s.m_p);
  689|   202k|        }
  690|   202k|        else {
  691|   202k|            return reinterpret_cast<T*>(s.m_fp);
  692|   202k|        }
  693|   202k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   202k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   172k|        {
  662|   172k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   327k|    {
 4000|   327k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   327k|        const bool allowed_nonhex =
 4002|   327k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   327k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   327k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 327k, False: 0]
  |  Branch (4005:45): [True: 0, False: 327k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   327k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 327k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   327k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 327k, False: 0]
  |  Branch (4014:45): [True: 0, False: 327k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   327k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 327k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   327k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 183k, False: 144k]
  |  Branch (4021:28): [True: 52.5k, False: 130k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  52.5k|            auto it = range.begin();
 4025|       |
 4026|  52.5k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 96, False: 52.4k]
  ------------------
 4027|     96|                m_kind = float_kind::hex_with_prefix;
 4028|     96|                it = *r;
 4029|     96|            }
 4030|  52.4k|            else {
 4031|  52.4k|                m_kind = float_kind::hex_without_prefix;
 4032|  52.4k|            }
 4033|       |
 4034|  52.5k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  52.5k|        }
 4036|   275k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 144k, False: 130k]
  |  Branch (4036:29): [True: 144k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   144k|            m_kind = float_kind::generic;
 4040|   144k|            return read_regular_float(range);
 4041|   144k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   130k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240, False: 130k]
  |  |  ------------------
  ------------------
 4047|    240|            m_kind = float_kind::hex_with_prefix;
 4048|    240|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    240|        }
 4050|       |
 4051|   130k|        m_kind = float_kind::generic;
 4052|   130k|        return read_regular(range);
 4053|   130k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   183k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   183k|                    auto res = read_all(rr);
 3727|   183k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 183k]
  |  |  ------------------
  ------------------
 3728|     63|                        return unexpected_scan_error(
 3729|     63|                            scan_error::invalid_scanned_value,
 3730|     63|                            "Invalid float value");
 3731|     63|                    }
 3732|   183k|                    return res;
 3733|   183k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   183k|{
 1839|   183k|    return ranges::next(range.begin(), range.end());
 1840|   183k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   183k|    {
  313|   183k|        ranges::advance(x, bound);
  314|   183k|        return x;
  315|   183k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   183k|    {
  275|   183k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   183k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   209k|    {
 1577|   209k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   209k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   209k|    {
 1621|   209k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   209k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   209k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   209k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   209k|            m_storage.reset();
 1627|   209k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   209k|        }
 1629|   209k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   209k|                                          std::basic_string<CharT>>) {
 1631|   209k|            m_storage.emplace(SCN_FWD(range));
 1632|   209k|            m_view = string_view_type{*m_storage};
 1633|   209k|        }
 1634|   209k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   209k|                                          typename detail::basic_scan_buffer<
 1636|   209k|                                              value_t>::forward_iterator> &&
 1637|   209k|                           ranges::common_range<Range>) {
 1638|   209k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   209k|            auto end_seg = range.end().contiguous_segment();
 1640|   209k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   209k|                             detail::to_address(end_seg.end()))) {
 1642|   209k|                auto& str = m_storage.emplace();
 1643|   209k|                str.reserve(range.end().position() - range.begin().position());
 1644|   209k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   209k|                m_view = string_view_type{str};
 1646|   209k|                return;
 1647|   209k|            }
 1648|       |
 1649|   209k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   209k|                                                            end_seg.data());
 1651|   209k|            m_storage.reset();
 1652|   209k|        }
 1653|   209k|        else {
 1654|   209k|            auto& str = m_storage.emplace();
 1655|   209k|            if constexpr (ranges::sized_range<Range>) {
 1656|   209k|                str.reserve(range.size());
 1657|   209k|            }
 1658|   209k|            if constexpr (ranges::common_range<Range>) {
 1659|   209k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   209k|                          std::back_inserter(str));
 1661|   209k|            }
 1662|   209k|            else {
 1663|   209k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   209k|                     ++it) {
 1665|   209k|                    str.push_back(*it);
 1666|   209k|                }
 1667|   209k|            }
 1668|   209k|            m_view = string_view_type{str};
 1669|   209k|        }
 1670|   209k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  17.4k|        {
  662|  17.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  65.6k|    {
  754|  65.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  65.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.6k|              cvref<T> obj = *get<T>(fn);
  745|  65.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.6k|              }
  748|  65.6k|              else {
  749|  65.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.6k|              }
  751|  65.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  65.6k|    {
  684|  65.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.6k|            return static_cast<T*>(s.m_cp);
  686|  65.6k|        }
  687|  65.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.6k|            return static_cast<T*>(s.m_p);
  689|  65.6k|        }
  690|  65.6k|        else {
  691|  65.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.6k|        }
  693|  65.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  65.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  65.6k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   275k|    {
 3665|   275k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 275k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   275k|        return read_source_impl(range);
 3671|   275k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  65.6k|        {
  662|  65.6k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  83.6k|    {
 6178|  83.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  83.6k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  83.6k|            auto rd = make_reader<T, char_type>();
 6183|  83.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  83.6k|                return unexpected(e);
 6185|  83.6k|            }
 6186|       |
 6187|  83.6k|            return impl(rd, range, value);
 6188|  83.6k|        }
 6189|  83.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  83.6k|            auto rd = make_reader<T, char_type>();
 6191|  83.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.6k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  83.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 83.6k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  83.6k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  83.6k|                return impl(rd, range, value);
 6198|  83.6k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  83.6k|        else {
 6206|  83.6k|            SCN_EXPECT(false);
 6207|  83.6k|            SCN_UNREACHABLE;
 6208|  83.6k|        }
 6209|  83.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  83.6k|    {
 6120|  83.6k|        const bool need_skipped_width =
 6121|  83.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 83.6k]
  |  Branch (6121:33): [True: 0, False: 83.6k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  83.6k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  83.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 560, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    560|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    560|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    560|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    560|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    560|    }                                                  \
  |  |  |  | 3667|  83.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  83.0k|        auto [it, prefix_width] = prefix_result;
 6126|  83.0k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  83.0k|        std::ptrdiff_t value_width = 0;
 6130|  83.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 83.0k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  83.0k|        else {
 6146|  83.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.4k, False: 17.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.4k|    }                                                  \
  |  | 3667|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  17.6k|                                             specs, value, loc));
 6148|       |
 6149|  17.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 17.6k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  17.6k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  17.6k|        std::ptrdiff_t postfix_width = 0;
 6158|  17.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 17.5k, False: 128]
  ------------------
 6159|  17.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  17.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  17.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  17.5k|                                 value_width));
 6163|  17.5k|            std::tie(it, postfix_width) = postfix_result;
 6164|  17.5k|        }
 6165|       |
 6166|  17.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  17.6k|                                                 value_width, postfix_width);
 6168|  17.6k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 17.6k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  17.6k|        return it;
 6173|  17.6k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  94.3k|    {
 3691|  94.3k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  94.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  94.3k|        const std::ptrdiff_t sign_len =
 3694|  94.3k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 65, False: 94.3k]
  ------------------
 3695|       |
 3696|  94.3k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  94.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.9k, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.9k|    }                                                  \
  |  |  |  | 3667|  94.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  48.4k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  94.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  83.0k|    {
 4170|  83.0k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  83.0k|#if !SCN_DISABLE_LOCALE
 4173|  83.0k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 17.4k, False: 65.6k]
  ------------------
 4174|  17.4k|            return read_impl<Range>(
 4175|  17.4k|                range, rd,
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  17.4k|                },
 4179|  17.4k|                value, loc);
 4180|  17.4k|        }
 4181|  65.6k|#endif
 4182|       |
 4183|  65.6k|        return read_impl<Range>(
 4184|  65.6k|            range, rd,
 4185|  65.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.6k|                return r.read_source(SCN_FWD(args)...);
 4187|  65.6k|            },
 4188|  65.6k|            value);
 4189|  83.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   109k|    {
 4206|   109k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   109k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.7k, False: 24.3k]
  |  |  ------------------
  ------------------
 4208|  84.7k|            return unexpected(r.error());
 4209|  84.7k|        }
 4210|       |
 4211|  24.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  24.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  24.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  24.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 212, False: 24.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    212|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    212|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    212|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    212|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    212|    }                                                  \
  |  |  |  | 3667|  24.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  24.1k|        return ranges::next(range.begin(), n);
 4213|  24.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  17.4k|    {
  754|  17.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  17.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.4k|              cvref<T> obj = *get<T>(fn);
  745|  17.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.4k|              }
  748|  17.4k|              else {
  749|  17.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.4k|              }
  751|  17.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  17.4k|    {
  684|  17.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.4k|            return static_cast<T*>(s.m_cp);
  686|  17.4k|        }
  687|  17.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.4k|            return static_cast<T*>(s.m_p);
  689|  17.4k|        }
  690|  17.4k|        else {
  691|  17.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.4k|        }
  693|  17.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  17.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  17.4k|        {
  662|  17.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  65.6k|    {
  754|  65.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  65.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.6k|              cvref<T> obj = *get<T>(fn);
  745|  65.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.6k|              }
  748|  65.6k|              else {
  749|  65.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.6k|              }
  751|  65.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  65.6k|    {
  684|  65.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.6k|            return static_cast<T*>(s.m_cp);
  686|  65.6k|        }
  687|  65.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.6k|            return static_cast<T*>(s.m_p);
  689|  65.6k|        }
  690|  65.6k|        else {
  691|  65.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.6k|        }
  693|  65.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  65.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  65.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  65.6k|        {
  662|  65.6k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  83.0k|    {
 4170|  83.0k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  83.0k|#if !SCN_DISABLE_LOCALE
 4173|  83.0k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 17.4k, False: 65.6k]
  ------------------
 4174|  17.4k|            return read_impl<Range>(
 4175|  17.4k|                range, rd,
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  17.4k|                },
 4179|  17.4k|                value, loc);
 4180|  17.4k|        }
 4181|  65.6k|#endif
 4182|       |
 4183|  65.6k|        return read_impl<Range>(
 4184|  65.6k|            range, rd,
 4185|  65.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.6k|                return r.read_source(SCN_FWD(args)...);
 4187|  65.6k|            },
 4188|  65.6k|            value);
 4189|  83.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   109k|    {
 4206|   109k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   109k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 69.9k]
  |  |  ------------------
  ------------------
 4208|  39.2k|            return unexpected(r.error());
 4209|  39.2k|        }
 4210|       |
 4211|  69.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.7k, False: 24.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.7k|    }                                                  \
  |  |  |  | 3667|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  24.2k|        return ranges::next(range.begin(), n);
 4213|  69.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  17.4k|    {
  754|  17.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  17.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.4k|              cvref<T> obj = *get<T>(fn);
  745|  17.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.4k|              }
  748|  17.4k|              else {
  749|  17.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.4k|              }
  751|  17.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  17.4k|    {
  684|  17.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.4k|            return static_cast<T*>(s.m_cp);
  686|  17.4k|        }
  687|  17.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.4k|            return static_cast<T*>(s.m_p);
  689|  17.4k|        }
  690|  17.4k|        else {
  691|  17.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.4k|        }
  693|  17.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  17.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  17.4k|        {
  662|  17.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  65.6k|    {
  754|  65.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  65.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.6k|              cvref<T> obj = *get<T>(fn);
  745|  65.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.6k|              }
  748|  65.6k|              else {
  749|  65.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.6k|              }
  751|  65.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  65.6k|    {
  684|  65.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.6k|            return static_cast<T*>(s.m_cp);
  686|  65.6k|        }
  687|  65.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.6k|            return static_cast<T*>(s.m_p);
  689|  65.6k|        }
  690|  65.6k|        else {
  691|  65.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.6k|        }
  693|  65.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  65.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  65.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  65.6k|        {
  662|  65.6k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  83.7k|    {
 6178|  83.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  83.7k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  83.7k|            auto rd = make_reader<T, char_type>();
 6183|  83.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  83.7k|                return unexpected(e);
 6185|  83.7k|            }
 6186|       |
 6187|  83.7k|            return impl(rd, range, value);
 6188|  83.7k|        }
 6189|  83.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  83.7k|            auto rd = make_reader<T, char_type>();
 6191|  83.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.7k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  83.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 83.7k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  83.7k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  83.7k|                return impl(rd, range, value);
 6198|  83.7k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  83.7k|        else {
 6206|  83.7k|            SCN_EXPECT(false);
 6207|  83.7k|            SCN_UNREACHABLE;
 6208|  83.7k|        }
 6209|  83.7k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  83.7k|    {
 6120|  83.7k|        const bool need_skipped_width =
 6121|  83.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 83.7k]
  |  Branch (6121:33): [True: 0, False: 83.7k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  83.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  83.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 570, False: 83.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    570|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    570|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    570|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    570|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    570|    }                                                  \
  |  |  |  | 3667|  83.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  83.1k|        auto [it, prefix_width] = prefix_result;
 6126|  83.1k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  83.1k|        std::ptrdiff_t value_width = 0;
 6130|  83.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 83.1k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  83.1k|        else {
 6146|  83.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  83.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  83.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.3k, False: 17.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.3k|    }                                                  \
  |  | 3667|  83.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  83.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  17.7k|                                             specs, value, loc));
 6148|       |
 6149|  17.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 17.7k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  17.7k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  17.7k|        std::ptrdiff_t postfix_width = 0;
 6158|  17.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 17.6k, False: 132]
  ------------------
 6159|  17.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  17.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  17.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  17.6k|                                 value_width));
 6163|  17.6k|            std::tie(it, postfix_width) = postfix_result;
 6164|  17.6k|        }
 6165|       |
 6166|  17.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  17.7k|                                                 value_width, postfix_width);
 6168|  17.7k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 17.7k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  17.7k|        return it;
 6173|  17.7k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  94.5k|    {
 3691|  94.5k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  94.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  94.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  94.5k|        const std::ptrdiff_t sign_len =
 3694|  94.5k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 65, False: 94.4k]
  ------------------
 3695|       |
 3696|  94.5k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.7k, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.7k|    }                                                  \
  |  |  |  | 3667|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  48.8k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  94.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  83.1k|    {
 4170|  83.1k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  83.1k|#if !SCN_DISABLE_LOCALE
 4173|  83.1k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 17.4k, False: 65.7k]
  ------------------
 4174|  17.4k|            return read_impl<Range>(
 4175|  17.4k|                range, rd,
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  17.4k|                },
 4179|  17.4k|                value, loc);
 4180|  17.4k|        }
 4181|  65.7k|#endif
 4182|       |
 4183|  65.7k|        return read_impl<Range>(
 4184|  65.7k|            range, rd,
 4185|  65.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  65.7k|            },
 4188|  65.7k|            value);
 4189|  83.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   109k|    {
 4206|   109k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   109k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.9k, False: 24.4k]
  |  |  ------------------
  ------------------
 4208|  84.9k|            return unexpected(r.error());
 4209|  84.9k|        }
 4210|       |
 4211|  24.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  24.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  24.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  24.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  24.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  24.3k|        return ranges::next(range.begin(), n);
 4213|  24.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  17.4k|    {
  754|  17.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  17.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.4k|              cvref<T> obj = *get<T>(fn);
  745|  17.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.4k|              }
  748|  17.4k|              else {
  749|  17.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.4k|              }
  751|  17.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  17.4k|    {
  684|  17.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.4k|            return static_cast<T*>(s.m_cp);
  686|  17.4k|        }
  687|  17.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.4k|            return static_cast<T*>(s.m_p);
  689|  17.4k|        }
  690|  17.4k|        else {
  691|  17.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.4k|        }
  693|  17.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  17.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  17.4k|        {
  662|  17.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  65.7k|    {
  754|  65.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  65.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.7k|              cvref<T> obj = *get<T>(fn);
  745|  65.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.7k|              }
  748|  65.7k|              else {
  749|  65.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.7k|              }
  751|  65.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  65.7k|    {
  684|  65.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.7k|            return static_cast<T*>(s.m_cp);
  686|  65.7k|        }
  687|  65.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.7k|            return static_cast<T*>(s.m_p);
  689|  65.7k|        }
  690|  65.7k|        else {
  691|  65.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.7k|        }
  693|  65.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  65.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  65.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  65.7k|        {
  662|  65.7k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  83.2k|    {
 4170|  83.2k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  83.2k|#if !SCN_DISABLE_LOCALE
 4173|  83.2k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 17.4k, False: 65.7k]
  ------------------
 4174|  17.4k|            return read_impl<Range>(
 4175|  17.4k|                range, rd,
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  17.4k|                },
 4179|  17.4k|                value, loc);
 4180|  17.4k|        }
 4181|  65.7k|#endif
 4182|       |
 4183|  65.7k|        return read_impl<Range>(
 4184|  65.7k|            range, rd,
 4185|  65.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  65.7k|            },
 4188|  65.7k|            value);
 4189|  83.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   109k|    {
 4206|   109k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   109k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.3k, False: 70.0k]
  |  |  ------------------
  ------------------
 4208|  39.3k|            return unexpected(r.error());
 4209|  39.3k|        }
 4210|       |
 4211|  70.0k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.6k, False: 24.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.6k|    }                                                  \
  |  |  |  | 3667|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  24.4k|        return ranges::next(range.begin(), n);
 4213|  70.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  17.4k|    {
  754|  17.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  17.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.4k|              cvref<T> obj = *get<T>(fn);
  745|  17.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.4k|              }
  748|  17.4k|              else {
  749|  17.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.4k|              }
  751|  17.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  17.4k|    {
  684|  17.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.4k|            return static_cast<T*>(s.m_cp);
  686|  17.4k|        }
  687|  17.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.4k|            return static_cast<T*>(s.m_p);
  689|  17.4k|        }
  690|  17.4k|        else {
  691|  17.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.4k|        }
  693|  17.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  17.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  17.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  17.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  17.4k|        {
  662|  17.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  65.7k|    {
  754|  65.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  65.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.7k|              cvref<T> obj = *get<T>(fn);
  745|  65.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.7k|              }
  748|  65.7k|              else {
  749|  65.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.7k|              }
  751|  65.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  65.7k|    {
  684|  65.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.7k|            return static_cast<T*>(s.m_cp);
  686|  65.7k|        }
  687|  65.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.7k|            return static_cast<T*>(s.m_p);
  689|  65.7k|        }
  690|  65.7k|        else {
  691|  65.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.7k|        }
  693|  65.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  65.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  65.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  65.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  65.7k|        {
  662|  65.7k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   329k|{
 2061|   329k|    auto it = range.begin();
 2062|   397k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 395k, False: 2.08k]
  ------------------
 2063|   395k|        const auto val =
 2064|   395k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   395k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   395k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 395k, False: 0]
  |  |  ------------------
  ------------------
 2066|   395k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   395k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   395k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 327k, False: 68.2k]
  ------------------
 2069|   327k|                return it;
 2070|   327k|            }
 2071|   395k|        }
 2072|  68.2k|        it = val.iterator;
 2073|  68.2k|    }
 2074|       |
 2075|  2.08k|    return it;
 2076|   329k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   395k|{
 1899|   395k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   395k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   395k|    auto it = range.begin();
 1903|   395k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   395k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 395k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   395k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 395k, False: 0]
  ------------------
 1912|   395k|        ++it;
 1913|   395k|        return {it, string_type(1, *range.begin())};
 1914|   395k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   395k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   395k|    {
 1890|   395k|        return !codepoint.empty();
 1891|   395k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   329k|{
 2082|   329k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   329k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   329k|{
 2951|   329k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 329k, False: 0]
  ------------------
 2952|   329k|        auto it = read_while_classic_space(range);
 2953|   329k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   329k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.08k, False: 327k]
  |  |  ------------------
  ------------------
 2955|  2.08k|            return unexpected(e);
 2956|  2.08k|        }
 2957|       |
 2958|   327k|        return it;
 2959|   329k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   329k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   329k|{
 2117|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   329k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   329k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   329k|        auto buf = make_contiguous_buffer(range);
 2121|   329k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   329k|        return ranges::next(range.begin(),
 2123|   329k|                            ranges::distance(buf.view().begin(), it));
 2124|   329k|    }
 2125|   329k|    else {
 2126|   329k|        auto it = range.begin();
 2127|       |
 2128|   329k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   329k|            auto seg = get_contiguous_beginning(range);
 2130|   329k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   329k|                seg_it != seg.end()) {
 2132|   329k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   329k|            }
 2134|   329k|            ranges::advance(it, seg.size());
 2135|   329k|        }
 2136|       |
 2137|   329k|        return read_while_code_point(
 2138|   329k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   329k|    }
 2140|   329k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   329k|    {
  754|   329k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   395k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   395k|              cvref<T> obj = *get<T>(fn);
  745|   395k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   395k|                  obj(static_cast<decltype(args)>(args)...);
  747|   395k|              }
  748|   395k|              else {
  749|   395k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   395k|              }
  751|   395k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   395k|    {
  684|   395k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   395k|            return static_cast<T*>(s.m_cp);
  686|   395k|        }
  687|   395k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   395k|            return static_cast<T*>(s.m_p);
  689|   395k|        }
  690|   395k|        else {
  691|   395k|            return reinterpret_cast<T*>(s.m_fp);
  692|   395k|        }
  693|   395k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   395k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   329k|        {
  662|   329k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.26M|{
 2088|  2.26M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.26M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.26M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.26M|        auto buf = make_contiguous_buffer(range);
 2092|  2.26M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.26M|        return ranges::next(range.begin(),
 2094|  2.26M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.26M|    }
 2096|  2.26M|    else {
 2097|  2.26M|        auto it = range.begin();
 2098|       |
 2099|  2.26M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.26M|            auto seg = get_contiguous_beginning(range);
 2101|  2.26M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.26M|                seg_it != seg.end()) {
 2103|  2.26M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.26M|            }
 2105|  2.26M|            ranges::advance(it, seg.size());
 2106|  2.26M|        }
 2107|       |
 2108|  2.26M|        return read_until_code_point(
 2109|  2.26M|            ranges::subrange{it, range.end()},
 2110|  2.26M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.26M|    }
 2112|  2.26M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.26M|{
 1683|  2.26M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.26M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.26M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.26M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.26M|    }
 1688|  2.26M|    else {
 1689|  2.26M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.26M|    }
 1691|  2.26M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.26M|    {
 1490|  2.26M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.26M|    {
 1577|  2.26M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.26M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.26M|    {
 1621|  2.26M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.26M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.26M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.26M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.26M|            m_storage.reset();
 1627|  2.26M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.26M|        }
 1629|  2.26M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.26M|                                          std::basic_string<CharT>>) {
 1631|  2.26M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.26M|            m_view = string_view_type{*m_storage};
 1633|  2.26M|        }
 1634|  2.26M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.26M|                                          typename detail::basic_scan_buffer<
 1636|  2.26M|                                              value_t>::forward_iterator> &&
 1637|  2.26M|                           ranges::common_range<Range>) {
 1638|  2.26M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.26M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.26M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.26M|                             detail::to_address(end_seg.end()))) {
 1642|  2.26M|                auto& str = m_storage.emplace();
 1643|  2.26M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.26M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.26M|                m_view = string_view_type{str};
 1646|  2.26M|                return;
 1647|  2.26M|            }
 1648|       |
 1649|  2.26M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.26M|                                                            end_seg.data());
 1651|  2.26M|            m_storage.reset();
 1652|  2.26M|        }
 1653|  2.26M|        else {
 1654|  2.26M|            auto& str = m_storage.emplace();
 1655|  2.26M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.26M|                str.reserve(range.size());
 1657|  2.26M|            }
 1658|  2.26M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.26M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.26M|                          std::back_inserter(str));
 1661|  2.26M|            }
 1662|  2.26M|            else {
 1663|  2.26M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.26M|                     ++it) {
 1665|  2.26M|                    str.push_back(*it);
 1666|  2.26M|                }
 1667|  2.26M|            }
 1668|  2.26M|            m_view = string_view_type{str};
 1669|  2.26M|        }
 1670|  2.26M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.54M|    {
 4100|  1.54M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 180k, False: 1.36M]
  ------------------
 4101|   180k|            return std::copysign(value, T{-1.0});
 4102|   180k|        }
 4103|  1.36M|        return std::copysign(value, T{1.0});
 4104|  1.54M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  66.0k|{
 2088|  66.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  66.0k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  66.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  66.0k|        auto buf = make_contiguous_buffer(range);
 2092|  66.0k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  66.0k|        return ranges::next(range.begin(),
 2094|  66.0k|                            ranges::distance(buf.view().begin(), it));
 2095|  66.0k|    }
 2096|  66.0k|    else {
 2097|  66.0k|        auto it = range.begin();
 2098|       |
 2099|  66.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  66.0k|            auto seg = get_contiguous_beginning(range);
 2101|  66.0k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  66.0k|                seg_it != seg.end()) {
 2103|  66.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  66.0k|            }
 2105|  66.0k|            ranges::advance(it, seg.size());
 2106|  66.0k|        }
 2107|       |
 2108|  66.0k|        return read_until_code_point(
 2109|  66.0k|            ranges::subrange{it, range.end()},
 2110|  66.0k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  66.0k|    }
 2112|  66.0k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  66.0k|    {
  754|  66.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|   144k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   144k|                  obj(static_cast<decltype(args)>(args)...);
  747|   144k|              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   144k|    {
  684|   144k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   144k|            return static_cast<T*>(s.m_cp);
  686|   144k|        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   144k|            return static_cast<T*>(s.m_p);
  689|   144k|        }
  690|   144k|        else {
  691|   144k|            return reinterpret_cast<T*>(s.m_fp);
  692|   144k|        }
  693|   144k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   144k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  66.0k|        {
  662|  66.0k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  66.0k|    {
 1577|  66.0k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  66.0k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  66.0k|    {
 1621|  66.0k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  66.0k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  66.0k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  66.0k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  66.0k|            m_storage.reset();
 1627|  66.0k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  66.0k|        }
 1629|  66.0k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  66.0k|                                          std::basic_string<CharT>>) {
 1631|  66.0k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  66.0k|            m_view = string_view_type{*m_storage};
 1633|  66.0k|        }
 1634|  66.0k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  66.0k|                                          typename detail::basic_scan_buffer<
 1636|  66.0k|                                              value_t>::forward_iterator> &&
 1637|  66.0k|                           ranges::common_range<Range>) {
 1638|  66.0k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  66.0k|            auto end_seg = range.end().contiguous_segment();
 1640|  66.0k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  66.0k|                             detail::to_address(end_seg.end()))) {
 1642|  66.0k|                auto& str = m_storage.emplace();
 1643|  66.0k|                str.reserve(range.end().position() - range.begin().position());
 1644|  66.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  66.0k|                m_view = string_view_type{str};
 1646|  66.0k|                return;
 1647|  66.0k|            }
 1648|       |
 1649|  66.0k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  66.0k|                                                            end_seg.data());
 1651|  66.0k|            m_storage.reset();
 1652|  66.0k|        }
 1653|  66.0k|        else {
 1654|  66.0k|            auto& str = m_storage.emplace();
 1655|  66.0k|            if constexpr (ranges::sized_range<Range>) {
 1656|  66.0k|                str.reserve(range.size());
 1657|  66.0k|            }
 1658|  66.0k|            if constexpr (ranges::common_range<Range>) {
 1659|  66.0k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  66.0k|                          std::back_inserter(str));
 1661|  66.0k|            }
 1662|  66.0k|            else {
 1663|  66.0k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  66.0k|                     ++it) {
 1665|  66.0k|                    str.push_back(*it);
 1666|  66.0k|                }
 1667|  66.0k|            }
 1668|  66.0k|            m_view = string_view_type{str};
 1669|  66.0k|        }
 1670|  66.0k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|  94.2k|    {
 4100|  94.2k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 63, False: 94.2k]
  ------------------
 4101|     63|            return std::copysign(value, T{-1.0});
 4102|     63|        }
 4103|  94.2k|        return std::copysign(value, T{1.0});
 4104|  94.2k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.67M|    {
 4100|  1.67M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 193k, False: 1.47M]
  ------------------
 4101|   193k|            return std::copysign(value, T{-1.0});
 4102|   193k|        }
 4103|  1.47M|        return std::copysign(value, T{1.0});
 4104|  1.67M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  94.3k|    {
 4100|  94.3k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 63, False: 94.3k]
  ------------------
 4101|     63|            return std::copysign(value, T{-1.0});
 4102|     63|        }
 4103|  94.3k|        return std::copysign(value, T{1.0});
 4104|  94.3k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.69M|    {
 4100|  1.69M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 198k, False: 1.49M]
  ------------------
 4101|   198k|            return std::copysign(value, T{-1.0});
 4102|   198k|        }
 4103|  1.49M|        return std::copysign(value, T{1.0});
 4104|  1.69M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|  94.5k|    {
 4100|  94.5k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 63, False: 94.4k]
  ------------------
 4101|     63|            return std::copysign(value, T{-1.0});
 4102|     63|        }
 4103|  94.4k|        return std::copysign(value, T{1.0});
 4104|  94.5k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   765k|{
 5795|   765k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.15k, False: 758k]
  |  |  ------------------
  ------------------
 5796|  6.15k|        return unexpected(e);
 5797|  6.15k|    }
 5798|       |
 5799|   758k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 758k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   758k|    return skip_classic_whitespace(range);
 5804|   758k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   236k|    {
 5871|   236k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   236k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   236k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   236k|            auto rd = make_reader<T, char_type>();
 5876|   236k|            return impl(rd, range, value);
 5877|   236k|        }
 5878|   236k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   236k|            auto rd = make_reader<T, char_type>();
 5880|   236k|            if (!is_segment_contiguous(range)) {
 5881|   236k|                return impl(rd, range, value);
 5882|   236k|            }
 5883|   236k|            auto crange = get_as_contiguous(range);
 5884|   236k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   236k|            return ranges::next(range.begin(),
 5886|   236k|                                ranges::distance(crange.begin(), it));
 5887|   236k|        }
 5888|   236k|        else {
 5889|   236k|            SCN_EXPECT(false);
 5890|   236k|            SCN_UNREACHABLE;
 5891|   236k|        }
 5892|   236k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   236k|    {
 5863|   236k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.17k, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.17k|    }                                                  \
  |  |  |  | 3667|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   234k|                        .transform_error(make_eof_scan_error));
 5865|   234k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   236k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   234k|    {
 4152|   234k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   234k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   234k|        float_reader<CharT> rd{};
 4155|   234k|        return read_impl<Range>(
 4156|   234k|            range, rd,
 4157|   234k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   234k|                return r.read_source(SCN_FWD(args)...);
 4159|   234k|            },
 4160|   234k|            value);
 4161|   234k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.47M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.62M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   234k|    {
  754|   234k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   234k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   234k|              cvref<T> obj = *get<T>(fn);
  745|   234k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   234k|                  obj(static_cast<decltype(args)>(args)...);
  747|   234k|              }
  748|   234k|              else {
  749|   234k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   234k|              }
  751|   234k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   234k|    {
  684|   234k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   234k|            return static_cast<T*>(s.m_cp);
  686|   234k|        }
  687|   234k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   234k|            return static_cast<T*>(s.m_p);
  689|   234k|        }
  690|   234k|        else {
  691|   234k|            return reinterpret_cast<T*>(s.m_fp);
  692|   234k|        }
  693|   234k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   234k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   234k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   234k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   234k|        {
  662|   234k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   261k|    {
 5871|   261k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   261k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   261k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   261k|            auto rd = make_reader<T, char_type>();
 5876|   261k|            return impl(rd, range, value);
 5877|   261k|        }
 5878|   261k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   261k|            auto rd = make_reader<T, char_type>();
 5880|   261k|            if (!is_segment_contiguous(range)) {
 5881|   261k|                return impl(rd, range, value);
 5882|   261k|            }
 5883|   261k|            auto crange = get_as_contiguous(range);
 5884|   261k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   261k|            return ranges::next(range.begin(),
 5886|   261k|                                ranges::distance(crange.begin(), it));
 5887|   261k|        }
 5888|   261k|        else {
 5889|   261k|            SCN_EXPECT(false);
 5890|   261k|            SCN_UNREACHABLE;
 5891|   261k|        }
 5892|   261k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   261k|    {
 5863|   261k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.50k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.50k|    }                                                  \
  |  |  |  | 3667|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   259k|                        .transform_error(make_eof_scan_error));
 5865|   259k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   261k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   259k|    {
 4152|   259k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   259k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   259k|        float_reader<CharT> rd{};
 4155|   259k|        return read_impl<Range>(
 4156|   259k|            range, rd,
 4157|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   259k|                return r.read_source(SCN_FWD(args)...);
 4159|   259k|            },
 4160|   259k|            value);
 4161|   259k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   259k|    {
  754|   259k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   259k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   259k|              cvref<T> obj = *get<T>(fn);
  745|   259k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   259k|                  obj(static_cast<decltype(args)>(args)...);
  747|   259k|              }
  748|   259k|              else {
  749|   259k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   259k|              }
  751|   259k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   259k|    {
  684|   259k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   259k|            return static_cast<T*>(s.m_cp);
  686|   259k|        }
  687|   259k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   259k|            return static_cast<T*>(s.m_p);
  689|   259k|        }
  690|   259k|        else {
  691|   259k|            return reinterpret_cast<T*>(s.m_fp);
  692|   259k|        }
  693|   259k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   259k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   259k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   259k|        {
  662|   259k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   266k|    {
 5871|   266k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   266k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   266k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   266k|            auto rd = make_reader<T, char_type>();
 5876|   266k|            return impl(rd, range, value);
 5877|   266k|        }
 5878|   266k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   266k|            auto rd = make_reader<T, char_type>();
 5880|   266k|            if (!is_segment_contiguous(range)) {
 5881|   266k|                return impl(rd, range, value);
 5882|   266k|            }
 5883|   266k|            auto crange = get_as_contiguous(range);
 5884|   266k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   266k|            return ranges::next(range.begin(),
 5886|   266k|                                ranges::distance(crange.begin(), it));
 5887|   266k|        }
 5888|   266k|        else {
 5889|   266k|            SCN_EXPECT(false);
 5890|   266k|            SCN_UNREACHABLE;
 5891|   266k|        }
 5892|   266k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   266k|    {
 5863|   266k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   266k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   266k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   266k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.67k, False: 263k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.67k|    }                                                  \
  |  |  |  | 3667|   266k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   263k|                        .transform_error(make_eof_scan_error));
 5865|   263k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   266k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   263k|    {
 4152|   263k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   263k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   263k|        float_reader<CharT> rd{};
 4155|   263k|        return read_impl<Range>(
 4156|   263k|            range, rd,
 4157|   263k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   263k|                return r.read_source(SCN_FWD(args)...);
 4159|   263k|            },
 4160|   263k|            value);
 4161|   263k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   263k|    {
  754|   263k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   263k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   263k|              cvref<T> obj = *get<T>(fn);
  745|   263k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   263k|                  obj(static_cast<decltype(args)>(args)...);
  747|   263k|              }
  748|   263k|              else {
  749|   263k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   263k|              }
  751|   263k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   263k|    {
  684|   263k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   263k|            return static_cast<T*>(s.m_cp);
  686|   263k|        }
  687|   263k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   263k|            return static_cast<T*>(s.m_p);
  689|   263k|        }
  690|   263k|        else {
  691|   263k|            return reinterpret_cast<T*>(s.m_fp);
  692|   263k|        }
  693|   263k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   263k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   263k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   263k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   263k|        {
  662|   263k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   721k|{
 5795|   721k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.18k, False: 715k]
  |  |  ------------------
  ------------------
 5796|  6.18k|        return unexpected(e);
 5797|  6.18k|    }
 5798|       |
 5799|   715k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 715k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   715k|    return skip_classic_whitespace(range);
 5804|   715k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   223k|    {
 5871|   223k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   223k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   223k|            auto rd = make_reader<T, char_type>();
 5876|   223k|            return impl(rd, range, value);
 5877|   223k|        }
 5878|   223k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   223k|            auto rd = make_reader<T, char_type>();
 5880|   223k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 223k, False: 0]
  ------------------
 5881|   223k|                return impl(rd, range, value);
 5882|   223k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   223k|        else {
 5889|   223k|            SCN_EXPECT(false);
 5890|   223k|            SCN_UNREACHABLE;
 5891|   223k|        }
 5892|   223k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   223k|    {
 5863|   223k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.16k, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.16k|    }                                                  \
  |  |  |  | 3667|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   221k|                        .transform_error(make_eof_scan_error));
 5865|   221k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   223k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   221k|    {
 4152|   221k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   221k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   221k|        float_reader<CharT> rd{};
 4155|   221k|        return read_impl<Range>(
 4156|   221k|            range, rd,
 4157|   221k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   221k|                return r.read_source(SCN_FWD(args)...);
 4159|   221k|            },
 4160|   221k|            value);
 4161|   221k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   221k|    {
  754|   221k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   221k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   221k|              cvref<T> obj = *get<T>(fn);
  745|   221k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   221k|                  obj(static_cast<decltype(args)>(args)...);
  747|   221k|              }
  748|   221k|              else {
  749|   221k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   221k|              }
  751|   221k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   221k|    {
  684|   221k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   221k|            return static_cast<T*>(s.m_cp);
  686|   221k|        }
  687|   221k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   221k|            return static_cast<T*>(s.m_p);
  689|   221k|        }
  690|   221k|        else {
  691|   221k|            return reinterpret_cast<T*>(s.m_fp);
  692|   221k|        }
  693|   221k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   221k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   221k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   221k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   221k|        {
  662|   221k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   247k|    {
 5871|   247k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   247k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   247k|            auto rd = make_reader<T, char_type>();
 5876|   247k|            return impl(rd, range, value);
 5877|   247k|        }
 5878|   247k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   247k|            auto rd = make_reader<T, char_type>();
 5880|   247k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 247k, False: 0]
  ------------------
 5881|   247k|                return impl(rd, range, value);
 5882|   247k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   247k|        else {
 5889|   247k|            SCN_EXPECT(false);
 5890|   247k|            SCN_UNREACHABLE;
 5891|   247k|        }
 5892|   247k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   247k|    {
 5863|   247k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.48k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.48k|    }                                                  \
  |  |  |  | 3667|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   244k|                        .transform_error(make_eof_scan_error));
 5865|   244k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   247k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   244k|    {
 4152|   244k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   244k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   244k|        float_reader<CharT> rd{};
 4155|   244k|        return read_impl<Range>(
 4156|   244k|            range, rd,
 4157|   244k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   244k|                return r.read_source(SCN_FWD(args)...);
 4159|   244k|            },
 4160|   244k|            value);
 4161|   244k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   244k|    {
  754|   244k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   244k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   244k|              cvref<T> obj = *get<T>(fn);
  745|   244k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   244k|                  obj(static_cast<decltype(args)>(args)...);
  747|   244k|              }
  748|   244k|              else {
  749|   244k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   244k|              }
  751|   244k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   244k|    {
  684|   244k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   244k|            return static_cast<T*>(s.m_cp);
  686|   244k|        }
  687|   244k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   244k|            return static_cast<T*>(s.m_p);
  689|   244k|        }
  690|   244k|        else {
  691|   244k|            return reinterpret_cast<T*>(s.m_fp);
  692|   244k|        }
  693|   244k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   244k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   244k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   244k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   244k|        {
  662|   244k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   250k|    {
 5871|   250k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   250k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   250k|            auto rd = make_reader<T, char_type>();
 5876|   250k|            return impl(rd, range, value);
 5877|   250k|        }
 5878|   250k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   250k|            auto rd = make_reader<T, char_type>();
 5880|   250k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 250k, False: 0]
  ------------------
 5881|   250k|                return impl(rd, range, value);
 5882|   250k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   250k|        else {
 5889|   250k|            SCN_EXPECT(false);
 5890|   250k|            SCN_UNREACHABLE;
 5891|   250k|        }
 5892|   250k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   250k|    {
 5863|   250k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.64k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.64k|    }                                                  \
  |  |  |  | 3667|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   247k|                        .transform_error(make_eof_scan_error));
 5865|   247k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   250k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   247k|    {
 4152|   247k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   247k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   247k|        float_reader<CharT> rd{};
 4155|   247k|        return read_impl<Range>(
 4156|   247k|            range, rd,
 4157|   247k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   247k|                return r.read_source(SCN_FWD(args)...);
 4159|   247k|            },
 4160|   247k|            value);
 4161|   247k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   247k|    {
  754|   247k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   247k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   247k|              cvref<T> obj = *get<T>(fn);
  745|   247k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   247k|                  obj(static_cast<decltype(args)>(args)...);
  747|   247k|              }
  748|   247k|              else {
  749|   247k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   247k|              }
  751|   247k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   247k|    {
  684|   247k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   247k|            return static_cast<T*>(s.m_cp);
  686|   247k|        }
  687|   247k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   247k|            return static_cast<T*>(s.m_p);
  689|   247k|        }
  690|   247k|        else {
  691|   247k|            return reinterpret_cast<T*>(s.m_fp);
  692|   247k|        }
  693|   247k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   247k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   247k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   247k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   247k|        {
  662|   247k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.77M|    {
 2879|  1.77M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  5.22M|    {
 2883|  5.22M|        return m_current;
 2884|  5.22M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.44M|    {
 2888|  3.44M|        return m_range.end();
 2889|  3.44M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.67M|    {
 2903|  1.67M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.67M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.67M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.67M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.67M|        }
 2909|  1.67M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.67M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.77M|    {
 2893|  1.77M|        return ranges::subrange{begin(), end()};
 2894|  1.77M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.77M|    {
 6037|  1.77M|        const bool need_skipped_width =
 6038|  1.77M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.77M]
  |  Branch (6038:33): [True: 0, False: 1.77M]
  ------------------
 6039|  1.77M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.77M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.77M]
  ------------------
 6043|  1.77M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.77M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.77M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.77M, False: 0]
  |  Branch (6047:56): [True: 1.77M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.77M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.77M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.52M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.77M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 1.75M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.6k|    }                                                  \
  |  |  |  | 3667|  1.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.52M|                            make_eof_scan_error));
 6058|       |
 6059|  3.52M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.75M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.75M|            return result_type{it, 0};
 6067|  3.52M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.77M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.65M|    {
 6079|  1.65M|        const bool need_skipped_width =
 6080|  1.65M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.65M]
  |  Branch (6080:33): [True: 0, False: 1.65M]
  ------------------
 6081|  1.65M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.65M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.65M]
  ------------------
 6084|  1.65M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.65M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.65M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.65M, False: 0]
  ------------------
 6089|  1.65M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.65M]
  ------------------
 6090|  1.65M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.65M|        return result_type{rng.begin(), 0};
 6114|  1.65M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6177|   562k|    {
 6178|   562k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   562k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   562k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   562k|            auto rd = make_reader<T, char_type>();
 6183|   562k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 562k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   562k|            return impl(rd, range, value);
 6188|   562k|        }
 6189|   562k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   562k|            auto rd = make_reader<T, char_type>();
 6191|   562k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   562k|                return unexpected(e);
 6193|   562k|            }
 6194|       |
 6195|   562k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   562k|                specs.width != 0) {
 6197|   562k|                return impl(rd, range, value);
 6198|   562k|            }
 6199|       |
 6200|   562k|            auto crange = get_as_contiguous(range);
 6201|   562k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   562k|            return ranges::next(range.begin(),
 6203|   562k|                                ranges::distance(crange.begin(), it));
 6204|   562k|        }
 6205|   562k|        else {
 6206|   562k|            SCN_EXPECT(false);
 6207|   562k|            SCN_UNREACHABLE;
 6208|   562k|        }
 6209|   562k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   562k|    {
 6120|   562k|        const bool need_skipped_width =
 6121|   562k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 562k]
  |  Branch (6121:33): [True: 0, False: 562k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   562k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   562k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   562k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   562k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.67k, False: 556k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.67k|    }                                                  \
  |  |  |  | 3667|   562k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   556k|        auto [it, prefix_width] = prefix_result;
 6126|   556k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   556k|        std::ptrdiff_t value_width = 0;
 6130|   556k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 556k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   556k|        else {
 6146|   556k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   556k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   556k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   556k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.3k, False: 529k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  27.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  27.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  27.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  27.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  27.3k|    }                                                  \
  |  | 3667|   556k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   529k|                                             specs, value, loc));
 6148|       |
 6149|   529k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 529k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   529k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   529k|        std::ptrdiff_t postfix_width = 0;
 6158|   529k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 524k, False: 4.71k]
  ------------------
 6159|   524k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   524k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   524k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   524k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   524k|                                 value_width));
 6163|   524k|            std::tie(it, postfix_width) = postfix_result;
 6164|   524k|        }
 6165|       |
 6166|   529k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   529k|                                                 value_width, postfix_width);
 6168|   529k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 529k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   529k|        return it;
 6173|   529k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6177|   602k|    {
 6178|   602k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   602k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   602k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   602k|            auto rd = make_reader<T, char_type>();
 6183|   602k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 602k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   602k|            return impl(rd, range, value);
 6188|   602k|        }
 6189|   602k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   602k|            auto rd = make_reader<T, char_type>();
 6191|   602k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   602k|                return unexpected(e);
 6193|   602k|            }
 6194|       |
 6195|   602k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   602k|                specs.width != 0) {
 6197|   602k|                return impl(rd, range, value);
 6198|   602k|            }
 6199|       |
 6200|   602k|            auto crange = get_as_contiguous(range);
 6201|   602k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   602k|            return ranges::next(range.begin(),
 6203|   602k|                                ranges::distance(crange.begin(), it));
 6204|   602k|        }
 6205|   602k|        else {
 6206|   602k|            SCN_EXPECT(false);
 6207|   602k|            SCN_UNREACHABLE;
 6208|   602k|        }
 6209|   602k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   602k|    {
 6120|   602k|        const bool need_skipped_width =
 6121|   602k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 602k]
  |  Branch (6121:33): [True: 0, False: 602k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   602k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   602k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   602k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   602k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.33k, False: 595k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.33k|    }                                                  \
  |  |  |  | 3667|   602k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   595k|        auto [it, prefix_width] = prefix_result;
 6126|   595k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   595k|        std::ptrdiff_t value_width = 0;
 6130|   595k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 595k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   595k|        else {
 6146|   595k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.6k, False: 569k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  26.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  26.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  26.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  26.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  26.6k|    }                                                  \
  |  | 3667|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   569k|                                             specs, value, loc));
 6148|       |
 6149|   569k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 569k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   569k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   569k|        std::ptrdiff_t postfix_width = 0;
 6158|   569k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 563k, False: 5.27k]
  ------------------
 6159|   563k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   563k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   563k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   563k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 563k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   563k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   563k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   563k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   563k|                                 value_width));
 6163|   563k|            std::tie(it, postfix_width) = postfix_result;
 6164|   563k|        }
 6165|       |
 6166|   569k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   569k|                                                 value_width, postfix_width);
 6168|   569k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 569k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   569k|        return it;
 6173|   569k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6177|   608k|    {
 6178|   608k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   608k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   608k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   608k|            auto rd = make_reader<T, char_type>();
 6183|   608k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 608k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   608k|            return impl(rd, range, value);
 6188|   608k|        }
 6189|   608k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   608k|            auto rd = make_reader<T, char_type>();
 6191|   608k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   608k|                return unexpected(e);
 6193|   608k|            }
 6194|       |
 6195|   608k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   608k|                specs.width != 0) {
 6197|   608k|                return impl(rd, range, value);
 6198|   608k|            }
 6199|       |
 6200|   608k|            auto crange = get_as_contiguous(range);
 6201|   608k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   608k|            return ranges::next(range.begin(),
 6203|   608k|                                ranges::distance(crange.begin(), it));
 6204|   608k|        }
 6205|   608k|        else {
 6206|   608k|            SCN_EXPECT(false);
 6207|   608k|            SCN_UNREACHABLE;
 6208|   608k|        }
 6209|   608k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   608k|    {
 6120|   608k|        const bool need_skipped_width =
 6121|   608k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 608k]
  |  Branch (6121:33): [True: 0, False: 608k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   608k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   608k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   608k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   608k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.69k, False: 602k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.69k|    }                                                  \
  |  |  |  | 3667|   608k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   602k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   602k|        auto [it, prefix_width] = prefix_result;
 6126|   602k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   602k|        std::ptrdiff_t value_width = 0;
 6130|   602k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 602k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   602k|        else {
 6146|   602k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   602k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   602k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.2k, False: 575k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  26.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  26.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  26.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  26.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  26.2k|    }                                                  \
  |  | 3667|   602k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   602k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   575k|                                             specs, value, loc));
 6148|       |
 6149|   575k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 575k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   575k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   575k|        std::ptrdiff_t postfix_width = 0;
 6158|   575k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 570k, False: 5.58k]
  ------------------
 6159|   570k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   570k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   570k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   570k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   570k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 570k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   570k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   570k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   570k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   570k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   570k|                                 value_width));
 6163|   570k|            std::tie(it, postfix_width) = postfix_result;
 6164|   570k|        }
 6165|       |
 6166|   575k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   575k|                                                 value_width, postfix_width);
 6168|   575k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 575k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   575k|        return it;
 6173|   575k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  79.0k|{
 5795|  79.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  79.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 141, False: 78.9k]
  |  |  ------------------
  ------------------
 5796|    141|        return unexpected(e);
 5797|    141|    }
 5798|       |
 5799|  78.9k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 78.9k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  78.9k|    return skip_classic_whitespace(range);
 5804|  78.9k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  26.2k|    {
 5871|  26.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  26.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  26.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  26.2k|            auto rd = make_reader<T, char_type>();
 5876|  26.2k|            return impl(rd, range, value);
 5877|  26.2k|        }
 5878|  26.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  26.2k|            auto rd = make_reader<T, char_type>();
 5880|  26.2k|            if (!is_segment_contiguous(range)) {
 5881|  26.2k|                return impl(rd, range, value);
 5882|  26.2k|            }
 5883|  26.2k|            auto crange = get_as_contiguous(range);
 5884|  26.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  26.2k|            return ranges::next(range.begin(),
 5886|  26.2k|                                ranges::distance(crange.begin(), it));
 5887|  26.2k|        }
 5888|  26.2k|        else {
 5889|  26.2k|            SCN_EXPECT(false);
 5890|  26.2k|            SCN_UNREACHABLE;
 5891|  26.2k|        }
 5892|  26.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  26.2k|    {
 5863|  26.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  26.1k|                        .transform_error(make_eof_scan_error));
 5865|  26.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  26.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  26.1k|    {
 4152|  26.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  26.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  26.1k|        float_reader<CharT> rd{};
 4155|  26.1k|        return read_impl<Range>(
 4156|  26.1k|            range, rd,
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  26.1k|            },
 4160|  26.1k|            value);
 4161|  26.1k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   156k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  26.1k|    {
  754|  26.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  26.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.1k|              cvref<T> obj = *get<T>(fn);
  745|  26.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.1k|              }
  748|  26.1k|              else {
  749|  26.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.1k|              }
  751|  26.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.1k|    {
  684|  26.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.1k|            return static_cast<T*>(s.m_cp);
  686|  26.1k|        }
  687|  26.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.1k|            return static_cast<T*>(s.m_p);
  689|  26.1k|        }
  690|  26.1k|        else {
  691|  26.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.1k|        }
  693|  26.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  26.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  26.1k|        {
  662|  26.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  26.3k|    {
 5871|  26.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  26.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  26.3k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  26.3k|            auto rd = make_reader<T, char_type>();
 5876|  26.3k|            return impl(rd, range, value);
 5877|  26.3k|        }
 5878|  26.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  26.3k|            auto rd = make_reader<T, char_type>();
 5880|  26.3k|            if (!is_segment_contiguous(range)) {
 5881|  26.3k|                return impl(rd, range, value);
 5882|  26.3k|            }
 5883|  26.3k|            auto crange = get_as_contiguous(range);
 5884|  26.3k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  26.3k|            return ranges::next(range.begin(),
 5886|  26.3k|                                ranges::distance(crange.begin(), it));
 5887|  26.3k|        }
 5888|  26.3k|        else {
 5889|  26.3k|            SCN_EXPECT(false);
 5890|  26.3k|            SCN_UNREACHABLE;
 5891|  26.3k|        }
 5892|  26.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  26.3k|    {
 5863|  26.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 189, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    189|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    189|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    189|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    189|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    189|    }                                                  \
  |  |  |  | 3667|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  26.1k|                        .transform_error(make_eof_scan_error));
 5865|  26.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  26.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  26.1k|    {
 4152|  26.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  26.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  26.1k|        float_reader<CharT> rd{};
 4155|  26.1k|        return read_impl<Range>(
 4156|  26.1k|            range, rd,
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  26.1k|            },
 4160|  26.1k|            value);
 4161|  26.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  26.1k|    {
  754|  26.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  26.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.1k|              cvref<T> obj = *get<T>(fn);
  745|  26.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.1k|              }
  748|  26.1k|              else {
  749|  26.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.1k|              }
  751|  26.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.1k|    {
  684|  26.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.1k|            return static_cast<T*>(s.m_cp);
  686|  26.1k|        }
  687|  26.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.1k|            return static_cast<T*>(s.m_p);
  689|  26.1k|        }
  690|  26.1k|        else {
  691|  26.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.1k|        }
  693|  26.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  26.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  26.1k|        {
  662|  26.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  26.4k|    {
 5871|  26.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  26.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  26.4k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  26.4k|            auto rd = make_reader<T, char_type>();
 5876|  26.4k|            return impl(rd, range, value);
 5877|  26.4k|        }
 5878|  26.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  26.4k|            auto rd = make_reader<T, char_type>();
 5880|  26.4k|            if (!is_segment_contiguous(range)) {
 5881|  26.4k|                return impl(rd, range, value);
 5882|  26.4k|            }
 5883|  26.4k|            auto crange = get_as_contiguous(range);
 5884|  26.4k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  26.4k|            return ranges::next(range.begin(),
 5886|  26.4k|                                ranges::distance(crange.begin(), it));
 5887|  26.4k|        }
 5888|  26.4k|        else {
 5889|  26.4k|            SCN_EXPECT(false);
 5890|  26.4k|            SCN_UNREACHABLE;
 5891|  26.4k|        }
 5892|  26.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  26.4k|    {
 5863|  26.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  26.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 195, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    195|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    195|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    195|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    195|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    195|    }                                                  \
  |  |  |  | 3667|  26.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  26.2k|                        .transform_error(make_eof_scan_error));
 5865|  26.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  26.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  26.2k|    {
 4152|  26.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  26.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  26.2k|        float_reader<CharT> rd{};
 4155|  26.2k|        return read_impl<Range>(
 4156|  26.2k|            range, rd,
 4157|  26.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  26.2k|            },
 4160|  26.2k|            value);
 4161|  26.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  26.2k|    {
  754|  26.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  26.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.2k|              cvref<T> obj = *get<T>(fn);
  745|  26.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.2k|              }
  748|  26.2k|              else {
  749|  26.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.2k|              }
  751|  26.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.2k|    {
  684|  26.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.2k|            return static_cast<T*>(s.m_cp);
  686|  26.2k|        }
  687|  26.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.2k|            return static_cast<T*>(s.m_p);
  689|  26.2k|        }
  690|  26.2k|        else {
  691|  26.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.2k|        }
  693|  26.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  26.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  26.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  26.2k|        {
  662|  26.2k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   250k|    {
 2879|   250k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   555k|    {
 2883|   555k|        return m_current;
 2884|   555k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   304k|    {
 2888|   304k|        return m_range.end();
 2889|   304k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  53.0k|    {
 2903|  53.0k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  53.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  53.0k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  53.0k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 53.0k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  53.0k|        }
 2909|  53.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  53.0k|    static_cast<    \
  |  |  929|  53.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  53.0k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   250k|    {
 2893|   250k|        return ranges::subrange{begin(), end()};
 2894|   250k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   250k|    {
 6037|   250k|        const bool need_skipped_width =
 6038|   250k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 250k]
  |  Branch (6038:33): [True: 0, False: 250k]
  ------------------
 6039|   250k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   250k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 250k]
  ------------------
 6043|   250k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 250k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   250k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 250k, False: 0]
  |  Branch (6047:56): [True: 250k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   250k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 250k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   500k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.66k|    }                                                  \
  |  |  |  | 3667|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   500k|                            make_eof_scan_error));
 6058|       |
 6059|   500k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 249k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   249k|            return result_type{it, 0};
 6067|   500k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   250k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  52.7k|    {
 6079|  52.7k|        const bool need_skipped_width =
 6080|  52.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 52.7k]
  |  Branch (6080:33): [True: 0, False: 52.7k]
  ------------------
 6081|  52.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  52.7k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 52.7k]
  ------------------
 6084|  52.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 52.7k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  52.7k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 52.7k, False: 0]
  ------------------
 6089|  52.7k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 52.7k]
  ------------------
 6090|  52.7k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  52.7k|        return result_type{rng.begin(), 0};
 6114|  52.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6177|  83.5k|    {
 6178|  83.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  83.5k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  83.5k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  83.5k|            auto rd = make_reader<T, char_type>();
 6183|  83.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.5k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  83.5k|            return impl(rd, range, value);
 6188|  83.5k|        }
 6189|  83.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  83.5k|            auto rd = make_reader<T, char_type>();
 6191|  83.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  83.5k|                return unexpected(e);
 6193|  83.5k|            }
 6194|       |
 6195|  83.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  83.5k|                specs.width != 0) {
 6197|  83.5k|                return impl(rd, range, value);
 6198|  83.5k|            }
 6199|       |
 6200|  83.5k|            auto crange = get_as_contiguous(range);
 6201|  83.5k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  83.5k|            return ranges::next(range.begin(),
 6203|  83.5k|                                ranges::distance(crange.begin(), it));
 6204|  83.5k|        }
 6205|  83.5k|        else {
 6206|  83.5k|            SCN_EXPECT(false);
 6207|  83.5k|            SCN_UNREACHABLE;
 6208|  83.5k|        }
 6209|  83.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  83.5k|    {
 6120|  83.5k|        const bool need_skipped_width =
 6121|  83.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 83.5k]
  |  Branch (6121:33): [True: 0, False: 83.5k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  83.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  83.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 534, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    534|    }                                                  \
  |  |  |  | 3667|  83.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  83.0k|        auto [it, prefix_width] = prefix_result;
 6126|  83.0k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  83.0k|        std::ptrdiff_t value_width = 0;
 6130|  83.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 83.0k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  83.0k|        else {
 6146|  83.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.4k, False: 17.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.4k|    }                                                  \
  |  | 3667|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  17.5k|                                             specs, value, loc));
 6148|       |
 6149|  17.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 17.5k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  17.5k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  17.5k|        std::ptrdiff_t postfix_width = 0;
 6158|  17.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 17.4k, False: 118]
  ------------------
 6159|  17.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  17.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  17.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  17.4k|                                 value_width));
 6163|  17.4k|            std::tie(it, postfix_width) = postfix_result;
 6164|  17.4k|        }
 6165|       |
 6166|  17.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  17.5k|                                                 value_width, postfix_width);
 6168|  17.5k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 17.5k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  17.5k|        return it;
 6173|  17.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6177|  83.6k|    {
 6178|  83.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  83.6k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  83.6k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  83.6k|            auto rd = make_reader<T, char_type>();
 6183|  83.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.6k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  83.6k|            return impl(rd, range, value);
 6188|  83.6k|        }
 6189|  83.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  83.6k|            auto rd = make_reader<T, char_type>();
 6191|  83.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  83.6k|                return unexpected(e);
 6193|  83.6k|            }
 6194|       |
 6195|  83.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  83.6k|                specs.width != 0) {
 6197|  83.6k|                return impl(rd, range, value);
 6198|  83.6k|            }
 6199|       |
 6200|  83.6k|            auto crange = get_as_contiguous(range);
 6201|  83.6k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  83.6k|            return ranges::next(range.begin(),
 6203|  83.6k|                                ranges::distance(crange.begin(), it));
 6204|  83.6k|        }
 6205|  83.6k|        else {
 6206|  83.6k|            SCN_EXPECT(false);
 6207|  83.6k|            SCN_UNREACHABLE;
 6208|  83.6k|        }
 6209|  83.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  83.6k|    {
 6120|  83.6k|        const bool need_skipped_width =
 6121|  83.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 83.6k]
  |  Branch (6121:33): [True: 0, False: 83.6k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  83.6k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  83.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 560, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    560|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    560|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    560|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    560|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    560|    }                                                  \
  |  |  |  | 3667|  83.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  83.0k|        auto [it, prefix_width] = prefix_result;
 6126|  83.0k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  83.0k|        std::ptrdiff_t value_width = 0;
 6130|  83.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 83.0k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  83.0k|        else {
 6146|  83.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.4k, False: 17.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.4k|    }                                                  \
  |  | 3667|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  17.6k|                                             specs, value, loc));
 6148|       |
 6149|  17.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 17.6k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  17.6k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  17.6k|        std::ptrdiff_t postfix_width = 0;
 6158|  17.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 17.5k, False: 128]
  ------------------
 6159|  17.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  17.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  17.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  17.5k|                                 value_width));
 6163|  17.5k|            std::tie(it, postfix_width) = postfix_result;
 6164|  17.5k|        }
 6165|       |
 6166|  17.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  17.6k|                                                 value_width, postfix_width);
 6168|  17.6k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 17.6k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  17.6k|        return it;
 6173|  17.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6177|  83.7k|    {
 6178|  83.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  83.7k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  83.7k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  83.7k|            auto rd = make_reader<T, char_type>();
 6183|  83.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  83.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 83.7k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  83.7k|            return impl(rd, range, value);
 6188|  83.7k|        }
 6189|  83.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  83.7k|            auto rd = make_reader<T, char_type>();
 6191|  83.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  83.7k|                return unexpected(e);
 6193|  83.7k|            }
 6194|       |
 6195|  83.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  83.7k|                specs.width != 0) {
 6197|  83.7k|                return impl(rd, range, value);
 6198|  83.7k|            }
 6199|       |
 6200|  83.7k|            auto crange = get_as_contiguous(range);
 6201|  83.7k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  83.7k|            return ranges::next(range.begin(),
 6203|  83.7k|                                ranges::distance(crange.begin(), it));
 6204|  83.7k|        }
 6205|  83.7k|        else {
 6206|  83.7k|            SCN_EXPECT(false);
 6207|  83.7k|            SCN_UNREACHABLE;
 6208|  83.7k|        }
 6209|  83.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  83.7k|    {
 6120|  83.7k|        const bool need_skipped_width =
 6121|  83.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 83.7k]
  |  Branch (6121:33): [True: 0, False: 83.7k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  83.7k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  83.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 570, False: 83.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    570|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    570|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    570|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    570|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    570|    }                                                  \
  |  |  |  | 3667|  83.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  83.2k|        auto [it, prefix_width] = prefix_result;
 6126|  83.2k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  83.2k|        std::ptrdiff_t value_width = 0;
 6130|  83.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 83.2k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  83.2k|        else {
 6146|  83.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  83.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  83.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  83.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 65.3k, False: 17.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  65.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  65.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  65.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  65.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  65.3k|    }                                                  \
  |  | 3667|  83.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  83.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  17.8k|                                             specs, value, loc));
 6148|       |
 6149|  17.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 17.8k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  17.8k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  17.8k|        std::ptrdiff_t postfix_width = 0;
 6158|  17.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 17.6k, False: 132]
  ------------------
 6159|  17.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  17.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  17.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  17.6k|                                 value_width));
 6163|  17.6k|            std::tie(it, postfix_width) = postfix_result;
 6164|  17.6k|        }
 6165|       |
 6166|  17.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  17.8k|                                                 value_width, postfix_width);
 6168|  17.8k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 17.8k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  17.8k|        return it;
 6173|  17.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  78.9k|{
 5795|  78.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 141, False: 78.8k]
  |  |  ------------------
  ------------------
 5796|    141|        return unexpected(e);
 5797|    141|    }
 5798|       |
 5799|  78.8k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 78.8k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  78.8k|    return skip_classic_whitespace(range);
 5804|  78.8k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  26.2k|    {
 5871|  26.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  26.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  26.2k|            auto rd = make_reader<T, char_type>();
 5876|  26.2k|            return impl(rd, range, value);
 5877|  26.2k|        }
 5878|  26.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  26.2k|            auto rd = make_reader<T, char_type>();
 5880|  26.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 26.2k, False: 0]
  ------------------
 5881|  26.2k|                return impl(rd, range, value);
 5882|  26.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  26.2k|        else {
 5889|  26.2k|            SCN_EXPECT(false);
 5890|  26.2k|            SCN_UNREACHABLE;
 5891|  26.2k|        }
 5892|  26.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  26.2k|    {
 5863|  26.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 26.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  26.0k|                        .transform_error(make_eof_scan_error));
 5865|  26.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  26.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  26.0k|    {
 4152|  26.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  26.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  26.0k|        float_reader<CharT> rd{};
 4155|  26.0k|        return read_impl<Range>(
 4156|  26.0k|            range, rd,
 4157|  26.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  26.0k|            },
 4160|  26.0k|            value);
 4161|  26.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  26.0k|    {
  754|  26.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  26.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.0k|              cvref<T> obj = *get<T>(fn);
  745|  26.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.0k|              }
  748|  26.0k|              else {
  749|  26.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.0k|              }
  751|  26.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.0k|    {
  684|  26.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.0k|            return static_cast<T*>(s.m_cp);
  686|  26.0k|        }
  687|  26.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.0k|            return static_cast<T*>(s.m_p);
  689|  26.0k|        }
  690|  26.0k|        else {
  691|  26.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.0k|        }
  693|  26.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  26.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  26.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  26.0k|        {
  662|  26.0k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  26.3k|    {
 5871|  26.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  26.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  26.3k|            auto rd = make_reader<T, char_type>();
 5876|  26.3k|            return impl(rd, range, value);
 5877|  26.3k|        }
 5878|  26.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  26.3k|            auto rd = make_reader<T, char_type>();
 5880|  26.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 26.3k, False: 0]
  ------------------
 5881|  26.3k|                return impl(rd, range, value);
 5882|  26.3k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  26.3k|        else {
 5889|  26.3k|            SCN_EXPECT(false);
 5890|  26.3k|            SCN_UNREACHABLE;
 5891|  26.3k|        }
 5892|  26.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  26.3k|    {
 5863|  26.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 189, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    189|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    189|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    189|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    189|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    189|    }                                                  \
  |  |  |  | 3667|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  26.1k|                        .transform_error(make_eof_scan_error));
 5865|  26.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  26.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  26.1k|    {
 4152|  26.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  26.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  26.1k|        float_reader<CharT> rd{};
 4155|  26.1k|        return read_impl<Range>(
 4156|  26.1k|            range, rd,
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  26.1k|            },
 4160|  26.1k|            value);
 4161|  26.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  26.1k|    {
  754|  26.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  26.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.1k|              cvref<T> obj = *get<T>(fn);
  745|  26.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.1k|              }
  748|  26.1k|              else {
  749|  26.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.1k|              }
  751|  26.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.1k|    {
  684|  26.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.1k|            return static_cast<T*>(s.m_cp);
  686|  26.1k|        }
  687|  26.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.1k|            return static_cast<T*>(s.m_p);
  689|  26.1k|        }
  690|  26.1k|        else {
  691|  26.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.1k|        }
  693|  26.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  26.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  26.1k|        {
  662|  26.1k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  26.3k|    {
 5871|  26.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  26.3k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  26.3k|            auto rd = make_reader<T, char_type>();
 5876|  26.3k|            return impl(rd, range, value);
 5877|  26.3k|        }
 5878|  26.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  26.3k|            auto rd = make_reader<T, char_type>();
 5880|  26.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 26.3k, False: 0]
  ------------------
 5881|  26.3k|                return impl(rd, range, value);
 5882|  26.3k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  26.3k|        else {
 5889|  26.3k|            SCN_EXPECT(false);
 5890|  26.3k|            SCN_UNREACHABLE;
 5891|  26.3k|        }
 5892|  26.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  26.3k|    {
 5863|  26.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 195, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    195|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    195|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    195|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    195|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    195|    }                                                  \
  |  |  |  | 3667|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  26.1k|                        .transform_error(make_eof_scan_error));
 5865|  26.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  26.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  26.1k|    {
 4152|  26.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  26.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  26.1k|        float_reader<CharT> rd{};
 4155|  26.1k|        return read_impl<Range>(
 4156|  26.1k|            range, rd,
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  26.1k|            },
 4160|  26.1k|            value);
 4161|  26.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  26.1k|    {
  754|  26.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  26.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.1k|              cvref<T> obj = *get<T>(fn);
  745|  26.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  26.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.1k|              }
  748|  26.1k|              else {
  749|  26.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.1k|              }
  751|  26.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.1k|    {
  684|  26.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  26.1k|            return static_cast<T*>(s.m_cp);
  686|  26.1k|        }
  687|  26.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  26.1k|            return static_cast<T*>(s.m_p);
  689|  26.1k|        }
  690|  26.1k|        else {
  691|  26.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  26.1k|        }
  693|  26.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  26.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  26.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  26.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  26.1k|        {
  662|  26.1k|        }

LLVMFuzzerTestOneInput:
   54|  3.29k|{
   55|  3.29k|    scn::fuzz::run(data, size);
   56|  3.29k|    return 0;
   57|  3.29k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.29k|{
   33|  3.29k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.29k]
  |  Branch (33:35): [True: 0, False: 3.29k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.29k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.29k|    const auto& f =
   40|  3.29k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.29k|    do_basic_run(sv, f);
   42|       |
   43|  3.29k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.29k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.29k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.29k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.29k, False: 0]
  ------------------
   47|  3.29k|        do_basic_run(wsv_transcode, wf);
   48|  3.29k|    }
   49|  3.29k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.29k|{
   25|  3.29k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.29k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.29k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.29k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.29k|{
   25|  3.29k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.29k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.29k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.29k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.59k|{
   25|  6.59k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.59k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.59k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.59k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.59k|{
   25|  6.59k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.59k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.59k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.59k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.29k|{
   52|  3.29k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.29k|    string_buffer.resize(size);
   56|  3.29k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.29k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.29k|    const auto wsv_reinterpret_size =
   61|  3.29k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 71, False: 3.22k]
  ------------------
   62|  3.29k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.29k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.29k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.29k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.29k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.29k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.29k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.29k|{
  122|  3.29k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.29k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.29k|    buf.resize(sizeof...(Args));
  125|  3.29k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.29k|    return buf;
  127|  3.29k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.29k|{
  108|  3.29k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.29k|        return format_string_view_buffer;
  110|  3.29k|    }
  111|  3.29k|    else {
  112|  3.29k|        return wformat_string_view_buffer;
  113|  3.29k|    }
  114|  3.29k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.29k|{
  185|  3.29k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.29k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.29k|                                   format_strings);
  188|  3.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.29k|{
  133|       |    // Regular scan
  134|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.7k, False: 3.29k]
  ------------------
  135|  19.7k|        auto it = scn::ranges::begin(source);
  136|   360k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   360k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   360k|            auto result = scn::scan<T>(
  139|   360k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   360k|                scn::runtime_format(f));
  141|   360k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.7k, False: 340k]
  ------------------
  142|  19.7k|                break;
  143|  19.7k|            }
  144|   340k|            it = result->begin();
  145|   340k|        }
  146|  19.7k|    }
  147|       |
  148|       |    // scan localized
  149|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.7k, False: 3.29k]
  ------------------
  150|  19.7k|        auto it = scn::ranges::begin(source);
  151|   360k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   360k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   360k|            auto result = scn::scan<T>(
  154|   360k|                global_locale,
  155|   360k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   360k|                scn::runtime_format(f));
  157|   360k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.7k, False: 340k]
  ------------------
  158|  19.7k|                break;
  159|  19.7k|            }
  160|   340k|            it = result->begin();
  161|   340k|        }
  162|  19.7k|    }
  163|       |
  164|       |    // scan_value
  165|  3.29k|    {
  166|  3.29k|        auto it = scn::ranges::begin(source);
  167|  78.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  78.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  78.8k|            auto result = scn::scan_value<T>(
  170|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  78.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.29k, False: 75.5k]
  ------------------
  172|  3.29k|                break;
  173|  3.29k|            }
  174|  75.5k|            it = result->begin();
  175|  75.5k|        }
  176|  3.29k|    }
  177|  3.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.29k|{
  133|       |    // Regular scan
  134|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.7k, False: 3.29k]
  ------------------
  135|  19.7k|        auto it = scn::ranges::begin(source);
  136|   388k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   388k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   388k|            auto result = scn::scan<T>(
  139|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   388k|                scn::runtime_format(f));
  141|   388k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.7k, False: 368k]
  ------------------
  142|  19.7k|                break;
  143|  19.7k|            }
  144|   368k|            it = result->begin();
  145|   368k|        }
  146|  19.7k|    }
  147|       |
  148|       |    // scan localized
  149|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.7k, False: 3.29k]
  ------------------
  150|  19.7k|        auto it = scn::ranges::begin(source);
  151|   388k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   388k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   388k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   388k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   388k|            auto result = scn::scan<T>(
  154|   388k|                global_locale,
  155|   388k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   388k|                scn::runtime_format(f));
  157|   388k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.7k, False: 368k]
  ------------------
  158|  19.7k|                break;
  159|  19.7k|            }
  160|   368k|            it = result->begin();
  161|   368k|        }
  162|  19.7k|    }
  163|       |
  164|       |    // scan_value
  165|  3.29k|    {
  166|  3.29k|        auto it = scn::ranges::begin(source);
  167|  87.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  87.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  87.2k|            auto result = scn::scan_value<T>(
  170|  87.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  87.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.29k, False: 83.9k]
  ------------------
  172|  3.29k|                break;
  173|  3.29k|            }
  174|  83.9k|            it = result->begin();
  175|  83.9k|        }
  176|  3.29k|    }
  177|  3.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.29k|{
  133|       |    // Regular scan
  134|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.7k, False: 3.29k]
  ------------------
  135|  19.7k|        auto it = scn::ranges::begin(source);
  136|   393k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   393k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   393k|            auto result = scn::scan<T>(
  139|   393k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   393k|                scn::runtime_format(f));
  141|   393k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.7k, False: 373k]
  ------------------
  142|  19.7k|                break;
  143|  19.7k|            }
  144|   373k|            it = result->begin();
  145|   373k|        }
  146|  19.7k|    }
  147|       |
  148|       |    // scan localized
  149|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.7k, False: 3.29k]
  ------------------
  150|  19.7k|        auto it = scn::ranges::begin(source);
  151|   393k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   393k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   393k|            auto result = scn::scan<T>(
  154|   393k|                global_locale,
  155|   393k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   393k|                scn::runtime_format(f));
  157|   393k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.7k, False: 373k]
  ------------------
  158|  19.7k|                break;
  159|  19.7k|            }
  160|   373k|            it = result->begin();
  161|   373k|        }
  162|  19.7k|    }
  163|       |
  164|       |    // scan_value
  165|  3.29k|    {
  166|  3.29k|        auto it = scn::ranges::begin(source);
  167|  88.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  88.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  88.8k|            auto result = scn::scan_value<T>(
  170|  88.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  88.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.29k, False: 85.5k]
  ------------------
  172|  3.29k|                break;
  173|  3.29k|            }
  174|  85.5k|            it = result->begin();
  175|  85.5k|        }
  176|  3.29k|    }
  177|  3.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.29k|{
  133|       |    // Regular scan
  134|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.7k, False: 3.29k]
  ------------------
  135|  19.7k|        auto it = scn::ranges::begin(source);
  136|   366k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   366k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   366k|            auto result = scn::scan<T>(
  139|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   366k|                scn::runtime_format(f));
  141|   366k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.7k, False: 346k]
  ------------------
  142|  19.7k|                break;
  143|  19.7k|            }
  144|   346k|            it = result->begin();
  145|   346k|        }
  146|  19.7k|    }
  147|       |
  148|       |    // scan localized
  149|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.7k, False: 3.29k]
  ------------------
  150|  19.7k|        auto it = scn::ranges::begin(source);
  151|   366k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   366k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   366k|            auto result = scn::scan<T>(
  154|   366k|                global_locale,
  155|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   366k|                scn::runtime_format(f));
  157|   366k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.7k, False: 346k]
  ------------------
  158|  19.7k|                break;
  159|  19.7k|            }
  160|   346k|            it = result->begin();
  161|   346k|        }
  162|  19.7k|    }
  163|       |
  164|       |    // scan_value
  165|  3.29k|    {
  166|  3.29k|        auto it = scn::ranges::begin(source);
  167|  74.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  74.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  74.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  74.5k|            auto result = scn::scan_value<T>(
  170|  74.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  74.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.29k, False: 71.2k]
  ------------------
  172|  3.29k|                break;
  173|  3.29k|            }
  174|  71.2k|            it = result->begin();
  175|  71.2k|        }
  176|  3.29k|    }
  177|  3.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.29k|{
  133|       |    // Regular scan
  134|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.7k, False: 3.29k]
  ------------------
  135|  19.7k|        auto it = scn::ranges::begin(source);
  136|   395k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   395k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   395k|            auto result = scn::scan<T>(
  139|   395k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   395k|                scn::runtime_format(f));
  141|   395k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.7k, False: 375k]
  ------------------
  142|  19.7k|                break;
  143|  19.7k|            }
  144|   375k|            it = result->begin();
  145|   375k|        }
  146|  19.7k|    }
  147|       |
  148|       |    // scan localized
  149|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.7k, False: 3.29k]
  ------------------
  150|  19.7k|        auto it = scn::ranges::begin(source);
  151|   395k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   395k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   395k|            auto result = scn::scan<T>(
  154|   395k|                global_locale,
  155|   395k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   395k|                scn::runtime_format(f));
  157|   395k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.7k, False: 375k]
  ------------------
  158|  19.7k|                break;
  159|  19.7k|            }
  160|   375k|            it = result->begin();
  161|   375k|        }
  162|  19.7k|    }
  163|       |
  164|       |    // scan_value
  165|  3.29k|    {
  166|  3.29k|        auto it = scn::ranges::begin(source);
  167|  82.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  82.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  82.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  82.4k|            auto result = scn::scan_value<T>(
  170|  82.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  82.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.29k, False: 79.1k]
  ------------------
  172|  3.29k|                break;
  173|  3.29k|            }
  174|  79.1k|            it = result->begin();
  175|  79.1k|        }
  176|  3.29k|    }
  177|  3.29k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.29k|{
  133|       |    // Regular scan
  134|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.7k, False: 3.29k]
  ------------------
  135|  19.7k|        auto it = scn::ranges::begin(source);
  136|   400k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   400k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   400k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   400k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   400k|            auto result = scn::scan<T>(
  139|   400k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   400k|                scn::runtime_format(f));
  141|   400k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.7k, False: 380k]
  ------------------
  142|  19.7k|                break;
  143|  19.7k|            }
  144|   380k|            it = result->begin();
  145|   380k|        }
  146|  19.7k|    }
  147|       |
  148|       |    // scan localized
  149|  19.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.7k, False: 3.29k]
  ------------------
  150|  19.7k|        auto it = scn::ranges::begin(source);
  151|   400k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   400k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   400k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   400k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   400k|            auto result = scn::scan<T>(
  154|   400k|                global_locale,
  155|   400k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   400k|                scn::runtime_format(f));
  157|   400k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.7k, False: 380k]
  ------------------
  158|  19.7k|                break;
  159|  19.7k|            }
  160|   380k|            it = result->begin();
  161|   380k|        }
  162|  19.7k|    }
  163|       |
  164|       |    // scan_value
  165|  3.29k|    {
  166|  3.29k|        auto it = scn::ranges::begin(source);
  167|  83.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  83.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  83.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  83.5k|            auto result = scn::scan_value<T>(
  170|  83.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  83.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.29k, False: 80.2k]
  ------------------
  172|  3.29k|                break;
  173|  3.29k|            }
  174|  80.2k|            it = result->begin();
  175|  80.2k|        }
  176|  3.29k|    }
  177|  3.29k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.29k|{
   90|  3.29k|    using char_type = ranges::range_value_t<Source>;
   91|  3.29k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.29k|    deque.clear();
   93|  3.29k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.29k|              std::back_inserter(deque));
   95|  3.29k|    return deque;
   96|  3.29k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.29k|{
   79|  3.29k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.29k|        return noncontiguous_buffer;
   81|  3.29k|    }
   82|  3.29k|    else {
   83|  3.29k|        return wnoncontiguous_buffer;
   84|  3.29k|    }
   85|  3.29k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.29k|{
  122|  3.29k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.29k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.29k|    buf.resize(sizeof...(Args));
  125|  3.29k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.29k|    return buf;
  127|  3.29k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.29k|{
  108|  3.29k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.29k|        return format_string_view_buffer;
  110|  3.29k|    }
  111|  3.29k|    else {
  112|  3.29k|        return wformat_string_view_buffer;
  113|  3.29k|    }
  114|  3.29k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.59k|{
  185|  6.59k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.59k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.59k|                                   format_strings);
  188|  6.59k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.59k|{
  133|       |    // Regular scan
  134|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.5k, False: 6.59k]
  ------------------
  135|  39.5k|        auto it = scn::ranges::begin(source);
  136|  50.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  50.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  50.5k|            auto result = scn::scan<T>(
  139|  50.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  50.5k|                scn::runtime_format(f));
  141|  50.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.5k, False: 10.9k]
  ------------------
  142|  39.5k|                break;
  143|  39.5k|            }
  144|  10.9k|            it = result->begin();
  145|  10.9k|        }
  146|  39.5k|    }
  147|       |
  148|       |    // scan localized
  149|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.5k, False: 6.59k]
  ------------------
  150|  39.5k|        auto it = scn::ranges::begin(source);
  151|  50.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  50.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  50.5k|            auto result = scn::scan<T>(
  154|  50.5k|                global_locale,
  155|  50.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  50.5k|                scn::runtime_format(f));
  157|  50.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.5k, False: 10.9k]
  ------------------
  158|  39.5k|                break;
  159|  39.5k|            }
  160|  10.9k|            it = result->begin();
  161|  10.9k|        }
  162|  39.5k|    }
  163|       |
  164|       |    // scan_value
  165|  6.59k|    {
  166|  6.59k|        auto it = scn::ranges::begin(source);
  167|  8.76k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.76k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.76k|            auto result = scn::scan_value<T>(
  170|  8.76k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.76k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.59k, False: 2.16k]
  ------------------
  172|  6.59k|                break;
  173|  6.59k|            }
  174|  2.16k|            it = result->begin();
  175|  2.16k|        }
  176|  6.59k|    }
  177|  6.59k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.59k|{
  133|       |    // Regular scan
  134|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.5k, False: 6.59k]
  ------------------
  135|  39.5k|        auto it = scn::ranges::begin(source);
  136|  50.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  50.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  50.6k|            auto result = scn::scan<T>(
  139|  50.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  50.6k|                scn::runtime_format(f));
  141|  50.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.5k, False: 11.0k]
  ------------------
  142|  39.5k|                break;
  143|  39.5k|            }
  144|  11.0k|            it = result->begin();
  145|  11.0k|        }
  146|  39.5k|    }
  147|       |
  148|       |    // scan localized
  149|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.5k, False: 6.59k]
  ------------------
  150|  39.5k|        auto it = scn::ranges::begin(source);
  151|  50.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  50.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  50.6k|            auto result = scn::scan<T>(
  154|  50.6k|                global_locale,
  155|  50.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  50.6k|                scn::runtime_format(f));
  157|  50.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.5k, False: 11.0k]
  ------------------
  158|  39.5k|                break;
  159|  39.5k|            }
  160|  11.0k|            it = result->begin();
  161|  11.0k|        }
  162|  39.5k|    }
  163|       |
  164|       |    // scan_value
  165|  6.59k|    {
  166|  6.59k|        auto it = scn::ranges::begin(source);
  167|  8.78k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.78k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.78k|            auto result = scn::scan_value<T>(
  170|  8.78k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.78k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.59k, False: 2.18k]
  ------------------
  172|  6.59k|                break;
  173|  6.59k|            }
  174|  2.18k|            it = result->begin();
  175|  2.18k|        }
  176|  6.59k|    }
  177|  6.59k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.59k|{
  133|       |    // Regular scan
  134|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.5k, False: 6.59k]
  ------------------
  135|  39.5k|        auto it = scn::ranges::begin(source);
  136|  50.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  50.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  50.6k|            auto result = scn::scan<T>(
  139|  50.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  50.6k|                scn::runtime_format(f));
  141|  50.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.5k, False: 11.1k]
  ------------------
  142|  39.5k|                break;
  143|  39.5k|            }
  144|  11.1k|            it = result->begin();
  145|  11.1k|        }
  146|  39.5k|    }
  147|       |
  148|       |    // scan localized
  149|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.5k, False: 6.59k]
  ------------------
  150|  39.5k|        auto it = scn::ranges::begin(source);
  151|  50.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  50.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  50.6k|            auto result = scn::scan<T>(
  154|  50.6k|                global_locale,
  155|  50.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  50.6k|                scn::runtime_format(f));
  157|  50.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.5k, False: 11.1k]
  ------------------
  158|  39.5k|                break;
  159|  39.5k|            }
  160|  11.1k|            it = result->begin();
  161|  11.1k|        }
  162|  39.5k|    }
  163|       |
  164|       |    // scan_value
  165|  6.59k|    {
  166|  6.59k|        auto it = scn::ranges::begin(source);
  167|  8.80k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.80k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.80k|            auto result = scn::scan_value<T>(
  170|  8.80k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.80k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.59k, False: 2.20k]
  ------------------
  172|  6.59k|                break;
  173|  6.59k|            }
  174|  2.20k|            it = result->begin();
  175|  2.20k|        }
  176|  6.59k|    }
  177|  6.59k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.59k|{
  133|       |    // Regular scan
  134|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.5k, False: 6.59k]
  ------------------
  135|  39.5k|        auto it = scn::ranges::begin(source);
  136|  50.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  50.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  50.5k|            auto result = scn::scan<T>(
  139|  50.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  50.5k|                scn::runtime_format(f));
  141|  50.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.5k, False: 10.9k]
  ------------------
  142|  39.5k|                break;
  143|  39.5k|            }
  144|  10.9k|            it = result->begin();
  145|  10.9k|        }
  146|  39.5k|    }
  147|       |
  148|       |    // scan localized
  149|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.5k, False: 6.59k]
  ------------------
  150|  39.5k|        auto it = scn::ranges::begin(source);
  151|  50.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  50.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  50.5k|            auto result = scn::scan<T>(
  154|  50.5k|                global_locale,
  155|  50.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  50.5k|                scn::runtime_format(f));
  157|  50.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.5k, False: 10.9k]
  ------------------
  158|  39.5k|                break;
  159|  39.5k|            }
  160|  10.9k|            it = result->begin();
  161|  10.9k|        }
  162|  39.5k|    }
  163|       |
  164|       |    // scan_value
  165|  6.59k|    {
  166|  6.59k|        auto it = scn::ranges::begin(source);
  167|  8.75k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.75k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.75k|            auto result = scn::scan_value<T>(
  170|  8.75k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.75k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.59k, False: 2.15k]
  ------------------
  172|  6.59k|                break;
  173|  6.59k|            }
  174|  2.15k|            it = result->begin();
  175|  2.15k|        }
  176|  6.59k|    }
  177|  6.59k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.59k|{
  133|       |    // Regular scan
  134|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.5k, False: 6.59k]
  ------------------
  135|  39.5k|        auto it = scn::ranges::begin(source);
  136|  50.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  50.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  50.5k|            auto result = scn::scan<T>(
  139|  50.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  50.5k|                scn::runtime_format(f));
  141|  50.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.5k, False: 11.0k]
  ------------------
  142|  39.5k|                break;
  143|  39.5k|            }
  144|  11.0k|            it = result->begin();
  145|  11.0k|        }
  146|  39.5k|    }
  147|       |
  148|       |    // scan localized
  149|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.5k, False: 6.59k]
  ------------------
  150|  39.5k|        auto it = scn::ranges::begin(source);
  151|  50.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  50.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  50.5k|            auto result = scn::scan<T>(
  154|  50.5k|                global_locale,
  155|  50.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  50.5k|                scn::runtime_format(f));
  157|  50.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.5k, False: 11.0k]
  ------------------
  158|  39.5k|                break;
  159|  39.5k|            }
  160|  11.0k|            it = result->begin();
  161|  11.0k|        }
  162|  39.5k|    }
  163|       |
  164|       |    // scan_value
  165|  6.59k|    {
  166|  6.59k|        auto it = scn::ranges::begin(source);
  167|  8.77k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.77k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.77k|            auto result = scn::scan_value<T>(
  170|  8.77k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.77k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.59k, False: 2.17k]
  ------------------
  172|  6.59k|                break;
  173|  6.59k|            }
  174|  2.17k|            it = result->begin();
  175|  2.17k|        }
  176|  6.59k|    }
  177|  6.59k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.59k|{
  133|       |    // Regular scan
  134|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.5k, False: 6.59k]
  ------------------
  135|  39.5k|        auto it = scn::ranges::begin(source);
  136|  50.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  50.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  50.6k|            auto result = scn::scan<T>(
  139|  50.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  50.6k|                scn::runtime_format(f));
  141|  50.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.5k, False: 11.0k]
  ------------------
  142|  39.5k|                break;
  143|  39.5k|            }
  144|  11.0k|            it = result->begin();
  145|  11.0k|        }
  146|  39.5k|    }
  147|       |
  148|       |    // scan localized
  149|  39.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.5k, False: 6.59k]
  ------------------
  150|  39.5k|        auto it = scn::ranges::begin(source);
  151|  50.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  50.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  50.6k|            auto result = scn::scan<T>(
  154|  50.6k|                global_locale,
  155|  50.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  50.6k|                scn::runtime_format(f));
  157|  50.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.5k, False: 11.0k]
  ------------------
  158|  39.5k|                break;
  159|  39.5k|            }
  160|  11.0k|            it = result->begin();
  161|  11.0k|        }
  162|  39.5k|    }
  163|       |
  164|       |    // scan_value
  165|  6.59k|    {
  166|  6.59k|        auto it = scn::ranges::begin(source);
  167|  8.79k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  8.79k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  8.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  8.79k|            auto result = scn::scan_value<T>(
  170|  8.79k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  8.79k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.59k, False: 2.19k]
  ------------------
  172|  6.59k|                break;
  173|  6.59k|            }
  174|  2.19k|            it = result->begin();
  175|  2.19k|        }
  176|  6.59k|    }
  177|  6.59k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.59k|{
   90|  6.59k|    using char_type = ranges::range_value_t<Source>;
   91|  6.59k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.59k|    deque.clear();
   93|  6.59k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.59k|              std::back_inserter(deque));
   95|  6.59k|    return deque;
   96|  6.59k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.59k|{
   79|  6.59k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  6.59k|        return noncontiguous_buffer;
   81|  6.59k|    }
   82|  6.59k|    else {
   83|  6.59k|        return wnoncontiguous_buffer;
   84|  6.59k|    }
   85|  6.59k|}

