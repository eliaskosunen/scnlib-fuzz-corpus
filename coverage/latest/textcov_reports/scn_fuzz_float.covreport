_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   870k|                    parse_options_t<UC> options) noexcept {
  286|   870k|  chars_format const fmt = options.format;
  287|   870k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   870k|  parsed_number_string_t<UC> answer;
  290|   870k|  answer.valid = false;
  291|   870k|  answer.too_many_digits = false;
  292|   870k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   870k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 870k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   870k|  UC const *const start_digits = p;
  318|       |
  319|   870k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  4.51M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 4.08M, False: 434k]
  |  Branch (321:25): [True: 3.64M, False: 436k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|  3.64M|    i = 10 * i +
  325|  3.64M|        uint64_t(*p -
  326|  3.64M|                 UC('0')); // might overflow, we will handle the overflow later
  327|  3.64M|    ++p;
  328|  3.64M|  }
  329|   870k|  UC const *const end_of_integer_part = p;
  330|   870k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   870k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   870k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   870k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 870k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   870k|  int64_t exponent = 0;
  344|   870k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 436k, False: 434k]
  |  Branch (344:49): [True: 162k, False: 273k]
  ------------------
  345|   870k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 162k, False: 707k]
  ------------------
  346|   162k|    ++p;
  347|   162k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|   162k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|   686k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 585k, False: 101k]
  |  Branch (352:27): [True: 524k, False: 61.8k]
  ------------------
  353|   524k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|   524k|      ++p;
  355|   524k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|   524k|    }
  357|   162k|    exponent = before - p;
  358|   162k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|   162k|    digit_count -= exponent;
  360|   162k|  }
  361|   870k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   870k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 870k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   870k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 870k]
  ------------------
  368|   870k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   870k|  int64_t exp_number = 0; // explicit exponential part
  372|   870k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 748k, False: 122k]
  |  Branch (372:44): [True: 335k, False: 413k]
  ------------------
  373|   870k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 73.7k, False: 261k]
  |  Branch (373:28): [True: 44.2k, False: 217k]
  ------------------
  374|   870k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   752k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 752k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   752k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|   117k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|   117k|    UC const *location_of_e = p;
  378|   117k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 73.7k, False: 44.2k]
  |  Branch (378:28): [True: 44.2k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|   117k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|   117k|      ++p;
  381|   117k|    }
  382|   117k|    bool neg_exp = false;
  383|   117k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 117k, False: 105]
  |  Branch (383:24): [True: 6.60k, False: 111k]
  ------------------
  384|  6.60k|      neg_exp = true;
  385|  6.60k|      ++p;
  386|   111k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 111k, False: 105]
  ------------------
  387|   111k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 28.8k, False: 82.4k]
  ------------------
  388|   111k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|  28.8k|      ++p;
  390|  28.8k|    }
  391|   117k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 165, False: 117k]
  |  Branch (391:24): [True: 485, False: 117k]
  ------------------
  392|    650|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 650]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    650|      p = location_of_e;
  400|   117k|    } else {
  401|   366k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 280k, False: 86.8k]
  |  Branch (401:29): [True: 249k, False: 30.5k]
  ------------------
  402|   249k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|   249k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 230k, False: 19.3k]
  ------------------
  404|   230k|          exp_number = 10 * exp_number + digit;
  405|   230k|        }
  406|   249k|        ++p;
  407|   249k|      }
  408|   117k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 6.55k, False: 110k]
  ------------------
  409|  6.55k|        exp_number = -exp_number;
  410|  6.55k|      }
  411|   117k|      exponent += exp_number;
  412|   117k|    }
  413|   752k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   752k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 630k, False: 122k]
  |  Branch (415:45): [True: 0, False: 630k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   752k|  }
  419|   870k|  answer.lastmatch = p;
  420|   870k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   870k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 147k, False: 722k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|   147k|    UC const *start = start_digits;
  433|   604k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 602k, False: 1.19k]
  |  Branch (433:32): [True: 448k, False: 154k]
  |  Branch (433:53): [True: 7.96k, False: 146k]
  ------------------
  434|   456k|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 448k, False: 7.96k]
  ------------------
  435|   448k|        digit_count--;
  436|   448k|      }
  437|   456k|      start++;
  438|   456k|    }
  439|       |
  440|   147k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 143k, False: 4.24k]
  ------------------
  441|   143k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|   143k|      i = 0;
  446|   143k|      p = answer.integer.ptr;
  447|   143k|      UC const *int_end = p + answer.integer.len();
  448|   143k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  1.40M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 1.36M, False: 36.3k]
  |  Branch (449:54): [True: 1.25M, False: 107k]
  ------------------
  450|  1.25M|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  1.25M|        ++p;
  452|  1.25M|      }
  453|   143k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 36.3k, False: 107k]
  ------------------
  454|  36.3k|        exponent = end_of_integer_part - p + exp_number;
  455|   107k|      } else { // We have a value with a fractional component.
  456|   107k|        p = answer.fraction.ptr;
  457|   107k|        UC const *frac_end = p + answer.fraction.len();
  458|  1.93M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 1.82M, False: 107k]
  |  Branch (458:56): [True: 1.82M, False: 0]
  ------------------
  459|  1.82M|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  1.82M|          ++p;
  461|  1.82M|        }
  462|   107k|        exponent = answer.fraction.ptr - p + exp_number;
  463|   107k|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|   143k|    }
  466|   147k|  }
  467|   870k|  answer.exponent = exponent;
  468|   870k|  answer.mantissa = i;
  469|   870k|  return answer;
  470|   870k|}
_ZN10fast_float10is_integerIcEEbT_:
   34|  5.06M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  5.06M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 135k, False: 4.93M]
  |  Branch (35:27): [True: 393k, False: 4.53M]
  ------------------
   36|  5.06M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  224|   162k|                           uint64_t &i) {
  225|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  226|   621k|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (226:10): [True: 508k, False: 112k]
  ------------------
  227|   621k|         is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (227:10): [True: 458k, False: 49.9k]
  ------------------
  228|   458k|    i = i * 100000000 +
  229|   458k|        parse_eight_digits_unrolled(read8_to_u64(
  230|   458k|            p)); // in rare cases, this will overflow, but that's ok
  231|   458k|    p += 8;
  232|   458k|  }
  233|   162k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  142|   508k|is_made_of_eight_digits_fast(uint64_t val) noexcept {
  143|   508k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  144|   508k|            0x8080808080808080));
  145|   508k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   48|  1.16M|read8_to_u64(const UC *chars) {
   49|  1.16M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|      0|    uint64_t val = 0;
   51|      0|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 0, False: 0]
  ------------------
   52|      0|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|      0|      ++chars;
   54|      0|    }
   55|      0|    return val;
   56|      0|  }
   57|  1.16M|  uint64_t val;
   58|  1.16M|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|  1.16M|  return val;
   64|  1.16M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  120|   658k|parse_eight_digits_unrolled(uint64_t val) {
  121|   658k|  const uint64_t mask = 0x000000FF000000FF;
  122|   658k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  123|   658k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  124|   658k|  val -= 0x3030303030303030;
  125|   658k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  126|   658k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  127|   658k|  return uint32_t(val);
  128|   658k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  133|   199k|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|   199k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|   199k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|   199k|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|   199k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   430k|                    parse_options_t<UC> options) noexcept {
  286|   430k|  chars_format const fmt = options.format;
  287|   430k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   430k|  parsed_number_string_t<UC> answer;
  290|   430k|  answer.valid = false;
  291|   430k|  answer.too_many_digits = false;
  292|   430k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   430k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 430k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   430k|  UC const *const start_digits = p;
  318|       |
  319|   430k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|   935k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 649k, False: 286k]
  |  Branch (321:25): [True: 504k, False: 144k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|   504k|    i = 10 * i +
  325|   504k|        uint64_t(*p -
  326|   504k|                 UC('0')); // might overflow, we will handle the overflow later
  327|   504k|    ++p;
  328|   504k|  }
  329|   430k|  UC const *const end_of_integer_part = p;
  330|   430k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   430k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   430k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   430k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 430k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   430k|  int64_t exponent = 0;
  344|   430k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 144k, False: 286k]
  |  Branch (344:49): [True: 4.28k, False: 140k]
  ------------------
  345|   430k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 4.28k, False: 426k]
  ------------------
  346|  4.28k|    ++p;
  347|  4.28k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|  4.28k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  34.0k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 31.1k, False: 2.91k]
  |  Branch (352:27): [True: 29.7k, False: 1.37k]
  ------------------
  353|  29.7k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|  29.7k|      ++p;
  355|  29.7k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|  29.7k|    }
  357|  4.28k|    exponent = before - p;
  358|  4.28k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|  4.28k|    digit_count -= exponent;
  360|  4.28k|  }
  361|   430k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   430k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 430k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   430k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 430k]
  ------------------
  368|   430k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   430k|  int64_t exp_number = 0; // explicit exponential part
  372|   430k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 355k, False: 74.9k]
  |  Branch (372:44): [True: 141k, False: 214k]
  ------------------
  373|   430k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 215, False: 141k]
  |  Branch (373:28): [True: 16.7k, False: 124k]
  ------------------
  374|   430k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   413k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 413k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   413k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|  16.9k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|  16.9k|    UC const *location_of_e = p;
  378|  16.9k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 215, False: 16.7k]
  |  Branch (378:28): [True: 16.7k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|  16.9k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|  16.9k|      ++p;
  381|  16.9k|    }
  382|  16.9k|    bool neg_exp = false;
  383|  16.9k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 16.9k, False: 30]
  |  Branch (383:24): [True: 3.25k, False: 13.6k]
  ------------------
  384|  3.25k|      neg_exp = true;
  385|  3.25k|      ++p;
  386|  13.7k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 13.6k, False: 30]
  ------------------
  387|  13.7k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 255, False: 13.4k]
  ------------------
  388|  13.6k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|    255|      ++p;
  390|    255|    }
  391|  16.9k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 60, False: 16.9k]
  |  Branch (391:24): [True: 380, False: 16.5k]
  ------------------
  392|    440|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 440]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    440|      p = location_of_e;
  400|  16.5k|    } else {
  401|  56.6k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 45.0k, False: 11.5k]
  |  Branch (401:29): [True: 40.0k, False: 4.96k]
  ------------------
  402|  40.0k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|  40.0k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 38.1k, False: 1.93k]
  ------------------
  404|  38.1k|          exp_number = 10 * exp_number + digit;
  405|  38.1k|        }
  406|  40.0k|        ++p;
  407|  40.0k|      }
  408|  16.5k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 3.23k, False: 13.2k]
  ------------------
  409|  3.23k|        exp_number = -exp_number;
  410|  3.23k|      }
  411|  16.5k|      exponent += exp_number;
  412|  16.5k|    }
  413|   413k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   413k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 339k, False: 74.9k]
  |  Branch (415:45): [True: 0, False: 339k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   413k|  }
  419|   430k|  answer.lastmatch = p;
  420|   430k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   430k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 1.87k, False: 429k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|  1.87k|    UC const *start = start_digits;
  433|  2.70k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 2.70k, False: 0]
  |  Branch (433:32): [True: 700, False: 2.00k]
  |  Branch (433:53): [True: 136, False: 1.87k]
  ------------------
  434|    836|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 700, False: 136]
  ------------------
  435|    700|        digit_count--;
  436|    700|      }
  437|    836|      start++;
  438|    836|    }
  439|       |
  440|  1.87k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 1.59k, False: 272]
  ------------------
  441|  1.59k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|  1.59k|      i = 0;
  446|  1.59k|      p = answer.integer.ptr;
  447|  1.59k|      UC const *int_end = p + answer.integer.len();
  448|  1.59k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  23.4k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 22.6k, False: 798]
  |  Branch (449:54): [True: 21.8k, False: 800]
  ------------------
  450|  21.8k|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  21.8k|        ++p;
  452|  21.8k|      }
  453|  1.59k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 798, False: 800]
  ------------------
  454|    798|        exponent = end_of_integer_part - p + exp_number;
  455|    800|      } else { // We have a value with a fractional component.
  456|    800|        p = answer.fraction.ptr;
  457|    800|        UC const *frac_end = p + answer.fraction.len();
  458|  9.66k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 8.86k, False: 800]
  |  Branch (458:56): [True: 8.86k, False: 0]
  ------------------
  459|  8.86k|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  8.86k|          ++p;
  461|  8.86k|        }
  462|    800|        exponent = answer.fraction.ptr - p + exp_number;
  463|    800|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|  1.59k|    }
  466|  1.87k|  }
  467|   430k|  answer.exponent = exponent;
  468|   430k|  answer.mantissa = i;
  469|   430k|  return answer;
  470|   430k|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|   742k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|   742k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 145k, False: 596k]
  |  Branch (35:27): [True: 5.62k, False: 591k]
  ------------------
   36|   742k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  211|  4.28k|loop_parse_if_eight_digits(const UC *&p, const UC *const pend, uint64_t &i) {
  212|  4.28k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (212:7): [Folded - Ignored]
  ------------------
  213|  4.28k|    return;
  214|  4.28k|  }
  215|      0|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (215:10): [True: 0, False: 0]
  ------------------
  216|      0|         simd_parse_if_eight_digits_unrolled(
  ------------------
  |  Branch (216:10): [True: 0, False: 0]
  ------------------
  217|      0|             p, i)) { // in rare cases, this will overflow, but that's ok
  218|      0|    p += 8;
  219|      0|  }
  220|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  133|    270|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|    270|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|    270|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|    270|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|    270|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   48|    270|read8_to_u64(const UC *chars) {
   49|    270|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|    270|    uint64_t val = 0;
   51|  2.43k|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 2.16k, False: 270]
  ------------------
   52|  2.16k|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|  2.16k|      ++chars;
   54|  2.16k|    }
   55|    270|    return val;
   56|    270|  }
   57|      0|  uint64_t val;
   58|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|      0|  return val;
   64|    270|}

_ZN10fast_float6bigintC2Ev:
  425|  50.6k|  FASTFLOAT_CONSTEXPR20 bigint() : vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   45|   111k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  577|   176k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept { return small_mul(vec, y); }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   262k|                                            limb y) noexcept {
  276|   262k|  limb carry = 0;
  277|  1.10M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (277:26): [True: 837k, False: 262k]
  ------------------
  278|   837k|    vec[index] = scalar_mul(vec[index], y, carry);
  279|   837k|  }
  280|   262k|  if (carry != 0) {
  ------------------
  |  Branch (280:7): [True: 156k, False: 106k]
  ------------------
  281|   156k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   156k|  {                                                                            \
  |  |  179|   156k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 156k]
  |  |  ------------------
  |  |  180|   156k|      return false;                                                            \
  |  |  181|   156k|  }
  ------------------
  282|   156k|  }
  283|   262k|  return true;
  284|   262k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   75|  2.06M|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float10scalar_mulEmmRm:
  222|   837k|scalar_mul(limb x, limb y, limb &carry) noexcept {
  223|   837k|#ifdef FASTFLOAT_64BIT_LIMB
  224|   837k|#if defined(__SIZEOF_INT128__)
  225|       |  // GCC and clang both define it as an extension.
  226|   837k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  227|   837k|  carry = limb(z >> limb_bits);
  228|   837k|  return limb(z);
  229|       |#else
  230|       |  // fallback, no native 128-bit integer multiplication with carry.
  231|       |  // on msvc, this optimizes identically, somehow.
  232|       |  value128 z = full_multiplication(x, y);
  233|       |  bool overflow;
  234|       |  z.low = scalar_add(z.low, carry, overflow);
  235|       |  z.high += uint64_t(overflow); // cannot overflow
  236|       |  carry = z.high;
  237|       |  return z.low;
  238|       |#endif
  239|       |#else
  240|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  241|       |  carry = limb(z >> limb_bits);
  242|       |  return limb(z);
  243|       |#endif
  244|   837k|}
_ZN10fast_float8stackvecILt62EEixEm:
   56|  2.29M|  FASTFLOAT_CONSTEXPR14 limb &operator[](size_t index) noexcept {
   57|  2.29M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  2.29M|  { ((void)(x)); }
  ------------------
   58|  2.29M|    return data[index];
   59|  2.29M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   84|   216k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   85|   216k|    if (len() < capacity()) {
  ------------------
  |  Branch (85:9): [True: 216k, False: 0]
  ------------------
   86|   216k|      push_unchecked(value);
   87|   216k|      return true;
   88|   216k|    } else {
   89|      0|      return false;
   90|      0|    }
   91|   216k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   77|   254k|  constexpr size_t capacity() const noexcept { return size; }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   79|   263k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   80|   263k|    data[length] = value;
   81|   263k|    length++;
   82|   263k|  }
_ZN10fast_float6bigint3addEm:
  579|   176k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept { return small_add(vec, y); }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  268|   176k|small_add(stackvec<size> &vec, limb y) noexcept {
  269|   176k|  return small_add_from(vec, y, 0);
  270|   176k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  250|   176k|                                                 size_t start) noexcept {
  251|   176k|  size_t index = start;
  252|   176k|  limb carry = y;
  253|   176k|  bool overflow;
  254|   267k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (254:10): [True: 141k, False: 126k]
  |  Branch (254:24): [True: 91.0k, False: 50.6k]
  ------------------
  255|  91.0k|    vec[index] = scalar_add(vec[index], carry, overflow);
  256|  91.0k|    carry = limb(overflow);
  257|  91.0k|    index += 1;
  258|  91.0k|  }
  259|   176k|  if (carry != 0) {
  ------------------
  |  Branch (259:7): [True: 50.6k, False: 126k]
  ------------------
  260|  50.6k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  50.6k|  {                                                                            \
  |  |  179|  50.6k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 50.6k]
  |  |  ------------------
  |  |  180|  50.6k|      return false;                                                            \
  |  |  181|  50.6k|  }
  ------------------
  261|  50.6k|  }
  262|   176k|  return true;
  263|   176k|}
_ZN10fast_float10scalar_addEmmRb:
  202|   234k|scalar_add(limb x, limb y, bool &overflow) noexcept {
  203|   234k|  limb z;
  204|       |// gcc and clang
  205|   234k|#if defined(__has_builtin)
  206|   234k|#if __has_builtin(__builtin_add_overflow)
  207|   234k|  if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (207:7): [Folded - Ignored]
  ------------------
  208|   234k|    overflow = __builtin_add_overflow(x, y, &z);
  209|   234k|    return z;
  210|   234k|  }
  211|      0|#endif
  212|      0|#endif
  213|       |
  214|       |  // generic, this still optimizes correctly on MSVC.
  215|      0|  z = x + y;
  216|      0|  overflow = z < x;
  217|      0|  return z;
  218|   234k|}
_ZN10fast_float6bigint5pow10Ej:
  616|  3.43k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  617|  3.43k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  3.43k|  {                                                                            \
  |  |  179|  3.43k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.43k]
  |  |  ------------------
  |  |  180|  3.43k|      return false;                                                            \
  |  |  181|  3.43k|  }
  ------------------
  618|  3.43k|    return pow2(exp);
  619|  3.43k|  }
_ZN10fast_float6bigint4pow5Ej:
  585|  50.6k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  586|       |    // multiply by a power of 5
  587|  50.6k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  588|  50.6k|    limb_span large = limb_span(large_power_of_5, large_length);
  589|  54.1k|    while (exp >= large_step) {
  ------------------
  |  Branch (589:12): [True: 3.50k, False: 50.6k]
  ------------------
  590|  3.50k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.50k|  {                                                                            \
  |  |  179|  3.50k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.50k]
  |  |  ------------------
  |  |  180|  3.50k|      return false;                                                            \
  |  |  181|  3.50k|  }
  ------------------
  591|  3.50k|      exp -= large_step;
  592|  3.50k|    }
  593|  50.6k|#ifdef FASTFLOAT_64BIT_LIMB
  594|  50.6k|    uint32_t small_step = 27;
  595|  50.6k|    limb max_native = 7450580596923828125UL;
  596|       |#else
  597|       |    uint32_t small_step = 13;
  598|       |    limb max_native = 1220703125U;
  599|       |#endif
  600|  74.6k|    while (exp >= small_step) {
  ------------------
  |  Branch (600:12): [True: 23.9k, False: 50.6k]
  ------------------
  601|  23.9k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  23.9k|  {                                                                            \
  |  |  179|  23.9k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 23.9k]
  |  |  ------------------
  |  |  180|  23.9k|      return false;                                                            \
  |  |  181|  23.9k|  }
  ------------------
  602|  23.9k|      exp -= small_step;
  603|  23.9k|    }
  604|  50.6k|    if (exp != 0) {
  ------------------
  |  Branch (604:9): [True: 44.2k, False: 6.37k]
  ------------------
  605|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  606|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  607|       |      // except the workaround described there don't work here
  608|  44.2k|      FASTFLOAT_TRY(small_mul(
  ------------------
  |  |  178|  44.2k|  {                                                                            \
  |  |  179|  44.2k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 44.2k]
  |  |  ------------------
  |  |  180|  44.2k|      return false;                                                            \
  |  |  181|  44.2k|  }
  ------------------
  609|  44.2k|          vec, limb(((void)small_power_of_5[0], small_power_of_5[exp]))));
  610|  44.2k|    }
  611|       |
  612|  50.6k|    return true;
  613|  50.6k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  355|  3.50k|FASTFLOAT_CONSTEXPR20 bool large_mul(stackvec<size> &x, limb_span y) noexcept {
  356|  3.50k|  if (y.len() == 1) {
  ------------------
  |  Branch (356:7): [True: 0, False: 3.50k]
  ------------------
  357|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  358|  3.50k|  } else {
  359|  3.50k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.50k|  {                                                                            \
  |  |  179|  3.50k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.50k]
  |  |  ------------------
  |  |  180|  3.50k|      return false;                                                            \
  |  |  181|  3.50k|  }
  ------------------
  360|  3.50k|  }
  361|  3.50k|  return true;
  362|  3.50k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  327|  3.50k|FASTFLOAT_CONSTEXPR20 bool long_mul(stackvec<size> &x, limb_span y) noexcept {
  328|  3.50k|  limb_span xs = limb_span(x.data, x.len());
  329|  3.50k|  stackvec<size> z(xs);
  330|  3.50k|  limb_span zs = limb_span(z.data, z.len());
  331|       |
  332|  3.50k|  if (y.len() != 0) {
  ------------------
  |  Branch (332:7): [True: 3.50k, False: 0]
  ------------------
  333|  3.50k|    limb y0 = y[0];
  334|  3.50k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.50k|  {                                                                            \
  |  |  179|  3.50k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.50k]
  |  |  ------------------
  |  |  180|  3.50k|      return false;                                                            \
  |  |  181|  3.50k|  }
  ------------------
  335|  17.5k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (335:28): [True: 14.0k, False: 3.50k]
  ------------------
  336|  14.0k|      limb yi = y[index];
  337|  14.0k|      stackvec<size> zi;
  338|  14.0k|      if (yi != 0) {
  ------------------
  |  Branch (338:11): [True: 14.0k, False: 0]
  ------------------
  339|       |        // re-use the same buffer throughout
  340|  14.0k|        zi.set_len(0);
  341|  14.0k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  14.0k|  {                                                                            \
  |  |  179|  14.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.0k]
  |  |  ------------------
  |  |  180|  14.0k|      return false;                                                            \
  |  |  181|  14.0k|  }
  ------------------
  342|  14.0k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  14.0k|  {                                                                            \
  |  |  179|  14.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.0k]
  |  |  ------------------
  |  |  180|  14.0k|      return false;                                                            \
  |  |  181|  14.0k|  }
  ------------------
  343|  14.0k|        limb_span zis = limb_span(zi.data, zi.len());
  344|  14.0k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  14.0k|  {                                                                            \
  |  |  179|  14.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 14.0k]
  |  |  ------------------
  |  |  180|  14.0k|      return false;                                                            \
  |  |  181|  14.0k|  }
  ------------------
  345|  14.0k|      }
  346|  14.0k|    }
  347|  3.50k|  }
  348|       |
  349|  3.50k|  x.normalize();
  350|  3.50k|  return true;
  351|  3.50k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   52|  3.50k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   53|  3.50k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  168|  3.50k|  { ((void)(x)); }
  ------------------
   54|  3.50k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   72|  51.7k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   73|  51.7k|    length = uint16_t(len);
   74|  51.7k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
   99|  17.5k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  100|  17.5k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (100:9): [True: 17.5k, False: 0]
  ------------------
  101|  17.5k|      extend_unchecked(s);
  102|  17.5k|      return true;
  103|  17.5k|    } else {
  104|      0|      return false;
  105|      0|    }
  106|  17.5k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
   93|  17.5k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
   94|  17.5k|    limb *ptr = data + length;
   95|  17.5k|    std::copy_n(s.ptr, s.len(), ptr);
   96|  17.5k|    set_len(len() + s.len());
   97|  17.5k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  290|  14.0k|                                          size_t start) noexcept {
  291|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  292|       |  // if we can't get that current range.
  293|  14.0k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (293:7): [True: 0, False: 14.0k]
  |  Branch (293:26): [True: 13.7k, False: 275]
  ------------------
  294|  13.7k|    FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  13.7k|  {                                                                            \
  |  |  179|  13.7k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 13.7k]
  |  |  ------------------
  |  |  180|  13.7k|      return false;                                                            \
  |  |  181|  13.7k|  }
  ------------------
  295|  13.7k|  }
  296|       |
  297|  14.0k|  bool carry = false;
  298|   118k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (298:26): [True: 104k, False: 14.0k]
  ------------------
  299|   104k|    limb xi = x[index + start];
  300|   104k|    limb yi = y[index];
  301|   104k|    bool c1 = false;
  302|   104k|    bool c2 = false;
  303|   104k|    xi = scalar_add(xi, yi, c1);
  304|   104k|    if (carry) {
  ------------------
  |  Branch (304:9): [True: 39.3k, False: 64.9k]
  ------------------
  305|  39.3k|      xi = scalar_add(xi, 1, c2);
  306|  39.3k|    }
  307|   104k|    x[index + start] = xi;
  308|   104k|    carry = c1 | c2;
  309|   104k|  }
  310|       |
  311|       |  // handle overflow
  312|  14.0k|  if (carry) {
  ------------------
  |  Branch (312:7): [True: 0, False: 14.0k]
  ------------------
  313|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  314|      0|  }
  315|  14.0k|  return true;
  316|  14.0k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  123|  13.7k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  124|  13.7k|    if (new_len > capacity()) {
  ------------------
  |  Branch (124:9): [True: 0, False: 13.7k]
  ------------------
  125|      0|      return false;
  126|  13.7k|    } else {
  127|  13.7k|      resize_unchecked(new_len, value);
  128|  13.7k|      return true;
  129|  13.7k|    }
  130|  13.7k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  111|  13.7k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  112|  13.7k|    if (new_len > len()) {
  ------------------
  |  Branch (112:9): [True: 13.7k, False: 0]
  ------------------
  113|  13.7k|      size_t count = new_len - len();
  114|  13.7k|      limb *first = data + len();
  115|  13.7k|      limb *last = first + count;
  116|  13.7k|      ::std::fill(first, last, value);
  117|  13.7k|      set_len(new_len);
  118|  13.7k|    } else {
  119|      0|      set_len(new_len);
  120|      0|    }
  121|  13.7k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  144|  50.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  145|  50.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (145:12): [True: 50.7k, False: 0]
  |  Branch (145:25): [True: 0, False: 50.7k]
  ------------------
  146|      0|      length--;
  147|      0|    }
  148|  50.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   65|  60.6k|  FASTFLOAT_CONSTEXPR14 const limb &rindex(size_t index) const noexcept {
   66|  60.6k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  60.6k|  { ((void)(x)); }
  ------------------
   67|  60.6k|    size_t rindex = length - index - 1;
   68|  60.6k|    return data[rindex];
   69|  60.6k|  }
_ZN10fast_float6bigint4pow2Ej:
  582|  50.5k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept { return shl(exp); }
_ZN10fast_float6bigint3shlEm:
  544|  50.5k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  545|  50.5k|    size_t rem = n % limb_bits;
  546|  50.5k|    size_t div = n / limb_bits;
  547|  50.5k|    if (rem != 0) {
  ------------------
  |  Branch (547:9): [True: 47.3k, False: 3.25k]
  ------------------
  548|  47.3k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  47.3k|  {                                                                            \
  |  |  179|  47.3k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 47.3k]
  |  |  ------------------
  |  |  180|  47.3k|      return false;                                                            \
  |  |  181|  47.3k|  }
  ------------------
  549|  47.3k|    }
  550|  50.5k|    if (div != 0) {
  ------------------
  |  Branch (550:9): [True: 6.51k, False: 44.0k]
  ------------------
  551|  6.51k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.51k|  {                                                                            \
  |  |  179|  6.51k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 6.51k]
  |  |  ------------------
  |  |  180|  6.51k|      return false;                                                            \
  |  |  181|  6.51k|  }
  ------------------
  552|  6.51k|    }
  553|  50.5k|    return true;
  554|  50.5k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  497|  47.3k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  498|       |    // Internally, for each item, we shift left by n, and add the previous
  499|       |    // right shifted limb-bits.
  500|       |    // For example, we transform (for u8) shifted left 2, to:
  501|       |    //      b10100100 b01000010
  502|       |    //      b10 b10010001 b00001000
  503|  47.3k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  47.3k|  { ((void)(x)); }
  ------------------
  504|  47.3k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  173|  47.3k|  { ((void)(x)); }
  ------------------
  505|       |
  506|  47.3k|    size_t shl = n;
  507|  47.3k|    size_t shr = limb_bits - shl;
  508|  47.3k|    limb prev = 0;
  509|   160k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (509:28): [True: 113k, False: 47.3k]
  ------------------
  510|   113k|      limb xi = vec[index];
  511|   113k|      vec[index] = (xi << shl) | (prev >> shr);
  512|   113k|      prev = xi;
  513|   113k|    }
  514|       |
  515|  47.3k|    limb carry = prev >> shr;
  516|  47.3k|    if (carry != 0) {
  ------------------
  |  Branch (516:9): [True: 9.81k, False: 37.4k]
  ------------------
  517|  9.81k|      return vec.try_push(carry);
  518|  9.81k|    }
  519|  37.4k|    return true;
  520|  47.3k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  523|  6.51k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  524|  6.51k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  6.51k|  { ((void)(x)); }
  ------------------
  525|  6.51k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (525:9): [True: 0, False: 6.51k]
  ------------------
  526|      0|      return false;
  527|  6.51k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (527:16): [True: 6.51k, False: 0]
  ------------------
  528|       |      // move limbs
  529|  6.51k|      limb *dst = vec.data + n;
  530|  6.51k|      const limb *src = vec.data;
  531|  6.51k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  532|       |      // fill in empty limbs
  533|  6.51k|      limb *first = vec.data;
  534|  6.51k|      limb *last = first + n;
  535|  6.51k|      ::std::fill(first, last, 0);
  536|  6.51k|      vec.set_len(n + vec.len());
  537|  6.51k|      return true;
  538|  6.51k|    } else {
  539|      0|      return true;
  540|      0|    }
  541|  6.51k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   76|  9.94k|  constexpr bool is_empty() const noexcept { return length == 0; }
_ZNK10fast_float6bigint4hi64ERb:
  443|  3.43k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool &truncated) const noexcept {
  444|  3.43k|#ifdef FASTFLOAT_64BIT_LIMB
  445|  3.43k|    if (vec.len() == 0) {
  ------------------
  |  Branch (445:9): [True: 0, False: 3.43k]
  ------------------
  446|      0|      return empty_hi64(truncated);
  447|  3.43k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (447:16): [True: 949, False: 2.48k]
  ------------------
  448|    949|      return uint64_hi64(vec.rindex(0), truncated);
  449|  2.48k|    } else {
  450|  2.48k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  451|  2.48k|      truncated |= vec.nonzero(2);
  452|  2.48k|      return result;
  453|  2.48k|    }
  454|       |#else
  455|       |    if (vec.len() == 0) {
  456|       |      return empty_hi64(truncated);
  457|       |    } else if (vec.len() == 1) {
  458|       |      return uint32_hi64(vec.rindex(0), truncated);
  459|       |    } else if (vec.len() == 2) {
  460|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  461|       |    } else {
  462|       |      uint64_t result =
  463|       |          uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  464|       |      truncated |= vec.nonzero(3);
  465|       |      return result;
  466|       |    }
  467|       |#endif
  468|  3.43k|  }
_ZN10fast_float11uint64_hi64EmRb:
  158|    949|uint64_hi64(uint64_t r0, bool &truncated) noexcept {
  159|    949|  truncated = false;
  160|    949|  int shl = leading_zeroes(r0);
  161|    949|  return r0 << shl;
  162|    949|}
_ZN10fast_float11uint64_hi64EmmRb:
  165|  2.48k|uint64_hi64(uint64_t r0, uint64_t r1, bool &truncated) noexcept {
  166|  2.48k|  int shl = leading_zeroes(r0);
  167|  2.48k|  if (shl == 0) {
  ------------------
  |  Branch (167:7): [True: 38, False: 2.44k]
  ------------------
  168|     38|    truncated = r1 != 0;
  169|     38|    return r0;
  170|  2.44k|  } else {
  171|  2.44k|    int shr = 64 - shl;
  172|  2.44k|    truncated = (r1 << shl) != 0;
  173|  2.44k|    return (r0 << shl) | (r1 >> shr);
  174|  2.44k|  }
  175|  2.48k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  134|  2.48k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  135|  2.52k|    while (index < len()) {
  ------------------
  |  Branch (135:12): [True: 557, False: 1.96k]
  ------------------
  136|    557|      if (rindex(index) != 0) {
  ------------------
  |  Branch (136:11): [True: 519, False: 38]
  ------------------
  137|    519|        return true;
  138|    519|      }
  139|     38|      index++;
  140|     38|    }
  141|  1.96k|    return false;
  142|  2.48k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  572|  3.43k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  573|  3.43k|    int lz = ctlz();
  574|  3.43k|    return int(limb_bits * vec.len()) - lz;
  575|  3.43k|  }
_ZNK10fast_float6bigint4ctlzEv:
  557|  3.43k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  558|  3.43k|    if (vec.is_empty()) {
  ------------------
  |  Branch (558:9): [True: 0, False: 3.43k]
  ------------------
  559|      0|      return 0;
  560|  3.43k|    } else {
  561|  3.43k|#ifdef FASTFLOAT_64BIT_LIMB
  562|  3.43k|      return leading_zeroes(vec.rindex(0));
  563|       |#else
  564|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  565|       |      uint64_t r0 = vec.rindex(0);
  566|       |      return leading_zeroes(r0 << 32);
  567|       |#endif
  568|  3.43k|    }
  569|  3.43k|  }
_ZN10fast_float6bigintC2Em:
  431|  47.2k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value) : vec() {
  432|  47.2k|#ifdef FASTFLOAT_64BIT_LIMB
  433|  47.2k|    vec.push_unchecked(value);
  434|       |#else
  435|       |    vec.push_unchecked(uint32_t(value));
  436|       |    vec.push_unchecked(uint32_t(value >> 32));
  437|       |#endif
  438|  47.2k|    vec.normalize();
  439|  47.2k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  476|  47.2k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint &other) const noexcept {
  477|  47.2k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (477:9): [True: 0, False: 47.2k]
  ------------------
  478|      0|      return 1;
  479|  47.2k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (479:16): [True: 0, False: 47.2k]
  ------------------
  480|      0|      return -1;
  481|  47.2k|    } else {
  482|  92.8k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (482:38): [True: 89.1k, False: 3.76k]
  ------------------
  483|  89.1k|        limb xi = vec[index - 1];
  484|  89.1k|        limb yi = other.vec[index - 1];
  485|  89.1k|        if (xi > yi) {
  ------------------
  |  Branch (485:13): [True: 11.8k, False: 77.2k]
  ------------------
  486|  11.8k|          return 1;
  487|  77.2k|        } else if (xi < yi) {
  ------------------
  |  Branch (487:20): [True: 31.5k, False: 45.6k]
  ------------------
  488|  31.5k|          return -1;
  489|  31.5k|        }
  490|  89.1k|      }
  491|  3.76k|      return 0;
  492|  47.2k|    }
  493|  47.2k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   60|   178k|  FASTFLOAT_CONSTEXPR14 const limb &operator[](size_t index) const noexcept {
   61|   178k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   178k|  { ((void)(x)); }
  ------------------
   62|   178k|    return data[index];
   63|   178k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
  103|   195k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   195k|  adjusted_mantissa answer;
  105|   195k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.42k, False: 191k]
  |  Branch (105:19): [True: 1.21k, False: 190k]
  ------------------
  106|  4.64k|    answer.power2 = 0;
  107|  4.64k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  4.64k|    return answer;
  110|  4.64k|  }
  111|   190k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 7.16k, False: 183k]
  ------------------
  112|       |    // we want to get infinity:
  113|  7.16k|    answer.power2 = binary::infinite_power();
  114|  7.16k|    answer.mantissa = 0;
  115|  7.16k|    return answer;
  116|  7.16k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   183k|  int lz = leading_zeroes(w);
  122|   183k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   183k|  value128 product =
  131|   183k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   183k|  int upperbit = int(product.high >> 63);
  142|   183k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   183k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   183k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   183k|                          binary::minimum_exponent());
  148|   183k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 962, False: 182k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|    962|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 874]
  ------------------
  151|    962|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|    874|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|    874|    answer.mantissa += (answer.mantissa & 1); // round up
  163|    874|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|    874|    answer.power2 =
  172|    874|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 874, False: 0]
  ------------------
  173|    874|            ? 0
  174|    874|            : 1;
  175|    874|    return answer;
  176|    962|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   182k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 60.8k, False: 121k]
  |  Branch (181:29): [True: 59.0k, False: 1.75k]
  ------------------
  182|   182k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 54.4k, False: 4.63k]
  ------------------
  183|   182k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 7.90k, False: 46.5k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  7.90k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 3.89k, False: 4.00k]
  ------------------
  190|  3.89k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  3.89k|    }
  192|  7.90k|  }
  193|       |
  194|   182k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   182k|  answer.mantissa >>= 1;
  196|   182k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 11.5k, False: 170k]
  ------------------
  197|  11.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  11.5k|    answer.power2++; // undo previous addition
  199|  11.5k|  }
  200|       |
  201|   182k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   182k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 1.18k, False: 181k]
  ------------------
  203|  1.18k|    answer.power2 = binary::infinite_power();
  204|  1.18k|    answer.mantissa = 0;
  205|  1.18k|  }
  206|   182k|  return answer;
  207|   183k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   22|   202k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   202k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   202k|  value128 firstproduct =
   28|   202k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   202k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   202k|                " precision should  be in (0,64]");
   31|   202k|  constexpr uint64_t precision_mask =
   32|   202k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   202k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   202k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 38.3k, False: 164k]
  ------------------
   35|   202k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  38.3k|    value128 secondproduct =
   40|  38.3k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  38.3k|    firstproduct.low += secondproduct.high;
   42|  38.3k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 27.6k, False: 10.7k]
  ------------------
   43|  27.6k|      firstproduct.high++;
   44|  27.6k|    }
   45|  38.3k|  }
   46|   202k|  return firstproduct;
   47|   202k|}
_ZN10fast_float6detail5powerEi:
   65|   408k|constexpr fastfloat_really_inline int32_t power(int32_t q) noexcept {
   66|   408k|  return (((152170 + 65536) * q) >> 16) + 63;
   67|   408k|}
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   88|  19.4k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  19.4k|  int lz = leading_zeroes(w);
   90|  19.4k|  w <<= lz;
   91|  19.4k|  value128 product =
   92|  19.4k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  19.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  19.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   74|  19.4k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  19.4k|  int hilz = int(w >> 63) ^ 1;
   76|  19.4k|  adjusted_mantissa answer;
   77|  19.4k|  answer.mantissa = w << hilz;
   78|  19.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  19.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  19.4k|                          invalid_am_bias);
   81|  19.4k|  return answer;
   82|  19.4k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
  103|   181k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   181k|  adjusted_mantissa answer;
  105|   181k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.21k, False: 178k]
  |  Branch (105:19): [True: 360, False: 177k]
  ------------------
  106|  3.57k|    answer.power2 = 0;
  107|  3.57k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  3.57k|    return answer;
  110|  3.57k|  }
  111|   177k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 3.63k, False: 174k]
  ------------------
  112|       |    // we want to get infinity:
  113|  3.63k|    answer.power2 = binary::infinite_power();
  114|  3.63k|    answer.mantissa = 0;
  115|  3.63k|    return answer;
  116|  3.63k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   174k|  int lz = leading_zeroes(w);
  122|   174k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   174k|  value128 product =
  131|   174k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   174k|  int upperbit = int(product.high >> 63);
  142|   174k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   174k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   174k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   174k|                          binary::minimum_exponent());
  148|   174k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 2.78k, False: 171k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  2.78k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 110, False: 2.67k]
  ------------------
  151|  2.78k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|    110|      answer.power2 = 0;
  154|    110|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|    110|      return answer;
  157|    110|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  2.67k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|  2.67k|    answer.mantissa += (answer.mantissa & 1); // round up
  163|  2.67k|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|  2.67k|    answer.power2 =
  172|  2.67k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 2.67k, False: 0]
  ------------------
  173|  2.67k|            ? 0
  174|  2.67k|            : 1;
  175|  2.67k|    return answer;
  176|  2.78k|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   171k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 49.8k, False: 121k]
  |  Branch (181:29): [True: 28.0k, False: 21.7k]
  ------------------
  182|   171k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 23.4k, False: 4.62k]
  ------------------
  183|   171k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 4.65k, False: 18.7k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  4.65k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 3.61k, False: 1.04k]
  ------------------
  190|  3.61k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  3.61k|    }
  192|  4.65k|  }
  193|       |
  194|   171k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   171k|  answer.mantissa >>= 1;
  196|   171k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 10.9k, False: 160k]
  ------------------
  197|  10.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  10.9k|    answer.power2++; // undo previous addition
  199|  10.9k|  }
  200|       |
  201|   171k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   171k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 336, False: 170k]
  ------------------
  203|    336|    answer.power2 = binary::infinite_power();
  204|    336|    answer.mantissa = 0;
  205|    336|  }
  206|   171k|  return answer;
  207|   174k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   22|   205k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   205k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   205k|  value128 firstproduct =
   28|   205k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   205k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   205k|                " precision should  be in (0,64]");
   31|   205k|  constexpr uint64_t precision_mask =
   32|   205k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   205k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   205k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 81.3k, False: 123k]
  ------------------
   35|   205k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  81.3k|    value128 secondproduct =
   40|  81.3k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  81.3k|    firstproduct.low += secondproduct.high;
   42|  81.3k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 25.0k, False: 56.3k]
  ------------------
   43|  25.0k|      firstproduct.high++;
   44|  25.0k|    }
   45|  81.3k|  }
   46|   205k|  return firstproduct;
   47|   205k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   88|  31.2k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  31.2k|  int lz = leading_zeroes(w);
   90|  31.2k|  w <<= lz;
   91|  31.2k|  value128 product =
   92|  31.2k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  31.2k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  31.2k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   74|  31.2k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  31.2k|  int hilz = int(w >> 63) ^ 1;
   76|  31.2k|  adjusted_mantissa answer;
   77|  31.2k|  answer.mantissa = w << hilz;
   78|  31.2k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  31.2k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  31.2k|                          invalid_am_bias);
   81|  31.2k|  return answer;
   82|  31.2k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  19.4k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  19.4k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  19.4k|  int32_t sci_exp = scientific_exponent(num);
  440|  19.4k|  size_t max_digits = binary_format<T>::max_digits();
  441|  19.4k|  size_t digits = 0;
  442|  19.4k|  bigint bigmant;
  443|  19.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  19.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  19.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 514, False: 18.9k]
  ------------------
  447|    514|    return positive_digit_comp<T>(bigmant, exponent);
  448|  18.9k|  } else {
  449|  18.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  18.9k|  }
  451|  19.4k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   43|  50.5k|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|  50.5k|  uint64_t mantissa = num.mantissa;
   45|  50.5k|  int32_t exponent = int32_t(num.exponent);
   46|   252k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 202k, False: 50.5k]
  ------------------
   47|   202k|    mantissa /= 10000;
   48|   202k|    exponent += 4;
   49|   202k|  }
   50|   101k|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 50.5k, False: 50.5k]
  ------------------
   51|  50.5k|    mantissa /= 100;
   52|  50.5k|    exponent += 2;
   53|  50.5k|  }
   54|  50.5k|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 50.5k]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|  50.5k|  return exponent;
   59|  50.5k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|  50.5k|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|  50.5k|  size_t counter = 0;
  265|  50.5k|  digits = 0;
  266|  50.5k|  limb value = 0;
  267|  50.5k|#ifdef FASTFLOAT_64BIT_LIMB
  268|  50.5k|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|  50.5k|  UC const *p = num.integer.ptr;
  275|  50.5k|  UC const *pend = p + num.integer.len();
  276|  50.5k|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|   112k|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 62.1k, False: 50.2k]
  ------------------
  279|   104k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 54.6k, False: 49.7k]
  |  Branch (279:45): [True: 42.5k, False: 12.1k]
  ------------------
  280|   104k|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 42.2k, False: 257]
  ------------------
  281|  42.2k|      parse_eight_digits(p, value, counter, digits);
  282|  42.2k|    }
  283|   193k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 179k, False: 14.4k]
  |  Branch (283:30): [True: 131k, False: 47.4k]
  |  Branch (283:43): [True: 131k, False: 257]
  ------------------
  284|   131k|      parse_one_digit(p, value, counter, digits);
  285|   131k|    }
  286|  62.1k|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 257, False: 61.9k]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|    257|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|    257|      bool truncated = is_truncated(p, pend);
  290|    257|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 219, False: 38]
  ------------------
  291|    219|        truncated |= is_truncated(num.fraction);
  292|    219|      }
  293|    257|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 153, False: 104]
  ------------------
  294|    153|        round_up_bigint(result, digits);
  295|    153|      }
  296|    257|      return;
  297|  61.9k|    } else {
  298|  61.9k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|  61.9k|      counter = 0;
  300|  61.9k|      value = 0;
  301|  61.9k|    }
  302|  62.1k|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|  50.2k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 47.2k, False: 3.00k]
  ------------------
  306|  47.2k|    p = num.fraction.ptr;
  307|  47.2k|    pend = p + num.fraction.len();
  308|  47.2k|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 2.75k, False: 44.4k]
  ------------------
  309|  2.75k|      skip_zeros(p, pend);
  310|  2.75k|    }
  311|       |    // process all digits, in increments of step per loop
  312|   156k|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 112k, False: 44.3k]
  ------------------
  313|   269k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 212k, False: 57.5k]
  |  Branch (313:47): [True: 158k, False: 53.2k]
  ------------------
  314|   269k|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 157k, False: 1.32k]
  ------------------
  315|   157k|        parse_eight_digits(p, value, counter, digits);
  316|   157k|      }
  317|   466k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 400k, False: 66.4k]
  |  Branch (317:32): [True: 357k, False: 43.4k]
  |  Branch (317:45): [True: 354k, False: 2.28k]
  ------------------
  318|   354k|        parse_one_digit(p, value, counter, digits);
  319|   354k|      }
  320|   112k|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 2.85k, False: 109k]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|  2.85k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|  2.85k|        bool truncated = is_truncated(p, pend);
  324|  2.85k|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 2.01k, False: 839]
  ------------------
  325|  2.01k|          round_up_bigint(result, digits);
  326|  2.01k|        }
  327|  2.85k|        return;
  328|   109k|      } else {
  329|   109k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|   109k|        counter = 0;
  331|   109k|        value = 0;
  332|   109k|      }
  333|   112k|    }
  334|  47.2k|  }
  335|       |
  336|  47.3k|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 47.3k]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|  47.3k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  175|  53.2k|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|  53.2k|  uint64_t val;
  177|  65.4k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|  65.4k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 30.3k, False: 35.0k]
  ------------------
  179|  30.3k|    ::memcpy(&val, first, sizeof(uint64_t));
  180|  30.3k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 18.1k, False: 12.2k]
  ------------------
  181|  18.1k|      break;
  182|  18.1k|    }
  183|  12.2k|    first += int_cmp_len<UC>();
  184|  12.2k|  }
  185|  98.8k|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 96.1k, False: 2.75k]
  ------------------
  186|  96.1k|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 50.5k, False: 45.6k]
  ------------------
  187|  50.5k|      break;
  188|  50.5k|    }
  189|  45.6k|    first++;
  190|  45.6k|  }
  191|  53.2k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  225|   199k|                   size_t &count) noexcept {
  226|   199k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|   199k|  p += 8;
  228|   199k|  counter += 8;
  229|   199k|  count += 8;
  230|   199k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  235|   486k|                size_t &count) noexcept {
  236|   486k|  value = value * 10 + limb(*p - UC('0'));
  237|   486k|  p++;
  238|   486k|  counter++;
  239|   486k|  count++;
  240|   486k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  243|   176k|add_native(bigint &big, limb power, limb value) noexcept {
  244|   176k|  big.mul(power);
  245|   176k|  big.add(value);
  246|   176k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  197|  3.33k|is_truncated(UC const *first, UC const *last) noexcept {
  198|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  199|  3.33k|  uint64_t val;
  200|  6.08k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (200:10): [Folded - Ignored]
  ------------------
  201|  6.08k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (201:10): [True: 3.80k, False: 2.27k]
  ------------------
  202|  3.80k|    ::memcpy(&val, first, sizeof(uint64_t));
  203|  3.80k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (203:9): [True: 1.05k, False: 2.75k]
  ------------------
  204|  1.05k|      return true;
  205|  1.05k|    }
  206|  2.75k|    first += int_cmp_len<UC>();
  207|  2.75k|  }
  208|  3.87k|  while (first != last) {
  ------------------
  |  Branch (208:10): [True: 2.79k, False: 1.07k]
  ------------------
  209|  2.79k|    if (*first != UC('0')) {
  ------------------
  |  Branch (209:9): [True: 1.19k, False: 1.59k]
  ------------------
  210|  1.19k|      return true;
  211|  1.19k|    }
  212|  1.59k|    ++first;
  213|  1.59k|  }
  214|  1.07k|  return false;
  215|  2.27k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  218|    219|is_truncated(span<const UC> s) noexcept {
  219|    219|  return is_truncated(s.ptr, s.ptr + s.len());
  220|    219|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  249|  2.16k|round_up_bigint(bigint &big, size_t &count) noexcept {
  250|       |  // need to round-up the digits, but need to avoid rounding
  251|       |  // ....9999 to ...10000, which could cause a false halfway point.
  252|  2.16k|  add_native(big, 10, 1);
  253|  2.16k|  count++;
  254|  2.16k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  343|    514|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|    514|  { ((void)(x)); }
  ------------------
  345|    514|  adjusted_mantissa answer;
  346|    514|  bool truncated;
  347|    514|  answer.mantissa = bigmant.hi64(truncated);
  348|    514|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|    514|             binary_format<T>::minimum_exponent();
  350|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
  360|       |
  361|    514|  return answer;
  362|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|    514|                                                         callback cb) noexcept {
  111|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 514]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|    514|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|    514|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 514]
  ------------------
  129|    514|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 514]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|    514|                       callback cb) noexcept {
  146|    514|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 514]
  ------------------
  147|    514|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 514]
  ------------------
  148|    514|  uint64_t truncated_bits = am.mantissa & mask;
  149|    514|  bool is_above = truncated_bits > halfway;
  150|    514|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|    514|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 514]
  ------------------
  154|      0|    am.mantissa = 0;
  155|    514|  } else {
  156|    514|    am.mantissa >>= shift;
  157|    514|  }
  158|    514|  am.power2 += shift;
  159|       |
  160|    514|  bool is_odd = (am.mantissa & 1) == 1;
  161|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 74, False: 440]
  |  Branch (356:31): [True: 348, False: 92]
  |  Branch (356:45): [True: 58, False: 290]
  ------------------
  357|    514|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 56, False: 326]
  |  Branch (357:29): [True: 32, False: 24]
  ------------------
  358|    514|        });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  18.9k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  18.9k|  bigint &real_digits = bigmant;
  373|  18.9k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  18.9k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  18.9k|  round<T>(am_b,
  380|  18.9k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  18.9k|  T b;
  382|  18.9k|  to_float(false, am_b, b);
  383|  18.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  18.9k|  bigint theor_digits(theor.mantissa);
  385|  18.9k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  18.9k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  18.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  18.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 18.9k, False: 0]
  ------------------
  391|  18.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  18.9k|  { ((void)(x)); }
  ------------------
  392|  18.9k|  }
  393|  18.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 18.9k, False: 0]
  ------------------
  394|  18.9k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  18.9k|  { ((void)(x)); }
  ------------------
  395|  18.9k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 0, False: 0]
  ------------------
  396|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|      0|  { ((void)(x)); }
  ------------------
  397|      0|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  18.9k|  int ord = real_digits.compare(theor_digits);
  401|  18.9k|  adjusted_mantissa answer = am;
  402|  18.9k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  18.9k|    round_nearest_tie_even(
  404|  18.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  18.9k|          (void)_;  // not needed, since we've done our comparison
  406|  18.9k|          (void)__; // not needed, since we've done our comparison
  407|  18.9k|          if (ord > 0) {
  408|  18.9k|            return true;
  409|  18.9k|          } else if (ord < 0) {
  410|  18.9k|            return false;
  411|  18.9k|          } else {
  412|  18.9k|            return is_odd;
  413|  18.9k|          }
  414|  18.9k|        });
  415|  18.9k|  });
  416|       |
  417|  18.9k|  return answer;
  418|  18.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  18.9k|                                                         callback cb) noexcept {
  111|  18.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.9k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.9k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.9k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.9k]
  ------------------
  129|  18.9k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.9k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  18.9k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  165|  47.2k|round_down(adjusted_mantissa &am, int32_t shift) noexcept {
  166|  47.2k|  if (shift == 64) {
  ------------------
  |  Branch (166:7): [True: 0, False: 47.2k]
  ------------------
  167|      0|    am.mantissa = 0;
  168|  47.2k|  } else {
  169|  47.2k|    am.mantissa >>= shift;
  170|  47.2k|  }
  171|  47.2k|  am.power2 += shift;
  172|  47.2k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   99|  18.9k|to_extended_halfway(T value) noexcept {
  100|  18.9k|  adjusted_mantissa am = to_extended(value);
  101|  18.9k|  am.mantissa <<= 1;
  102|  18.9k|  am.mantissa += 1;
  103|  18.9k|  am.power2 -= 1;
  104|  18.9k|  return am;
  105|  18.9k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   64|  18.9k|to_extended(T value) noexcept {
   65|  18.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  18.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  18.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  18.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  18.9k|  adjusted_mantissa am;
   71|  18.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  18.9k|                 binary_format<T>::minimum_exponent();
   73|  18.9k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  18.9k|  ::memcpy(&bits, &value, sizeof(T));
   78|  18.9k|#endif
   79|  18.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 0, False: 18.9k]
  ------------------
   80|       |    // denormal
   81|      0|    am.power2 = 1 - bias;
   82|      0|    am.mantissa = bits & mantissa_mask;
   83|  18.9k|  } else {
   84|       |    // normal
   85|  18.9k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  18.9k|                        binary_format<T>::mantissa_explicit_bits());
   87|  18.9k|    am.power2 -= bias;
   88|  18.9k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  18.9k|  }
   90|       |
   91|  18.9k|  return am;
   92|  18.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  18.9k|                                                         callback cb) noexcept {
  111|  18.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.9k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.9k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.9k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.9k]
  ------------------
  129|  18.9k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.9k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  18.9k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  18.9k|    round_nearest_tie_even(
  404|  18.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  18.9k|          (void)_;  // not needed, since we've done our comparison
  406|  18.9k|          (void)__; // not needed, since we've done our comparison
  407|  18.9k|          if (ord > 0) {
  408|  18.9k|            return true;
  409|  18.9k|          } else if (ord < 0) {
  410|  18.9k|            return false;
  411|  18.9k|          } else {
  412|  18.9k|            return is_odd;
  413|  18.9k|          }
  414|  18.9k|        });
  415|  18.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  18.9k|                       callback cb) noexcept {
  146|  18.9k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 18.9k]
  ------------------
  147|  18.9k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 18.9k]
  ------------------
  148|  18.9k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  18.9k|  bool is_above = truncated_bits > halfway;
  150|  18.9k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  18.9k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 18.9k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  18.9k|  } else {
  156|  18.9k|    am.mantissa >>= shift;
  157|  18.9k|  }
  158|  18.9k|  am.power2 += shift;
  159|       |
  160|  18.9k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  18.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  18.9k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  18.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  18.9k|          (void)_;  // not needed, since we've done our comparison
  406|  18.9k|          (void)__; // not needed, since we've done our comparison
  407|  18.9k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 210, False: 18.6k]
  ------------------
  408|    210|            return true;
  409|  18.6k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 15.4k, False: 3.27k]
  ------------------
  410|  15.4k|            return false;
  411|  15.4k|          } else {
  412|  3.27k|            return is_odd;
  413|  3.27k|          }
  414|  18.9k|        });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   43|    144|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|    144|  uint64_t mantissa = num.mantissa;
   45|    144|  int32_t exponent = int32_t(num.exponent);
   46|    720|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 576, False: 144]
  ------------------
   47|    576|    mantissa /= 10000;
   48|    576|    exponent += 4;
   49|    576|  }
   50|    288|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 144, False: 144]
  ------------------
   51|    144|    mantissa /= 100;
   52|    144|    exponent += 2;
   53|    144|  }
   54|    144|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 144]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|    144|  return exponent;
   59|    144|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|    144|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|    144|  size_t counter = 0;
  265|    144|  digits = 0;
  266|    144|  limb value = 0;
  267|    144|#ifdef FASTFLOAT_64BIT_LIMB
  268|    144|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|    144|  UC const *p = num.integer.ptr;
  275|    144|  UC const *pend = p + num.integer.len();
  276|    144|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|    338|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 194, False: 144]
  ------------------
  279|    294|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 118, False: 176]
  |  Branch (279:45): [True: 100, False: 18]
  ------------------
  280|    294|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 100, False: 0]
  ------------------
  281|    100|      parse_eight_digits(p, value, counter, digits);
  282|    100|    }
  283|  1.15k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 1.10k, False: 50]
  |  Branch (283:30): [True: 962, False: 144]
  |  Branch (283:43): [True: 962, False: 0]
  ------------------
  284|    962|      parse_one_digit(p, value, counter, digits);
  285|    962|    }
  286|    194|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 0, False: 194]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|      0|      bool truncated = is_truncated(p, pend);
  290|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 0, False: 0]
  ------------------
  291|      0|        truncated |= is_truncated(num.fraction);
  292|      0|      }
  293|      0|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        round_up_bigint(result, digits);
  295|      0|      }
  296|      0|      return;
  297|    194|    } else {
  298|    194|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|    194|      counter = 0;
  300|    194|      value = 0;
  301|    194|    }
  302|    194|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|    144|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 94, False: 50]
  ------------------
  306|     94|    p = num.fraction.ptr;
  307|     94|    pend = p + num.fraction.len();
  308|     94|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 0, False: 94]
  ------------------
  309|      0|      skip_zeros(p, pend);
  310|      0|    }
  311|       |    // process all digits, in increments of step per loop
  312|    246|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 152, False: 94]
  ------------------
  313|    322|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 192, False: 130]
  |  Branch (313:47): [True: 170, False: 22]
  ------------------
  314|    322|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 170, False: 0]
  ------------------
  315|    170|        parse_eight_digits(p, value, counter, digits);
  316|    170|      }
  317|    652|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 594, False: 58]
  |  Branch (317:32): [True: 500, False: 94]
  |  Branch (317:45): [True: 500, False: 0]
  ------------------
  318|    500|        parse_one_digit(p, value, counter, digits);
  319|    500|      }
  320|    152|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 0, False: 152]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|      0|        bool truncated = is_truncated(p, pend);
  324|      0|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 0, False: 0]
  ------------------
  325|      0|          round_up_bigint(result, digits);
  326|      0|        }
  327|      0|        return;
  328|    152|      } else {
  329|    152|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|    152|        counter = 0;
  331|    152|        value = 0;
  332|    152|      }
  333|    152|    }
  334|     94|  }
  335|       |
  336|    144|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 144]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|    144|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  175|    144|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|    144|  uint64_t val;
  177|    144|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|    144|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 144, False: 0]
  ------------------
  179|    144|    ::memcpy(&val, first, sizeof(uint64_t));
  180|    144|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 144, False: 0]
  ------------------
  181|    144|      break;
  182|    144|    }
  183|      0|    first += int_cmp_len<UC>();
  184|      0|  }
  185|    162|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 162, False: 0]
  ------------------
  186|    162|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 144, False: 18]
  ------------------
  187|    144|      break;
  188|    144|    }
  189|     18|    first++;
  190|     18|  }
  191|    144|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  225|    270|                   size_t &count) noexcept {
  226|    270|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|    270|  p += 8;
  228|    270|  counter += 8;
  229|    270|  count += 8;
  230|    270|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  235|  1.46k|                size_t &count) noexcept {
  236|  1.46k|  value = value * 10 + limb(*p - UC('0'));
  237|  1.46k|  p++;
  238|  1.46k|  counter++;
  239|  1.46k|  count++;
  240|  1.46k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  31.0k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  31.0k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  31.0k|  int32_t sci_exp = scientific_exponent(num);
  440|  31.0k|  size_t max_digits = binary_format<T>::max_digits();
  441|  31.0k|  size_t digits = 0;
  442|  31.0k|  bigint bigmant;
  443|  31.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  31.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  31.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 2.86k, False: 28.2k]
  ------------------
  447|  2.86k|    return positive_digit_comp<T>(bigmant, exponent);
  448|  28.2k|  } else {
  449|  28.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  28.2k|  }
  451|  31.0k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  343|  2.91k|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|  2.91k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|  2.91k|  { ((void)(x)); }
  ------------------
  345|  2.91k|  adjusted_mantissa answer;
  346|  2.91k|  bool truncated;
  347|  2.91k|  answer.mantissa = bigmant.hi64(truncated);
  348|  2.91k|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|  2.91k|             binary_format<T>::minimum_exponent();
  350|  2.91k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|  2.91k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  2.91k|    round_nearest_tie_even(
  354|  2.91k|        a, shift,
  355|  2.91k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.91k|          return is_above || (is_halfway && truncated) ||
  357|  2.91k|                 (is_odd && is_halfway);
  358|  2.91k|        });
  359|  2.91k|  });
  360|       |
  361|  2.91k|  return answer;
  362|  2.91k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|  2.91k|                                                         callback cb) noexcept {
  111|  2.91k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  2.91k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 2.91k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  2.91k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  2.91k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 429, False: 2.48k]
  ------------------
  129|  2.91k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|    429|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|    429|    am.power2++;
  132|    429|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  2.91k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  2.91k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 2.91k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  2.91k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|  2.91k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  2.91k|    round_nearest_tie_even(
  354|  2.91k|        a, shift,
  355|  2.91k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.91k|          return is_above || (is_halfway && truncated) ||
  357|  2.91k|                 (is_odd && is_halfway);
  358|  2.91k|        });
  359|  2.91k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|  2.91k|                       callback cb) noexcept {
  146|  2.91k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 2.91k]
  ------------------
  147|  2.91k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 2.91k]
  ------------------
  148|  2.91k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  2.91k|  bool is_above = truncated_bits > halfway;
  150|  2.91k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  2.91k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 2.91k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  2.91k|  } else {
  156|  2.91k|    am.mantissa >>= shift;
  157|  2.91k|  }
  158|  2.91k|  am.power2 += shift;
  159|       |
  160|  2.91k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  2.91k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  2.91k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|  2.91k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  2.91k|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 479, False: 2.43k]
  |  Branch (356:31): [True: 1.75k, False: 686]
  |  Branch (356:45): [True: 651, False: 1.10k]
  ------------------
  357|  2.91k|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 265, False: 1.52k]
  |  Branch (357:29): [True: 60, False: 205]
  ------------------
  358|  2.91k|        });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  28.3k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  28.3k|  bigint &real_digits = bigmant;
  373|  28.3k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  28.3k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  28.3k|  round<T>(am_b,
  380|  28.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  28.3k|  T b;
  382|  28.3k|  to_float(false, am_b, b);
  383|  28.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  28.3k|  bigint theor_digits(theor.mantissa);
  385|  28.3k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  28.3k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  28.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  28.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 28.3k, False: 0]
  ------------------
  391|  28.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  28.3k|  { ((void)(x)); }
  ------------------
  392|  28.3k|  }
  393|  28.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 2.51k, False: 25.7k]
  ------------------
  394|  2.51k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  2.51k|  { ((void)(x)); }
  ------------------
  395|  25.7k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 25.7k, False: 74]
  ------------------
  396|  25.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|  25.7k|  { ((void)(x)); }
  ------------------
  397|  25.7k|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  28.3k|  int ord = real_digits.compare(theor_digits);
  401|  28.3k|  adjusted_mantissa answer = am;
  402|  28.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  28.3k|    round_nearest_tie_even(
  404|  28.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  28.3k|          (void)_;  // not needed, since we've done our comparison
  406|  28.3k|          (void)__; // not needed, since we've done our comparison
  407|  28.3k|          if (ord > 0) {
  408|  28.3k|            return true;
  409|  28.3k|          } else if (ord < 0) {
  410|  28.3k|            return false;
  411|  28.3k|          } else {
  412|  28.3k|            return is_odd;
  413|  28.3k|          }
  414|  28.3k|        });
  415|  28.3k|  });
  416|       |
  417|  28.3k|  return answer;
  418|  28.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  28.3k|                                                         callback cb) noexcept {
  111|  28.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  28.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 106, False: 28.1k]
  ------------------
  113|       |    // have a denormal float
  114|    106|    int32_t shift = -am.power2 + 1;
  115|    106|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    106|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 106, False: 0]
  ------------------
  118|    106|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    106|                    ? 0
  120|    106|                    : 1;
  121|    106|    return;
  122|    106|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  28.1k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  28.1k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 28.1k]
  ------------------
  129|  28.1k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  28.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  28.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 28.1k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  28.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  28.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   99|  28.3k|to_extended_halfway(T value) noexcept {
  100|  28.3k|  adjusted_mantissa am = to_extended(value);
  101|  28.3k|  am.mantissa <<= 1;
  102|  28.3k|  am.mantissa += 1;
  103|  28.3k|  am.power2 -= 1;
  104|  28.3k|  return am;
  105|  28.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   64|  28.3k|to_extended(T value) noexcept {
   65|  28.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  28.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  28.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  28.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  28.3k|  adjusted_mantissa am;
   71|  28.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  28.3k|                 binary_format<T>::minimum_exponent();
   73|  28.3k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  28.3k|  ::memcpy(&bits, &value, sizeof(T));
   78|  28.3k|#endif
   79|  28.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 106, False: 28.1k]
  ------------------
   80|       |    // denormal
   81|    106|    am.power2 = 1 - bias;
   82|    106|    am.mantissa = bits & mantissa_mask;
   83|  28.1k|  } else {
   84|       |    // normal
   85|  28.1k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  28.1k|                        binary_format<T>::mantissa_explicit_bits());
   87|  28.1k|    am.power2 -= bias;
   88|  28.1k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  28.1k|  }
   90|       |
   91|  28.3k|  return am;
   92|  28.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  28.3k|                                                         callback cb) noexcept {
  111|  28.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  28.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 106, False: 28.1k]
  ------------------
  113|       |    // have a denormal float
  114|    106|    int32_t shift = -am.power2 + 1;
  115|    106|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    106|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 106, False: 0]
  ------------------
  118|    106|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    106|                    ? 0
  120|    106|                    : 1;
  121|    106|    return;
  122|    106|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  28.1k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  28.1k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 74, False: 28.1k]
  ------------------
  129|  28.1k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|     74|    am.power2++;
  132|     74|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  28.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  28.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 28.1k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  28.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  28.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  28.3k|    round_nearest_tie_even(
  404|  28.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  28.3k|          (void)_;  // not needed, since we've done our comparison
  406|  28.3k|          (void)__; // not needed, since we've done our comparison
  407|  28.3k|          if (ord > 0) {
  408|  28.3k|            return true;
  409|  28.3k|          } else if (ord < 0) {
  410|  28.3k|            return false;
  411|  28.3k|          } else {
  412|  28.3k|            return is_odd;
  413|  28.3k|          }
  414|  28.3k|        });
  415|  28.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  28.3k|                       callback cb) noexcept {
  146|  28.3k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 28.3k]
  ------------------
  147|  28.3k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 28.3k]
  ------------------
  148|  28.3k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  28.3k|  bool is_above = truncated_bits > halfway;
  150|  28.3k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  28.3k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 28.3k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  28.3k|  } else {
  156|  28.3k|    am.mantissa >>= shift;
  157|  28.3k|  }
  158|  28.3k|  am.power2 += shift;
  159|       |
  160|  28.3k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  28.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  28.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  28.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  28.3k|          (void)_;  // not needed, since we've done our comparison
  406|  28.3k|          (void)__; // not needed, since we've done our comparison
  407|  28.3k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 11.6k, False: 16.6k]
  ------------------
  408|  11.6k|            return true;
  409|  16.6k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 16.1k, False: 488]
  ------------------
  410|  16.1k|            return false;
  411|  16.1k|          } else {
  412|    488|            return is_odd;
  413|    488|          }
  414|  28.3k|        });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|    144|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|    144|  am.power2 -= invalid_am_bias;
  438|       |
  439|    144|  int32_t sci_exp = scientific_exponent(num);
  440|    144|  size_t max_digits = binary_format<T>::max_digits();
  441|    144|  size_t digits = 0;
  442|    144|  bigint bigmant;
  443|    144|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|    144|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|    144|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 50, False: 94]
  ------------------
  447|     50|    return positive_digit_comp<T>(bigmant, exponent);
  448|     94|  } else {
  449|     94|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|     94|  }
  451|    144|}

_ZN10fast_float4spanIKcEC2Ev:
  234|  1.74M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  233|  1.03M|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  236|   348k|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  497|   617k|inline constexpr int binary_format<float>::min_exponent_fast_path() {
  498|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  499|       |  return 0;
  500|       |#else
  501|   617k|  return -10;
  502|   617k|#endif
  503|   617k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  560|   578k|inline constexpr int binary_format<float>::max_exponent_fast_path() {
  561|   578k|  return 10;
  562|   578k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  578|   514k|inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  579|   514k|  return uint64_t(2) << mantissa_explicit_bits();
  580|   514k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  510|  1.39M|inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  511|  1.39M|  return 23;
  512|  1.39M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  598|   493k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  599|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  600|   493k|  return (void)powers_of_ten[0], powers_of_ten[power];
  601|   493k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  362|   477k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  614|   191k|template <> inline constexpr int binary_format<float>::smallest_power_of_ten() {
  615|   191k|  return -64;
  616|   191k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  606|   190k|template <> inline constexpr int binary_format<float>::largest_power_of_ten() {
  607|   190k|  return 38;
  608|   190k|}
_ZN10fast_float14leading_zeroesEm:
  282|   414k|leading_zeroes(uint64_t input_num) {
  283|   414k|  assert(input_num > 0);
  284|   414k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (284:7): [Folded - Ignored]
  ------------------
  285|      0|    return leading_zeroes_generic(input_num);
  286|      0|  }
  287|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  288|       |#if defined(_M_X64) || defined(_M_ARM64)
  289|       |  unsigned long leading_zero = 0;
  290|       |  // Search the mask data from most significant bit (MSB)
  291|       |  // to least significant bit (LSB) for a set bit (1).
  292|       |  _BitScanReverse64(&leading_zero, input_num);
  293|       |  return (int)(63 - leading_zero);
  294|       |#else
  295|       |  return leading_zeroes_generic(input_num);
  296|       |#endif
  297|       |#else
  298|   414k|  return __builtin_clzll(input_num);
  299|   414k|#endif
  300|   414k|}
_ZN10fast_float19full_multiplicationEmm:
  334|   527k|full_multiplication(uint64_t a, uint64_t b) {
  335|   527k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (335:7): [Folded - Ignored]
  ------------------
  336|      0|    value128 answer;
  337|      0|    answer.low = umul128_generic(a, b, &answer.high);
  338|      0|    return answer;
  339|      0|  }
  340|   527k|  value128 answer;
  341|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  342|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  343|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  344|       |  answer.high = __umulh(a, b);
  345|       |  answer.low = a * b;
  346|       |#elif defined(FASTFLOAT_32BIT) ||                                              \
  347|       |    (defined(_WIN64) && !defined(__clang__) && !defined(_M_ARM64))
  348|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  349|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  350|       |  __uint128_t r = ((__uint128_t)a) * b;
  351|   527k|  answer.low = uint64_t(r);
  352|   527k|  answer.high = uint64_t(r >> 64);
  353|       |#else
  354|       |  answer.low = umul128_generic(a, b, &answer.high);
  355|       |#endif
  356|   527k|  return answer;
  357|   527k|}
_ZN10fast_float8value128C2Ev:
  248|   527k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  537|   222k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  538|   222k|  return -127;
  539|   222k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  530|  60.8k|inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  531|  60.8k|  return -17;
  532|  60.8k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  520|  59.0k|inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  521|  59.0k|  return 10;
  522|  59.0k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  366|   145k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  367|   145k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (367:12): [True: 50.6k, False: 94.4k]
  |  Branch (367:38): [True: 0, False: 94.4k]
  ------------------
  368|   145k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  621|  19.4k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  622|  19.4k|  return 114;
  623|  19.4k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  707|  86.5k|template <typename UC> static constexpr int int_cmp_len() {
  708|  86.5k|  return sizeof(uint64_t) / sizeof(UC);
  709|  86.5k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  698|  34.2k|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|  34.2k|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|  34.2k|                "Unsupported character size");
  701|  34.2k|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|  34.2k|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|      0|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|      0|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|  34.2k|}
_ZN10fast_float4spanImEC2EPKmm:
  233|  71.6k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  236|   223k|  constexpr size_t len() const noexcept { return length; }
_ZNK10fast_float4spanImEixEm:
  238|   121k|  FASTFLOAT_CONSTEXPR14 const T &operator[](size_t index) const noexcept {
  239|   121k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   121k|  { ((void)(x)); }
  ------------------
  240|   121k|    return ptr[index];
  241|   121k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  660|   143k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   143k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   143k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   143k|  word |= fastfloat_uint(am.power2)
  664|   143k|          << binary_format<T>::mantissa_explicit_bits();
  665|   143k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   143k|  ::memcpy(&value, &word, sizeof(T));
  670|   143k|#endif
  671|   143k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  551|   143k|template <> inline constexpr int binary_format<float>::sign_index() {
  552|   143k|  return 31;
  553|   143k|}
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  544|   351k|template <> inline constexpr int binary_format<float>::infinite_power() {
  545|   351k|  return 0xFF;
  546|   351k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   44|   870k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  234|   861k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  233|   435k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  236|  2.63k|  constexpr size_t len() const noexcept { return length; }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  707|    144|template <typename UC> static constexpr int int_cmp_len() {
  708|    144|  return sizeof(uint64_t) / sizeof(UC);
  709|    144|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  698|    144|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|    144|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|    144|                "Unsupported character size");
  701|    144|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|    144|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|    144|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|    144|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|    144|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   44|   430k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  488|   683k|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  489|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  490|       |  return 0;
  491|       |#else
  492|   683k|  return -22;
  493|   683k|#endif
  494|   683k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  556|   676k|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  557|   676k|  return 22;
  558|   676k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  565|   581k|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  566|   581k|  return uint64_t(2) << mantissa_explicit_bits();
  567|   581k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  506|  1.51M|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  507|  1.51M|  return 52;
  508|  1.51M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  593|   576k|binary_format<double>::exact_power_of_ten(int64_t power) {
  594|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  595|   576k|  return (void)powers_of_ten[0], powers_of_ten[power];
  596|   576k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  611|   178k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  612|   178k|  return -342;
  613|   178k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  603|   177k|template <> inline constexpr int binary_format<double>::largest_power_of_ten() {
  604|   177k|  return 308;
  605|   177k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  534|   236k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  535|   236k|  return -1023;
  536|   236k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  525|  49.8k|inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  526|  49.8k|  return -4;
  527|  49.8k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  515|  28.0k|inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  516|  28.0k|  return 23;
  517|  28.0k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  618|  31.2k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  619|  31.2k|  return 769;
  620|  31.2k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  660|   135k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   135k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   135k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   135k|  word |= fastfloat_uint(am.power2)
  664|   135k|          << binary_format<T>::mantissa_explicit_bits();
  665|   135k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   135k|  ::memcpy(&value, &word, sizeof(T));
  670|   135k|#endif
  671|   135k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  548|   135k|template <> inline constexpr int binary_format<double>::sign_index() {
  549|   135k|  return 63;
  550|   135k|}
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  541|   341k|template <> inline constexpr int binary_format<double>::infinite_power() {
  542|   341k|  return 0x7FF;
  543|   341k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   425k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   425k|  return from_chars_caller<T>::call(first, last, value,
  191|   425k|                                    parse_options_t<UC>(fmt));
  192|   425k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   425k|       parse_options_t<UC> options) noexcept {
  148|   425k|    return from_chars_advanced(first, last, value, options);
  149|   425k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   425k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   425k|  static_assert(is_supported_float_type<T>(),
  293|   425k|                "only some floating-point types are supported");
  294|   425k|  static_assert(is_supported_char_type<UC>(),
  295|   425k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   425k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   425k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 425k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   425k|  parsed_number_string_t<UC> pns =
  309|   425k|      parse_number_string<UC>(first, last, options);
  310|   425k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 425k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   425k|  return from_chars_advanced(pns, value);
  322|   425k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   425k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   425k|  static_assert(is_supported_float_type<T>(),
  204|   425k|                "only some floating-point types are supported");
  205|   425k|  static_assert(is_supported_char_type<UC>(),
  206|   425k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   425k|  from_chars_result_t<UC> answer;
  209|       |
  210|   425k|  answer.ec = std::errc(); // be optimistic
  211|   425k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   425k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 388k, False: 37.4k]
  ------------------
  218|   425k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 365k, False: 22.1k]
  ------------------
  219|   425k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 328k, False: 37.7k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   328k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 328k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   328k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 307k, False: 20.9k]
  ------------------
  231|   307k|        value = T(pns.mantissa);
  232|   307k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 6.88k, False: 300k]
  ------------------
  233|  6.88k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   300k|        } else {
  235|   300k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   300k|        }
  237|   307k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 307k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   307k|        return answer;
  241|   307k|      }
  242|   328k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   328k|  }
  265|   118k|  adjusted_mantissa am =
  266|   118k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   118k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 70.2k, False: 48.0k]
  |  Branch (267:30): [True: 70.2k, False: 0]
  ------------------
  268|  70.2k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 19.4k, False: 50.7k]
  ------------------
  269|  19.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  19.4k|    }
  271|  70.2k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   118k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 19.4k, False: 98.8k]
  ------------------
  276|  19.4k|    am = digit_comp<T>(pns, am);
  277|  19.4k|  }
  278|   118k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   118k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 115k, False: 2.87k]
  |  Branch (280:29): [True: 12.7k, False: 102k]
  |  Branch (280:49): [True: 807, False: 11.9k]
  ------------------
  281|   118k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 3.93k, False: 113k]
  ------------------
  282|  4.74k|    answer.ec = std::errc::result_out_of_range;
  283|  4.74k|  }
  284|   118k|  return answer;
  285|   425k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   81|  1.09M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   82|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   83|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   84|       |  return false;
   85|       |#endif
   86|       |  // See
   87|       |  // A fast function to check your floating-point rounding mode
   88|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   89|       |  //
   90|       |  // This function is meant to be equivalent to :
   91|       |  // prior: #include <cfenv>
   92|       |  //  return fegetround() == FE_TONEAREST;
   93|       |  // However, it is expected to be much faster than the fegetround()
   94|       |  // function call.
   95|       |  //
   96|       |  // The volatile keywoard prevents the compiler from computing the function
   97|       |  // at compile-time.
   98|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   99|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
  100|       |  // small value so that 1 + x should round to 1 would do (after accounting for
  101|       |  // excess precision, as in 387 instructions).
  102|  1.09M|  static volatile float fmin = std::numeric_limits<float>::min();
  103|  1.09M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  104|       |//
  105|       |// Explanation:
  106|       |// Only when fegetround() == FE_TONEAREST do we have that
  107|       |// fmin + 1.0f == 1.0f - fmin.
  108|       |//
  109|       |// FE_UPWARD:
  110|       |//  fmin + 1.0f > 1
  111|       |//  1.0f - fmin == 1
  112|       |//
  113|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  114|       |//  fmin + 1.0f == 1
  115|       |//  1.0f - fmin < 1
  116|       |//
  117|       |// Note: This may fail to be accurate if fast-math has been
  118|       |// enabled, as rounding conventions may not apply.
  119|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  120|       |#pragma warning(push)
  121|       |//  todo: is there a VS warning?
  122|       |//  see
  123|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  124|       |#elif defined(__clang__)
  125|       |#pragma clang diagnostic push
  126|  1.09M|#pragma clang diagnostic ignored "-Wfloat-equal"
  127|       |#elif defined(__GNUC__)
  128|       |#pragma GCC diagnostic push
  129|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  130|       |#endif
  131|  1.09M|  return (fmini + 1.0f == 1.0f - fmini);
  132|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  133|       |#pragma warning(pop)
  134|       |#elif defined(__clang__)
  135|       |#pragma clang diagnostic pop
  136|       |#elif defined(__GNUC__)
  137|       |#pragma GCC diagnostic pop
  138|       |#endif
  139|  1.09M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   191k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   191k|  return from_chars_caller<T>::call(first, last, value,
  191|   191k|                                    parse_options_t<UC>(fmt));
  192|   191k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   191k|       parse_options_t<UC> options) noexcept {
  148|   191k|    return from_chars_advanced(first, last, value, options);
  149|   191k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   191k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   191k|  static_assert(is_supported_float_type<T>(),
  293|   191k|                "only some floating-point types are supported");
  294|   191k|  static_assert(is_supported_char_type<UC>(),
  295|   191k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   191k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   191k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 191k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   191k|  parsed_number_string_t<UC> pns =
  309|   191k|      parse_number_string<UC>(first, last, options);
  310|   191k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 191k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   191k|  return from_chars_advanced(pns, value);
  322|   191k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   191k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   191k|  static_assert(is_supported_float_type<T>(),
  204|   191k|                "only some floating-point types are supported");
  205|   191k|  static_assert(is_supported_char_type<UC>(),
  206|   191k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   191k|  from_chars_result_t<UC> answer;
  209|       |
  210|   191k|  answer.ec = std::errc(); // be optimistic
  211|   191k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   191k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 190k, False: 1.53k]
  ------------------
  218|   191k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 186k, False: 3.51k]
  ------------------
  219|   191k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 186k, False: 326]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   186k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 186k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   186k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 185k, False: 574]
  ------------------
  231|   185k|        value = T(pns.mantissa);
  232|   185k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 1.06k, False: 184k]
  ------------------
  233|  1.06k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   184k|        } else {
  235|   184k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   184k|        }
  237|   185k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 185k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   185k|        return answer;
  241|   185k|      }
  242|   186k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   186k|  }
  265|  5.95k|  adjusted_mantissa am =
  266|  5.95k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  5.95k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 792, False: 5.15k]
  |  Branch (267:30): [True: 792, False: 0]
  ------------------
  268|    792|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 0, False: 792]
  ------------------
  269|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|      0|    }
  271|    792|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  5.95k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 0, False: 5.95k]
  ------------------
  276|      0|    am = digit_comp<T>(pns, am);
  277|      0|  }
  278|  5.95k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  5.95k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 5.39k, False: 552]
  |  Branch (280:29): [True: 3.62k, False: 1.77k]
  |  Branch (280:49): [True: 804, False: 2.82k]
  ------------------
  281|  5.95k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.82k, False: 2.32k]
  ------------------
  282|  3.62k|    answer.ec = std::errc::result_out_of_range;
  283|  3.62k|  }
  284|  5.95k|  return answer;
  285|   191k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   444k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   444k|  return from_chars_caller<T>::call(first, last, value,
  191|   444k|                                    parse_options_t<UC>(fmt));
  192|   444k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   444k|       parse_options_t<UC> options) noexcept {
  148|   444k|    return from_chars_advanced(first, last, value, options);
  149|   444k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   444k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   444k|  static_assert(is_supported_float_type<T>(),
  293|   444k|                "only some floating-point types are supported");
  294|   444k|  static_assert(is_supported_char_type<UC>(),
  295|   444k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   444k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   444k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 444k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   444k|  parsed_number_string_t<UC> pns =
  309|   444k|      parse_number_string<UC>(first, last, options);
  310|   444k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 444k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   444k|  return from_chars_advanced(pns, value);
  322|   444k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   444k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   444k|  static_assert(is_supported_float_type<T>(),
  204|   444k|                "only some floating-point types are supported");
  205|   444k|  static_assert(is_supported_char_type<UC>(),
  206|   444k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   444k|  from_chars_result_t<UC> answer;
  209|       |
  210|   444k|  answer.ec = std::errc(); // be optimistic
  211|   444k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   444k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 438k, False: 5.99k]
  ------------------
  218|   444k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 417k, False: 21.5k]
  ------------------
  219|   444k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 349k, False: 68.0k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   349k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 349k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   349k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 345k, False: 4.23k]
  ------------------
  231|   345k|        value = T(pns.mantissa);
  232|   345k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 18.5k, False: 326k]
  ------------------
  233|  18.5k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   326k|        } else {
  235|   326k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   326k|        }
  237|   345k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 345k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   345k|        return answer;
  241|   345k|      }
  242|   349k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   349k|  }
  265|  99.9k|  adjusted_mantissa am =
  266|  99.9k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  99.9k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 73.3k, False: 26.5k]
  |  Branch (267:30): [True: 73.3k, False: 0]
  ------------------
  268|  73.3k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 31.0k, False: 42.2k]
  ------------------
  269|  31.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  31.0k|    }
  271|  73.3k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  99.9k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 31.0k, False: 68.8k]
  ------------------
  276|  31.0k|    am = digit_comp<T>(pns, am);
  277|  31.0k|  }
  278|  99.9k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  99.9k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 97.2k, False: 2.62k]
  |  Branch (280:29): [True: 7.99k, False: 89.2k]
  |  Branch (280:49): [True: 230, False: 7.76k]
  ------------------
  281|  99.9k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.02k, False: 97.6k]
  ------------------
  282|  2.25k|    answer.ec = std::errc::result_out_of_range;
  283|  2.25k|  }
  284|  99.9k|  return answer;
  285|   444k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   239k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   239k|  return from_chars_caller<T>::call(first, last, value,
  191|   239k|                                    parse_options_t<UC>(fmt));
  192|   239k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   239k|       parse_options_t<UC> options) noexcept {
  148|   239k|    return from_chars_advanced(first, last, value, options);
  149|   239k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   239k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   239k|  static_assert(is_supported_float_type<T>(),
  293|   239k|                "only some floating-point types are supported");
  294|   239k|  static_assert(is_supported_char_type<UC>(),
  295|   239k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   239k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   239k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 239k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   239k|  parsed_number_string_t<UC> pns =
  309|   239k|      parse_number_string<UC>(first, last, options);
  310|   239k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 239k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   239k|  return from_chars_advanced(pns, value);
  322|   239k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   239k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   239k|  static_assert(is_supported_float_type<T>(),
  204|   239k|                "only some floating-point types are supported");
  205|   239k|  static_assert(is_supported_char_type<UC>(),
  206|   239k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   239k|  from_chars_result_t<UC> answer;
  209|       |
  210|   239k|  answer.ec = std::errc(); // be optimistic
  211|   239k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   239k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 237k, False: 1.73k]
  ------------------
  218|   239k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 232k, False: 4.56k]
  ------------------
  219|   239k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 232k, False: 628]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   232k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 232k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   232k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 231k, False: 270]
  ------------------
  231|   231k|        value = T(pns.mantissa);
  232|   231k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 1.33k, False: 230k]
  ------------------
  233|  1.33k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   230k|        } else {
  235|   230k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   230k|        }
  237|   231k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 231k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   231k|        return answer;
  241|   231k|      }
  242|   232k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   232k|  }
  265|  7.20k|  adjusted_mantissa am =
  266|  7.20k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  7.20k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 806, False: 6.39k]
  |  Branch (267:30): [True: 806, False: 0]
  ------------------
  268|    806|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 144, False: 662]
  ------------------
  269|    144|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|    144|    }
  271|    806|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  7.20k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 144, False: 7.05k]
  ------------------
  276|    144|    am = digit_comp<T>(pns, am);
  277|    144|  }
  278|  7.20k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  7.20k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 6.60k, False: 594]
  |  Branch (280:29): [True: 1.75k, False: 4.85k]
  |  Branch (280:49): [True: 198, False: 1.56k]
  ------------------
  281|  7.20k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 1.56k, False: 5.44k]
  ------------------
  282|  1.75k|    answer.ec = std::errc::result_out_of_range;
  283|  1.75k|  }
  284|  7.20k|  return answer;
  285|   239k|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|  3.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.98M|{
 4068|  2.98M|    if constexpr (sizeof(U) == 1) {
 4069|  2.98M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.98M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.98M|{
 4032|  2.98M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.98M|    SCN_GCC_COMPAT_PUSH
 4035|  2.98M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.98M|    constexpr char lengths[] =
 4037|  2.98M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.98M|        "\1\1\1\1\1\1\1\1"
 4039|  2.98M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.98M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.98M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.98M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.98M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.98M|    SCN_GCC_COMPAT_POP
 4046|  2.98M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.68M|{
 4274|  2.68M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.68M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.68M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.68M|{
 4087|  2.68M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.68M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.68M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.68M|    };
 4092|       |
 4093|  2.68M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.62M, False: 57.0k]
  ------------------
 4094|  2.62M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 707, False: 2.62M]
  ------------------
 4095|    707|            SCN_UNLIKELY_ATTR
 4096|    707|            return invalid_code_point;
 4097|    707|        }
 4098|  2.62M|        return static_cast<char32_t>(input[0]);
 4099|  2.62M|    }
 4100|       |
 4101|  57.0k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 52.3k, False: 4.77k]
  ------------------
 4102|  52.3k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 142, False: 52.1k]
  ------------------
 4103|    142|            SCN_UNLIKELY_ATTR
 4104|    142|            return invalid_code_point;
 4105|    142|        }
 4106|  52.1k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 3.78k, False: 48.3k]
  ------------------
 4107|  3.78k|            SCN_UNLIKELY_ATTR
 4108|  3.78k|            return invalid_code_point;
 4109|  3.78k|        }
 4110|       |
 4111|  48.3k|        char32_t cp{};
 4112|  48.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  48.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  48.3k|        return cp;
 4115|  52.1k|    }
 4116|       |
 4117|  4.77k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 2.27k, False: 2.49k]
  ------------------
 4118|  2.27k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 137, False: 2.14k]
  ------------------
 4119|    137|            SCN_UNLIKELY_ATTR
 4120|    137|            return invalid_code_point;
 4121|    137|        }
 4122|  2.14k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 524, False: 1.61k]
  ------------------
 4123|  2.14k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 817, False: 799]
  ------------------
 4124|  1.34k|            SCN_UNLIKELY_ATTR
 4125|  1.34k|            return invalid_code_point;
 4126|  1.34k|        }
 4127|       |
 4128|    799|        char32_t cp{};
 4129|    799|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    799|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    799|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    799|        return cp;
 4133|  2.14k|    }
 4134|       |
 4135|  2.49k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 2.49k, False: 0]
  ------------------
 4136|  2.49k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 2.49k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  2.49k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 539, False: 1.95k]
  ------------------
 4141|    539|            SCN_UNLIKELY_ATTR
 4142|    539|            return invalid_code_point;
 4143|    539|        }
 4144|  1.95k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 529, False: 1.42k]
  ------------------
 4145|  1.95k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 555, False: 872]
  ------------------
 4146|  1.95k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 570, False: 302]
  ------------------
 4147|  1.65k|            SCN_UNLIKELY_ATTR
 4148|  1.65k|            return invalid_code_point;
 4149|  1.65k|        }
 4150|       |
 4151|    302|        char32_t cp{};
 4152|    302|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    302|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    302|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    302|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    302|        return cp;
 4157|  1.95k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  60.1k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  60.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  60.1k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  4.42M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  4.42M|    else {
 3966|  4.42M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  4.42M|                                       to_address(first), to_address(last)))};
 3968|  4.42M|    }
 3969|  4.42M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  13.4M|{
  316|  13.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  13.4M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  21.9M|{
  294|  21.9M|    return p;
  295|  21.9M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  6.99M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  6.99M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  6.99M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  6.99M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  6.99M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  6.99M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  92.7k|    {
 2869|  92.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  92.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  92.7k|    {
 2850|  92.7k|        return decay_copy(t.begin());
 2851|  92.7k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  11.4M|{
 2094|  11.4M|    return SCN_FWD(t);
  ------------------
  |  |  936|  11.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  11.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.90M|    {
 2926|  1.90M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.90M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.90M|    {
 2908|  1.90M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.90M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|   139k|{
 9681|   139k|    auto result = make_scan_result<Source, Args...>();
 9682|   139k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   139k|                                   make_scan_args(result->values())));
 9684|   139k|    return result;
 9685|   139k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9636|   309k|{
 9637|   309k|    return scan_result_type<Source, Args...>();
 9638|   309k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   309k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   309k|        : m_value(T{}), m_has_value(true)
  427|   309k|    {
  428|   309k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6570|   309k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|   953k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   953k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6344|  1.03M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   309k|{
 9622|   309k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.1k, False: 279k]
  |  |  ------------------
  ------------------
 9623|  30.1k|        out = unexpected(in.error());
 9624|  30.1k|    }
 9625|   279k|    else {
 9626|   279k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   279k|    static_cast<    \
  |  |  935|   279k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   279k|    }
 9628|   309k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   953k|    {
 1740|   953k|        return has_value();
 1741|   953k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.90M|    {
  490|  1.90M|        return m_has_value;
  491|  1.90M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  90.4k|    {
 1746|  90.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  90.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  90.4k|        return this->get_unexpected().error();
 1748|  90.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  90.4k|    {
  473|  90.4k|        return m_unexpected;
  474|  90.4k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  14.3M|    {
  365|  14.3M|        return m_unexpected;
  366|  14.3M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  3.52M|        : m_unexpected(std::forward<Err>(e))
  350|  3.52M|    {
  351|  3.52M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.52M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.52M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.1k|        : base(unexpect, std::move(e.error())),
 1616|  30.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.1k|    {
 1618|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.1k|          m_has_value(false)
  451|  30.1k|    {
  452|  30.1k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  10.6M|        : m_unexpected(std::forward<Args>(args)...)
  359|  10.6M|    {
  360|  10.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  10.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  10.6M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.1k|    {
 1316|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.1k|    {
  903|  30.1k|        assign_common(std::move(other));
  904|  30.1k|        return *this;
  905|  30.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.1k|    {
  950|  30.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.1k, False: 0]
  ------------------
  951|  30.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   867k|    {
  456|   867k|        return m_value;
  457|   867k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.1k|    {
 1046|  30.1k|        this->destroy_value();
 1047|  30.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.1k|    {
  504|  30.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.1k|                                  std::forward<Args>(args)...);
  506|  30.1k|        m_has_value = false;
  507|  30.1k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   542k|{
  396|   542k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   542k|        T(std::forward<Args>(args)...);
  398|   542k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.1k|    {
  473|  30.1k|        return m_unexpected;
  474|  30.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.1k|    {
  481|  30.1k|        return std::move(m_unexpected);
  482|  30.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|   862k|    {
 6445|   862k|        m_range = std::forward<Other>(r);
 6446|   862k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   862k|    {
 1795|   862k|        return value();
 1796|   862k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   862k|    {
 1769|   862k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   862k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   862k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   862k|        return this->get_value();
 1771|   862k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   862k|    {
  456|   862k|        return m_value;
  457|   862k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|   429k|{
 9461|   429k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   429k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   429k|{
 9398|   429k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   429k|    auto result = vscan_impl(buffer, format, args);
 9401|   429k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.7k, False: 387k]
  |  |  ------------------
  ------------------
 9402|  41.7k|        return unexpected(result.error());
 9403|  41.7k|    }
 9404|   387k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   429k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   953k|{
 5381|   953k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   953k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   953k|                  "\n"
 5385|   953k|                  "Unsupported range type given as input to a scanning "
 5386|   953k|                  "function.\n"
 5387|   953k|                  "A range needs to have a character type (value type) "
 5388|   953k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   953k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   953k|                  "to be included.\n"
 5391|   953k|                  "See the scnlib documentation for more details.");
 5392|   953k|    static_assert(
 5393|   953k|        !std::is_same_v<T, custom_char_traits>,
 5394|   953k|        "\n"
 5395|   953k|        "Unsupported range type given as input to a scanning "
 5396|   953k|        "function.\n"
 5397|   953k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   953k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   953k|        "not supported.");
 5400|   953k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   953k|                  "\n"
 5402|   953k|                  "Unsupported range type given as input to a scanning "
 5403|   953k|                  "function.\n"
 5404|   953k|                  "file_marker_found cannot be used as an "
 5405|   953k|                  "source range type to scn::scan.\n"
 5406|   953k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   953k|                  "and do not provide an explicit source range, "
 5408|   953k|                  "or use scn::scan with a FILE* directly.");
 5409|   953k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   953k|                  "\n"
 5411|   953k|                  "Unsupported range type given as input to a scanning "
 5412|   953k|                  "function.\n"
 5413|   953k|                  "In order to be scannable, a range needs to satisfy "
 5414|   953k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   953k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   953k|                  "\n"
 5417|   953k|                  "Unsupported range type given as input to a scanning "
 5418|   953k|                  "function.\n"
 5419|   953k|                  "A range needs to model forward_range and have a valid "
 5420|   953k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   953k|                  "Examples of scannable ranges are std::string, "
 5422|   953k|                  "std::string_view, "
 5423|   953k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   953k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   953k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   953k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   953k|{
 5320|   953k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   953k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   953k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   953k|    {
 3000|   953k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   953k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   953k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   953k|    {
 2981|   953k|        return t.data();
 2982|   953k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   953k|    {
 3383|   953k|        return detail::to_address(ranges::begin(derived()));
 3384|   953k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  8.48M|{
  316|  8.48M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  8.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  8.48M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.81M|    {
 2869|  1.81M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.81M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.81M|    {
 2850|  1.81M|        return decay_copy(t.begin());
 2851|  1.81M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  24.2M|    {
 3480|  24.2M|        return m_iterator;
 3481|  24.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   953k|    {
 3339|   953k|        return static_cast<const D&>(*this);
 3340|   953k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   953k|    {
 3075|   953k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   953k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   953k|    {
 3041|   953k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   953k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   953k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  5.41M|{
 2094|  5.41M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.41M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  5.92M|    {
 3496|  5.92M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  5.92M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  13.5M|    {
 1740|  13.5M|        return has_value();
 1741|  13.5M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  24.3M|    {
  490|  24.3M|        return m_has_value;
  491|  24.3M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  1.10M|    {
 1746|  1.10M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.10M|        return this->get_unexpected().error();
 1748|  1.10M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.10M|    {
  473|  1.10M|        return m_unexpected;
  474|  1.10M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  90.4k|        : base(unexpect, std::move(e.error())),
 1616|  90.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  90.4k|    {
 1618|  90.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  90.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  90.4k|          m_has_value(false)
  451|  90.4k|    {
  452|  90.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   953k|    {
 1316|   953k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   862k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   862k|                      ranges::iterator_t<SourceRange>>) {
 6677|   862k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   862k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  6.72M|    {
 2869|  6.72M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  6.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  6.72M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  6.72M|    {
 2850|  6.72M|        return decay_copy(t.begin());
 2851|  6.72M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|   862k|{
 6662|   862k|    return ranges::end(source);
 6663|   862k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   862k|    {
 2926|   862k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   862k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   862k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   862k|    {
 2908|   862k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   862k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   862k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  11.1M|    {
 3484|  11.1M|        return m_sentinel;
 3485|  11.1M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.16M|    {
 1795|  4.16M|        return value();
 1796|  4.16M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  9.62M|    {
 1769|  9.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  9.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.62M|        return this->get_value();
 1771|  9.62M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  9.62M|    {
  456|  9.62M|        return m_value;
  457|  9.62M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   862k|        : base(std::in_place, std::forward<U>(val)),
 1570|   862k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   862k|    {
 1572|   862k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   862k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   862k|    {
  442|   862k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|   279k|    {
 8768|   279k|        return m_str;
 8769|   279k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   599k|{
 6110|   599k|    detail::check_scan_arg_types<Args...>();
 6111|   599k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   599k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5824|  1.03M|{
 5825|  1.03M|    constexpr bool default_constructible_constraint =
 5826|  1.03M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.03M|    static_assert(default_constructible_constraint,
 5828|  1.03M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.03M|    constexpr bool destructible_constraint =
 5831|  1.03M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.03M|    static_assert(destructible_constraint,
 5833|  1.03M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.03M|    constexpr bool non_reference_constraint =
 5836|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.03M|    static_assert(non_reference_constraint,
 5838|  1.03M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.03M|    constexpr bool movable_constraint =
 5841|  1.03M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.03M|    static_assert(movable_constraint,
 5843|  1.03M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.03M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.03M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.03M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6085|   599k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   599k|    {
 6087|   599k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   599k|    {
 6095|   599k|        return {detail::make_arg<
 6096|   599k|            kind, Context,
 6097|   599k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   599k|                                 typename Context::char_type>::value>(args)...};
 6099|   599k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5874|   599k|{
 5875|   599k|    return make_value<Context>(value).ref_value;
 5876|   599k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5809|   662k|{
 5810|   662k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   662k|                                  needs_context_tag>) {
 5814|   662k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   662k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5648|   662k|    {                                                                        \
 5649|   662k|        return val;                                                          \
 5650|   662k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5778|  1.03M|{
 5779|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.03M|    constexpr bool scannable_char =
 5783|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.03M|    static_assert(scannable_char,
 5785|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.03M|    constexpr bool scannable_const =
 5789|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.03M|    constexpr bool scannable_disabled =
 5793|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.03M|    static_assert(scannable_disabled,
 5795|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.03M|    static_assert(
 5800|  1.03M|        scannable,
 5801|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.03M|    return arg_value{arg};
 5805|  1.03M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5562|  1.03M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.03M|    {
 5564|  1.03M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6353|   939k|    {
 6354|   939k|        return m_values;
 6355|   939k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   599k|        : basic_scan_args(store.desc, store.args.data())
 6136|   599k|    {
 6137|   599k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|  1.85M|        : m_desc(desc), m_builtin_values(data)
 6188|  1.85M|    {
 6189|  1.85M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  9.59M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.59M|    static_cast<    \
  |  |  935|  9.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  9.59M|    static_cast<    \
  |  |  935|  9.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  9.59M|    {
 3466|  9.59M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|  1.85M|{
 8441|  1.85M|    return s;
 8442|  1.85M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|  1.85M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   279k|        : m_str(r.str)
 8763|   279k|    {
 8764|   279k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   309k|    {
 1740|   309k|        return has_value();
 1741|   309k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   867k|    {
 1815|   867k|        return &value();
 1816|   867k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   867k|    {
 1769|   867k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   867k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   867k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   867k|        return this->get_value();
 1771|   867k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|   862k|    {
 6434|   862k|        return ranges::begin(m_range);
 6435|   862k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|   139k|{
 9750|   139k|    auto result = make_scan_result<Source, Args...>();
 9751|   139k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   139k|                                   make_scan_args(result->values())));
 9753|   139k|    return result;
 9754|   139k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|   429k|{
 9479|   429k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   429k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   429k|{
 9414|   429k|#if !SCN_DISABLE_LOCALE
 9415|   429k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   429k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   429k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   429k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   429k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.7k, False: 387k]
  |  |  ------------------
  ------------------
 9422|  41.7k|        return unexpected(result.error());
 9423|  41.7k|    }
 9424|   387k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   429k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  30.1k|{
 9791|  30.1k|    auto result = make_scan_result<Source, T>();
 9792|  30.1k|    fill_scan_result(
 9793|  30.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  30.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  30.1k|                            detail::make_arg<scan_context>(result->value())));
 9795|  30.1k|    return result;
 9796|  30.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|  93.6k|{
 9492|  93.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  93.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|  93.6k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  93.6k|{
 9438|  93.6k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  93.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  93.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.95k, False: 86.6k]
  |  |  ------------------
  ------------------
 9442|  6.95k|        return unexpected(result.error());
 9443|  6.95k|    }
 9444|  86.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  93.6k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5859|  63.0k|{
 5860|  63.0k|    check_scan_arg_types<T>();
 5861|       |
 5862|  63.0k|    basic_scan_arg<Context> arg;
 5863|  63.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  63.0k|    arg.m_value = make_value<Context>(value);
 5865|  63.0k|    return arg;
 5866|  63.0k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|  2.05M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  3.27M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|  94.6k|    {
 6376|  94.6k|        return std::get<0>(m_values);
 6377|  94.6k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|   144k|{
 9681|   144k|    auto result = make_scan_result<Source, Args...>();
 9682|   144k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   144k|                                   make_scan_args(result->values())));
 9684|   144k|    return result;
 9685|   144k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9636|   319k|{
 9637|   319k|    return scan_result_type<Source, Args...>();
 9638|   319k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   319k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   319k|        : m_value(T{}), m_has_value(true)
  427|   319k|    {
  428|   319k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6570|   319k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6344|  1.11M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   319k|{
 9622|   319k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.1k, False: 289k]
  |  |  ------------------
  ------------------
 9623|  30.1k|        out = unexpected(in.error());
 9624|  30.1k|    }
 9625|   289k|    else {
 9626|   289k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   289k|    static_cast<    \
  |  |  935|   289k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   289k|    }
 9628|   319k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.1k|        : base(unexpect, std::move(e.error())),
 1616|  30.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.1k|    {
 1618|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.1k|          m_has_value(false)
  451|  30.1k|    {
  452|  30.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.1k|    {
 1316|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.1k|    {
  903|  30.1k|        assign_common(std::move(other));
  904|  30.1k|        return *this;
  905|  30.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.1k|    {
  950|  30.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.1k, False: 0]
  ------------------
  951|  30.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.27M|    {
  490|  1.27M|        return m_has_value;
  491|  1.27M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   899k|    {
  456|   899k|        return m_value;
  457|   899k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.1k|    {
 1046|  30.1k|        this->destroy_value();
 1047|  30.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.1k|    {
  504|  30.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.1k|                                  std::forward<Args>(args)...);
  506|  30.1k|        m_has_value = false;
  507|  30.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.1k|    {
  473|  30.1k|        return m_unexpected;
  474|  30.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.1k|    {
  481|  30.1k|        return std::move(m_unexpected);
  482|  30.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|   288k|    {
 8768|   288k|        return m_str;
 8769|   288k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   624k|{
 6110|   624k|    detail::check_scan_arg_types<Args...>();
 6111|   624k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   624k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5824|  1.11M|{
 5825|  1.11M|    constexpr bool default_constructible_constraint =
 5826|  1.11M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.11M|    static_assert(default_constructible_constraint,
 5828|  1.11M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.11M|    constexpr bool destructible_constraint =
 5831|  1.11M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.11M|    static_assert(destructible_constraint,
 5833|  1.11M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.11M|    constexpr bool non_reference_constraint =
 5836|  1.11M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.11M|    static_assert(non_reference_constraint,
 5838|  1.11M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.11M|    constexpr bool movable_constraint =
 5841|  1.11M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.11M|    static_assert(movable_constraint,
 5843|  1.11M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.11M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.11M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.11M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|   624k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   624k|    {
 6087|   624k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   624k|    {
 6095|   624k|        return {detail::make_arg<
 6096|   624k|            kind, Context,
 6097|   624k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   624k|                                 typename Context::char_type>::value>(args)...};
 6099|   624k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|   624k|{
 5875|   624k|    return make_value<Context>(value).ref_value;
 5876|   624k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5809|   690k|{
 5810|   690k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   690k|                                  needs_context_tag>) {
 5814|   690k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   690k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   690k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5648|   690k|    {                                                                        \
 5649|   690k|        return val;                                                          \
 5650|   690k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5778|  1.11M|{
 5779|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.11M|    constexpr bool scannable_char =
 5783|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.11M|    static_assert(scannable_char,
 5785|  1.11M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.11M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.11M|    constexpr bool scannable_const =
 5789|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.11M|    constexpr bool scannable_disabled =
 5793|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.11M|    static_assert(scannable_disabled,
 5795|  1.11M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.11M|    static_assert(
 5800|  1.11M|        scannable,
 5801|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.11M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.11M|    return arg_value{arg};
 5805|  1.11M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5562|  1.11M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.11M|    {
 5564|  1.11M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6353|  1.00M|    {
 6354|  1.00M|        return m_values;
 6355|  1.00M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   624k|        : basic_scan_args(store.desc, store.args.data())
 6136|   624k|    {
 6137|   624k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   288k|        : m_str(r.str)
 8763|   288k|    {
 8764|   288k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   319k|    {
 1740|   319k|        return has_value();
 1741|   319k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   899k|    {
 1815|   899k|        return &value();
 1816|   899k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   899k|    {
 1769|   899k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   899k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   899k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   899k|        return this->get_value();
 1771|   899k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|   144k|{
 9750|   144k|    auto result = make_scan_result<Source, Args...>();
 9751|   144k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   144k|                                   make_scan_args(result->values())));
 9753|   144k|    return result;
 9754|   144k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  31.4k|{
 9791|  31.4k|    auto result = make_scan_result<Source, T>();
 9792|  31.4k|    fill_scan_result(
 9793|  31.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  31.4k|                            detail::make_arg<scan_context>(result->value())));
 9795|  31.4k|    return result;
 9796|  31.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5859|  66.2k|{
 5860|  66.2k|    check_scan_arg_types<T>();
 5861|       |
 5862|  66.2k|    basic_scan_arg<Context> arg;
 5863|  66.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  66.2k|    arg.m_value = make_value<Context>(value);
 5865|  66.2k|    return arg;
 5866|  66.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   104k|    {
 6376|   104k|        return std::get<0>(m_values);
 6377|   104k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|   145k|{
 9681|   145k|    auto result = make_scan_result<Source, Args...>();
 9682|   145k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   145k|                                   make_scan_args(result->values())));
 9684|   145k|    return result;
 9685|   145k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9636|   323k|{
 9637|   323k|    return scan_result_type<Source, Args...>();
 9638|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   323k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   323k|        : m_value(T{}), m_has_value(true)
  427|   323k|    {
  428|   323k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6570|   323k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6344|  1.12M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   323k|{
 9622|   323k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.1k, False: 293k]
  |  |  ------------------
  ------------------
 9623|  30.1k|        out = unexpected(in.error());
 9624|  30.1k|    }
 9625|   293k|    else {
 9626|   293k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   293k|    static_cast<    \
  |  |  935|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   293k|    }
 9628|   323k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.1k|        : base(unexpect, std::move(e.error())),
 1616|  30.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.1k|    {
 1618|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.1k|          m_has_value(false)
  451|  30.1k|    {
  452|  30.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.1k|    {
 1316|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.1k|    {
  903|  30.1k|        assign_common(std::move(other));
  904|  30.1k|        return *this;
  905|  30.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.1k|    {
  950|  30.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.1k, False: 0]
  ------------------
  951|  30.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.29M|    {
  490|  1.29M|        return m_has_value;
  491|  1.29M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   911k|    {
  456|   911k|        return m_value;
  457|   911k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.1k|    {
 1046|  30.1k|        this->destroy_value();
 1047|  30.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.1k|    {
  504|  30.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.1k|                                  std::forward<Args>(args)...);
  506|  30.1k|        m_has_value = false;
  507|  30.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.1k|    {
  473|  30.1k|        return m_unexpected;
  474|  30.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.1k|    {
  481|  30.1k|        return std::move(m_unexpected);
  482|  30.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|   291k|    {
 8768|   291k|        return m_str;
 8769|   291k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   631k|{
 6110|   631k|    detail::check_scan_arg_types<Args...>();
 6111|   631k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   631k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5824|  1.12M|{
 5825|  1.12M|    constexpr bool default_constructible_constraint =
 5826|  1.12M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.12M|    static_assert(default_constructible_constraint,
 5828|  1.12M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.12M|    constexpr bool destructible_constraint =
 5831|  1.12M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.12M|    static_assert(destructible_constraint,
 5833|  1.12M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.12M|    constexpr bool non_reference_constraint =
 5836|  1.12M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.12M|    static_assert(non_reference_constraint,
 5838|  1.12M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.12M|    constexpr bool movable_constraint =
 5841|  1.12M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.12M|    static_assert(movable_constraint,
 5843|  1.12M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.12M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.12M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.12M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6085|   631k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   631k|    {
 6087|   631k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   631k|    {
 6095|   631k|        return {detail::make_arg<
 6096|   631k|            kind, Context,
 6097|   631k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   631k|                                 typename Context::char_type>::value>(args)...};
 6099|   631k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EevEEPvRT2_:
 5874|   631k|{
 5875|   631k|    return make_value<Context>(value).ref_value;
 5876|   631k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5809|   698k|{
 5810|   698k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   698k|                                  needs_context_tag>) {
 5814|   698k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   698k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   698k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5648|   698k|    {                                                                        \
 5649|   698k|        return val;                                                          \
 5650|   698k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5778|  1.12M|{
 5779|  1.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.12M|    constexpr bool scannable_char =
 5783|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.12M|    static_assert(scannable_char,
 5785|  1.12M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.12M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.12M|    constexpr bool scannable_const =
 5789|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.12M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.12M|    constexpr bool scannable_disabled =
 5793|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.12M|    static_assert(scannable_disabled,
 5795|  1.12M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.12M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.12M|    static_assert(
 5800|  1.12M|        scannable,
 5801|  1.12M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.12M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.12M|    return arg_value{arg};
 5805|  1.12M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5562|  1.12M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.12M|    {
 5564|  1.12M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6353|  1.02M|    {
 6354|  1.02M|        return m_values;
 6355|  1.02M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   631k|        : basic_scan_args(store.desc, store.args.data())
 6136|   631k|    {
 6137|   631k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   291k|        : m_str(r.str)
 8763|   291k|    {
 8764|   291k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   323k|    {
 1740|   323k|        return has_value();
 1741|   323k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   911k|    {
 1815|   911k|        return &value();
 1816|   911k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   911k|    {
 1769|   911k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   911k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   911k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   911k|        return this->get_value();
 1771|   911k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|   145k|{
 9750|   145k|    auto result = make_scan_result<Source, Args...>();
 9751|   145k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   145k|                                   make_scan_args(result->values())));
 9753|   145k|    return result;
 9754|   145k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  31.9k|{
 9791|  31.9k|    auto result = make_scan_result<Source, T>();
 9792|  31.9k|    fill_scan_result(
 9793|  31.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  31.9k|                            detail::make_arg<scan_context>(result->value())));
 9795|  31.9k|    return result;
 9796|  31.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5859|  67.1k|{
 5860|  67.1k|    check_scan_arg_types<T>();
 5861|       |
 5862|  67.1k|    basic_scan_arg<Context> arg;
 5863|  67.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  67.1k|    arg.m_value = make_value<Context>(value);
 5865|  67.1k|    return arg;
 5866|  67.1k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   106k|    {
 6376|   106k|        return std::get<0>(m_values);
 6377|   106k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  90.4k|    {
 2869|  90.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  90.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  90.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  90.4k|    {
 2850|  90.4k|        return decay_copy(t.begin());
 2851|  90.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  47.6M|{
 2094|  47.6M|    return SCN_FWD(t);
  ------------------
  |  |  936|  47.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  47.6M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.19M|    {
 2926|  2.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.19M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.19M|    {
 2908|  2.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.19M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|   160k|{
 9681|   160k|    auto result = make_scan_result<Source, Args...>();
 9682|   160k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   160k|                                   make_scan_args(result->values())));
 9684|   160k|    return result;
 9685|   160k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9636|   352k|{
 9637|   352k|    return scan_result_type<Source, Args...>();
 9638|   352k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   352k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   352k|        : m_value(T{}), m_has_value(true)
  427|   352k|    {
  428|   352k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6570|   352k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|  1.09M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  1.09M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   352k|{
 9622|   352k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.1k, False: 322k]
  |  |  ------------------
  ------------------
 9623|  30.1k|        out = unexpected(in.error());
 9624|  30.1k|    }
 9625|   322k|    else {
 9626|   322k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   322k|    static_cast<    \
  |  |  935|   322k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   322k|    }
 9628|   352k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  1.09M|    {
 1740|  1.09M|        return has_value();
 1741|  1.09M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.19M|    {
  490|  2.19M|        return m_has_value;
  491|  2.19M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  90.4k|    {
 1746|  90.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  90.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  90.4k|        return this->get_unexpected().error();
 1748|  90.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  90.4k|    {
  473|  90.4k|        return m_unexpected;
  474|  90.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.1k|        : base(unexpect, std::move(e.error())),
 1616|  30.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.1k|    {
 1618|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.1k|          m_has_value(false)
  451|  30.1k|    {
  452|  30.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.1k|    {
 1316|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.1k|    {
  903|  30.1k|        assign_common(std::move(other));
  904|  30.1k|        return *this;
  905|  30.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.1k|    {
  950|  30.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.1k, False: 0]
  ------------------
  951|  30.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.41M|    {
  490|  1.41M|        return m_has_value;
  491|  1.41M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   998k|    {
  456|   998k|        return m_value;
  457|   998k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.1k|    {
 1046|  30.1k|        this->destroy_value();
 1047|  30.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.1k|    {
  504|  30.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.1k|                                  std::forward<Args>(args)...);
  506|  30.1k|        m_has_value = false;
  507|  30.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.1k|    {
  473|  30.1k|        return m_unexpected;
  474|  30.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.1k|    {
  481|  30.1k|        return std::move(m_unexpected);
  482|  30.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  1.00M|    {
 6445|  1.00M|        m_range = std::forward<Other>(r);
 6446|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  1.00M|    {
 1795|  1.00M|        return value();
 1796|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  1.00M|    {
 1769|  1.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.00M|        return this->get_value();
 1771|  1.00M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.00M|    {
  456|  1.00M|        return m_value;
  457|  1.00M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|   497k|{
 9461|   497k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   497k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   497k|{
 9398|   497k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   497k|    auto result = vscan_impl(buffer, format, args);
 9401|   497k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.7k, False: 455k]
  |  |  ------------------
  ------------------
 9402|  41.7k|        return unexpected(result.error());
 9403|  41.7k|    }
 9404|   455k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   497k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  1.09M|{
 5381|  1.09M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.09M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.09M|                  "\n"
 5385|  1.09M|                  "Unsupported range type given as input to a scanning "
 5386|  1.09M|                  "function.\n"
 5387|  1.09M|                  "A range needs to have a character type (value type) "
 5388|  1.09M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.09M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.09M|                  "to be included.\n"
 5391|  1.09M|                  "See the scnlib documentation for more details.");
 5392|  1.09M|    static_assert(
 5393|  1.09M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.09M|        "\n"
 5395|  1.09M|        "Unsupported range type given as input to a scanning "
 5396|  1.09M|        "function.\n"
 5397|  1.09M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.09M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.09M|        "not supported.");
 5400|  1.09M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.09M|                  "\n"
 5402|  1.09M|                  "Unsupported range type given as input to a scanning "
 5403|  1.09M|                  "function.\n"
 5404|  1.09M|                  "file_marker_found cannot be used as an "
 5405|  1.09M|                  "source range type to scn::scan.\n"
 5406|  1.09M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.09M|                  "and do not provide an explicit source range, "
 5408|  1.09M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.09M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.09M|                  "\n"
 5411|  1.09M|                  "Unsupported range type given as input to a scanning "
 5412|  1.09M|                  "function.\n"
 5413|  1.09M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.09M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.09M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.09M|                  "\n"
 5417|  1.09M|                  "Unsupported range type given as input to a scanning "
 5418|  1.09M|                  "function.\n"
 5419|  1.09M|                  "A range needs to model forward_range and have a valid "
 5420|  1.09M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.09M|                  "Examples of scannable ranges are std::string, "
 5422|  1.09M|                  "std::string_view, "
 5423|  1.09M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.09M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.09M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.09M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  1.09M|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  1.09M|    else {
 5366|  1.09M|        return make_forward_scan_buffer(r);
 5367|  1.09M|    }
 5368|  1.09M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  1.09M|{
 5185|  1.09M|    return basic_scan_forward_buffer_impl(range);
 5186|  1.09M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  1.09M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  1.09M|          m_cursor(ranges::begin(*m_range))
 4766|  1.09M|    {
 4767|  1.09M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  1.09M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  1.09M|    {
 4738|  1.09M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  1.09M|        : m_current_view(sv), m_is_contiguous(false)
 4428|  1.09M|    {
 4429|  1.09M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|  1.09M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.10M|    {
 2869|  2.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.10M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.10M|    {
 2850|  2.10M|        return decay_copy(t.begin());
 2851|  2.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  3.11M|    {
 3480|  3.11M|        return m_iterator;
 3481|  3.11M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  13.9M|    {
 4771|  13.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 289k, False: 13.6M]
  ------------------
 4772|   289k|            return false;
 4773|   289k|        }
 4774|  13.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  13.6M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  13.6M|        }
 4777|  13.6M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 12.5M, False: 1.08M]
  ------------------
 4778|  12.5M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  12.5M|                                          this->m_current_view.begin(),
 4780|  12.5M|                                          this->m_current_view.end());
 4781|  12.5M|        }
 4782|  13.6M|        m_latest = *m_cursor;
 4783|  13.6M|        ++m_cursor;
 4784|  13.6M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  13.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  13.6M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  13.6M|        }
 4788|  13.6M|        return true;
 4789|  13.9M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  41.2M|    {
 2926|  41.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  41.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  41.2M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  41.2M|    {
 2908|  41.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  41.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  41.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  42.2M|    {
 3484|  42.2M|        return m_sentinel;
 3485|  42.2M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  1.09M|    {
 4346|  1.09M|        SCN_UNUSED(position);
  ------------------
  |  |  915|  1.09M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  1.09M|        return true;
 4348|  1.09M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  90.4k|        : base(unexpect, std::move(e.error())),
 1616|  90.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  90.4k|    {
 1618|  90.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  90.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  90.4k|          m_has_value(false)
  451|  90.4k|    {
  452|  90.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.09M|    {
 1316|  1.09M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  1.00M|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.00M|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.00M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.00M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.00M|    {
 2869|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.00M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.00M|    {
 2850|  1.00M|        return decay_copy(t.begin());
 2851|  1.00M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|  1.00M|{
 6662|  1.00M|    return ranges::end(source);
 6663|  1.00M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.00M|    {
 2926|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.00M|    {
 2908|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.00M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  1.00M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.00M|    {
 1572|  1.00M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  1.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.00M|    {
  442|  1.00M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|   320k|    {
 8768|   320k|        return m_str;
 8769|   320k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  2.10M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10M|    static_cast<    \
  |  |  935|  2.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.10M|    static_cast<    \
  |  |  935|  2.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.10M|    {
 3466|  2.10M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   320k|        : m_str(r.str)
 8763|   320k|    {
 8764|   320k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   352k|    {
 1740|   352k|        return has_value();
 1741|   352k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   998k|    {
 1815|   998k|        return &value();
 1816|   998k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   998k|    {
 1769|   998k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   998k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   998k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   998k|        return this->get_value();
 1771|   998k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|  1.00M|    {
 6434|  1.00M|        return ranges::begin(m_range);
 6435|  1.00M|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|   160k|{
 9750|   160k|    auto result = make_scan_result<Source, Args...>();
 9751|   160k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   160k|                                   make_scan_args(result->values())));
 9753|   160k|    return result;
 9754|   160k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|   497k|{
 9479|   497k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   497k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   497k|{
 9414|   497k|#if !SCN_DISABLE_LOCALE
 9415|   497k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   497k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   497k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   497k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   497k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.7k, False: 455k]
  |  |  ------------------
  ------------------
 9422|  41.7k|        return unexpected(result.error());
 9423|  41.7k|    }
 9424|   455k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   497k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  32.8k|{
 9791|  32.8k|    auto result = make_scan_result<Source, T>();
 9792|  32.8k|    fill_scan_result(
 9793|  32.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  32.8k|                            detail::make_arg<scan_context>(result->value())));
 9795|  32.8k|    return result;
 9796|  32.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|   102k|{
 9492|   102k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|   102k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|   102k|{
 9438|   102k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|   102k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.95k, False: 95.8k]
  |  |  ------------------
  ------------------
 9442|  6.95k|        return unexpected(result.error());
 9443|  6.95k|    }
 9444|  95.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  95.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|   102k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|   167k|{
 9681|   167k|    auto result = make_scan_result<Source, Args...>();
 9682|   167k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   167k|                                   make_scan_args(result->values())));
 9684|   167k|    return result;
 9685|   167k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9636|   370k|{
 9637|   370k|    return scan_result_type<Source, Args...>();
 9638|   370k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   370k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   370k|        : m_value(T{}), m_has_value(true)
  427|   370k|    {
  428|   370k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6570|   370k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   370k|{
 9622|   370k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.1k, False: 340k]
  |  |  ------------------
  ------------------
 9623|  30.1k|        out = unexpected(in.error());
 9624|  30.1k|    }
 9625|   340k|    else {
 9626|   340k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   340k|    static_cast<    \
  |  |  935|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   340k|    }
 9628|   370k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.1k|        : base(unexpect, std::move(e.error())),
 1616|  30.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.1k|    {
 1618|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.1k|          m_has_value(false)
  451|  30.1k|    {
  452|  30.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.1k|    {
 1316|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.1k|    {
  903|  30.1k|        assign_common(std::move(other));
  904|  30.1k|        return *this;
  905|  30.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.1k|    {
  950|  30.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.1k, False: 0]
  ------------------
  951|  30.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.05M|    {
  456|  1.05M|        return m_value;
  457|  1.05M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.1k|    {
 1046|  30.1k|        this->destroy_value();
 1047|  30.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.1k|    {
  504|  30.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.1k|                                  std::forward<Args>(args)...);
  506|  30.1k|        m_has_value = false;
  507|  30.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.1k|    {
  473|  30.1k|        return m_unexpected;
  474|  30.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.1k|    {
  481|  30.1k|        return std::move(m_unexpected);
  482|  30.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|   335k|    {
 8768|   335k|        return m_str;
 8769|   335k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   335k|        : m_str(r.str)
 8763|   335k|    {
 8764|   335k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   370k|    {
 1740|   370k|        return has_value();
 1741|   370k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.05M|    {
 1815|  1.05M|        return &value();
 1816|  1.05M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.05M|    {
 1769|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.05M|        return this->get_value();
 1771|  1.05M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|   167k|{
 9750|   167k|    auto result = make_scan_result<Source, Args...>();
 9751|   167k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   167k|                                   make_scan_args(result->values())));
 9753|   167k|    return result;
 9754|   167k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  34.7k|{
 9791|  34.7k|    auto result = make_scan_result<Source, T>();
 9792|  34.7k|    fill_scan_result(
 9793|  34.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  34.7k|                            detail::make_arg<scan_context>(result->value())));
 9795|  34.7k|    return result;
 9796|  34.7k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|   169k|{
 9681|   169k|    auto result = make_scan_result<Source, Args...>();
 9682|   169k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   169k|                                   make_scan_args(result->values())));
 9684|   169k|    return result;
 9685|   169k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9636|   374k|{
 9637|   374k|    return scan_result_type<Source, Args...>();
 9638|   374k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   374k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   374k|        : m_value(T{}), m_has_value(true)
  427|   374k|    {
  428|   374k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6570|   374k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   374k|{
 9622|   374k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.1k, False: 344k]
  |  |  ------------------
  ------------------
 9623|  30.1k|        out = unexpected(in.error());
 9624|  30.1k|    }
 9625|   344k|    else {
 9626|   344k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   344k|    static_cast<    \
  |  |  935|   344k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   344k|    }
 9628|   374k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.1k|        : base(unexpect, std::move(e.error())),
 1616|  30.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.1k|    {
 1618|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.1k|          m_has_value(false)
  451|  30.1k|    {
  452|  30.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.1k|    {
 1316|  30.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.1k|    {
  903|  30.1k|        assign_common(std::move(other));
  904|  30.1k|        return *this;
  905|  30.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.1k|    {
  950|  30.1k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.1k, False: 0]
  ------------------
  951|  30.1k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.1k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.1k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.49M|    {
  490|  1.49M|        return m_has_value;
  491|  1.49M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.06M|    {
  456|  1.06M|        return m_value;
  457|  1.06M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.1k|    {
 1046|  30.1k|        this->destroy_value();
 1047|  30.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.1k|    {
  504|  30.1k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.1k|                                  std::forward<Args>(args)...);
  506|  30.1k|        m_has_value = false;
  507|  30.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.1k|    {
  473|  30.1k|        return m_unexpected;
  474|  30.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.1k|    {
  481|  30.1k|        return std::move(m_unexpected);
  482|  30.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|   339k|    {
 8768|   339k|        return m_str;
 8769|   339k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   339k|        : m_str(r.str)
 8763|   339k|    {
 8764|   339k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   374k|    {
 1740|   374k|        return has_value();
 1741|   374k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.06M|    {
 1815|  1.06M|        return &value();
 1816|  1.06M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.06M|    {
 1769|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.06M|        return this->get_value();
 1771|  1.06M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|   169k|{
 9750|   169k|    auto result = make_scan_result<Source, Args...>();
 9751|   169k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   169k|                                   make_scan_args(result->values())));
 9753|   169k|    return result;
 9754|   169k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  35.1k|{
 9791|  35.1k|    auto result = make_scan_result<Source, T>();
 9792|  35.1k|    fill_scan_result(
 9793|  35.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  35.1k|                            detail::make_arg<scan_context>(result->value())));
 9795|  35.1k|    return result;
 9796|  35.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   185k|    {
 2869|   185k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   185k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   185k|    {
 2850|   185k|        return decay_copy(t.begin());
 2851|   185k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  4.94M|{
 2094|  4.94M|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.94M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.22M|    {
 2926|  1.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.22M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.22M|    {
 2908|  1.22M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.22M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9636|   186k|{
 9637|   186k|    return scan_result_type<Source, Args...>();
 9638|   186k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   186k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   186k|        : m_value(T{}), m_has_value(true)
  427|   186k|    {
  428|   186k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6570|   186k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|   611k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   611k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   186k|{
 9622|   186k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.2k, False: 125k]
  |  |  ------------------
  ------------------
 9623|  60.2k|        out = unexpected(in.error());
 9624|  60.2k|    }
 9625|   125k|    else {
 9626|   125k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   125k|    static_cast<    \
  |  |  935|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   125k|    }
 9628|   186k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   611k|    {
 1740|   611k|        return has_value();
 1741|   611k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   180k|    {
 1746|   180k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   180k|        return this->get_unexpected().error();
 1748|   180k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   180k|    {
  473|   180k|        return m_unexpected;
  474|   180k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.2k|        : base(unexpect, std::move(e.error())),
 1616|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.2k|    {
 1618|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.2k|          m_has_value(false)
  451|  60.2k|    {
  452|  60.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.2k|    {
 1316|  60.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.2k|    {
  903|  60.2k|        assign_common(std::move(other));
  904|  60.2k|        return *this;
  905|  60.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.2k|    {
  950|  60.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.2k, False: 0]
  ------------------
  951|  60.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   744k|    {
  490|   744k|        return m_has_value;
  491|   744k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   437k|    {
  456|   437k|        return m_value;
  457|   437k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.2k|    {
 1046|  60.2k|        this->destroy_value();
 1047|  60.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.2k|    {
  504|  60.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.2k|                                  std::forward<Args>(args)...);
  506|  60.2k|        m_has_value = false;
  507|  60.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.2k|    {
  473|  60.2k|        return m_unexpected;
  474|  60.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.2k|    {
  481|  60.2k|        return std::move(m_unexpected);
  482|  60.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|   430k|    {
 6445|   430k|        m_range = std::forward<Other>(r);
 6446|   430k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   430k|    {
 1795|   430k|        return value();
 1796|   430k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   430k|    {
 1769|   430k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   430k|        return this->get_value();
 1771|   430k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   430k|    {
  456|   430k|        return m_value;
  457|   430k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   278k|{
 9398|   278k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   278k|    auto result = vscan_impl(buffer, format, args);
 9401|   278k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.4k, False: 194k]
  |  |  ------------------
  ------------------
 9402|  83.4k|        return unexpected(result.error());
 9403|  83.4k|    }
 9404|   194k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   278k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   611k|{
 5381|   611k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   611k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   611k|                  "\n"
 5385|   611k|                  "Unsupported range type given as input to a scanning "
 5386|   611k|                  "function.\n"
 5387|   611k|                  "A range needs to have a character type (value type) "
 5388|   611k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   611k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   611k|                  "to be included.\n"
 5391|   611k|                  "See the scnlib documentation for more details.");
 5392|   611k|    static_assert(
 5393|   611k|        !std::is_same_v<T, custom_char_traits>,
 5394|   611k|        "\n"
 5395|   611k|        "Unsupported range type given as input to a scanning "
 5396|   611k|        "function.\n"
 5397|   611k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   611k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   611k|        "not supported.");
 5400|   611k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   611k|                  "\n"
 5402|   611k|                  "Unsupported range type given as input to a scanning "
 5403|   611k|                  "function.\n"
 5404|   611k|                  "file_marker_found cannot be used as an "
 5405|   611k|                  "source range type to scn::scan.\n"
 5406|   611k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   611k|                  "and do not provide an explicit source range, "
 5408|   611k|                  "or use scn::scan with a FILE* directly.");
 5409|   611k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   611k|                  "\n"
 5411|   611k|                  "Unsupported range type given as input to a scanning "
 5412|   611k|                  "function.\n"
 5413|   611k|                  "In order to be scannable, a range needs to satisfy "
 5414|   611k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   611k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   611k|                  "\n"
 5417|   611k|                  "Unsupported range type given as input to a scanning "
 5418|   611k|                  "function.\n"
 5419|   611k|                  "A range needs to model forward_range and have a valid "
 5420|   611k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   611k|                  "Examples of scannable ranges are std::string, "
 5422|   611k|                  "std::string_view, "
 5423|   611k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   611k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   611k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   611k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   611k|{
 5320|   611k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   611k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   611k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   611k|    {
 3000|   611k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   611k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   611k|    {
 2981|   611k|        return t.data();
 2982|   611k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   611k|    {
 3383|   611k|        return detail::to_address(ranges::begin(derived()));
 3384|   611k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.89M|{
  316|  2.89M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.89M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.89M|{
  294|  2.89M|    return p;
  295|  2.89M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.04M|    {
 2869|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.04M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.04M|    {
 2850|  1.04M|        return decay_copy(t.begin());
 2851|  1.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  22.5M|    {
 3480|  22.5M|        return m_iterator;
 3481|  22.5M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   611k|    {
 3339|   611k|        return static_cast<const D&>(*this);
 3340|   611k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   611k|    {
 3075|   611k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   611k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   611k|    {
 3041|   611k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   611k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.19M|    {
 3496|  3.19M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.19M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   180k|        : base(unexpect, std::move(e.error())),
 1616|   180k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   180k|    {
 1618|   180k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   180k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   180k|          m_has_value(false)
  451|   180k|    {
  452|   180k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   611k|    {
 1316|   611k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   430k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   430k|                      ranges::iterator_t<SourceRange>>) {
 6677|   430k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   430k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.06M|    {
 2869|  2.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.06M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.06M|    {
 2850|  2.06M|        return decay_copy(t.begin());
 2851|  2.06M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|   430k|{
 6662|   430k|    return ranges::end(source);
 6663|   430k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   430k|    {
 2926|   430k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   430k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   430k|    {
 2908|   430k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   430k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  12.5M|    {
 3484|  12.5M|        return m_sentinel;
 3485|  12.5M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   430k|        : base(std::in_place, std::forward<U>(val)),
 1570|   430k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   430k|    {
 1572|   430k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   430k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   430k|    {
  442|   430k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|   170k|    {
 8768|   170k|        return m_str;
 8769|   170k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   340k|{
 6110|   340k|    detail::check_scan_arg_types<Args...>();
 6111|   340k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   340k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6085|   340k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   340k|    {
 6087|   340k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   340k|    {
 6095|   340k|        return {detail::make_arg<
 6096|   340k|            kind, Context,
 6097|   340k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   340k|                                 typename Context::char_type>::value>(args)...};
 6099|   340k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5874|   340k|{
 5875|   340k|    return make_value<Context>(value).ref_value;
 5876|   340k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5809|   371k|{
 5810|   371k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   371k|                                  needs_context_tag>) {
 5814|   371k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   371k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5648|   371k|    {                                                                        \
 5649|   371k|        return val;                                                          \
 5650|   371k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   340k|        : basic_scan_args(store.desc, store.args.data())
 6136|   340k|    {
 6137|   340k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|  1.11M|        : m_desc(desc), m_builtin_values(data)
 6188|  1.11M|    {
 6189|  1.11M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  8.19M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  8.19M|    static_cast<    \
  |  |  935|  8.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  8.19M|    static_cast<    \
  |  |  935|  8.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  8.19M|    {
 3466|  8.19M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|  1.11M|{
 8446|  1.11M|    return s;
 8447|  1.11M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|  1.11M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   170k|        : m_str(r.str)
 8763|   170k|    {
 8764|   170k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   186k|    {
 1740|   186k|        return has_value();
 1741|   186k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   437k|    {
 1815|   437k|        return &value();
 1816|   437k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   437k|    {
 1769|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   437k|        return this->get_value();
 1771|   437k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|   430k|    {
 6434|   430k|        return ranges::begin(m_range);
 6435|   430k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   278k|{
 9414|   278k|#if !SCN_DISABLE_LOCALE
 9415|   278k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   278k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   278k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   278k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   278k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.4k, False: 194k]
  |  |  ------------------
  ------------------
 9422|  83.4k|        return unexpected(result.error());
 9423|  83.4k|    }
 9424|   194k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   278k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  55.0k|{
 9438|  55.0k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  55.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  55.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.9k, False: 41.1k]
  |  |  ------------------
  ------------------
 9442|  13.9k|        return unexpected(result.error());
 9443|  13.9k|    }
 9444|  41.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  55.0k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5859|  31.6k|{
 5860|  31.6k|    check_scan_arg_types<T>();
 5861|       |
 5862|  31.6k|    basic_scan_arg<Context> arg;
 5863|  31.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  31.6k|    arg.m_value = make_value<Context>(value);
 5865|  31.6k|    return arg;
 5866|  31.6k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|  1.22M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9636|   210k|{
 9637|   210k|    return scan_result_type<Source, Args...>();
 9638|   210k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   210k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   210k|        : m_value(T{}), m_has_value(true)
  427|   210k|    {
  428|   210k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6570|   210k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   210k|{
 9622|   210k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.2k, False: 150k]
  |  |  ------------------
  ------------------
 9623|  60.2k|        out = unexpected(in.error());
 9624|  60.2k|    }
 9625|   150k|    else {
 9626|   150k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   150k|    static_cast<    \
  |  |  935|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   150k|    }
 9628|   210k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.2k|        : base(unexpect, std::move(e.error())),
 1616|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.2k|    {
 1618|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.2k|          m_has_value(false)
  451|  60.2k|    {
  452|  60.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.2k|    {
 1316|  60.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.2k|    {
  903|  60.2k|        assign_common(std::move(other));
  904|  60.2k|        return *this;
  905|  60.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.2k|    {
  950|  60.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.2k, False: 0]
  ------------------
  951|  60.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   842k|    {
  490|   842k|        return m_has_value;
  491|   842k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   510k|    {
  456|   510k|        return m_value;
  457|   510k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.2k|    {
 1046|  60.2k|        this->destroy_value();
 1047|  60.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.2k|    {
  504|  60.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.2k|                                  std::forward<Args>(args)...);
  506|  60.2k|        m_has_value = false;
  507|  60.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.2k|    {
  473|  60.2k|        return m_unexpected;
  474|  60.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.2k|    {
  481|  60.2k|        return std::move(m_unexpected);
  482|  60.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|   191k|    {
 8768|   191k|        return m_str;
 8769|   191k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   382k|{
 6110|   382k|    detail::check_scan_arg_types<Args...>();
 6111|   382k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   382k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|   382k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   382k|    {
 6087|   382k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   382k|    {
 6095|   382k|        return {detail::make_arg<
 6096|   382k|            kind, Context,
 6097|   382k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   382k|                                 typename Context::char_type>::value>(args)...};
 6099|   382k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|   382k|{
 5875|   382k|    return make_value<Context>(value).ref_value;
 5876|   382k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5809|   420k|{
 5810|   420k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   420k|                                  needs_context_tag>) {
 5814|   420k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   420k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5648|   420k|    {                                                                        \
 5649|   420k|        return val;                                                          \
 5650|   420k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   382k|        : basic_scan_args(store.desc, store.args.data())
 6136|   382k|    {
 6137|   382k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   191k|        : m_str(r.str)
 8763|   191k|    {
 8764|   191k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   210k|    {
 1740|   210k|        return has_value();
 1741|   210k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   510k|    {
 1815|   510k|        return &value();
 1816|   510k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   510k|    {
 1769|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   510k|        return this->get_value();
 1771|   510k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5859|  38.6k|{
 5860|  38.6k|    check_scan_arg_types<T>();
 5861|       |
 5862|  38.6k|    basic_scan_arg<Context> arg;
 5863|  38.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  38.6k|    arg.m_value = make_value<Context>(value);
 5865|  38.6k|    return arg;
 5866|  38.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9636|   214k|{
 9637|   214k|    return scan_result_type<Source, Args...>();
 9638|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   214k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   214k|        : m_value(T{}), m_has_value(true)
  427|   214k|    {
  428|   214k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6570|   214k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   214k|{
 9622|   214k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.2k, False: 154k]
  |  |  ------------------
  ------------------
 9623|  60.2k|        out = unexpected(in.error());
 9624|  60.2k|    }
 9625|   154k|    else {
 9626|   154k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   154k|    static_cast<    \
  |  |  935|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   154k|    }
 9628|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  60.2k|        : base(unexpect, std::move(e.error())),
 1616|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.2k|    {
 1618|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  60.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.2k|          m_has_value(false)
  451|  60.2k|    {
  452|  60.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.2k|    {
 1316|  60.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  60.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  60.2k|    {
  903|  60.2k|        assign_common(std::move(other));
  904|  60.2k|        return *this;
  905|  60.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  60.2k|    {
  950|  60.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.2k, False: 0]
  ------------------
  951|  60.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   858k|    {
  490|   858k|        return m_has_value;
  491|   858k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   523k|    {
  456|   523k|        return m_value;
  457|   523k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  60.2k|    {
 1046|  60.2k|        this->destroy_value();
 1047|  60.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  60.2k|    {
  504|  60.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.2k|                                  std::forward<Args>(args)...);
  506|  60.2k|        m_has_value = false;
  507|  60.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.2k|    {
  473|  60.2k|        return m_unexpected;
  474|  60.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.2k|    {
  481|  60.2k|        return std::move(m_unexpected);
  482|  60.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|   194k|    {
 8768|   194k|        return m_str;
 8769|   194k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   389k|{
 6110|   389k|    detail::check_scan_arg_types<Args...>();
 6111|   389k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   389k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6085|   389k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   389k|    {
 6087|   389k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   389k|    {
 6095|   389k|        return {detail::make_arg<
 6096|   389k|            kind, Context,
 6097|   389k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   389k|                                 typename Context::char_type>::value>(args)...};
 6099|   389k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EevEEPvRT2_:
 5874|   389k|{
 5875|   389k|    return make_value<Context>(value).ref_value;
 5876|   389k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5809|   429k|{
 5810|   429k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   429k|                                  needs_context_tag>) {
 5814|   429k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   429k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5648|   429k|    {                                                                        \
 5649|   429k|        return val;                                                          \
 5650|   429k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   389k|        : basic_scan_args(store.desc, store.args.data())
 6136|   389k|    {
 6137|   389k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   194k|        : m_str(r.str)
 8763|   194k|    {
 8764|   194k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   214k|    {
 1740|   214k|        return has_value();
 1741|   214k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   523k|    {
 1815|   523k|        return &value();
 1816|   523k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   523k|    {
 1769|   523k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   523k|        return this->get_value();
 1771|   523k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5859|  39.7k|{
 5860|  39.7k|    check_scan_arg_types<T>();
 5861|       |
 5862|  39.7k|    basic_scan_arg<Context> arg;
 5863|  39.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  39.7k|    arg.m_value = make_value<Context>(value);
 5865|  39.7k|    return arg;
 5866|  39.7k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   180k|    {
 2869|   180k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   180k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   180k|    {
 2850|   180k|        return decay_copy(t.begin());
 2851|   180k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  12.2M|{
 2094|  12.2M|    return SCN_FWD(t);
  ------------------
  |  |  936|  12.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.22M|    {
 2926|  1.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.22M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.22M|    {
 2908|  1.22M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.22M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9636|   185k|{
 9637|   185k|    return scan_result_type<Source, Args...>();
 9638|   185k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   185k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   185k|        : m_value(T{}), m_has_value(true)
  427|   185k|    {
  428|   185k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6570|   185k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|   610k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   610k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   185k|{
 9622|   185k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.2k, False: 125k]
  |  |  ------------------
  ------------------
 9623|  60.2k|        out = unexpected(in.error());
 9624|  60.2k|    }
 9625|   125k|    else {
 9626|   125k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   125k|    static_cast<    \
  |  |  935|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   125k|    }
 9628|   185k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   610k|    {
 1740|   610k|        return has_value();
 1741|   610k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   180k|    {
 1746|   180k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   180k|        return this->get_unexpected().error();
 1748|   180k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   180k|    {
  473|   180k|        return m_unexpected;
  474|   180k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.2k|        : base(unexpect, std::move(e.error())),
 1616|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.2k|    {
 1618|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.2k|          m_has_value(false)
  451|  60.2k|    {
  452|  60.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.2k|    {
 1316|  60.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.2k|    {
  903|  60.2k|        assign_common(std::move(other));
  904|  60.2k|        return *this;
  905|  60.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.2k|    {
  950|  60.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.2k, False: 0]
  ------------------
  951|  60.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   743k|    {
  490|   743k|        return m_has_value;
  491|   743k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   437k|    {
  456|   437k|        return m_value;
  457|   437k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.2k|    {
 1046|  60.2k|        this->destroy_value();
 1047|  60.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.2k|    {
  504|  60.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.2k|                                  std::forward<Args>(args)...);
  506|  60.2k|        m_has_value = false;
  507|  60.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.2k|    {
  473|  60.2k|        return m_unexpected;
  474|  60.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.2k|    {
  481|  60.2k|        return std::move(m_unexpected);
  482|  60.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   429k|    {
 6445|   429k|        m_range = std::forward<Other>(r);
 6446|   429k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   429k|    {
 1795|   429k|        return value();
 1796|   429k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   429k|    {
 1769|   429k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   429k|        return this->get_value();
 1771|   429k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   429k|    {
  456|   429k|        return m_value;
  457|   429k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   277k|{
 9398|   277k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   277k|    auto result = vscan_impl(buffer, format, args);
 9401|   277k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.4k, False: 194k]
  |  |  ------------------
  ------------------
 9402|  83.4k|        return unexpected(result.error());
 9403|  83.4k|    }
 9404|   194k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   277k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   610k|{
 5381|   610k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   610k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   610k|                  "\n"
 5385|   610k|                  "Unsupported range type given as input to a scanning "
 5386|   610k|                  "function.\n"
 5387|   610k|                  "A range needs to have a character type (value type) "
 5388|   610k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   610k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   610k|                  "to be included.\n"
 5391|   610k|                  "See the scnlib documentation for more details.");
 5392|   610k|    static_assert(
 5393|   610k|        !std::is_same_v<T, custom_char_traits>,
 5394|   610k|        "\n"
 5395|   610k|        "Unsupported range type given as input to a scanning "
 5396|   610k|        "function.\n"
 5397|   610k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   610k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   610k|        "not supported.");
 5400|   610k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   610k|                  "\n"
 5402|   610k|                  "Unsupported range type given as input to a scanning "
 5403|   610k|                  "function.\n"
 5404|   610k|                  "file_marker_found cannot be used as an "
 5405|   610k|                  "source range type to scn::scan.\n"
 5406|   610k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   610k|                  "and do not provide an explicit source range, "
 5408|   610k|                  "or use scn::scan with a FILE* directly.");
 5409|   610k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   610k|                  "\n"
 5411|   610k|                  "Unsupported range type given as input to a scanning "
 5412|   610k|                  "function.\n"
 5413|   610k|                  "In order to be scannable, a range needs to satisfy "
 5414|   610k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   610k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   610k|                  "\n"
 5417|   610k|                  "Unsupported range type given as input to a scanning "
 5418|   610k|                  "function.\n"
 5419|   610k|                  "A range needs to model forward_range and have a valid "
 5420|   610k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   610k|                  "Examples of scannable ranges are std::string, "
 5422|   610k|                  "std::string_view, "
 5423|   610k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   610k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   610k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   610k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   610k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   610k|    else {
 5366|   610k|        return make_forward_scan_buffer(r);
 5367|   610k|    }
 5368|   610k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   610k|{
 5185|   610k|    return basic_scan_forward_buffer_impl(range);
 5186|   610k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   610k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   610k|          m_cursor(ranges::begin(*m_range))
 4766|   610k|    {
 4767|   610k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   610k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   610k|    {
 4738|   610k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   610k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   610k|    {
 4429|   610k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   610k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.04M|    {
 2869|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.04M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.04M|    {
 2850|  1.04M|        return decay_copy(t.begin());
 2851|  1.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  1.47M|    {
 3480|  1.47M|        return m_iterator;
 3481|  1.47M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  3.10M|    {
 4771|  3.10M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 199k, False: 2.90M]
  ------------------
 4772|   199k|            return false;
 4773|   199k|        }
 4774|  2.90M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.90M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.90M|        }
 4777|  2.90M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 2.29M, False: 608k]
  ------------------
 4778|  2.29M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  2.29M|                                          this->m_current_view.begin(),
 4780|  2.29M|                                          this->m_current_view.end());
 4781|  2.29M|        }
 4782|  2.90M|        m_latest = *m_cursor;
 4783|  2.90M|        ++m_cursor;
 4784|  2.90M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.90M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.90M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.90M|        }
 4788|  2.90M|        return true;
 4789|  3.10M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  8.90M|    {
 2926|  8.90M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  8.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  8.90M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  8.90M|    {
 2908|  8.90M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  8.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  8.90M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  9.33M|    {
 3484|  9.33M|        return m_sentinel;
 3485|  9.33M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   610k|    {
 4346|   610k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   610k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   610k|        return true;
 4348|   610k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   180k|        : base(unexpect, std::move(e.error())),
 1616|   180k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   180k|    {
 1618|   180k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   180k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   180k|          m_has_value(false)
  451|   180k|    {
  452|   180k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   610k|    {
 1316|   610k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   429k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   429k|                      ranges::iterator_t<SourceRange>>) {
 6677|   429k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   429k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   429k|    {
 2869|   429k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   429k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   429k|    {
 2850|   429k|        return decay_copy(t.begin());
 2851|   429k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|   429k|{
 6662|   429k|    return ranges::end(source);
 6663|   429k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   429k|    {
 2926|   429k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   429k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   429k|    {
 2908|   429k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   429k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   429k|        : base(std::in_place, std::forward<U>(val)),
 1570|   429k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   429k|    {
 1572|   429k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   429k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   429k|    {
  442|   429k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|   170k|    {
 8768|   170k|        return m_str;
 8769|   170k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.04M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.04M|    static_cast<    \
  |  |  935|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.04M|    static_cast<    \
  |  |  935|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.04M|    {
 3466|  1.04M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   170k|        : m_str(r.str)
 8763|   170k|    {
 8764|   170k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   185k|    {
 1740|   185k|        return has_value();
 1741|   185k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   437k|    {
 1815|   437k|        return &value();
 1816|   437k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   437k|    {
 1769|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   437k|        return this->get_value();
 1771|   437k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|   429k|    {
 6434|   429k|        return ranges::begin(m_range);
 6435|   429k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   277k|{
 9414|   277k|#if !SCN_DISABLE_LOCALE
 9415|   277k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   277k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   277k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   277k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   277k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 83.4k, False: 194k]
  |  |  ------------------
  ------------------
 9422|  83.4k|        return unexpected(result.error());
 9423|  83.4k|    }
 9424|   194k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   277k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  54.9k|{
 9438|  54.9k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  54.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  54.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.9k, False: 41.0k]
  |  |  ------------------
  ------------------
 9442|  13.9k|        return unexpected(result.error());
 9443|  13.9k|    }
 9444|  41.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  54.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9636|   210k|{
 9637|   210k|    return scan_result_type<Source, Args...>();
 9638|   210k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   210k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   210k|        : m_value(T{}), m_has_value(true)
  427|   210k|    {
  428|   210k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6570|   210k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   210k|{
 9622|   210k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.2k, False: 150k]
  |  |  ------------------
  ------------------
 9623|  60.2k|        out = unexpected(in.error());
 9624|  60.2k|    }
 9625|   150k|    else {
 9626|   150k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   150k|    static_cast<    \
  |  |  935|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   150k|    }
 9628|   210k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.2k|        : base(unexpect, std::move(e.error())),
 1616|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.2k|    {
 1618|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.2k|          m_has_value(false)
  451|  60.2k|    {
  452|  60.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.2k|    {
 1316|  60.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.2k|    {
  903|  60.2k|        assign_common(std::move(other));
  904|  60.2k|        return *this;
  905|  60.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.2k|    {
  950|  60.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.2k, False: 0]
  ------------------
  951|  60.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   841k|    {
  490|   841k|        return m_has_value;
  491|   841k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   510k|    {
  456|   510k|        return m_value;
  457|   510k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.2k|    {
 1046|  60.2k|        this->destroy_value();
 1047|  60.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.2k|    {
  504|  60.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.2k|                                  std::forward<Args>(args)...);
  506|  60.2k|        m_has_value = false;
  507|  60.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.2k|    {
  473|  60.2k|        return m_unexpected;
  474|  60.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.2k|    {
  481|  60.2k|        return std::move(m_unexpected);
  482|  60.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|   191k|    {
 8768|   191k|        return m_str;
 8769|   191k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   191k|        : m_str(r.str)
 8763|   191k|    {
 8764|   191k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   210k|    {
 1740|   210k|        return has_value();
 1741|   210k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|   510k|    {
 1815|   510k|        return &value();
 1816|   510k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   510k|    {
 1769|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   510k|        return this->get_value();
 1771|   510k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9636|   214k|{
 9637|   214k|    return scan_result_type<Source, Args...>();
 9638|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   214k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   214k|        : m_value(T{}), m_has_value(true)
  427|   214k|    {
  428|   214k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6570|   214k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   214k|{
 9622|   214k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 60.2k, False: 154k]
  |  |  ------------------
  ------------------
 9623|  60.2k|        out = unexpected(in.error());
 9624|  60.2k|    }
 9625|   154k|    else {
 9626|   154k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   154k|    static_cast<    \
  |  |  935|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   154k|    }
 9628|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  60.2k|        : base(unexpect, std::move(e.error())),
 1616|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.2k|    {
 1618|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  60.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.2k|          m_has_value(false)
  451|  60.2k|    {
  452|  60.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  60.2k|    {
 1316|  60.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  60.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  60.2k|    {
  903|  60.2k|        assign_common(std::move(other));
  904|  60.2k|        return *this;
  905|  60.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  60.2k|    {
  950|  60.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 60.2k, False: 0]
  ------------------
  951|  60.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 60.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  60.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  60.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   858k|    {
  490|   858k|        return m_has_value;
  491|   858k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   523k|    {
  456|   523k|        return m_value;
  457|   523k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  60.2k|    {
 1046|  60.2k|        this->destroy_value();
 1047|  60.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  60.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  60.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  60.2k|    {
  504|  60.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  60.2k|                                  std::forward<Args>(args)...);
  506|  60.2k|        m_has_value = false;
  507|  60.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  60.2k|    {
  473|  60.2k|        return m_unexpected;
  474|  60.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  60.2k|    {
  481|  60.2k|        return std::move(m_unexpected);
  482|  60.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|   194k|    {
 8768|   194k|        return m_str;
 8769|   194k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   194k|        : m_str(r.str)
 8763|   194k|    {
 8764|   194k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   214k|    {
 1740|   214k|        return has_value();
 1741|   214k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|   523k|    {
 1815|   523k|        return &value();
 1816|   523k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   523k|    {
 1769|   523k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   523k|        return this->get_value();
 1771|   523k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  3.66M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  3.66M|    {
 3742|  3.66M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.66M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  3.66M|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|   278k|    {
 3753|   278k|        return m_code;
 3754|   278k|    }
_ZNK3scn2v410scan_error3msgEv:
 3757|  2.31k|    {
 3758|  2.31k|        return m_msg;
 3759|  2.31k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   820k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   820k|    else {
 3981|   820k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   820k|    }
 3983|   820k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  49.3M|    {
 3480|  49.3M|        return m_iterator;
 3481|  49.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  25.7M|    {
 3480|  25.7M|        return m_iterator;
 3481|  25.7M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  18.9M|    {
  572|  18.9M|        return m_has_value;
  573|  18.9M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  3.87M|    {
  555|  3.87M|        return m_unexpected;
  556|  3.87M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   431k|    {
 1746|   431k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   431k|        return this->get_unexpected().error();
 1748|   431k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  2.35M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|  1.72M|    {
 7056|  1.72M|        m_specs.type = type;
 7057|  1.72M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  2.35M|    {
 7129|  2.35M|        return m_error;
 7130|  2.35M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  3.62M|{
 3918|  3.62M|    return unexpected(scan_error{c, m});
 3919|  3.62M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  4.97M|{
 4308|       |    // Pattern_White_Space property
 4309|  4.97M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 4.76M, False: 213k]
  |  Branch (4309:27): [True: 811k, False: 3.94M]
  ------------------
 4310|  4.97M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 54.6k, False: 4.10M]
  ------------------
 4311|  4.97M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 50.1k, False: 4.05M]
  ------------------
 4312|  4.97M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 4.39k, False: 4.05M]
  ------------------
 4313|  4.97M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 20.1k, False: 4.03M]
  ------------------
 4314|  4.97M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.02M, False: 3.01M]
  ------------------
 4315|  4.97M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 385, False: 3.01M]
  ------------------
 4316|  4.97M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|   632k|{
 7812|   632k|    switch (type) {
 7813|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 0, False: 632k]
  ------------------
 7814|      0|            return arg_type_category::none;
 7815|       |
 7816|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 632k]
  ------------------
 7817|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 632k]
  ------------------
 7818|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 0, False: 632k]
  ------------------
 7819|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 632k]
  ------------------
 7820|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 632k]
  ------------------
 7821|      0|            return arg_type_category::integer;
 7822|       |
 7823|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 632k]
  ------------------
 7824|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 632k]
  ------------------
 7825|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 0, False: 632k]
  ------------------
 7826|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 632k]
  ------------------
 7827|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 632k]
  ------------------
 7828|      0|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 632k]
  ------------------
 7831|      0|            return arg_type_category::pointer;
 7832|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 632k]
  ------------------
 7833|      0|            return arg_type_category::boolean;
 7834|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 632k]
  ------------------
 7835|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 632k]
  ------------------
 7836|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 632k]
  ------------------
 7837|      0|            return arg_type_category::character;
 7838|       |
 7839|   194k|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 194k, False: 437k]
  ------------------
 7840|   411k|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 216k, False: 415k]
  ------------------
 7841|   632k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 221k, False: 411k]
  ------------------
 7842|   632k|            return arg_type_category::floating;
 7843|       |
 7844|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 632k]
  ------------------
 7845|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 632k]
  ------------------
 7846|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 0, False: 632k]
  ------------------
 7847|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 632k]
  ------------------
 7848|      0|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 632k]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 632k]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|   632k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|   632k|            SCN_CLANG_POP
 7859|   632k|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|   632k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  3.44M|    {
 1756|  3.44M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.44M|        return std::move(this->get_unexpected().error());
 1758|  3.44M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  2.73M|    {
 3041|  2.73M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  2.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  2.73M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3074|  2.73M|    {
 3075|  2.73M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  2.73M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3097|  2.73M|    {
 3098|  2.73M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|  2.73M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3106|  2.73M|    {
 3107|  2.73M|        return fn::impl(std::forward<T>(t));
 3108|  2.73M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7941|  2.35M|{
 7942|  2.35M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7942:9): [True: 1.72M, False: 632k]
  ------------------
 7943|  2.35M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7943:10): [True: 0, False: 1.72M]
  ------------------
 7944|  1.72M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7944:10): [True: 0, False: 1.72M]
  ------------------
 7945|      0|        SCN_UNLIKELY_ATTR
 7946|      0|        return handler.on_error("Invalid type specifier for float type");
 7947|      0|    }
 7948|  2.35M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  15.0M|    {
 1740|  15.0M|        return has_value();
 1741|  15.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|   314M|    {
 4473|   314M|        assert(m_begin);
 4474|   314M|        return m_end == nullptr;
 4475|   314M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  4.11M|    {
 4490|  4.11M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 4.11M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  4.11M|        return parent()->get_segment_starting_at(position());
 4496|  4.11M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|   175M|    {
 4484|   175M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   175M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   175M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   175M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   175M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  4.11M|    {
 4377|  4.11M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  4.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.77M, False: 2.34M]
  |  |  ------------------
  ------------------
 4378|  4.11M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.77M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.77M|        }
 4381|  2.34M|        const auto start = pos - m_putback_buffer.size();
 4382|  2.34M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  2.34M|        return m_current_view.substr(start);
 4384|  2.34M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|  2.88M|    {
 4479|  2.88M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  2.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  2.88M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  2.88M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  7.56M|    {
 4468|  7.56M|        return m_position;
 4469|  7.56M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  3.29M|    {
 4399|  3.29M|        return m_is_contiguous;
 4400|  3.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  83.2M|    {
 4473|  83.2M|        assert(m_begin);
 4474|  83.2M|        return m_end == nullptr;
 4475|  83.2M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   415k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   415k|    else {
 3981|   415k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   415k|    }
 3983|   415k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  1.47M|    {
 4490|  1.47M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.47M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.47M|        return parent()->get_segment_starting_at(position());
 4496|  1.47M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  44.5M|    {
 4484|  44.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  44.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  44.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  44.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  1.47M|    {
 4377|  1.47M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 846k, False: 629k]
  |  |  ------------------
  ------------------
 4378|  1.47M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   846k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   846k|        }
 4381|   629k|        const auto start = pos - m_putback_buffer.size();
 4382|   629k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   629k|        return m_current_view.substr(start);
 4384|   629k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|  1.60M|    {
 4479|  1.60M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  1.60M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  1.60M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  3.24M|    {
 4468|  3.24M|        return m_position;
 4469|  3.24M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  1.83M|    {
 4399|  1.83M|        return m_is_contiguous;
 4400|  1.83M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  5.60M|    {
 3334|  5.60M|        return static_cast<D&>(*this);
 3335|  5.60M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  5.60M|    {
 3375|  5.60M|        return detail::to_address(ranges::begin(derived()));
 3376|  5.60M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  1.41M|    {
 3334|  1.41M|        return static_cast<D&>(*this);
 3335|  1.41M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  1.41M|    {
 3375|  1.41M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.41M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   789k|    {
 8965|   789k|        return ranges::subrange{begin(), end()};
 8966|   789k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   789k|    {
 8957|   789k|        return ranges::default_sentinel;
 8958|   789k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  12.0M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  12.0M|    static_cast<    \
  |  |  935|  12.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  12.0M|    static_cast<    \
  |  |  935|  12.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  12.0M|    {
 3466|  12.0M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|  5.00M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.09M|    {
 1979|  1.09M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.09M|                                            std::forward<F>(f));
 1981|  1.09M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.09M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.09M|    else {
 1472|  1.09M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.09M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.07M, False: 19.5k]
  |  |  ------------------
  ------------------
 1474|  1.09M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.09M|                   : result(unexpect,
 1476|  19.5k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.5k|                                           std::forward<Exp>(exp).error()));
 1478|  1.09M|    }
 1479|  1.09M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  11.6M|    {
  490|  11.6M|        return m_has_value;
  491|  11.6M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.92M|    {
 1805|  3.92M|        return std::move(value());
 1806|  3.92M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  4.50M|    {
 1769|  4.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.50M|        return this->get_value();
 1771|  4.50M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  4.50M|    {
  456|  4.50M|        return m_value;
  457|  4.50M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  4.81M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.81M|    {
 1572|  4.81M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.81M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.81M|    {
  442|  4.81M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.19M|    {
 1316|  6.19M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  44.0k|{
 1350|  44.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  44.0k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  54.6k|    {
 1756|  54.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  54.6k|        return std::move(this->get_unexpected().error());
 1758|  54.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  74.2k|    {
  473|  74.2k|        return m_unexpected;
  474|  74.2k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   448k|    {
  365|   448k|        return m_unexpected;
  366|   448k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.09M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.09M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.09M|    {
 1628|  1.09M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.32M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.32M|          m_has_value(false)
  451|  1.32M|    {
  452|  1.32M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   445k|    {
 8965|   445k|        return ranges::subrange{begin(), end()};
 8966|   445k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   445k|    {
 8957|   445k|        return ranges::default_sentinel;
 8958|   445k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  6.24M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.24M|    static_cast<    \
  |  |  935|  6.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  6.24M|    static_cast<    \
  |  |  935|  6.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.24M|    {
 3466|  6.24M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   610k|    {
 1979|   610k|        return detail::transform_error_impl(std::move(*this),
 1980|   610k|                                            std::forward<F>(f));
 1981|   610k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   610k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   610k|    else {
 1472|   610k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   610k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   610k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 606k, False: 4.32k]
  |  |  ------------------
  ------------------
 1474|   610k|                   ? result(*std::forward<Exp>(exp))
 1475|   610k|                   : result(unexpect,
 1476|  4.32k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.32k|                                           std::forward<Exp>(exp).error()));
 1478|   610k|    }
 1479|   610k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.90M|    {
  490|  5.90M|        return m_has_value;
  491|  5.90M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.15M|    {
 1805|  2.15M|        return std::move(value());
 1806|  2.15M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.17M|    {
 1769|  2.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.17M|        return this->get_value();
 1771|  2.17M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.17M|    {
  456|  2.17M|        return m_value;
  457|  2.17M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  2.20M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.20M|    {
 1572|  2.20M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.20M|    {
  442|  2.20M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.48M|    {
 1316|  3.48M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  62.8k|    {
 1756|  62.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  62.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  62.8k|        return std::move(this->get_unexpected().error());
 1758|  62.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  65.4k|    {
  473|  65.4k|        return m_unexpected;
  474|  65.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   780k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   780k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   780k|    {
 1628|   780k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.27M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.27M|          m_has_value(false)
  451|  1.27M|    {
  452|  1.27M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  3.62M|        : m_unexpected(std::forward<Err>(e))
  350|  3.62M|    {
  351|  3.62M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.62M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.62M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   825k|        : base(unexpect, std::move(e.error())),
 1616|   825k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   825k|    {
 1618|   825k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   825k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   825k|          m_has_value(false)
  451|   825k|    {
  452|   825k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.01M|    {
 1316|  9.01M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   200k|        : base(unexpect, std::move(e.error())),
 1616|   200k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   200k|    {
 1618|   200k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.12M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.12M|          m_has_value(false)
  451|  1.12M|    {
  452|  1.12M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.36M|    {
 1316|  5.36M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  4.18M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.18M|    {
 1572|  4.18M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.18M|    {
  442|  4.18M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  6.29M|    {
 1740|  6.29M|        return has_value();
 1741|  6.29M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  9.88M|    {
  490|  9.88M|        return m_has_value;
  491|  9.88M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   240k|    {
 1746|   240k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   240k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   240k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   240k|        return this->get_unexpected().error();
 1748|   240k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   240k|    {
  473|   240k|        return m_unexpected;
  474|   240k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.69M|    {
 1805|  2.69M|        return std::move(value());
 1806|  2.69M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.34M|    {
 1769|  3.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.34M|        return this->get_value();
 1771|  3.34M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.34M|    {
  456|  3.34M|        return m_value;
  457|  3.34M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   402k|        : base(unexpect, std::move(e.error())),
 1616|   402k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   402k|    {
 1618|   402k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.09M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.09M|          m_has_value(false)
  451|  1.09M|    {
  452|  1.09M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.48M|    {
 1316|  3.48M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.39M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.39M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.39M|    {
 1572|  2.39M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.39M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.39M|    {
  442|  2.39M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  4.09M|    {
 1740|  4.09M|        return has_value();
 1741|  4.09M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.44M|    {
  490|  6.44M|        return m_has_value;
  491|  6.44M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   483k|    {
 1746|   483k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   483k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   483k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   483k|        return this->get_unexpected().error();
 1748|   483k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   483k|    {
  473|   483k|        return m_unexpected;
  474|   483k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.56M|    {
 1805|  1.56M|        return std::move(value());
 1806|  1.56M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  1.86M|    {
 1769|  1.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.86M|        return this->get_value();
 1771|  1.86M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.86M|    {
  456|  1.86M|        return m_value;
  457|  1.86M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   953k|    {
 1979|   953k|        return detail::transform_error_impl(std::move(*this),
 1980|   953k|                                            std::forward<F>(f));
 1981|   953k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   953k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   953k|    else {
 1472|   953k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   953k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   953k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 937k, False: 15.9k]
  |  |  ------------------
  ------------------
 1474|   953k|                   ? result(*std::forward<Exp>(exp))
 1475|   953k|                   : result(unexpect,
 1476|  15.9k|                            trivial_invoke(std::forward<F>(f),
 1477|  15.9k|                                           std::forward<Exp>(exp).error()));
 1478|   953k|    }
 1479|   953k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.61M|    {
  490|  3.61M|        return m_has_value;
  491|  3.61M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   937k|    {
 1805|   937k|        return std::move(value());
 1806|   937k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.24M|    {
 1769|  1.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.24M|        return this->get_value();
 1771|  1.24M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.24M|    {
  456|  1.24M|        return m_value;
  457|  1.24M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  15.9k|    {
 1756|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  15.9k|        return std::move(this->get_unexpected().error());
 1758|  15.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.7k|    {
  473|  20.7k|        return m_unexpected;
  474|  20.7k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   922k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   922k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   922k|    {
 1628|   922k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|  2.30M|    {
 8949|  2.30M|        return m_current;
 8950|  2.30M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|  1.46M|    {
 8842|  1.46M|        return m_locale;
 8843|  1.46M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|  1.46M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.46M|    static_cast<    \
  |  |  935|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.46M|    static_cast<    \
  |  |  935|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  1.46M|    {
 8849|  1.46M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   854k|    {
 3000|   854k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   854k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   854k|    {
 2981|   854k|        return t.data();
 2982|   854k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   225k|        : base(unexpect, std::move(e.error())),
 1616|   225k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   225k|    {
 1618|   225k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  56.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  56.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  56.8k|    {
 1572|  56.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  56.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  56.8k|    {
  442|  56.8k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|  1.19M|    {
 8949|  1.19M|        return m_current;
 8950|  1.19M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   892k|    {
 8842|   892k|        return m_locale;
 8843|   892k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   892k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   892k|    static_cast<    \
  |  |  935|   892k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   892k|    static_cast<    \
  |  |  935|   892k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   892k|    {
 8849|   892k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   494k|        : base(unexpect, std::move(e.error())),
 1616|   494k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   494k|    {
 1618|   494k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  3.87M|        : base(unexpect, std::move(e.error())),
 1616|  3.87M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.87M|    {
 1618|  3.87M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  3.87M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  3.87M|          m_has_value(false)
  550|  3.87M|    {
  551|  3.87M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.87M|    {
 1316|  3.87M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  12.6M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  12.6M|        : m_deferred_init(), m_has_value(true)
  529|  12.6M|    {
  530|  12.6M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  9.57M|    {
 4559|  9.57M|        return x.is_at_end();
 4560|  9.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  23.7M|    {
 4603|  23.7M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 23.7M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  23.7M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 23.7M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  23.7M|        return !read_at_position();
 4610|  23.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|   102M|    {
 4583|   102M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   102M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   102M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   102M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 102M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   102M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   102M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 88.9M, False: 13.9M]
  |  |  ------------------
  ------------------
 4590|  88.9M|            return true;
 4591|  88.9M|        }
 4592|       |
 4593|  27.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 13.9M, False: 13.6M]
  ------------------
 4594|  13.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 289k, False: 13.6M]
  ------------------
 4595|   289k|                return false;
 4596|   289k|            }
 4597|  13.9M|        }
 4598|  13.6M|        return true;
 4599|  13.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  26.6M|    {
 4518|  26.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  26.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  26.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 26.6M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  26.6M|        auto res = read_at_position();
 4527|  26.6M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  26.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  26.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  26.6M|        return parent()->get_character_at(m_position);
 4529|  26.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  26.6M|    {
 4388|  26.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  26.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 16.6M, False: 9.94M]
  |  |  ------------------
  ------------------
 4389|  26.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  16.6M|            return m_putback_buffer[pos];
 4391|  16.6M|        }
 4392|  9.94M|        const auto start = pos - m_putback_buffer.size();
 4393|  9.94M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  9.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  9.94M|        return m_current_view[start];
 4395|  9.94M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  6.98M|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.98M|    {
 1572|  6.98M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  6.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.98M|    {
  442|  6.98M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.05M|    {
 1316|  7.05M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|   152k|        : m_unexpected(std::forward<Err>(e))
  350|   152k|    {
  351|   152k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   152k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   152k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  74.2k|        : base(unexpect, std::move(e.error())),
 1616|  74.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.2k|    {
 1618|  74.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  74.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.2k|          m_has_value(false)
  451|  74.2k|    {
  452|  74.2k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   224k|        : m_unexpected(std::forward<Args>(args)...)
  359|   224k|    {
  360|   224k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   224k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   224k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  52.4M|    {
 4504|  52.4M|        ++m_position;
 4505|  52.4M|        (void)read_at_position();
 4506|  52.4M|        return *this;
 4507|  52.4M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  3.07M|    {
 1740|  3.07M|        return has_value();
 1741|  3.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   579k|    {
 1795|   579k|        return value();
 1796|   579k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  25.2M|    {
 4553|  25.2M|        return !(lhs == rhs);
 4554|  25.2M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  28.0M|    {
 4548|  28.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 28.0M, False: 0]
  |  Branch (4548:46): [True: 3.61M, False: 24.4M]
  ------------------
 4549|  28.0M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  71.7k|        : m_unexpected(std::forward<Err>(e))
  350|  71.7k|    {
  351|  71.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  71.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  71.7k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  14.7k|        : base(unexpect, std::move(e.error())),
 1616|  14.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.7k|    {
 1618|  14.7k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  14.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.7k|          m_has_value(false)
  451|  14.7k|    {
  452|  14.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.49M|    {
 1316|  1.49M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.48M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.48M|    {
 1572|  1.48M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  1.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.48M|    {
  442|  1.48M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  1.49M|    {
 1740|  1.49M|        return has_value();
 1741|  1.49M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.99M|    {
  490|  2.99M|        return m_has_value;
  491|  2.99M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  14.7k|    {
 1746|  14.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.7k|        return this->get_unexpected().error();
 1748|  14.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.7k|    {
  473|  14.7k|        return m_unexpected;
  474|  14.7k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.48M|    {
 1805|  1.48M|        return std::move(value());
 1806|  1.48M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.48M|    {
 1769|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.48M|        return this->get_value();
 1771|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.48M|    {
  456|  1.48M|        return m_value;
  457|  1.48M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  33.8M|    {
 3484|  33.8M|        return m_sentinel;
 3485|  33.8M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  63.0k|        : m_unexpected(std::forward<Err>(e))
  350|  63.0k|    {
  351|  63.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  63.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  63.0k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  13.0M|    {
  365|  13.0M|        return m_unexpected;
  366|  13.0M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.57M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.57M|    {
  360|  3.57M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.57M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.57M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  15.8M|        : m_unexpected(std::forward<Err>(e))
  350|  15.8M|    {
  351|  15.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  15.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  15.8M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  15.8M|    {
  365|  15.8M|        return m_unexpected;
  366|  15.8M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  15.8M|        : m_unexpected(std::forward<Args>(args)...)
  359|  15.8M|    {
  360|  15.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  15.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  15.8M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|   152k|{
 1350|   152k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   152k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  3.36M|        : m_unexpected(std::forward<Err>(e))
  350|  3.36M|    {
  351|  3.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.36M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  19.5k|    {
 1746|  19.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.5k|        return this->get_unexpected().error();
 1748|  19.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.12M|        : base(unexpect, std::move(e.error())),
 1616|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.12M|    {
 1618|  1.12M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.15M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.15M|          m_has_value(false)
  451|  1.15M|    {
  452|  1.15M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  12.0M|    {
 1316|  12.0M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   584k|        : base(std::in_place, std::forward<U>(val)),
 1570|   584k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   584k|    {
 1572|   584k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   584k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   584k|    {
  442|   584k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  6.08M|        : base(unexpect, std::move(e.error())),
 1616|  6.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.08M|    {
 1618|  6.08M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  6.08M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.08M|          m_has_value(false)
  451|  6.08M|    {
  452|  6.08M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  13.1M|    {
 1740|  13.1M|        return has_value();
 1741|  13.1M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  23.1M|    {
  490|  23.1M|        return m_has_value;
  491|  23.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  3.08M|    {
 1746|  3.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.08M|        return this->get_unexpected().error();
 1748|  3.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  3.08M|    {
  473|  3.08M|        return m_unexpected;
  474|  3.08M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|  1.18M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.18M|    {
 1572|  1.18M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.18M|    {
  442|  1.18M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.18M|    {
 1316|  1.18M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    279|        : base(unexpect, std::move(e.error())),
 1616|    279|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    279|    {
 1618|    279|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|    279|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    279|          m_has_value(false)
  451|    279|    {
  452|    279|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  3.07M|    {
 1795|  3.07M|        return value();
 1796|  3.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  5.91M|    {
 1769|  5.91M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.91M|        return this->get_value();
 1771|  5.91M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  5.91M|    {
  456|  5.91M|        return m_value;
  457|  5.91M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   107k|    {
 1740|   107k|        return has_value();
 1741|   107k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  2.37M|    {
  490|  2.37M|        return m_has_value;
  491|  2.37M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.07M|    {
 1805|  1.07M|        return std::move(value());
 1806|  1.07M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.18M|    {
 1769|  1.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.18M|        return this->get_value();
 1771|  1.18M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  1.18M|    {
  456|  1.18M|        return m_value;
  457|  1.18M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.88M|    {
 1979|  2.88M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.88M|                                            std::forward<F>(f));
 1981|  2.88M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  2.88M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.88M|    else {
 1472|  2.88M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.88M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  2.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.84M, False: 35.1k]
  |  |  ------------------
  ------------------
 1474|  2.88M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.88M|                   : result(unexpect,
 1476|  35.1k|                            trivial_invoke(std::forward<F>(f),
 1477|  35.1k|                                           std::forward<Exp>(exp).error()));
 1478|  2.88M|    }
 1479|  2.88M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  4.19M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.19M|    {
 1572|  4.19M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.19M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.19M|    {
  442|  4.19M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  35.1k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  35.1k|    {
 1628|  35.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.84M|    {
 1805|  2.84M|        return std::move(value());
 1806|  2.84M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  7.26M|    {
 1740|  7.26M|        return has_value();
 1741|  7.26M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.4M|    {
  490|  11.4M|        return m_has_value;
  491|  11.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   298k|    {
 1746|   298k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   298k|        return this->get_unexpected().error();
 1748|   298k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   298k|    {
  473|   298k|        return m_unexpected;
  474|   298k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  3.09M|    {
 1805|  3.09M|        return std::move(value());
 1806|  3.09M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  3.86M|    {
 1769|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.86M|        return this->get_value();
 1771|  3.86M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.86M|    {
  456|  3.86M|        return m_value;
  457|  3.86M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  1.24M|    {
 3480|  1.24M|        return m_iterator;
 3481|  1.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  1.24M|    {
 3484|  1.24M|        return m_sentinel;
 3485|  1.24M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   962k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   962k|    static_cast<    \
  |  |  935|   962k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   962k|    static_cast<    \
  |  |  935|   962k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   962k|    {
 3466|   962k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  14.1M|    {
 4570|  14.1M|        return !x.is_at_end();
 4571|  14.1M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  20.7k|        : base(unexpect, std::move(e.error())),
 1616|  20.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.7k|    {
 1618|  20.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  20.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.7k|          m_has_value(false)
  451|  20.7k|    {
  452|  20.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.35M|    {
 1316|  2.35M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.33M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.33M|    {
 1572|  2.33M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.33M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.33M|    {
  442|  2.33M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  1.40M|    {
 1740|  1.40M|        return has_value();
 1741|  1.40M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   306k|    {
 1795|   306k|        return value();
 1796|   306k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.26M|    {
 1316|  1.26M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.25M|    {
 1572|  1.25M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.25M|    {
  442|  1.25M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  1.26M|    {
 1740|  1.26M|        return has_value();
 1741|  1.26M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.52M|    {
  490|  2.52M|        return m_has_value;
  491|  2.52M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  11.4k|    {
 1746|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.4k|        return this->get_unexpected().error();
 1748|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.25M|    {
 1805|  1.25M|        return std::move(value());
 1806|  1.25M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.25M|    {
 1769|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.25M|        return this->get_value();
 1771|  1.25M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.25M|    {
  456|  1.25M|        return m_value;
  457|  1.25M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|  4.81k|    {
 1746|  4.81k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.81k|        return this->get_unexpected().error();
 1748|  4.81k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   967k|        : base(unexpect, std::move(e.error())),
 1616|   967k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   967k|    {
 1618|   967k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   967k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   967k|          m_has_value(false)
  451|   967k|    {
  452|   967k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.36M|    {
 1316|  5.36M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   310k|        : base(std::in_place, std::forward<U>(val)),
 1570|   310k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   310k|    {
 1572|   310k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   310k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   310k|    {
  442|   310k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.67M|        : base(unexpect, std::move(e.error())),
 1616|  3.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.67M|    {
 1618|  3.67M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.67M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.67M|          m_has_value(false)
  451|  3.67M|    {
  452|  3.67M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  6.29M|    {
 1740|  6.29M|        return has_value();
 1741|  6.29M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.7M|    {
  490|  10.7M|        return m_has_value;
  491|  10.7M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  2.56M|    {
 1746|  2.56M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.56M|        return this->get_unexpected().error();
 1748|  2.56M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.56M|    {
  473|  2.56M|        return m_unexpected;
  474|  2.56M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   962k|        : base(std::in_place, std::forward<U>(val)),
 1570|   962k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   962k|    {
 1572|   962k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   962k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   962k|    {
  442|   962k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   962k|    {
 1316|   962k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     90|        : base(unexpect, std::move(e.error())),
 1616|     90|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     90|    {
 1618|     90|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     90|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     90|          m_has_value(false)
  451|     90|    {
  452|     90|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   991k|    {
 1795|   991k|        return value();
 1796|   991k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   991k|    {
 1769|   991k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   991k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   991k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   991k|        return this->get_value();
 1771|   991k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   991k|    {
  456|   991k|        return m_value;
  457|   991k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  25.5k|    {
 1740|  25.5k|        return has_value();
 1741|  25.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.92M|    {
  490|  1.92M|        return m_has_value;
  491|  1.92M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   937k|    {
 1805|   937k|        return std::move(value());
 1806|   937k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   962k|    {
 1769|   962k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   962k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   962k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   962k|        return this->get_value();
 1771|   962k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   962k|    {
  456|   962k|        return m_value;
  457|   962k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|   402k|        : base(std::in_place, std::forward<U>(val)),
 1570|   402k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   402k|    {
 1572|   402k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   402k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   402k|    {
  442|   402k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  3.14M|    {
 3000|  3.14M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  3.14M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  3.14M|    {
 2981|  3.14M|        return t.data();
 2982|  3.14M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  8.09M|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.09M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.09M|    {
 1572|  8.09M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  8.09M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.09M|    {
  442|  8.09M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1804|  5.46M|    {
 1805|  5.46M|        return std::move(value());
 1806|  5.46M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  3.44M|{
 1350|  3.44M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.44M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|  1.07M|    {
 1979|  1.07M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.07M|                                            std::forward<F>(f));
 1981|  1.07M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|  1.07M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.07M|    else {
 1472|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.07M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.07M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.07M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.07M|    }
 1479|  1.07M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.07M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.07M|    {
 1572|  1.07M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.07M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.07M|    {
  442|  1.07M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.07M|    {
 1316|  1.07M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.07M|    {
 1740|  1.07M|        return has_value();
 1741|  1.07M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.15M|    {
  490|  2.15M|        return m_has_value;
  491|  2.15M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.07M|    {
 1805|  1.07M|        return std::move(value());
 1806|  1.07M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.07M|    {
 1769|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.07M|        return this->get_value();
 1771|  1.07M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.07M|    {
  456|  1.07M|        return m_value;
  457|  1.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|  1.07M|    {
 1965|  1.07M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.07M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|  1.07M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.07M|    else {
 1472|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 1474|  1.07M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.07M|                   : result(unexpect,
 1476|  1.07M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.07M|                                           std::forward<Exp>(exp).error()));
 1478|  1.07M|    }
 1479|  1.07M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   764k|    {
 1795|   764k|        return value();
 1796|   764k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   256k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|   106k|    {
 1815|   106k|        return &value();
 1816|   106k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   766k|    {
 2869|   766k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   766k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   766k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   766k|    {
 2850|   766k|        return decay_copy(t.begin());
 2851|   766k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   766k|{
 2094|   766k|    return SCN_FWD(t);
  ------------------
  |  |  936|   766k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   766k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   467k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   937k|    {
 1979|   937k|        return detail::transform_error_impl(std::move(*this),
 1980|   937k|                                            std::forward<F>(f));
 1981|   937k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   937k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   937k|    else {
 1472|   937k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   937k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   937k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 937k, False: 0]
  |  |  ------------------
  ------------------
 1474|   937k|                   ? result(*std::forward<Exp>(exp))
 1475|   937k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   937k|    }
 1479|   937k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   937k|        : base(std::in_place, std::forward<U>(val)),
 1570|   937k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   937k|    {
 1572|   937k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   937k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   937k|    {
  442|   937k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   937k|    {
 1316|   937k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   937k|    {
 1740|   937k|        return has_value();
 1741|   937k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.87M|    {
  490|  1.87M|        return m_has_value;
  491|  1.87M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   937k|    {
 1805|   937k|        return std::move(value());
 1806|   937k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   937k|    {
 1769|   937k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   937k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   937k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   937k|        return this->get_value();
 1771|   937k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   937k|    {
  456|   937k|        return m_value;
  457|   937k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|   907k|    {
 1965|   907k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   907k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   907k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   907k|    else {
 1472|   907k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   907k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   907k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 907k]
  |  |  ------------------
  ------------------
 1474|   907k|                   ? result(*std::forward<Exp>(exp))
 1475|   907k|                   : result(unexpect,
 1476|   907k|                            trivial_invoke(std::forward<F>(f),
 1477|   907k|                                           std::forward<Exp>(exp).error()));
 1478|   907k|    }
 1479|   907k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1569|  55.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  55.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  55.0k|    {
 1572|  55.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  55.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  55.0k|    {
  442|  55.0k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   907k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   907k|    static_cast<    \
  |  |  935|   907k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   907k|    {
 3912|   907k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   645k|    {
 1795|   645k|        return value();
 1796|   645k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  25.4k|    {
 1815|  25.4k|        return &value();
 1816|  25.4k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.07M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.07M|    static_cast<    \
  |  |  935|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.07M|    {
 3912|  1.07M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  5.14M|    {
 4559|  5.14M|        return x.is_at_end();
 4560|  5.14M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  8.15M|    {
 4603|  8.15M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 8.15M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  8.15M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 8.15M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  8.15M|        return !read_at_position();
 4610|  8.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  25.8M|    {
 4583|  25.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  25.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  25.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  25.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 25.8M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  25.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  25.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 22.7M, False: 3.10M]
  |  |  ------------------
  ------------------
 4590|  22.7M|            return true;
 4591|  22.7M|        }
 4592|       |
 4593|  6.00M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 3.10M, False: 2.90M]
  ------------------
 4594|  3.10M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 199k, False: 2.90M]
  ------------------
 4595|   199k|                return false;
 4596|   199k|            }
 4597|  3.10M|        }
 4598|  2.90M|        return true;
 4599|  3.10M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  33.5M|    {
 4357|  33.5M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  33.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  8.09M|    {
 4518|  8.09M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  8.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  8.09M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 8.09M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  8.09M|        auto res = read_at_position();
 4527|  8.09M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  8.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  8.09M|        return parent()->get_character_at(m_position);
 4529|  8.09M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  8.09M|    {
 4388|  8.09M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  8.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.85M, False: 1.24M]
  |  |  ------------------
  ------------------
 4389|  8.09M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  6.85M|            return m_putback_buffer[pos];
 4391|  6.85M|        }
 4392|  1.24M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.24M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.24M|        return m_current_view[start];
 4395|  1.24M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  3.59M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.59M|    {
 1572|  3.59M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.59M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.59M|    {
  442|  3.59M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.65M|    {
 1316|  3.65M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  65.4k|        : base(unexpect, std::move(e.error())),
 1616|  65.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  65.4k|    {
 1618|  65.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  65.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  65.4k|          m_has_value(false)
  451|  65.4k|    {
  452|  65.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  9.64M|    {
 4504|  9.64M|        ++m_position;
 4505|  9.64M|        (void)read_at_position();
 4506|  9.64M|        return *this;
 4507|  9.64M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  1.43M|    {
 1740|  1.43M|        return has_value();
 1741|  1.43M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  24.9k|    {
 1795|  24.9k|        return value();
 1796|  24.9k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  3.96M|    {
 4553|  3.96M|        return !(lhs == rhs);
 4554|  3.96M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  5.36M|    {
 4548|  5.36M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.36M, False: 0]
  |  Branch (4548:46): [True: 1.69M, False: 3.66M]
  ------------------
 4549|  5.36M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|  2.91M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|  2.91M|    else {
 4075|       |        // utf-32
 4076|  2.91M|        static_assert(sizeof(U) == 4);
 4077|  2.91M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|  2.91M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|  2.91M|        return 1;
 4079|  2.91M|    }
 4080|  2.91M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.91M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|  2.91M|    else {
 4281|  2.91M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|  2.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|  2.91M|        auto cp = static_cast<char32_t>(input.front());
 4283|  2.91M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  2.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 182k, False: 2.73M]
  |  |  ------------------
  ------------------
 4284|   182k|            return invalid_code_point;
 4285|   182k|        }
 4286|  2.73M|        return cp;
 4287|  2.91M|    }
 4288|  2.91M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.21k|        : base(unexpect, std::move(e.error())),
 1616|  3.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.21k|    {
 1618|  3.21k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  3.21k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.21k|          m_has_value(false)
  451|  3.21k|    {
  452|  3.21k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   751k|    {
 1316|   751k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   747k|        : base(std::in_place, std::forward<U>(val)),
 1570|   747k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   747k|    {
 1572|   747k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   747k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   747k|    {
  442|   747k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   751k|    {
 1740|   751k|        return has_value();
 1741|   751k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.50M|    {
  490|  1.50M|        return m_has_value;
  491|  1.50M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  3.21k|    {
 1746|  3.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.21k|        return this->get_unexpected().error();
 1748|  3.21k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.21k|    {
  473|  3.21k|        return m_unexpected;
  474|  3.21k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   747k|    {
 1805|   747k|        return std::move(value());
 1806|   747k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   747k|    {
 1769|   747k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   747k|        return this->get_value();
 1771|   747k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   747k|    {
  456|   747k|        return m_value;
  457|   747k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  13.3M|    {
 3484|  13.3M|        return m_sentinel;
 3485|  13.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  2.63k|    {
 1746|  2.63k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.63k|        return this->get_unexpected().error();
 1748|  2.63k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|   667k|        : base(unexpect, std::move(e.error())),
 1616|   667k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   667k|    {
 1618|   667k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|   726k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   726k|          m_has_value(false)
  451|   726k|    {
  452|   726k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.31M|    {
 1316|  6.31M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  24.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  24.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  24.9k|    {
 1572|  24.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  24.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  24.9k|    {
  442|  24.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.56M|        : base(unexpect, std::move(e.error())),
 1616|  3.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.56M|    {
 1618|  3.56M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.56M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.56M|          m_has_value(false)
  451|  3.56M|    {
  452|  3.56M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  6.92M|    {
 1740|  6.92M|        return has_value();
 1741|  6.92M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  12.2M|    {
  490|  12.2M|        return m_has_value;
  491|  12.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  2.05M|    {
 1746|  2.05M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.05M|        return this->get_unexpected().error();
 1748|  2.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.05M|    {
  473|  2.05M|        return m_unexpected;
  474|  2.05M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   620k|        : base(std::in_place, std::forward<U>(val)),
 1570|   620k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   620k|    {
 1572|   620k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   620k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   620k|    {
  442|   620k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   620k|    {
 1316|   620k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|     93|        : base(unexpect, std::move(e.error())),
 1616|     93|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     93|    {
 1618|     93|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|     93|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     93|          m_has_value(false)
  451|     93|    {
  452|     93|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   919k|    {
 1795|   919k|        return value();
 1796|   919k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.46M|    {
 1769|  2.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.46M|        return this->get_value();
 1771|  2.46M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  2.46M|    {
  456|  2.46M|        return m_value;
  457|  2.46M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|  14.3k|    {
 1740|  14.3k|        return has_value();
 1741|  14.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  1.24M|    {
  490|  1.24M|        return m_has_value;
  491|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   606k|    {
 1805|   606k|        return std::move(value());
 1806|   606k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   620k|    {
 1769|   620k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   620k|        return this->get_value();
 1771|   620k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   620k|    {
  456|   620k|        return m_value;
  457|   620k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.60M|    {
 1979|  1.60M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.60M|                                            std::forward<F>(f));
 1981|  1.60M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.60M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.60M|    else {
 1472|  1.60M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.60M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.54M, False: 58.5k]
  |  |  ------------------
  ------------------
 1474|  1.60M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.60M|                   : result(unexpect,
 1476|  58.5k|                            trivial_invoke(std::forward<F>(f),
 1477|  58.5k|                                           std::forward<Exp>(exp).error()));
 1478|  1.60M|    }
 1479|  1.60M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  2.00M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.00M|    {
 1572|  2.00M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.00M|    {
  442|  2.00M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  58.5k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  58.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  58.5k|    {
 1628|  58.5k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  1.54M|    {
 1805|  1.54M|        return std::move(value());
 1806|  1.54M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  4.09M|    {
 1740|  4.09M|        return has_value();
 1741|  4.09M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.53M|    {
  490|  6.53M|        return m_has_value;
  491|  6.53M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   668k|    {
 1746|   668k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   668k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   668k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   668k|        return this->get_unexpected().error();
 1748|   668k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   668k|    {
  473|   668k|        return m_unexpected;
  474|   668k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.46M|    {
 1805|  1.46M|        return std::move(value());
 1806|  1.46M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.77M|    {
 1769|  1.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.77M|        return this->get_value();
 1771|  1.77M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.77M|    {
  456|  1.77M|        return m_value;
  457|  1.77M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   468k|    {
 3480|   468k|        return m_iterator;
 3481|   468k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   468k|    {
 3484|   468k|        return m_sentinel;
 3485|   468k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   432k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   432k|    static_cast<    \
  |  |  935|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   432k|    static_cast<    \
  |  |  935|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   432k|    {
 3466|   432k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  3.00M|    {
 4570|  3.00M|        return !x.is_at_end();
 4571|  3.00M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  63.6k|        : base(unexpect, std::move(e.error())),
 1616|  63.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  63.6k|    {
 1618|  63.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  63.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  63.6k|          m_has_value(false)
  451|  63.6k|    {
  452|  63.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.04M|    {
 1316|  3.04M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.98M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.98M|    {
 1572|  2.98M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.98M|    {
  442|  2.98M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   826k|    {
 1740|   826k|        return has_value();
 1741|   826k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.27M|    {
  490|  5.27M|        return m_has_value;
  491|  5.27M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  11.0k|    {
 1795|  11.0k|        return value();
 1796|  11.0k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.16M|    {
 1769|  2.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.16M|        return this->get_value();
 1771|  2.16M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.16M|    {
  456|  2.16M|        return m_value;
  457|  2.16M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.21k|        : base(unexpect, std::move(e.error())),
 1616|  3.21k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.21k|    {
 1618|  3.21k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  3.21k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.21k|          m_has_value(false)
  451|  3.21k|    {
  452|  3.21k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   751k|    {
 1316|   751k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   748k|        : base(std::in_place, std::forward<U>(val)),
 1570|   748k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   748k|    {
 1572|   748k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   748k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   748k|    {
  442|   748k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   611k|    {
 1979|   611k|        return detail::transform_error_impl(std::move(*this),
 1980|   611k|                                            std::forward<F>(f));
 1981|   611k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   611k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   611k|    else {
 1472|   611k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   611k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   611k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 606k, False: 4.32k]
  |  |  ------------------
  ------------------
 1474|   611k|                   ? result(*std::forward<Exp>(exp))
 1475|   611k|                   : result(unexpect,
 1476|  4.32k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.32k|                                           std::forward<Exp>(exp).error()));
 1478|   611k|    }
 1479|   611k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.15M|    {
 1805|  2.15M|        return std::move(value());
 1806|  2.15M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  62.9k|    {
 1756|  62.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  62.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  62.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  62.9k|        return std::move(this->get_unexpected().error());
 1758|  62.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  63.6k|    {
  473|  63.6k|        return m_unexpected;
  474|  63.6k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   688k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   688k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   688k|    {
 1628|   688k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   751k|    {
 1740|   751k|        return has_value();
 1741|   751k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.50M|    {
  490|  1.50M|        return m_has_value;
  491|  1.50M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  3.21k|    {
 1746|  3.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.21k|        return this->get_unexpected().error();
 1748|  3.21k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.21k|    {
  473|  3.21k|        return m_unexpected;
  474|  3.21k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   748k|    {
 1805|   748k|        return std::move(value());
 1806|   748k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   748k|    {
 1769|   748k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   748k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   748k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   748k|        return this->get_value();
 1771|   748k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   748k|    {
  456|   748k|        return m_value;
  457|   748k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|    658|    {
 1746|    658|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    658|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    658|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    658|        return this->get_unexpected().error();
 1748|    658|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   666k|        : base(unexpect, std::move(e.error())),
 1616|   666k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   666k|    {
 1618|   666k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   724k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   724k|          m_has_value(false)
  451|   724k|    {
  452|   724k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.00M|    {
 1316|  5.00M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  11.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  11.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  11.0k|    {
 1572|  11.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  11.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  11.0k|    {
  442|  11.0k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.57M|        : base(unexpect, std::move(e.error())),
 1616|  2.57M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.57M|    {
 1618|  2.57M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.57M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.57M|          m_has_value(false)
  451|  2.57M|    {
  452|  2.57M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  5.60M|    {
 1740|  5.60M|        return has_value();
 1741|  5.60M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.0M|    {
  490|  10.0M|        return m_has_value;
  491|  10.0M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  1.95M|    {
 1746|  1.95M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.95M|        return this->get_unexpected().error();
 1748|  1.95M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  1.95M|    {
  473|  1.95M|        return m_unexpected;
  474|  1.95M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   611k|        : base(std::in_place, std::forward<U>(val)),
 1570|   611k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   611k|    {
 1572|   611k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   611k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   611k|    {
  442|   611k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   611k|    {
 1316|   611k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     30|        : base(unexpect, std::move(e.error())),
 1616|     30|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     30|    {
 1618|     30|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     30|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     30|          m_has_value(false)
  451|     30|    {
  452|     30|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   289k|    {
 1795|   289k|        return value();
 1796|   289k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.83M|    {
 1769|  1.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.83M|        return this->get_value();
 1771|  1.83M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.83M|    {
  456|  1.83M|        return m_value;
  457|  1.83M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  5.07k|    {
 1740|  5.07k|        return has_value();
 1741|  5.07k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   606k|    {
 1805|   606k|        return std::move(value());
 1806|   606k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   611k|    {
 1769|   611k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   611k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   611k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   611k|        return this->get_value();
 1771|   611k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   611k|    {
  456|   611k|        return m_value;
  457|   611k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.60M|    {
 1979|  1.60M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.60M|                                            std::forward<F>(f));
 1981|  1.60M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.60M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.60M|    else {
 1472|  1.60M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.60M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.54M, False: 58.6k]
  |  |  ------------------
  ------------------
 1474|  1.60M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.60M|                   : result(unexpect,
 1476|  58.6k|                            trivial_invoke(std::forward<F>(f),
 1477|  58.6k|                                           std::forward<Exp>(exp).error()));
 1478|  1.60M|    }
 1479|  1.60M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.69M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.69M|    {
 1572|  1.69M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.69M|    {
  442|  1.69M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  58.6k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  58.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  58.6k|    {
 1628|  58.6k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.54M|    {
 1805|  1.54M|        return std::move(value());
 1806|  1.54M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.41M|    {
 3000|  1.41M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.41M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.41M|    {
 2981|  1.41M|        return t.data();
 2982|  1.41M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|   606k|    {
 1979|   606k|        return detail::transform_error_impl(std::move(*this),
 1980|   606k|                                            std::forward<F>(f));
 1981|   606k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|   606k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   606k|    else {
 1472|   606k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   606k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   606k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 606k, False: 0]
  |  |  ------------------
  ------------------
 1474|   606k|                   ? result(*std::forward<Exp>(exp))
 1475|   606k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   606k|    }
 1479|   606k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|   606k|        : base(std::in_place, std::forward<U>(val)),
 1570|   606k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   606k|    {
 1572|   606k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   606k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   606k|    {
  442|   606k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   606k|    {
 1316|   606k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   606k|    {
 1740|   606k|        return has_value();
 1741|   606k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.21M|    {
  490|  1.21M|        return m_has_value;
  491|  1.21M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   606k|    {
 1805|   606k|        return std::move(value());
 1806|   606k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   606k|    {
 1769|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   606k|        return this->get_value();
 1771|   606k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   606k|    {
  456|   606k|        return m_value;
  457|   606k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|   776k|    {
 1965|   776k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   776k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|   776k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   776k|    else {
 1472|   776k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   776k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   776k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 776k]
  |  |  ------------------
  ------------------
 1474|   776k|                   ? result(*std::forward<Exp>(exp))
 1475|   776k|                   : result(unexpect,
 1476|   776k|                            trivial_invoke(std::forward<F>(f),
 1477|   776k|                                           std::forward<Exp>(exp).error()));
 1478|   776k|    }
 1479|   776k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   306k|    {
 1795|   306k|        return value();
 1796|   306k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   121k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|  14.2k|    {
 1815|  14.2k|        return &value();
 1816|  14.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   485k|    {
 2869|   485k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   485k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   485k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   485k|    {
 2850|   485k|        return decay_copy(t.begin());
 2851|   485k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   485k|{
 2094|   485k|    return SCN_FWD(t);
  ------------------
  |  |  936|   485k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   485k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   272k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   606k|    {
 1979|   606k|        return detail::transform_error_impl(std::move(*this),
 1980|   606k|                                            std::forward<F>(f));
 1981|   606k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   606k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   606k|    else {
 1472|   606k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   606k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   606k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 606k, False: 0]
  |  |  ------------------
  ------------------
 1474|   606k|                   ? result(*std::forward<Exp>(exp))
 1475|   606k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   606k|    }
 1479|   606k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   606k|        : base(std::in_place, std::forward<U>(val)),
 1570|   606k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   606k|    {
 1572|   606k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   606k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   606k|    {
  442|   606k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   606k|    {
 1316|   606k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   606k|    {
 1740|   606k|        return has_value();
 1741|   606k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.21M|    {
  490|  1.21M|        return m_has_value;
  491|  1.21M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   606k|    {
 1805|   606k|        return std::move(value());
 1806|   606k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   606k|    {
 1769|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   606k|        return this->get_value();
 1771|   606k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   606k|    {
  456|   606k|        return m_value;
  457|   606k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|   684k|    {
 1965|   684k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   684k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   684k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   684k|    else {
 1472|   684k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   684k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   684k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 684k]
  |  |  ------------------
  ------------------
 1474|   684k|                   ? result(*std::forward<Exp>(exp))
 1475|   684k|                   : result(unexpect,
 1476|   684k|                            trivial_invoke(std::forward<F>(f),
 1477|   684k|                                           std::forward<Exp>(exp).error()));
 1478|   684k|    }
 1479|   684k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   684k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   684k|    static_cast<    \
  |  |  935|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   684k|    {
 3912|   684k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   307k|    {
 1795|   307k|        return value();
 1796|   307k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  5.04k|    {
 1815|  5.04k|        return &value();
 1816|  5.04k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   776k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   776k|    static_cast<    \
  |  |  935|   776k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   776k|    {
 3912|   776k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|   133M|    {
 4357|   133M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   133M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1569|   102k|        : base(std::in_place, std::forward<U>(val)),
 1570|   102k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   102k|    {
 1572|   102k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  440|   102k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   102k|    {
  442|   102k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|  1.85M|    {
 6177|  1.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  1.85M|        return static_cast<std::size_t>(m_desc &
 6182|  1.85M|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|  3.70M|    {
 6203|  3.70M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  3.70M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|  1.85M|    {
 6145|  1.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  1.85M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  1.85M|        const auto t = type(id);
 6157|  1.85M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.85M|        basic_scan_arg<Context> arg;
 6162|  1.85M|        arg.m_type = t;
 6163|  1.85M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 1.85M, False: 0]
  ------------------
 6164|  1.85M|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  1.85M|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  1.85M|        return arg;
 6170|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|  1.85M|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  1.85M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  1.85M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  1.85M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|  1.85M|    {
 6207|  1.85M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  1.85M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  3.51M|    {
 5961|  3.51M|        return m_type != detail::arg_type::none_type;
 5962|  3.51M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   280k|{
 9300|   280k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   280k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   280k|{
 9201|   280k|#define SCN_VISIT(Type)                                                \
 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   280k|    }                                                                  \
 9205|   280k|    else {                                                             \
 9206|   280k|        return vis(monostate_val);                                     \
 9207|   280k|    }
 9208|       |
 9209|   280k|    monostate monostate_val{};
 9210|       |
 9211|   280k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 280k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 280k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 280k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 280k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 280k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 280k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 280k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 280k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 280k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 280k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 280k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 280k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 280k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 280k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 280k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|  90.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 90.5k, False: 190k]
  ------------------
 9243|  90.5k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  90.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  90.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  90.5k|    }                                                                  \
  |  | 9205|  90.5k|    else {                                                             \
  |  | 9206|  90.5k|        return vis(monostate_val);                                     \
  |  | 9207|  90.5k|    }
  ------------------
 9244|   184k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 94.3k, False: 186k]
  ------------------
 9245|   184k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   184k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   184k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   184k|    }                                                                  \
  |  | 9205|   184k|    else {                                                             \
  |  | 9206|   184k|        return vis(monostate_val);                                     \
  |  | 9207|   184k|    }
  ------------------
 9246|   280k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 95.9k, False: 184k]
  ------------------
 9247|   280k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9248|   280k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 280k]
  ------------------
 9249|   280k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9250|   280k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 280k]
  ------------------
 9251|   280k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9252|   280k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 280k]
  ------------------
 9253|   280k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9254|   280k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 280k]
  ------------------
 9255|   280k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9256|   280k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 280k]
  ------------------
 9257|   280k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9258|   280k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 280k]
  ------------------
 9259|   280k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   280k|    }                                                                  \
  |  | 9205|   280k|    else {                                                             \
  |  | 9206|   280k|        return vis(monostate_val);                                     \
  |  | 9207|   280k|    }
  ------------------
 9260|       |
 9261|   280k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 280k]
  ------------------
 9262|   280k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   280k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   280k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 280k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 280k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   280k|            SCN_CLANG_POP
 9279|   280k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  4.97M|{
 6006|  4.97M|    return arg.m_type;
 6007|  4.97M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  2.05M|{
 6018|  2.05M|    return arg.m_value;
 6019|  2.05M|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|  1.46M|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  1.46M|    {
 6258|  1.46M|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   789k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   789k|    static_cast<    \
  |  |  935|   789k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   789k|    {
 8934|   789k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|  1.09M|{
 4691|  1.09M|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 1.09M]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|  1.09M|    return ranges::subrange{forward_iterator{this, 0},
 4696|  1.09M|                            ranges::default_sentinel};
 4697|  1.09M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  1.09M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  1.09M|    {
 4455|  1.09M|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.09M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  1.09M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|   308k|{
 9300|   308k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   308k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   308k|{
 9201|   308k|#define SCN_VISIT(Type)                                                \
 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   308k|    }                                                                  \
 9205|   308k|    else {                                                             \
 9206|   308k|        return vis(monostate_val);                                     \
 9207|   308k|    }
 9208|       |
 9209|   308k|    monostate monostate_val{};
 9210|       |
 9211|   308k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 308k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 308k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 308k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 308k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 308k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 308k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 308k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 308k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 308k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 308k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 308k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 308k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 308k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 308k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 308k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|  98.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 98.5k, False: 209k]
  ------------------
 9243|  98.5k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  98.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  98.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  98.5k|    }                                                                  \
  |  | 9205|  98.5k|    else {                                                             \
  |  | 9206|  98.5k|        return vis(monostate_val);                                     \
  |  | 9207|  98.5k|    }
  ------------------
 9244|   202k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 104k, False: 203k]
  ------------------
 9245|   202k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   202k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   202k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   202k|    }                                                                  \
  |  | 9205|   202k|    else {                                                             \
  |  | 9206|   202k|        return vis(monostate_val);                                     \
  |  | 9207|   202k|    }
  ------------------
 9246|   308k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 105k, False: 202k]
  ------------------
 9247|   308k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   308k|    }                                                                  \
  |  | 9205|   308k|    else {                                                             \
  |  | 9206|   308k|        return vis(monostate_val);                                     \
  |  | 9207|   308k|    }
  ------------------
 9248|   308k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 308k]
  ------------------
 9249|   308k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   308k|    }                                                                  \
  |  | 9205|   308k|    else {                                                             \
  |  | 9206|   308k|        return vis(monostate_val);                                     \
  |  | 9207|   308k|    }
  ------------------
 9250|   308k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 308k]
  ------------------
 9251|   308k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   308k|    }                                                                  \
  |  | 9205|   308k|    else {                                                             \
  |  | 9206|   308k|        return vis(monostate_val);                                     \
  |  | 9207|   308k|    }
  ------------------
 9252|   308k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 308k]
  ------------------
 9253|   308k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   308k|    }                                                                  \
  |  | 9205|   308k|    else {                                                             \
  |  | 9206|   308k|        return vis(monostate_val);                                     \
  |  | 9207|   308k|    }
  ------------------
 9254|   308k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 308k]
  ------------------
 9255|   308k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   308k|    }                                                                  \
  |  | 9205|   308k|    else {                                                             \
  |  | 9206|   308k|        return vis(monostate_val);                                     \
  |  | 9207|   308k|    }
  ------------------
 9256|   308k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 308k]
  ------------------
 9257|   308k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   308k|    }                                                                  \
  |  | 9205|   308k|    else {                                                             \
  |  | 9206|   308k|        return vis(monostate_val);                                     \
  |  | 9207|   308k|    }
  ------------------
 9258|   308k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 308k]
  ------------------
 9259|   308k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   308k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   308k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   308k|    }                                                                  \
  |  | 9205|   308k|    else {                                                             \
  |  | 9206|   308k|        return vis(monostate_val);                                     \
  |  | 9207|   308k|    }
  ------------------
 9260|       |
 9261|   308k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 308k]
  ------------------
 9262|   308k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   308k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   308k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 308k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 308k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   308k|            SCN_CLANG_POP
 9279|   308k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   672k|    {
 3075|   672k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   672k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   672k|    {
 3041|   672k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   672k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   672k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   672k|{
 7793|   672k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   672k|    handler.check_args_exhausted();
 7795|   672k|    return handler.get_error();
 7796|   672k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   672k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   672k|    auto begin = format.data();
 7761|   672k|    auto it = begin;
 7762|   672k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  1.27M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 672k, False: 602k]
  ------------------
 7765|   672k|        const auto ch = *it++;
 7766|   672k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 672k, False: 0]
  ------------------
 7767|   672k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   672k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   672k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 69.5k, False: 602k]
  ------------------
 7771|  69.5k|                return;
 7772|  69.5k|            }
 7773|   672k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   672k|    }
 7784|       |
 7785|   602k|    handler.on_literal_text(begin, end);
 7786|   602k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|   672k|{
 7690|   672k|    struct id_adapter {
 7691|   672k|        constexpr void operator()()
 7692|   672k|        {
 7693|   672k|            arg_id = handler.on_arg_id();
 7694|   672k|        }
 7695|   672k|        constexpr void operator()(std::size_t id)
 7696|   672k|        {
 7697|   672k|            arg_id = handler.on_arg_id(id);
 7698|   672k|        }
 7699|       |
 7700|   672k|        constexpr void on_error(const char* msg)
 7701|   672k|        {
 7702|   672k|            SCN_UNLIKELY_ATTR
 7703|   672k|            handler.on_error(msg);
 7704|   672k|        }
 7705|       |
 7706|   672k|        Handler& handler;
 7707|   672k|        std::size_t arg_id;
 7708|   672k|    };
 7709|       |
 7710|   672k|    ++begin;
 7711|   672k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   672k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 672k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   672k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 672k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   672k|    else {
 7723|   672k|        auto adapter = id_adapter{handler, 0};
 7724|   672k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   672k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   672k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 672k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   672k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 672k, False: 0]
  ------------------
 7735|   672k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   672k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   672k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 672k]
  |  |  |  Branch (865:45): [True: 0, False: 672k]
  |  |  |  Branch (865:45): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   672k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   672k|    }
 7751|   672k|    return begin + 1;
 7752|   672k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|  1.46M|    {
 8832|  1.46M|        return m_args.get(id);
 8833|  1.46M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|  1.46M|    {
 6286|  1.46M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.46M]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|  1.46M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  1.46M|        do_check_arg_id(id);
 6294|  1.46M|        return id;
 6295|  1.46M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|  1.46M|{
 6806|  1.46M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  1.46M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  1.46M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   672k|{
 7191|   672k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   672k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 672k, False: 0]
  |  Branch (7192:26): [True: 0, False: 672k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   672k|    handler();
 7197|   672k|    return begin;
 7198|   672k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   672k|        {
 7693|   672k|            arg_id = handler.on_arg_id();
 7694|   672k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|  1.46M|    {
 6281|  1.46M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  1.46M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  2.92M|    {
 6270|  2.92M|        return m_format.data();
 6271|  2.92M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   672k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   672k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   672k|    {
 7871|   672k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   672k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|   672k|{
 7606|   672k|    auto do_presentation = [&]() -> const CharT* {
 7607|   672k|        if (*begin == CharT{'['}) {
 7608|   672k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   672k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   672k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   672k|                return begin;
 7614|   672k|            }
 7615|   672k|            handler.on_character_set_string(set);
 7616|   672k|            return begin;
 7617|   672k|        }
 7618|   672k|        if (*begin == CharT{'/'}) {
 7619|   672k|            return parse_presentation_regex(begin, end, handler);
 7620|   672k|        }
 7621|   672k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   672k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   672k|            handler.on_error("Invalid type specifier in format string");
 7624|   672k|            return begin;
 7625|   672k|        }
 7626|   672k|        handler.on_type(type);
 7627|   672k|        return begin;
 7628|   672k|    };
 7629|       |
 7630|   672k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 672k, False: 0]
  |  Branch (7630:28): [True: 672k, False: 0]
  ------------------
 7631|   672k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 672k, False: 0]
  |  Branch (7631:36): [True: 484k, False: 187k]
  ------------------
 7632|   484k|        return do_presentation();
 7633|   484k|    }
 7634|       |
 7635|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   187k|    begin = parse_align(begin, end, handler);
 7641|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   187k|    begin = parse_width(begin, end, handler);
 7647|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   187k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 187k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   187k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 187k, False: 0]
  ------------------
 7666|   187k|        handler.on_localized();
 7667|   187k|        ++begin;
 7668|   187k|    }
 7669|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   187k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 187k, False: 0]
  |  Branch (7674:25): [True: 0, False: 187k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   187k|    return begin;
 7683|   187k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|  1.46M|{
 7255|  1.46M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 1.04M, False: 412k]
  |  Branch (7255:33): [True: 1.04M, False: 0]
  ------------------
 7256|  1.46M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 412k, False: 0]
  |  Branch (7256:33): [True: 412k, False: 0]
  ------------------
 7257|  1.46M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   484k|    auto do_presentation = [&]() -> const CharT* {
 7607|   484k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 484k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   484k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 484k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   484k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   484k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 484k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   484k|        handler.on_type(type);
 7627|   484k|        return begin;
 7628|   484k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|  1.04M|{
 7203|  1.04M|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 1.04M]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 1.04M]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 1.04M]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 1.04M]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 1.04M]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 1.04M]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 1.04M]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.04M]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 1.04M]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 1.04M]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|   447k|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 447k, False: 601k]
  ------------------
 7222|   447k|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 1.04M]
  ------------------
 7223|   447k|            return presentation_type::float_hex;
 7224|  42.5k|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 42.5k, False: 1.00M]
  ------------------
 7225|  42.5k|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 1.04M]
  ------------------
 7226|  42.5k|            return presentation_type::float_scientific;
 7227|   217k|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 217k, False: 832k]
  ------------------
 7228|   217k|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 1.04M]
  ------------------
 7229|   217k|            return presentation_type::float_fixed;
 7230|   341k|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 341k, False: 707k]
  ------------------
 7231|   341k|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 1.04M]
  ------------------
 7232|   341k|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 1.04M]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 1.04M]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 1.04M]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 1.04M]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 1.04M]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 1.04M]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|      0|        default:
  ------------------
  |  Branch (7247:9): [True: 0, False: 1.04M]
  ------------------
 7248|      0|            return presentation_type::none;
 7249|  1.04M|    }
 7250|  1.04M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|   187k|{
 7280|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   187k|    auto check_align = [](wchar_t ch) {
 7283|   187k|        switch (ch) {
 7284|   187k|            case L'<':
 7285|   187k|                return align_type::left;
 7286|   187k|            case L'>':
 7287|   187k|                return align_type::right;
 7288|   187k|            case L'^':
 7289|   187k|                return align_type::center;
 7290|   187k|            default:
 7291|   187k|                return align_type::none;
 7292|   187k|        }
 7293|   187k|    };
 7294|       |
 7295|   187k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   187k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  |  Branch (865:45): [True: 0, False: 187k]
  |  |  |  Branch (865:45): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7297|   187k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   187k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   187k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   187k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   187k|    const auto begin_before_fill = begin;
 7307|   187k|    begin += potential_fill_len;
 7308|       |
 7309|   187k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 187k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   187k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   187k|    const auto begin_after_fill = begin;
 7315|   187k|    ++begin;
 7316|       |
 7317|   187k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 187k, False: 0]
  ------------------
 7318|   187k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   187k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 187k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   187k|    }
 7326|       |
 7327|   187k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 187k, False: 0]
  ------------------
 7328|   187k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 187k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   187k|        return begin_before_fill;
 7333|   187k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   187k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|   412k|{
 7262|   412k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|   412k|    else {
 7267|   412k|        const auto lengths =
 7268|   412k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|   412k|            "\3\4";
 7270|   412k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|   412k|        return len;
 7272|   412k|    }
 7273|   412k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   374k|    auto check_align = [](wchar_t ch) {
 7283|   374k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 374k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 374k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 374k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   374k|            default:
  ------------------
  |  Branch (7290:13): [True: 374k, False: 0]
  ------------------
 7291|   374k|                return align_type::none;
 7292|   374k|        }
 7293|   374k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|   187k|{
 7345|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   187k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 187k, False: 0]
  |  Branch (7347:33): [True: 0, False: 187k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   187k|    return begin;
 7358|   187k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|   187k|    {
 7876|   187k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   187k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 187k, False: 0]
  ------------------
 7878|   187k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 187k, False: 0]
  ------------------
 7879|   187k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 187k]
  ------------------
 7880|   187k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   187k|        Handler::on_localized();
 7888|   187k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|   632k|    {
 7025|   632k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|   632k|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|   632k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   672k|{
 9300|   672k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   672k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   672k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   672k|{
 9201|   672k|#define SCN_VISIT(Type)                                                \
 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   672k|    }                                                                  \
 9205|   672k|    else {                                                             \
 9206|   672k|        return vis(monostate_val);                                     \
 9207|   672k|    }
 9208|       |
 9209|   672k|    monostate monostate_val{};
 9210|       |
 9211|   672k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 672k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 672k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 672k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 672k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 672k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 672k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 672k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 672k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 672k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 672k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 672k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 672k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 672k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 672k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 672k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   218k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 218k, False: 453k]
  ------------------
 9243|   218k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   218k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   218k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   218k|    }                                                                  \
  |  | 9205|   218k|    else {                                                             \
  |  | 9206|   218k|        return vis(monostate_val);                                     \
  |  | 9207|   218k|    }
  ------------------
 9244|   444k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 225k, False: 446k]
  ------------------
 9245|   444k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   444k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   444k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   444k|    }                                                                  \
  |  | 9205|   444k|    else {                                                             \
  |  | 9206|   444k|        return vis(monostate_val);                                     \
  |  | 9207|   444k|    }
  ------------------
 9246|   672k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 227k, False: 444k]
  ------------------
 9247|   672k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   672k|    }                                                                  \
  |  | 9205|   672k|    else {                                                             \
  |  | 9206|   672k|        return vis(monostate_val);                                     \
  |  | 9207|   672k|    }
  ------------------
 9248|   672k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 672k]
  ------------------
 9249|   672k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   672k|    }                                                                  \
  |  | 9205|   672k|    else {                                                             \
  |  | 9206|   672k|        return vis(monostate_val);                                     \
  |  | 9207|   672k|    }
  ------------------
 9250|   672k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 672k]
  ------------------
 9251|   672k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   672k|    }                                                                  \
  |  | 9205|   672k|    else {                                                             \
  |  | 9206|   672k|        return vis(monostate_val);                                     \
  |  | 9207|   672k|    }
  ------------------
 9252|   672k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 672k]
  ------------------
 9253|   672k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   672k|    }                                                                  \
  |  | 9205|   672k|    else {                                                             \
  |  | 9206|   672k|        return vis(monostate_val);                                     \
  |  | 9207|   672k|    }
  ------------------
 9254|   672k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 672k]
  ------------------
 9255|   672k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   672k|    }                                                                  \
  |  | 9205|   672k|    else {                                                             \
  |  | 9206|   672k|        return vis(monostate_val);                                     \
  |  | 9207|   672k|    }
  ------------------
 9256|   672k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 672k]
  ------------------
 9257|   672k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   672k|    }                                                                  \
  |  | 9205|   672k|    else {                                                             \
  |  | 9206|   672k|        return vis(monostate_val);                                     \
  |  | 9207|   672k|    }
  ------------------
 9258|   672k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 672k]
  ------------------
 9259|   672k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   672k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   672k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   672k|    }                                                                  \
  |  | 9205|   672k|    else {                                                             \
  |  | 9206|   672k|        return vis(monostate_val);                                     \
  |  | 9207|   672k|    }
  ------------------
 9260|       |
 9261|   672k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 672k]
  ------------------
 9262|   672k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   672k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   672k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 672k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 672k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   672k|            SCN_CLANG_POP
 9279|   672k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   789k|{
 7793|   789k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   789k|    handler.check_args_exhausted();
 7795|   789k|    return handler.get_error();
 7796|   789k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   789k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   789k|    auto begin = format.data();
 7761|   789k|    auto it = begin;
 7762|   789k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  1.51M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 789k, False: 720k]
  ------------------
 7765|   789k|        const auto ch = *it++;
 7766|   789k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 789k, False: 0]
  ------------------
 7767|   789k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   789k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   789k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 69.5k, False: 720k]
  ------------------
 7771|  69.5k|                return;
 7772|  69.5k|            }
 7773|   789k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   789k|    }
 7784|       |
 7785|   720k|    handler.on_literal_text(begin, end);
 7786|   720k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   720k|    {
 8971|   720k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   720k|    static_cast<    \
  |  |  935|   720k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   720k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|   789k|{
 7690|   789k|    struct id_adapter {
 7691|   789k|        constexpr void operator()()
 7692|   789k|        {
 7693|   789k|            arg_id = handler.on_arg_id();
 7694|   789k|        }
 7695|   789k|        constexpr void operator()(std::size_t id)
 7696|   789k|        {
 7697|   789k|            arg_id = handler.on_arg_id(id);
 7698|   789k|        }
 7699|       |
 7700|   789k|        constexpr void on_error(const char* msg)
 7701|   789k|        {
 7702|   789k|            SCN_UNLIKELY_ATTR
 7703|   789k|            handler.on_error(msg);
 7704|   789k|        }
 7705|       |
 7706|   789k|        Handler& handler;
 7707|   789k|        std::size_t arg_id;
 7708|   789k|    };
 7709|       |
 7710|   789k|    ++begin;
 7711|   789k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   789k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 789k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   789k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 789k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   789k|    else {
 7723|   789k|        auto adapter = id_adapter{handler, 0};
 7724|   789k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   789k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   789k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 789k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   789k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 789k, False: 0]
  ------------------
 7735|   789k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   789k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   789k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 789k]
  |  |  |  Branch (865:45): [True: 0, False: 789k]
  |  |  |  Branch (865:45): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   789k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   789k|    }
 7751|   789k|    return begin + 1;
 7752|   789k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   789k|{
 7191|   789k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   789k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 789k, False: 0]
  |  Branch (7192:26): [True: 0, False: 789k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   789k|    handler();
 7197|   789k|    return begin;
 7198|   789k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   789k|        {
 7693|   789k|            arg_id = handler.on_arg_id();
 7694|   789k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   789k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   789k|    {
 7871|   789k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   789k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7605|   789k|{
 7606|   789k|    auto do_presentation = [&]() -> const CharT* {
 7607|   789k|        if (*begin == CharT{'['}) {
 7608|   789k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   789k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   789k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   789k|                return begin;
 7614|   789k|            }
 7615|   789k|            handler.on_character_set_string(set);
 7616|   789k|            return begin;
 7617|   789k|        }
 7618|   789k|        if (*begin == CharT{'/'}) {
 7619|   789k|            return parse_presentation_regex(begin, end, handler);
 7620|   789k|        }
 7621|   789k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   789k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   789k|            handler.on_error("Invalid type specifier in format string");
 7624|   789k|            return begin;
 7625|   789k|        }
 7626|   789k|        handler.on_type(type);
 7627|   789k|        return begin;
 7628|   789k|    };
 7629|       |
 7630|   789k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 789k, False: 0]
  |  Branch (7630:28): [True: 789k, False: 0]
  ------------------
 7631|   789k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 789k, False: 0]
  |  Branch (7631:36): [True: 564k, False: 225k]
  ------------------
 7632|   564k|        return do_presentation();
 7633|   564k|    }
 7634|       |
 7635|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   225k|    begin = parse_align(begin, end, handler);
 7641|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   225k|    begin = parse_width(begin, end, handler);
 7647|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   225k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 225k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   225k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 225k, False: 0]
  ------------------
 7666|   225k|        handler.on_localized();
 7667|   225k|        ++begin;
 7668|   225k|    }
 7669|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   225k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 225k, False: 0]
  |  Branch (7674:25): [True: 0, False: 225k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   225k|    return begin;
 7683|   225k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   564k|    auto do_presentation = [&]() -> const CharT* {
 7607|   564k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 564k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   564k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 564k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   564k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   564k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 564k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   564k|        handler.on_type(type);
 7627|   564k|        return begin;
 7628|   564k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7279|   225k|{
 7280|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   225k|    auto check_align = [](wchar_t ch) {
 7283|   225k|        switch (ch) {
 7284|   225k|            case L'<':
 7285|   225k|                return align_type::left;
 7286|   225k|            case L'>':
 7287|   225k|                return align_type::right;
 7288|   225k|            case L'^':
 7289|   225k|                return align_type::center;
 7290|   225k|            default:
 7291|   225k|                return align_type::none;
 7292|   225k|        }
 7293|   225k|    };
 7294|       |
 7295|   225k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   225k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  |  Branch (865:45): [True: 0, False: 225k]
  |  |  |  Branch (865:45): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7297|   225k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   225k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   225k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   225k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   225k|    const auto begin_before_fill = begin;
 7307|   225k|    begin += potential_fill_len;
 7308|       |
 7309|   225k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 225k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   225k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   225k|    const auto begin_after_fill = begin;
 7315|   225k|    ++begin;
 7316|       |
 7317|   225k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 225k, False: 0]
  ------------------
 7318|   225k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   225k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 225k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   225k|    }
 7326|       |
 7327|   225k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 225k, False: 0]
  ------------------
 7328|   225k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 225k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   225k|        return begin_before_fill;
 7333|   225k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   225k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   450k|    auto check_align = [](wchar_t ch) {
 7283|   450k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 450k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 450k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 450k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   450k|            default:
  ------------------
  |  Branch (7290:13): [True: 450k, False: 0]
  ------------------
 7291|   450k|                return align_type::none;
 7292|   450k|        }
 7293|   450k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7344|   225k|{
 7345|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   225k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 225k, False: 0]
  |  Branch (7347:33): [True: 0, False: 225k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   225k|    return begin;
 7358|   225k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7875|   225k|    {
 7876|   225k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   225k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 225k, False: 0]
  ------------------
 7878|   225k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 225k, False: 0]
  ------------------
 7879|   225k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 225k]
  ------------------
 7880|   225k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   225k|        Handler::on_localized();
 7888|   225k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   789k|{
 9300|   789k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   789k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   789k|{
 9201|   789k|#define SCN_VISIT(Type)                                                \
 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   789k|    }                                                                  \
 9205|   789k|    else {                                                             \
 9206|   789k|        return vis(monostate_val);                                     \
 9207|   789k|    }
 9208|       |
 9209|   789k|    monostate monostate_val{};
 9210|       |
 9211|   789k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 789k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 789k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 789k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 789k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 789k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 789k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 789k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 789k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 789k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 789k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 789k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 789k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 789k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 789k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 789k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   254k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 254k, False: 535k]
  ------------------
 9243|   254k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   254k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   254k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   254k|    }                                                                  \
  |  | 9205|   254k|    else {                                                             \
  |  | 9206|   254k|        return vis(monostate_val);                                     \
  |  | 9207|   254k|    }
  ------------------
 9244|   520k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 266k, False: 523k]
  ------------------
 9245|   520k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   520k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   520k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   520k|    }                                                                  \
  |  | 9205|   520k|    else {                                                             \
  |  | 9206|   520k|        return vis(monostate_val);                                     \
  |  | 9207|   520k|    }
  ------------------
 9246|   789k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 269k, False: 520k]
  ------------------
 9247|   789k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   789k|    }                                                                  \
  |  | 9205|   789k|    else {                                                             \
  |  | 9206|   789k|        return vis(monostate_val);                                     \
  |  | 9207|   789k|    }
  ------------------
 9248|   789k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 789k]
  ------------------
 9249|   789k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   789k|    }                                                                  \
  |  | 9205|   789k|    else {                                                             \
  |  | 9206|   789k|        return vis(monostate_val);                                     \
  |  | 9207|   789k|    }
  ------------------
 9250|   789k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 789k]
  ------------------
 9251|   789k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   789k|    }                                                                  \
  |  | 9205|   789k|    else {                                                             \
  |  | 9206|   789k|        return vis(monostate_val);                                     \
  |  | 9207|   789k|    }
  ------------------
 9252|   789k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 789k]
  ------------------
 9253|   789k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   789k|    }                                                                  \
  |  | 9205|   789k|    else {                                                             \
  |  | 9206|   789k|        return vis(monostate_val);                                     \
  |  | 9207|   789k|    }
  ------------------
 9254|   789k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 789k]
  ------------------
 9255|   789k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   789k|    }                                                                  \
  |  | 9205|   789k|    else {                                                             \
  |  | 9206|   789k|        return vis(monostate_val);                                     \
  |  | 9207|   789k|    }
  ------------------
 9256|   789k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 789k]
  ------------------
 9257|   789k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   789k|    }                                                                  \
  |  | 9205|   789k|    else {                                                             \
  |  | 9206|   789k|        return vis(monostate_val);                                     \
  |  | 9207|   789k|    }
  ------------------
 9258|   789k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 789k]
  ------------------
 9259|   789k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   789k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   789k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   789k|    }                                                                  \
  |  | 9205|   789k|    else {                                                             \
  |  | 9206|   789k|        return vis(monostate_val);                                     \
  |  | 9207|   789k|    }
  ------------------
 9260|       |
 9261|   789k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 789k]
  ------------------
 9262|   789k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   789k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   789k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 789k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 789k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   789k|            SCN_CLANG_POP
 9279|   789k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  90.4k|    {
 4352|  90.4k|        return sync(0);
 4353|  90.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|  1.11M|    {
 6177|  1.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  1.11M|        return static_cast<std::size_t>(m_desc &
 6182|  1.11M|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  1.11M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|  2.22M|    {
 6203|  2.22M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  2.22M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|  1.11M|    {
 6145|  1.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  1.11M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  1.11M|        const auto t = type(id);
 6157|  1.11M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.11M|        basic_scan_arg<Context> arg;
 6162|  1.11M|        arg.m_type = t;
 6163|  1.11M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 1.11M, False: 0]
  ------------------
 6164|  1.11M|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  1.11M|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  1.11M|        return arg;
 6170|  1.11M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|  1.11M|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  1.11M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  1.11M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  1.11M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  1.11M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|  1.11M|    {
 6207|  1.11M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  1.11M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|  2.11M|    {
 5961|  2.11M|        return m_type != detail::arg_type::none_type;
 5962|  2.11M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   165k|{
 9300|   165k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   165k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   165k|{
 9201|   165k|#define SCN_VISIT(Type)                                                \
 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   165k|    }                                                                  \
 9205|   165k|    else {                                                             \
 9206|   165k|        return vis(monostate_val);                                     \
 9207|   165k|    }
 9208|       |
 9209|   165k|    monostate monostate_val{};
 9210|       |
 9211|   165k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 165k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 165k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 165k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 165k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 165k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 165k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 165k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 165k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 165k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 165k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 165k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 165k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 165k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 165k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 165k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|  47.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 47.4k, False: 117k]
  ------------------
 9243|  47.4k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  47.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  47.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  47.4k|    }                                                                  \
  |  | 9205|  47.4k|    else {                                                             \
  |  | 9206|  47.4k|        return vis(monostate_val);                                     \
  |  | 9207|  47.4k|    }
  ------------------
 9244|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 57.9k, False: 107k]
  ------------------
 9245|   105k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   105k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   105k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   105k|    }                                                                  \
  |  | 9205|   105k|    else {                                                             \
  |  | 9206|   105k|        return vis(monostate_val);                                     \
  |  | 9207|   105k|    }
  ------------------
 9246|   165k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 59.6k, False: 105k]
  ------------------
 9247|   165k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   165k|    }                                                                  \
  |  | 9205|   165k|    else {                                                             \
  |  | 9206|   165k|        return vis(monostate_val);                                     \
  |  | 9207|   165k|    }
  ------------------
 9248|   165k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 165k]
  ------------------
 9249|   165k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   165k|    }                                                                  \
  |  | 9205|   165k|    else {                                                             \
  |  | 9206|   165k|        return vis(monostate_val);                                     \
  |  | 9207|   165k|    }
  ------------------
 9250|   165k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 165k]
  ------------------
 9251|   165k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   165k|    }                                                                  \
  |  | 9205|   165k|    else {                                                             \
  |  | 9206|   165k|        return vis(monostate_val);                                     \
  |  | 9207|   165k|    }
  ------------------
 9252|   165k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 165k]
  ------------------
 9253|   165k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   165k|    }                                                                  \
  |  | 9205|   165k|    else {                                                             \
  |  | 9206|   165k|        return vis(monostate_val);                                     \
  |  | 9207|   165k|    }
  ------------------
 9254|   165k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 165k]
  ------------------
 9255|   165k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   165k|    }                                                                  \
  |  | 9205|   165k|    else {                                                             \
  |  | 9206|   165k|        return vis(monostate_val);                                     \
  |  | 9207|   165k|    }
  ------------------
 9256|   165k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 165k]
  ------------------
 9257|   165k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   165k|    }                                                                  \
  |  | 9205|   165k|    else {                                                             \
  |  | 9206|   165k|        return vis(monostate_val);                                     \
  |  | 9207|   165k|    }
  ------------------
 9258|   165k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 165k]
  ------------------
 9259|   165k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   165k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   165k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   165k|    }                                                                  \
  |  | 9205|   165k|    else {                                                             \
  |  | 9206|   165k|        return vis(monostate_val);                                     \
  |  | 9207|   165k|    }
  ------------------
 9260|       |
 9261|   165k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 165k]
  ------------------
 9262|   165k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   165k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   165k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 165k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 165k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   165k|            SCN_CLANG_POP
 9279|   165k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  3.00M|{
 6006|  3.00M|    return arg.m_type;
 6007|  3.00M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  1.22M|{
 6018|  1.22M|    return arg.m_value;
 6019|  1.22M|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   892k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   892k|    {
 6258|   892k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   445k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   445k|    static_cast<    \
  |  |  935|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   445k|    {
 8934|   445k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   446k|    {
 3075|   446k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   446k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   446k|    {
 3041|   446k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   446k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   446k|{
 7793|   446k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   446k|    handler.check_args_exhausted();
 7795|   446k|    return handler.get_error();
 7796|   446k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   446k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   446k|    auto begin = format.data();
 7761|   446k|    auto it = begin;
 7762|   446k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   753k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 446k, False: 307k]
  ------------------
 7765|   446k|        const auto ch = *it++;
 7766|   446k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 446k, False: 0]
  ------------------
 7767|   446k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   446k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   446k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 139k, False: 307k]
  ------------------
 7771|   139k|                return;
 7772|   139k|            }
 7773|   446k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   446k|    }
 7784|       |
 7785|   307k|    handler.on_literal_text(begin, end);
 7786|   307k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   446k|{
 7690|   446k|    struct id_adapter {
 7691|   446k|        constexpr void operator()()
 7692|   446k|        {
 7693|   446k|            arg_id = handler.on_arg_id();
 7694|   446k|        }
 7695|   446k|        constexpr void operator()(std::size_t id)
 7696|   446k|        {
 7697|   446k|            arg_id = handler.on_arg_id(id);
 7698|   446k|        }
 7699|       |
 7700|   446k|        constexpr void on_error(const char* msg)
 7701|   446k|        {
 7702|   446k|            SCN_UNLIKELY_ATTR
 7703|   446k|            handler.on_error(msg);
 7704|   446k|        }
 7705|       |
 7706|   446k|        Handler& handler;
 7707|   446k|        std::size_t arg_id;
 7708|   446k|    };
 7709|       |
 7710|   446k|    ++begin;
 7711|   446k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   446k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 446k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   446k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 446k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   446k|    else {
 7723|   446k|        auto adapter = id_adapter{handler, 0};
 7724|   446k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   446k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   446k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 446k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   446k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 446k, False: 0]
  ------------------
 7735|   446k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   446k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   446k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   892k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 446k]
  |  |  |  Branch (865:45): [True: 0, False: 446k]
  |  |  |  Branch (865:45): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   446k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   446k|    }
 7751|   446k|    return begin + 1;
 7752|   446k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   892k|    {
 8832|   892k|        return m_args.get(id);
 8833|   892k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   892k|    {
 6286|   892k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   892k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 892k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   892k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   892k|        do_check_arg_id(id);
 6294|   892k|        return id;
 6295|   892k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   892k|{
 6806|   892k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   892k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   892k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   446k|{
 7191|   446k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   446k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 446k, False: 0]
  |  Branch (7192:26): [True: 0, False: 446k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   446k|    handler();
 7197|   446k|    return begin;
 7198|   446k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   446k|        {
 7693|   446k|            arg_id = handler.on_arg_id();
 7694|   446k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   892k|    {
 6281|   892k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   892k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   610k|{
 4691|   610k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 610k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   610k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   610k|                            ranges::default_sentinel};
 4697|   610k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   610k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   610k|    {
 4455|   610k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   610k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   610k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   610k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   610k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   610k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   610k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  1.78M|    {
 6270|  1.78M|        return m_format.data();
 6271|  1.78M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   446k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   446k|    {
 7871|   446k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   446k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   446k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   446k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|   446k|{
 7606|   446k|    auto do_presentation = [&]() -> const CharT* {
 7607|   446k|        if (*begin == CharT{'['}) {
 7608|   446k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   446k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   446k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   446k|                return begin;
 7614|   446k|            }
 7615|   446k|            handler.on_character_set_string(set);
 7616|   446k|            return begin;
 7617|   446k|        }
 7618|   446k|        if (*begin == CharT{'/'}) {
 7619|   446k|            return parse_presentation_regex(begin, end, handler);
 7620|   446k|        }
 7621|   446k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   446k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   446k|            handler.on_error("Invalid type specifier in format string");
 7624|   446k|            return begin;
 7625|   446k|        }
 7626|   446k|        handler.on_type(type);
 7627|   446k|        return begin;
 7628|   446k|    };
 7629|       |
 7630|   446k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 446k, False: 0]
  |  Branch (7630:28): [True: 446k, False: 0]
  ------------------
 7631|   446k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 446k, False: 0]
  |  Branch (7631:36): [True: 336k, False: 110k]
  ------------------
 7632|   336k|        return do_presentation();
 7633|   336k|    }
 7634|       |
 7635|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   110k|    begin = parse_align(begin, end, handler);
 7641|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   110k|    begin = parse_width(begin, end, handler);
 7647|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   110k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 110k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   110k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 110k, False: 0]
  ------------------
 7666|   110k|        handler.on_localized();
 7667|   110k|        ++begin;
 7668|   110k|    }
 7669|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   110k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 110k, False: 0]
  |  Branch (7674:25): [True: 0, False: 110k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   110k|    return begin;
 7683|   110k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|   892k|{
 7255|   892k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 672k, False: 219k]
  |  Branch (7255:33): [True: 672k, False: 0]
  ------------------
 7256|   892k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 219k, False: 0]
  |  Branch (7256:33): [True: 219k, False: 0]
  ------------------
 7257|   892k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   336k|    auto do_presentation = [&]() -> const CharT* {
 7607|   336k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 336k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   336k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 336k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   336k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   336k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 336k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   336k|        handler.on_type(type);
 7627|   336k|        return begin;
 7628|   336k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|   672k|{
 7203|   672k|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 672k]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 672k]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 672k]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 672k]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 672k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 672k]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 672k]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 672k]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 672k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 672k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|   243k|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 243k, False: 428k]
  ------------------
 7222|   243k|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 672k]
  ------------------
 7223|   243k|            return presentation_type::float_hex;
 7224|  57.8k|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 57.8k, False: 614k]
  ------------------
 7225|  57.8k|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 672k]
  ------------------
 7226|  57.8k|            return presentation_type::float_scientific;
 7227|   168k|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 168k, False: 504k]
  ------------------
 7228|   168k|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 672k]
  ------------------
 7229|   168k|            return presentation_type::float_fixed;
 7230|   202k|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 202k, False: 469k]
  ------------------
 7231|   202k|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 672k]
  ------------------
 7232|   202k|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 672k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 672k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 672k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 672k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 672k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 672k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|      0|        default:
  ------------------
  |  Branch (7247:9): [True: 0, False: 672k]
  ------------------
 7248|      0|            return presentation_type::none;
 7249|   672k|    }
 7250|   672k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|   110k|{
 7280|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   110k|    auto check_align = [](wchar_t ch) {
 7283|   110k|        switch (ch) {
 7284|   110k|            case L'<':
 7285|   110k|                return align_type::left;
 7286|   110k|            case L'>':
 7287|   110k|                return align_type::right;
 7288|   110k|            case L'^':
 7289|   110k|                return align_type::center;
 7290|   110k|            default:
 7291|   110k|                return align_type::none;
 7292|   110k|        }
 7293|   110k|    };
 7294|       |
 7295|   110k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   110k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 110k]
  |  |  |  Branch (865:45): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7297|   110k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   110k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   110k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   110k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   110k|    const auto begin_before_fill = begin;
 7307|   110k|    begin += potential_fill_len;
 7308|       |
 7309|   110k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 110k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   110k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   110k|    const auto begin_after_fill = begin;
 7315|   110k|    ++begin;
 7316|       |
 7317|   110k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 110k, False: 0]
  ------------------
 7318|   110k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   110k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 110k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   110k|    }
 7326|       |
 7327|   110k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 110k, False: 0]
  ------------------
 7328|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 110k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   110k|        return begin_before_fill;
 7333|   110k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   110k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|   219k|{
 7262|   219k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   219k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   219k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|   219k|    if constexpr (sizeof(CharT) != 1) {
 7264|   219k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|   219k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   220k|    auto check_align = [](wchar_t ch) {
 7283|   220k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 220k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 220k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 220k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   220k|            default:
  ------------------
  |  Branch (7290:13): [True: 220k, False: 0]
  ------------------
 7291|   220k|                return align_type::none;
 7292|   220k|        }
 7293|   220k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|   110k|{
 7345|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   110k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 110k, False: 0]
  |  Branch (7347:33): [True: 0, False: 110k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   110k|    return begin;
 7358|   110k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|   110k|    {
 7876|   110k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   110k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 110k, False: 0]
  ------------------
 7878|   110k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 110k, False: 0]
  ------------------
 7879|   110k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 110k]
  ------------------
 7880|   110k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   110k|        Handler::on_localized();
 7888|   110k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   446k|{
 9300|   446k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   446k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   446k|{
 9201|   446k|#define SCN_VISIT(Type)                                                \
 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   446k|    }                                                                  \
 9205|   446k|    else {                                                             \
 9206|   446k|        return vis(monostate_val);                                     \
 9207|   446k|    }
 9208|       |
 9209|   446k|    monostate monostate_val{};
 9210|       |
 9211|   446k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 446k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 446k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 446k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 446k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 446k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 446k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 446k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 446k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 446k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 446k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 446k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 446k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 446k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 446k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 446k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   138k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 138k, False: 307k]
  ------------------
 9243|   138k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   138k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   138k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   138k|    }                                                                  \
  |  | 9205|   138k|    else {                                                             \
  |  | 9206|   138k|        return vis(monostate_val);                                     \
  |  | 9207|   138k|    }
  ------------------
 9244|   291k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 152k, False: 293k]
  ------------------
 9245|   291k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   291k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   291k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   291k|    }                                                                  \
  |  | 9205|   291k|    else {                                                             \
  |  | 9206|   291k|        return vis(monostate_val);                                     \
  |  | 9207|   291k|    }
  ------------------
 9246|   446k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 155k, False: 291k]
  ------------------
 9247|   446k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   446k|    }                                                                  \
  |  | 9205|   446k|    else {                                                             \
  |  | 9206|   446k|        return vis(monostate_val);                                     \
  |  | 9207|   446k|    }
  ------------------
 9248|   446k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 446k]
  ------------------
 9249|   446k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   446k|    }                                                                  \
  |  | 9205|   446k|    else {                                                             \
  |  | 9206|   446k|        return vis(monostate_val);                                     \
  |  | 9207|   446k|    }
  ------------------
 9250|   446k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 446k]
  ------------------
 9251|   446k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   446k|    }                                                                  \
  |  | 9205|   446k|    else {                                                             \
  |  | 9206|   446k|        return vis(monostate_val);                                     \
  |  | 9207|   446k|    }
  ------------------
 9252|   446k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 446k]
  ------------------
 9253|   446k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   446k|    }                                                                  \
  |  | 9205|   446k|    else {                                                             \
  |  | 9206|   446k|        return vis(monostate_val);                                     \
  |  | 9207|   446k|    }
  ------------------
 9254|   446k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 446k]
  ------------------
 9255|   446k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   446k|    }                                                                  \
  |  | 9205|   446k|    else {                                                             \
  |  | 9206|   446k|        return vis(monostate_val);                                     \
  |  | 9207|   446k|    }
  ------------------
 9256|   446k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 446k]
  ------------------
 9257|   446k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   446k|    }                                                                  \
  |  | 9205|   446k|    else {                                                             \
  |  | 9206|   446k|        return vis(monostate_val);                                     \
  |  | 9207|   446k|    }
  ------------------
 9258|   446k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 446k]
  ------------------
 9259|   446k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   446k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   446k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   446k|    }                                                                  \
  |  | 9205|   446k|    else {                                                             \
  |  | 9206|   446k|        return vis(monostate_val);                                     \
  |  | 9207|   446k|    }
  ------------------
 9260|       |
 9261|   446k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 446k]
  ------------------
 9262|   446k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   446k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   446k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 446k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 446k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   446k|            SCN_CLANG_POP
 9279|   446k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|   164k|{
 9300|   164k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   164k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   164k|{
 9201|   164k|#define SCN_VISIT(Type)                                                \
 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   164k|    }                                                                  \
 9205|   164k|    else {                                                             \
 9206|   164k|        return vis(monostate_val);                                     \
 9207|   164k|    }
 9208|       |
 9209|   164k|    monostate monostate_val{};
 9210|       |
 9211|   164k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 164k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 164k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 164k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 164k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 164k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 164k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 164k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 164k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 164k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 164k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 164k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 164k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 164k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 164k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 164k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|  47.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 47.4k, False: 117k]
  ------------------
 9243|  47.4k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  47.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  47.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  47.4k|    }                                                                  \
  |  | 9205|  47.4k|    else {                                                             \
  |  | 9206|  47.4k|        return vis(monostate_val);                                     \
  |  | 9207|  47.4k|    }
  ------------------
 9244|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 57.8k, False: 107k]
  ------------------
 9245|   105k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   105k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   105k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   105k|    }                                                                  \
  |  | 9205|   105k|    else {                                                             \
  |  | 9206|   105k|        return vis(monostate_val);                                     \
  |  | 9207|   105k|    }
  ------------------
 9246|   164k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 59.6k, False: 105k]
  ------------------
 9247|   164k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   164k|    }                                                                  \
  |  | 9205|   164k|    else {                                                             \
  |  | 9206|   164k|        return vis(monostate_val);                                     \
  |  | 9207|   164k|    }
  ------------------
 9248|   164k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 164k]
  ------------------
 9249|   164k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   164k|    }                                                                  \
  |  | 9205|   164k|    else {                                                             \
  |  | 9206|   164k|        return vis(monostate_val);                                     \
  |  | 9207|   164k|    }
  ------------------
 9250|   164k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 164k]
  ------------------
 9251|   164k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   164k|    }                                                                  \
  |  | 9205|   164k|    else {                                                             \
  |  | 9206|   164k|        return vis(monostate_val);                                     \
  |  | 9207|   164k|    }
  ------------------
 9252|   164k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 164k]
  ------------------
 9253|   164k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   164k|    }                                                                  \
  |  | 9205|   164k|    else {                                                             \
  |  | 9206|   164k|        return vis(monostate_val);                                     \
  |  | 9207|   164k|    }
  ------------------
 9254|   164k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 164k]
  ------------------
 9255|   164k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   164k|    }                                                                  \
  |  | 9205|   164k|    else {                                                             \
  |  | 9206|   164k|        return vis(monostate_val);                                     \
  |  | 9207|   164k|    }
  ------------------
 9256|   164k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 164k]
  ------------------
 9257|   164k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   164k|    }                                                                  \
  |  | 9205|   164k|    else {                                                             \
  |  | 9206|   164k|        return vis(monostate_val);                                     \
  |  | 9207|   164k|    }
  ------------------
 9258|   164k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 164k]
  ------------------
 9259|   164k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   164k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   164k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   164k|    }                                                                  \
  |  | 9205|   164k|    else {                                                             \
  |  | 9206|   164k|        return vis(monostate_val);                                     \
  |  | 9207|   164k|    }
  ------------------
 9260|       |
 9261|   164k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 164k]
  ------------------
 9262|   164k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   164k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   164k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 164k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 164k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   164k|            SCN_CLANG_POP
 9279|   164k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   445k|{
 7793|   445k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   445k|    handler.check_args_exhausted();
 7795|   445k|    return handler.get_error();
 7796|   445k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   445k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   445k|    auto begin = format.data();
 7761|   445k|    auto it = begin;
 7762|   445k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   752k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 445k, False: 306k]
  ------------------
 7765|   445k|        const auto ch = *it++;
 7766|   445k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 445k, False: 0]
  ------------------
 7767|   445k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   445k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   445k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 139k, False: 306k]
  ------------------
 7771|   139k|                return;
 7772|   139k|            }
 7773|   445k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   445k|    }
 7784|       |
 7785|   306k|    handler.on_literal_text(begin, end);
 7786|   306k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|   306k|    {
 8971|   306k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   306k|    static_cast<    \
  |  |  935|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   306k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|   445k|{
 7690|   445k|    struct id_adapter {
 7691|   445k|        constexpr void operator()()
 7692|   445k|        {
 7693|   445k|            arg_id = handler.on_arg_id();
 7694|   445k|        }
 7695|   445k|        constexpr void operator()(std::size_t id)
 7696|   445k|        {
 7697|   445k|            arg_id = handler.on_arg_id(id);
 7698|   445k|        }
 7699|       |
 7700|   445k|        constexpr void on_error(const char* msg)
 7701|   445k|        {
 7702|   445k|            SCN_UNLIKELY_ATTR
 7703|   445k|            handler.on_error(msg);
 7704|   445k|        }
 7705|       |
 7706|   445k|        Handler& handler;
 7707|   445k|        std::size_t arg_id;
 7708|   445k|    };
 7709|       |
 7710|   445k|    ++begin;
 7711|   445k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   445k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 445k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   445k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 445k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   445k|    else {
 7723|   445k|        auto adapter = id_adapter{handler, 0};
 7724|   445k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   445k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   445k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 445k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   445k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 445k, False: 0]
  ------------------
 7735|   445k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   445k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   445k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   891k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 445k]
  |  |  |  Branch (865:45): [True: 0, False: 445k]
  |  |  |  Branch (865:45): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   445k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   445k|    }
 7751|   445k|    return begin + 1;
 7752|   445k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   445k|{
 7191|   445k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   445k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 445k, False: 0]
  |  Branch (7192:26): [True: 0, False: 445k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   445k|    handler();
 7197|   445k|    return begin;
 7198|   445k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   445k|        {
 7693|   445k|            arg_id = handler.on_arg_id();
 7694|   445k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   445k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   445k|    {
 7871|   445k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   445k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7605|   445k|{
 7606|   445k|    auto do_presentation = [&]() -> const CharT* {
 7607|   445k|        if (*begin == CharT{'['}) {
 7608|   445k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   445k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   445k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   445k|                return begin;
 7614|   445k|            }
 7615|   445k|            handler.on_character_set_string(set);
 7616|   445k|            return begin;
 7617|   445k|        }
 7618|   445k|        if (*begin == CharT{'/'}) {
 7619|   445k|            return parse_presentation_regex(begin, end, handler);
 7620|   445k|        }
 7621|   445k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   445k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   445k|            handler.on_error("Invalid type specifier in format string");
 7624|   445k|            return begin;
 7625|   445k|        }
 7626|   445k|        handler.on_type(type);
 7627|   445k|        return begin;
 7628|   445k|    };
 7629|       |
 7630|   445k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 445k, False: 0]
  |  Branch (7630:28): [True: 445k, False: 0]
  ------------------
 7631|   445k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 445k, False: 0]
  |  Branch (7631:36): [True: 336k, False: 109k]
  ------------------
 7632|   336k|        return do_presentation();
 7633|   336k|    }
 7634|       |
 7635|   109k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   109k|    begin = parse_align(begin, end, handler);
 7641|   109k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   109k|    begin = parse_width(begin, end, handler);
 7647|   109k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   109k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 109k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   109k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 109k, False: 0]
  ------------------
 7666|   109k|        handler.on_localized();
 7667|   109k|        ++begin;
 7668|   109k|    }
 7669|   109k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   109k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 109k, False: 0]
  |  Branch (7674:25): [True: 0, False: 109k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   109k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   109k|    return begin;
 7683|   109k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   336k|    auto do_presentation = [&]() -> const CharT* {
 7607|   336k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 336k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   336k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 336k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   336k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   336k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 336k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   336k|        handler.on_type(type);
 7627|   336k|        return begin;
 7628|   336k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7279|   109k|{
 7280|   109k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   109k|    auto check_align = [](wchar_t ch) {
 7283|   109k|        switch (ch) {
 7284|   109k|            case L'<':
 7285|   109k|                return align_type::left;
 7286|   109k|            case L'>':
 7287|   109k|                return align_type::right;
 7288|   109k|            case L'^':
 7289|   109k|                return align_type::center;
 7290|   109k|            default:
 7291|   109k|                return align_type::none;
 7292|   109k|        }
 7293|   109k|    };
 7294|       |
 7295|   109k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   109k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  |  Branch (865:45): [True: 0, False: 109k]
  |  |  |  Branch (865:45): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 7297|   109k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   109k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   109k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   109k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   109k|    const auto begin_before_fill = begin;
 7307|   109k|    begin += potential_fill_len;
 7308|       |
 7309|   109k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 109k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   109k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   109k|    const auto begin_after_fill = begin;
 7315|   109k|    ++begin;
 7316|       |
 7317|   109k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 109k, False: 0]
  ------------------
 7318|   109k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   109k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 109k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   109k|    }
 7326|       |
 7327|   109k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 109k, False: 0]
  ------------------
 7328|   109k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 109k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   109k|        return begin_before_fill;
 7333|   109k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   109k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   219k|    auto check_align = [](wchar_t ch) {
 7283|   219k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 219k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 219k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 219k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   219k|            default:
  ------------------
  |  Branch (7290:13): [True: 219k, False: 0]
  ------------------
 7291|   219k|                return align_type::none;
 7292|   219k|        }
 7293|   219k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7344|   109k|{
 7345|   109k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   109k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 109k, False: 0]
  |  Branch (7347:33): [True: 0, False: 109k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   109k|    return begin;
 7358|   109k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7875|   109k|    {
 7876|   109k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   109k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 109k, False: 0]
  ------------------
 7878|   109k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 109k, False: 0]
  ------------------
 7879|   109k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 109k]
  ------------------
 7880|   109k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   109k|        Handler::on_localized();
 7888|   109k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   445k|{
 9300|   445k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   445k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   445k|{
 9201|   445k|#define SCN_VISIT(Type)                                                \
 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   445k|    }                                                                  \
 9205|   445k|    else {                                                             \
 9206|   445k|        return vis(monostate_val);                                     \
 9207|   445k|    }
 9208|       |
 9209|   445k|    monostate monostate_val{};
 9210|       |
 9211|   445k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 445k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 445k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 445k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 445k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 445k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 445k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 445k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 445k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 445k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 445k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 445k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 445k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 445k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 445k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 445k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   138k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 138k, False: 307k]
  ------------------
 9243|   138k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   138k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   138k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   138k|    }                                                                  \
  |  | 9205|   138k|    else {                                                             \
  |  | 9206|   138k|        return vis(monostate_val);                                     \
  |  | 9207|   138k|    }
  ------------------
 9244|   291k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 152k, False: 293k]
  ------------------
 9245|   291k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   291k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   291k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   291k|    }                                                                  \
  |  | 9205|   291k|    else {                                                             \
  |  | 9206|   291k|        return vis(monostate_val);                                     \
  |  | 9207|   291k|    }
  ------------------
 9246|   445k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 154k, False: 291k]
  ------------------
 9247|   445k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   445k|    }                                                                  \
  |  | 9205|   445k|    else {                                                             \
  |  | 9206|   445k|        return vis(monostate_val);                                     \
  |  | 9207|   445k|    }
  ------------------
 9248|   445k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 445k]
  ------------------
 9249|   445k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   445k|    }                                                                  \
  |  | 9205|   445k|    else {                                                             \
  |  | 9206|   445k|        return vis(monostate_val);                                     \
  |  | 9207|   445k|    }
  ------------------
 9250|   445k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 445k]
  ------------------
 9251|   445k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   445k|    }                                                                  \
  |  | 9205|   445k|    else {                                                             \
  |  | 9206|   445k|        return vis(monostate_val);                                     \
  |  | 9207|   445k|    }
  ------------------
 9252|   445k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 445k]
  ------------------
 9253|   445k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   445k|    }                                                                  \
  |  | 9205|   445k|    else {                                                             \
  |  | 9206|   445k|        return vis(monostate_val);                                     \
  |  | 9207|   445k|    }
  ------------------
 9254|   445k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 445k]
  ------------------
 9255|   445k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   445k|    }                                                                  \
  |  | 9205|   445k|    else {                                                             \
  |  | 9206|   445k|        return vis(monostate_val);                                     \
  |  | 9207|   445k|    }
  ------------------
 9256|   445k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 445k]
  ------------------
 9257|   445k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   445k|    }                                                                  \
  |  | 9205|   445k|    else {                                                             \
  |  | 9206|   445k|        return vis(monostate_val);                                     \
  |  | 9207|   445k|    }
  ------------------
 9258|   445k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 445k]
  ------------------
 9259|   445k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   445k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   445k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   445k|    }                                                                  \
  |  | 9205|   445k|    else {                                                             \
  |  | 9206|   445k|        return vis(monostate_val);                                     \
  |  | 9207|   445k|    }
  ------------------
 9260|       |
 9261|   445k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 445k]
  ------------------
 9262|   445k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   445k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   445k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 445k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 445k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   445k|            SCN_CLANG_POP
 9279|   445k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   180k|    {
 4352|   180k|        return sync(0);
 4353|   180k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|   196k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|   109k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  85.1k|{
   89|  85.1k|    auto result = make_scan_result<Source, Args...>();
   90|  85.1k|    fill_scan_result(result,
   91|  85.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  85.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  85.1k|    return result;
   94|  85.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   278k|{
   44|   278k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   278k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  85.1k|{
  131|  85.1k|    auto result = make_scan_result<Source, Args...>();
  132|  85.1k|    fill_scan_result(result,
  133|  85.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  85.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  85.1k|    return result;
  136|  85.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   278k|{
   60|   278k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   278k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  55.0k|{
   72|  55.0k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.0k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  95.6k|{
   89|  95.6k|    auto result = make_scan_result<Source, Args...>();
   90|  95.6k|    fill_scan_result(result,
   91|  95.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  95.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  95.6k|    return result;
   94|  95.6k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  95.6k|{
  131|  95.6k|    auto result = make_scan_result<Source, Args...>();
  132|  95.6k|    fill_scan_result(result,
  133|  95.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  95.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  95.6k|    return result;
  136|  95.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.3k|{
  171|  19.3k|    auto result = make_scan_result<Source, T>();
  172|  19.3k|    fill_scan_result(
  173|  19.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.3k|    return result;
  176|  19.3k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  97.3k|{
   89|  97.3k|    auto result = make_scan_result<Source, Args...>();
   90|  97.3k|    fill_scan_result(result,
   91|  97.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.3k|    return result;
   94|  97.3k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  97.3k|{
  131|  97.3k|    auto result = make_scan_result<Source, Args...>();
  132|  97.3k|    fill_scan_result(result,
  133|  97.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.3k|    return result;
  136|  97.3k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.8k|{
  171|  19.8k|    auto result = make_scan_result<Source, T>();
  172|  19.8k|    fill_scan_result(
  173|  19.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.8k|    return result;
  176|  19.8k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  85.0k|{
   89|  85.0k|    auto result = make_scan_result<Source, Args...>();
   90|  85.0k|    fill_scan_result(result,
   91|  85.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  85.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  85.0k|    return result;
   94|  85.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   277k|{
   44|   277k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   277k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  85.0k|{
  131|  85.0k|    auto result = make_scan_result<Source, Args...>();
  132|  85.0k|    fill_scan_result(result,
  133|  85.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  85.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  85.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  85.0k|    return result;
  136|  85.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   277k|{
   60|   277k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   277k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  54.9k|{
   72|  54.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  54.9k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  95.5k|{
   89|  95.5k|    auto result = make_scan_result<Source, Args...>();
   90|  95.5k|    fill_scan_result(result,
   91|  95.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  95.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  95.5k|    return result;
   94|  95.5k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  95.5k|{
  131|  95.5k|    auto result = make_scan_result<Source, Args...>();
  132|  95.5k|    fill_scan_result(result,
  133|  95.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  95.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  95.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  95.5k|    return result;
  136|  95.5k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.2k|{
  171|  19.2k|    auto result = make_scan_result<Source, T>();
  172|  19.2k|    fill_scan_result(
  173|  19.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.2k|    return result;
  176|  19.2k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  97.3k|{
   89|  97.3k|    auto result = make_scan_result<Source, Args...>();
   90|  97.3k|    fill_scan_result(result,
   91|  97.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.3k|    return result;
   94|  97.3k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  97.3k|{
  131|  97.3k|    auto result = make_scan_result<Source, Args...>();
  132|  97.3k|    fill_scan_result(result,
  133|  97.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.3k|    return result;
  136|  97.3k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.8k|{
  171|  19.8k|    auto result = make_scan_result<Source, T>();
  172|  19.8k|    fill_scan_result(
  173|  19.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.8k|    return result;
  176|  19.8k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.48M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.48M|{
  309|  1.48M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.48M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   624k|{
  315|   624k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   624k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 312k, False: 312k]
  ------------------
  317|   624k|                    : std::locale{};
  318|   624k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   618k|{
  895|   618k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   618k|                                  m_nan_payload_buffer, value);
  897|   618k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   618k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 602k, False: 16.1k]
  |  |  ------------------
  ------------------
  898|   602k|        value = this->setsign(value);
  899|   602k|        return n;
  900|   602k|    }
  901|       |
  902|  16.1k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 4.61k, False: 11.5k]
  ------------------
  903|  16.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 1.04k, False: 3.56k]
  ------------------
  904|  1.04k|        return detail::unexpected_scan_error(
  905|  1.04k|            scan_error::value_negative_overflow, n.error().msg());
  906|  1.04k|    }
  907|  15.1k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 919, False: 14.2k]
  ------------------
  908|  15.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 110, False: 809]
  ------------------
  909|    110|        return detail::unexpected_scan_error(
  910|    110|            scan_error::value_negative_underflow, n.error().msg());
  911|    110|    }
  912|  15.0k|    return n;
  913|  15.1k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   285k|{
  895|   285k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   285k|                                  m_nan_payload_buffer, value);
  897|   285k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   285k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 251k, False: 33.9k]
  |  |  ------------------
  ------------------
  898|   251k|        value = this->setsign(value);
  899|   251k|        return n;
  900|   251k|    }
  901|       |
  902|  33.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 2.90k, False: 31.0k]
  ------------------
  903|  33.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 100, False: 2.80k]
  ------------------
  904|    100|        return detail::unexpected_scan_error(
  905|    100|            scan_error::value_negative_overflow, n.error().msg());
  906|    100|    }
  907|  33.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 812, False: 33.0k]
  ------------------
  908|  33.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 14, False: 798]
  ------------------
  909|     14|        return detail::unexpected_scan_error(
  910|     14|            scan_error::value_negative_underflow, n.error().msg());
  911|     14|    }
  912|  33.8k|    return n;
  913|  33.8k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   644k|{
  895|   644k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   644k|                                  m_nan_payload_buffer, value);
  897|   644k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   644k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 630k, False: 13.8k]
  |  |  ------------------
  ------------------
  898|   630k|        value = this->setsign(value);
  899|   630k|        return n;
  900|   630k|    }
  901|       |
  902|  13.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 2.37k, False: 11.4k]
  ------------------
  903|  13.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 586, False: 1.78k]
  ------------------
  904|    586|        return detail::unexpected_scan_error(
  905|    586|            scan_error::value_negative_overflow, n.error().msg());
  906|    586|    }
  907|  13.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 300, False: 12.9k]
  ------------------
  908|  13.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 82, False: 218]
  ------------------
  909|     82|        return detail::unexpected_scan_error(
  910|     82|            scan_error::value_negative_underflow, n.error().msg());
  911|     82|    }
  912|  13.1k|    return n;
  913|  13.2k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   332k|{
  895|   332k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   332k|                                  m_nan_payload_buffer, value);
  897|   332k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   332k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 300k, False: 32.6k]
  |  |  ------------------
  ------------------
  898|   300k|        value = this->setsign(value);
  899|   300k|        return n;
  900|   300k|    }
  901|       |
  902|  32.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 1.63k, False: 31.0k]
  ------------------
  903|  32.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 100, False: 1.53k]
  ------------------
  904|    100|        return detail::unexpected_scan_error(
  905|    100|            scan_error::value_negative_overflow, n.error().msg());
  906|    100|    }
  907|  32.5k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 202, False: 32.3k]
  ------------------
  908|  32.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 202]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|  32.5k|    return n;
  913|  32.5k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   650k|{
  895|   650k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   650k|                                  m_nan_payload_buffer, value);
  897|   650k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   650k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 638k, False: 12.1k]
  |  |  ------------------
  ------------------
  898|   638k|        value = this->setsign(value);
  899|   638k|        return n;
  900|   638k|    }
  901|       |
  902|  12.1k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 513, False: 11.5k]
  ------------------
  903|  12.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 224, False: 289]
  ------------------
  904|    224|        return detail::unexpected_scan_error(
  905|    224|            scan_error::value_negative_overflow, n.error().msg());
  906|    224|    }
  907|  11.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 104, False: 11.7k]
  ------------------
  908|  11.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 40, False: 64]
  ------------------
  909|     40|        return detail::unexpected_scan_error(
  910|     40|            scan_error::value_negative_underflow, n.error().msg());
  911|     40|    }
  912|  11.8k|    return n;
  913|  11.8k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   340k|{
  895|   340k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   340k|                                  m_nan_payload_buffer, value);
  897|   340k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   340k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 308k, False: 31.5k]
  |  |  ------------------
  ------------------
  898|   308k|        value = this->setsign(value);
  899|   308k|        return n;
  900|   308k|    }
  901|       |
  902|  31.5k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 128, False: 31.3k]
  ------------------
  903|  31.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 14, False: 114]
  ------------------
  904|     14|        return detail::unexpected_scan_error(
  905|     14|            scan_error::value_negative_overflow, n.error().msg());
  906|     14|    }
  907|  31.4k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 78, False: 31.4k]
  ------------------
  908|  31.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 78]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|  31.4k|    return n;
  913|  31.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   429k|{
 1903|   429k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   429k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   497k|{
 1911|   497k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   497k|    return sync_after_vscan(source, n);
 1913|   497k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   278k|{
 1921|   278k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   278k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   277k|{
 1929|   277k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   277k|    return sync_after_vscan(source, n);
 1931|   277k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   854k|{
  207|   854k|    return find_classic_impl(
  208|   854k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   854k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   854k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  2.04M|{
  215|  2.04M|    return find_classic_impl(
  216|  2.04M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  2.04M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  2.04M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   429k|{
 1872|   429k|    return vscan_internal(source, format, args);
 1873|   429k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   497k|{
 1878|   497k|    auto n = vscan_internal(source, format, args);
 1879|   497k|    return sync_after_vscan(source, n);
 1880|   497k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   278k|{
 1886|   278k|    return vscan_internal(source, format, args);
 1887|   278k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   277k|{
 1892|   277k|    auto n = vscan_internal(source, format, args);
 1893|   277k|    return sync_after_vscan(source, n);
 1894|   277k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  93.6k|{
 1958|  93.6k|    return vscan_value_internal(source, arg);
 1959|  93.6k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|   102k|{
 1963|   102k|    auto n = vscan_value_internal(source, arg);
 1964|   102k|    return sync_after_vscan(source, n);
 1965|   102k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  55.0k|{
 1971|  55.0k|    return vscan_value_internal(source, arg);
 1972|  55.0k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  54.9k|{
 1977|  54.9k|    auto n = vscan_value_internal(source, arg);
 1978|  54.9k|    return sync_after_vscan(source, n);
 1979|  54.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   854k|{
  131|   854k|    auto it = source.begin();
  132|       |
  133|  2.77M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.22M, False: 553k]
  ------------------
  134|  2.22M|        auto sv =
  135|  2.22M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.22M|                .substr(0, 8);
  137|       |
  138|  2.22M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.16M, False: 57.3k]
  ------------------
  139|  2.16M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.16M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.16M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 277k, False: 1.88M]
  ------------------
  142|   277k|                break;
  143|   277k|            }
  144|  1.88M|            continue;
  145|  2.16M|        }
  146|       |
  147|   189k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 155k, False: 34.0k]
  ------------------
  148|   155k|            auto tmp =
  149|   155k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   155k|            auto res = get_next_code_point(tmp);
  151|   155k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 23.2k, False: 132k]
  ------------------
  152|  23.2k|                return it;
  153|  23.2k|            }
  154|   132k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   132k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   132k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   132k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   132k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   132k|        }
  158|  57.3k|    }
  159|       |
  160|   830k|    return detail::make_string_view_iterator(source, it);
  161|   854k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  3.47M|{
  118|  3.47M|    static_assert(sizeof(*source.data()) == 1);
  119|  3.47M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  3.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  3.47M|    uint64_t word{};
  121|  3.47M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  3.47M|    return has_byte_greater(word, 127) != 0;
  124|  3.47M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  13.1M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   155k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  2.04M|{
  131|  2.04M|    auto it = source.begin();
  132|       |
  133|  2.22M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.25M, False: 976k]
  ------------------
  134|  1.25M|        auto sv =
  135|  1.25M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.25M|                .substr(0, 8);
  137|       |
  138|  1.25M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 1.17M, False: 77.5k]
  ------------------
  139|  1.17M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  1.17M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  1.17M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 996k, False: 178k]
  ------------------
  142|   996k|                break;
  143|   996k|            }
  144|   178k|            continue;
  145|  1.17M|        }
  146|       |
  147|   141k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 134k, False: 6.78k]
  ------------------
  148|   134k|            auto tmp =
  149|   134k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   134k|            auto res = get_next_code_point(tmp);
  151|   134k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 70.7k, False: 64.1k]
  ------------------
  152|  70.7k|                return it;
  153|  70.7k|            }
  154|  64.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  64.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  64.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  64.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  64.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  64.1k|        }
  158|  77.5k|    }
  159|       |
  160|  1.97M|    return detail::make_string_view_iterator(source, it);
  161|  2.04M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.78M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   134k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   618k|{
  804|   618k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.24k, False: 614k]
  ------------------
  805|  3.24k|        value = std::numeric_limits<T>::infinity();
  806|  3.24k|        return 3;
  807|  3.24k|    }
  808|   614k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.03k, False: 611k]
  ------------------
  809|  3.03k|        value = std::numeric_limits<T>::infinity();
  810|  3.03k|        return 8;
  811|  3.03k|    }
  812|   611k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 26.9k, False: 585k]
  ------------------
  813|  26.9k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  26.9k|        return 3;
  815|  26.9k|    }
  816|   585k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.58k, False: 583k]
  ------------------
  817|  1.58k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.58k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.58k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.58k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.58k|    }
  848|       |
  849|   583k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   583k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 125k, False: 457k]
  ------------------
  851|   125k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.91k, False: 122k]
  |  |  ------------------
  ------------------
  852|  2.91k|            return detail::unexpected_scan_error(
  853|  2.91k|                scan_error::invalid_scanned_value,
  854|  2.91k|                "Invalid floating-point digit");
  855|  2.91k|        }
  856|   125k|    }
  857|   580k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.72k, False: 572k]
  |  |  ------------------
  ------------------
  858|  7.72k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  7.72k|                                             "Invalid floating-point digit");
  860|  7.72k|    }
  861|       |
  862|   572k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   572k|    else {
  879|       |        // Default to fast_float
  880|   572k|        return fast_float_impl<CharT, T>{data}(value);
  881|   572k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   572k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  739|   572k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   572k|    {
  741|   572k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  368|  2.07M|    {
  369|  2.07M|        return {kind, options};
  370|  2.07M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  744|   572k|    {
  745|   572k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 122k, False: 450k]
  ------------------
  746|   572k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 24.5k, False: 425k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   147k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   147k|                                              value);
  750|   147k|        }
  751|       |
  752|   425k|        const auto flags = get_flags();
  753|   425k|        const auto view = get_view();
  754|   425k|        const auto result = fast_float::from_chars(
  755|   425k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   425k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   425k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 425k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   425k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   425k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.74k, False: 420k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  4.74k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  4.74k|                                              value);
  766|  4.74k|        }
  767|       |
  768|   420k|        return result.ptr - view.data();
  769|   425k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   151k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   151k|    {
  709|   151k|#if !SCN_DISABLE_STRTOD
  710|   151k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   151k|    }
  717|   151k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  551|   151k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   151k|    {
  553|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  382|   218k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclERf:
  556|   151k|    {
  557|   151k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   151k|                           generic_strtod);
  559|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|   151k|    {
  389|   151k|        CharT* end{};
  390|   151k|        errno = 0;
  391|   151k|        value = strtod_cb(src, &end);
  392|   151k|        const auto saved_errno = errno;
  393|   151k|        auto chars_read = end - src;
  394|       |
  395|   151k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   151k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.52k, False: 146k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.52k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.52k|    }
  ------------------
  396|       |
  397|   146k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 122k, False: 24.4k]
  ------------------
  398|   146k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 122k, False: 0]
  ------------------
  399|   122k|            chars_read -= 2;
  400|   122k|        }
  401|       |
  402|   146k|        return chars_read;
  403|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  431|   218k|    {
  432|   218k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 88.5k, False: 130k]
  |  Branch (432:37): [True: 0, False: 88.5k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   218k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 25.0k, False: 193k]
  ------------------
  440|   218k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 25.0k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   218k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 9.25k, False: 209k]
  |  Branch (447:34): [True: 1.73k, False: 7.52k]
  ------------------
  448|  1.73k|            SCN_UNLIKELY_ATTR
  449|  1.73k|            return detail::unexpected_scan_error(
  450|  1.73k|                scan_error::value_positive_underflow,
  451|  1.73k|                "strtod failed: underflow");
  452|  1.73k|        }
  453|       |
  454|   217k|        SCN_GCC_COMPAT_PUSH
  455|   217k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   217k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 217k, False: 0]
  ------------------
  458|   217k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 217k, False: 0]
  ------------------
  459|   217k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 7.51k, False: 209k]
  ------------------
  460|  7.51k|            SCN_UNLIKELY_ATTR
  461|  7.51k|            return detail::unexpected_scan_error(
  462|  7.51k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  7.51k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   209k|            return {};
  468|   217k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEf:
  343|   227k|{
  344|   227k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (344:12): [True: 90.2k, False: 137k]
  |  Branch (344:25): [True: 0, False: 137k]
  ------------------
  345|   227k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   151k|    {
  409|   151k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 147k, False: 4.09k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   147k|            auto first_space = read_until_classic_space(input.view());
  412|   147k|            input.assign(
  413|   147k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   147k|        }
  415|       |
  416|   151k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 122k, False: 29.3k]
  ------------------
  417|   122k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   122k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   122k|        }
  424|       |
  425|   151k|        return input.get_allocated_string().c_str();
  426|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  563|   151k|    {
  564|   151k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   151k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  471|   151k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   151k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|   151k|        if constexpr (std::is_same_v<T, float>) {
  497|   151k|            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   151k|#endif
  506|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|  1.30M|    {
  724|  1.30M|        unsigned format_flags{};
  725|  1.30M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 1.29M, False: 10.5k]
  ------------------
  726|  1.29M|            format_flags |= fast_float::fixed;
  727|  1.29M|        }
  728|  1.30M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (728:13): [True: 1.10M, False: 197k]
  ------------------
  729|  1.10M|            format_flags |= fast_float::scientific;
  730|  1.10M|        }
  731|       |
  732|  1.30M|        return static_cast<fast_float::chars_format>(format_flags);
  733|  1.30M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  773|   425k|    {
  774|   425k|        if constexpr (sizeof(CharT) == 1) {
  775|   425k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   425k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   285k|{
  804|   285k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 285k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   285k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 285k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   285k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 285k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   285k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 285k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   285k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   285k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 71.5k, False: 213k]
  ------------------
  851|  71.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  71.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.83k, False: 62.6k]
  |  |  ------------------
  ------------------
  852|  8.83k|            return detail::unexpected_scan_error(
  853|  8.83k|                scan_error::invalid_scanned_value,
  854|  8.83k|                "Invalid floating-point digit");
  855|  8.83k|        }
  856|  71.5k|    }
  857|   276k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.4k, False: 255k]
  |  |  ------------------
  ------------------
  858|  21.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  21.4k|                                             "Invalid floating-point digit");
  860|  21.4k|    }
  861|       |
  862|   255k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   255k|    else {
  879|       |        // Default to fast_float
  880|   255k|        return fast_float_impl<CharT, T>{data}(value);
  881|   255k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   255k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  739|   255k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   255k|    {
  741|   255k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|   997k|    {
  369|   997k|        return {kind, options};
  370|   997k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  744|   255k|    {
  745|   255k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 62.6k, False: 192k]
  ------------------
  746|   255k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 475, False: 191k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  63.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  63.1k|                                              value);
  750|  63.1k|        }
  751|       |
  752|   191k|        const auto flags = get_flags();
  753|   191k|        const auto view = get_view();
  754|   191k|        const auto result = fast_float::from_chars(
  755|   191k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   191k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   191k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.62k, False: 188k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  3.62k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  3.62k|                                              value);
  766|  3.62k|        }
  767|       |
  768|   188k|        return result.ptr - view.data();
  769|   191k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  66.7k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  66.7k|    {
  709|  66.7k|#if !SCN_DISABLE_STRTOD
  710|  66.7k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  66.7k|    }
  717|  66.7k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  551|  66.7k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  66.7k|    {
  553|  66.7k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclERf:
  556|  66.7k|    {
  557|  66.7k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  66.7k|                           generic_strtod);
  559|  66.7k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|  66.7k|    {
  389|  66.7k|        CharT* end{};
  390|  66.7k|        errno = 0;
  391|  66.7k|        value = strtod_cb(src, &end);
  392|  66.7k|        const auto saved_errno = errno;
  393|  66.7k|        auto chars_read = end - src;
  394|       |
  395|  66.7k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  66.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.71k, False: 63.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.71k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.71k|    }
  ------------------
  396|       |
  397|  63.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.5k, False: 475]
  ------------------
  398|  63.0k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.5k, False: 0]
  ------------------
  399|  62.5k|            chars_read -= 2;
  400|  62.5k|        }
  401|       |
  402|  63.0k|        return chars_read;
  403|  66.7k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  66.7k|    {
  409|  66.7k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 64.4k, False: 2.33k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  64.4k|            auto first_space = read_until_classic_space(input.view());
  412|  64.4k|            input.assign(
  413|  64.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  64.4k|        }
  415|       |
  416|  66.7k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.6k, False: 4.09k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.6k|            else {
  421|  62.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.6k|            }
  423|  62.6k|        }
  424|       |
  425|  66.7k|        return input.get_allocated_string().c_str();
  426|  66.7k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  563|  66.7k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  66.7k|        else {
  568|  66.7k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  66.7k|        }
  570|  66.7k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  509|  66.7k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  66.7k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|  66.7k|        if constexpr (std::is_same_v<T, float>) {
  535|  66.7k|            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  66.7k|#endif
  544|  66.7k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  773|   191k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   191k|        else {
  783|   191k|            return std::u32string_view{
  784|   191k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   191k|                m_input.view().size()};
  786|   191k|        }
  787|   191k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   644k|{
  804|   644k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.62k, False: 640k]
  ------------------
  805|  3.62k|        value = std::numeric_limits<T>::infinity();
  806|  3.62k|        return 3;
  807|  3.62k|    }
  808|   640k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.18k, False: 637k]
  ------------------
  809|  3.18k|        value = std::numeric_limits<T>::infinity();
  810|  3.18k|        return 8;
  811|  3.18k|    }
  812|   637k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 27.4k, False: 609k]
  ------------------
  813|  27.4k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  27.4k|        return 3;
  815|  27.4k|    }
  816|   609k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.65k, False: 608k]
  ------------------
  817|  1.65k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.65k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.65k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.65k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.65k|    }
  848|       |
  849|   608k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   608k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 128k, False: 479k]
  ------------------
  851|   128k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.97k, False: 125k]
  |  |  ------------------
  ------------------
  852|  2.97k|            return detail::unexpected_scan_error(
  853|  2.97k|                scan_error::invalid_scanned_value,
  854|  2.97k|                "Invalid floating-point digit");
  855|  2.97k|        }
  856|   128k|    }
  857|   605k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   605k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.16k, False: 597k]
  |  |  ------------------
  ------------------
  858|  8.16k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  8.16k|                                             "Invalid floating-point digit");
  860|  8.16k|    }
  861|       |
  862|   597k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   597k|    else {
  879|       |        // Default to fast_float
  880|   597k|        return fast_float_impl<CharT, T>{data}(value);
  881|   597k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   597k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  739|   597k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   597k|    {
  741|   597k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  744|   597k|    {
  745|   597k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 125k, False: 471k]
  ------------------
  746|   597k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 26.2k, False: 444k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   152k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   152k|                                              value);
  750|   152k|        }
  751|       |
  752|   444k|        const auto flags = get_flags();
  753|   444k|        const auto view = get_view();
  754|   444k|        const auto result = fast_float::from_chars(
  755|   444k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   444k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 444k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   444k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.25k, False: 442k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  2.25k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  2.25k|                                              value);
  766|  2.25k|        }
  767|       |
  768|   442k|        return result.ptr - view.data();
  769|   444k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   154k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   154k|    {
  709|   154k|#if !SCN_DISABLE_STRTOD
  710|   154k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   154k|    }
  717|   154k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  551|   154k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   154k|    {
  553|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|   219k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclERd:
  556|   154k|    {
  557|   154k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   154k|                           generic_strtod);
  559|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|   154k|    {
  389|   154k|        CharT* end{};
  390|   154k|        errno = 0;
  391|   154k|        value = strtod_cb(src, &end);
  392|   154k|        const auto saved_errno = errno;
  393|   154k|        auto chars_read = end - src;
  394|       |
  395|   154k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.67k, False: 151k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.67k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.67k|    }
  ------------------
  396|       |
  397|   151k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 125k, False: 26.2k]
  ------------------
  398|   151k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 125k, False: 0]
  ------------------
  399|   125k|            chars_read -= 2;
  400|   125k|        }
  401|       |
  402|   151k|        return chars_read;
  403|   154k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|   219k|    {
  432|   219k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 87.8k, False: 131k]
  |  Branch (432:37): [True: 0, False: 87.8k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   219k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.7k, False: 192k]
  ------------------
  440|   219k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.7k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   219k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 4.50k, False: 214k]
  |  Branch (447:34): [True: 502, False: 4.00k]
  ------------------
  448|    502|            SCN_UNLIKELY_ATTR
  449|    502|            return detail::unexpected_scan_error(
  450|    502|                scan_error::value_positive_underflow,
  451|    502|                "strtod failed: underflow");
  452|    502|        }
  453|       |
  454|   218k|        SCN_GCC_COMPAT_PUSH
  455|   218k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   218k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 218k, False: 0]
  ------------------
  458|   218k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 218k, False: 0]
  ------------------
  459|   218k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 4.00k, False: 214k]
  ------------------
  460|  4.00k|            SCN_UNLIKELY_ATTR
  461|  4.00k|            return detail::unexpected_scan_error(
  462|  4.00k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  4.00k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   214k|            return {};
  468|   218k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|   223k|{
  348|   223k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 88.3k, False: 135k]
  |  Branch (348:24): [True: 0, False: 135k]
  ------------------
  349|   223k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   154k|    {
  409|   154k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 151k, False: 3.00k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   151k|            auto first_space = read_until_classic_space(input.view());
  412|   151k|            input.assign(
  413|   151k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   151k|        }
  415|       |
  416|   154k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 125k, False: 28.5k]
  ------------------
  417|   125k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   125k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   125k|        }
  424|       |
  425|   154k|        return input.get_allocated_string().c_str();
  426|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  563|   154k|    {
  564|   154k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   154k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   154k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  471|   154k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   154k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|   154k|        else if constexpr (std::is_same_v<T, double>) {
  500|   154k|            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   154k|#endif
  506|   154k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  773|   444k|    {
  774|   444k|        if constexpr (sizeof(CharT) == 1) {
  775|   444k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   444k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   332k|{
  804|   332k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 332k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   332k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 332k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   332k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 332k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   332k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 332k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   332k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   332k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 71.5k, False: 261k]
  ------------------
  851|  71.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  71.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.84k, False: 62.6k]
  |  |  ------------------
  ------------------
  852|  8.84k|            return detail::unexpected_scan_error(
  853|  8.84k|                scan_error::invalid_scanned_value,
  854|  8.84k|                "Invalid floating-point digit");
  855|  8.84k|        }
  856|  71.5k|    }
  857|   324k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.9k, False: 302k]
  |  |  ------------------
  ------------------
  858|  21.9k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  21.9k|                                             "Invalid floating-point digit");
  860|  21.9k|    }
  861|       |
  862|   302k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   302k|    else {
  879|       |        // Default to fast_float
  880|   302k|        return fast_float_impl<CharT, T>{data}(value);
  881|   302k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   302k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  739|   302k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   302k|    {
  741|   302k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  744|   302k|    {
  745|   302k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 62.6k, False: 239k]
  ------------------
  746|   302k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 475, False: 239k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  63.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  63.1k|                                              value);
  750|  63.1k|        }
  751|       |
  752|   239k|        const auto flags = get_flags();
  753|   239k|        const auto view = get_view();
  754|   239k|        const auto result = fast_float::from_chars(
  755|   239k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   239k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 239k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   239k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.75k, False: 237k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  1.75k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  1.75k|                                              value);
  766|  1.75k|        }
  767|       |
  768|   237k|        return result.ptr - view.data();
  769|   239k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  64.8k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  64.8k|    {
  709|  64.8k|#if !SCN_DISABLE_STRTOD
  710|  64.8k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  64.8k|    }
  717|  64.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|  64.8k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  64.8k|    {
  553|  64.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|  64.8k|    {
  557|  64.8k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  64.8k|                           generic_strtod);
  559|  64.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|  64.8k|    {
  389|  64.8k|        CharT* end{};
  390|  64.8k|        errno = 0;
  391|  64.8k|        value = strtod_cb(src, &end);
  392|  64.8k|        const auto saved_errno = errno;
  393|  64.8k|        auto chars_read = end - src;
  394|       |
  395|  64.8k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  64.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  64.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.83k, False: 63.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.83k|    }
  ------------------
  396|       |
  397|  63.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.5k, False: 475]
  ------------------
  398|  63.0k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.5k, False: 0]
  ------------------
  399|  62.5k|            chars_read -= 2;
  400|  62.5k|        }
  401|       |
  402|  63.0k|        return chars_read;
  403|  64.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  64.8k|    {
  409|  64.8k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 63.4k, False: 1.41k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  63.4k|            auto first_space = read_until_classic_space(input.view());
  412|  63.4k|            input.assign(
  413|  63.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  63.4k|        }
  415|       |
  416|  64.8k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.6k, False: 2.23k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.6k|            else {
  421|  62.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.6k|            }
  423|  62.6k|        }
  424|       |
  425|  64.8k|        return input.get_allocated_string().c_str();
  426|  64.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|  64.8k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  64.8k|        else {
  568|  64.8k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  64.8k|        }
  570|  64.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|  64.8k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  64.8k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|  64.8k|        else if constexpr (std::is_same_v<T, double>) {
  538|  64.8k|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  64.8k|#endif
  544|  64.8k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  773|   239k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   239k|        else {
  783|   239k|            return std::u32string_view{
  784|   239k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   239k|                m_input.view().size()};
  786|   239k|        }
  787|   239k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   650k|{
  804|   650k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.76k, False: 646k]
  ------------------
  805|  3.76k|        value = std::numeric_limits<T>::infinity();
  806|  3.76k|        return 3;
  807|  3.76k|    }
  808|   646k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.25k, False: 643k]
  ------------------
  809|  3.25k|        value = std::numeric_limits<T>::infinity();
  810|  3.25k|        return 8;
  811|  3.25k|    }
  812|   643k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 27.5k, False: 615k]
  ------------------
  813|  27.5k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  27.5k|        return 3;
  815|  27.5k|    }
  816|   615k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.68k, False: 613k]
  ------------------
  817|  1.68k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.68k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.68k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.68k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.68k|    }
  848|       |
  849|   613k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   613k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   613k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   613k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 129k, False: 484k]
  ------------------
  851|   129k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.04k, False: 126k]
  |  |  ------------------
  ------------------
  852|  3.04k|            return detail::unexpected_scan_error(
  853|  3.04k|                scan_error::invalid_scanned_value,
  854|  3.04k|                "Invalid floating-point digit");
  855|  3.04k|        }
  856|   129k|    }
  857|   610k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.43k, False: 602k]
  |  |  ------------------
  ------------------
  858|  8.43k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  8.43k|                                             "Invalid floating-point digit");
  860|  8.43k|    }
  861|       |
  862|   602k|#if !SCN_DISABLE_FAST_FLOAT
  863|   602k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   602k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   602k|            return fast_float_fallback(data, value);
  876|   602k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   602k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   602k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   602k|    {
  709|   602k|#if !SCN_DISABLE_STRTOD
  710|   602k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   602k|    }
  717|   602k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  551|   602k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   602k|    {
  553|   602k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  382|   911k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclERe:
  556|   602k|    {
  557|   602k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   602k|                           generic_strtod);
  559|   602k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   602k|    {
  389|   602k|        CharT* end{};
  390|   602k|        errno = 0;
  391|   602k|        value = strtod_cb(src, &end);
  392|   602k|        const auto saved_errno = errno;
  393|   602k|        auto chars_read = end - src;
  394|       |
  395|   602k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   602k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 617, False: 601k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    617|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    617|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    617|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    617|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    617|    }
  ------------------
  396|       |
  397|   601k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 126k, False: 475k]
  ------------------
  398|   601k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 126k, False: 0]
  ------------------
  399|   126k|            chars_read -= 2;
  400|   126k|        }
  401|       |
  402|   601k|        return chars_read;
  403|   602k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  431|   911k|    {
  432|   911k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 411k, False: 500k]
  |  Branch (432:37): [True: 0, False: 411k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   911k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.7k, False: 884k]
  ------------------
  440|   911k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.7k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   911k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 823, False: 910k]
  |  Branch (447:34): [True: 182, False: 641]
  ------------------
  448|    182|            SCN_UNLIKELY_ATTR
  449|    182|            return detail::unexpected_scan_error(
  450|    182|                scan_error::value_positive_underflow,
  451|    182|                "strtod failed: underflow");
  452|    182|        }
  453|       |
  454|   911k|        SCN_GCC_COMPAT_PUSH
  455|   911k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   911k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 911k, False: 0]
  ------------------
  458|   911k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 911k, False: 0]
  ------------------
  459|   911k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 641, False: 910k]
  ------------------
  460|    641|            SCN_UNLIKELY_ATTR
  461|    641|            return detail::unexpected_scan_error(
  462|    641|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|    641|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   910k|            return {};
  468|   911k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEe:
  351|   912k|{
  352|   912k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (352:12): [True: 411k, False: 500k]
  |  Branch (352:26): [True: 0, False: 500k]
  ------------------
  353|   912k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   602k|    {
  409|   602k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 554k, False: 47.5k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   554k|            auto first_space = read_until_classic_space(input.view());
  412|   554k|            input.assign(
  413|   554k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   554k|        }
  415|       |
  416|   602k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 126k, False: 476k]
  ------------------
  417|   126k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   126k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   126k|        }
  424|       |
  425|   602k|        return input.get_allocated_string().c_str();
  426|   602k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  563|   602k|    {
  564|   602k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   602k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   602k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  471|   602k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   602k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|   602k|        else if constexpr (std::is_same_v<T, long double>) {
  503|   602k|            return std::strtold(str, str_end);
  504|   602k|        }
  505|   602k|#endif
  506|   602k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   340k|{
  804|   340k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 340k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   340k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 340k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   340k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 340k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   340k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 340k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   340k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   340k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 71.5k, False: 268k]
  ------------------
  851|  71.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  71.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.85k, False: 62.7k]
  |  |  ------------------
  ------------------
  852|  8.85k|            return detail::unexpected_scan_error(
  853|  8.85k|                scan_error::invalid_scanned_value,
  854|  8.85k|                "Invalid floating-point digit");
  855|  8.85k|        }
  856|  71.5k|    }
  857|   331k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.4k, False: 308k]
  |  |  ------------------
  ------------------
  858|  22.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  22.4k|                                             "Invalid floating-point digit");
  860|  22.4k|    }
  861|       |
  862|   308k|#if !SCN_DISABLE_FAST_FLOAT
  863|   308k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   308k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   308k|            return fast_float_fallback(data, value);
  876|   308k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   308k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   308k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   308k|    {
  709|   308k|#if !SCN_DISABLE_STRTOD
  710|   308k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   308k|    }
  717|   308k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  551|   308k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   308k|    {
  553|   308k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclERe:
  556|   308k|    {
  557|   308k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   308k|                           generic_strtod);
  559|   308k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   308k|    {
  389|   308k|        CharT* end{};
  390|   308k|        errno = 0;
  391|   308k|        value = strtod_cb(src, &end);
  392|   308k|        const auto saved_errno = errno;
  393|   308k|        auto chars_read = end - src;
  394|       |
  395|   308k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   308k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 206, False: 308k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    206|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    206|    }
  ------------------
  396|       |
  397|   308k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.6k, False: 245k]
  ------------------
  398|   308k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.6k, False: 0]
  ------------------
  399|  62.6k|            chars_read -= 2;
  400|  62.6k|        }
  401|       |
  402|   308k|        return chars_read;
  403|   308k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   308k|    {
  409|   308k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 302k, False: 6.38k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   302k|            auto first_space = read_until_classic_space(input.view());
  412|   302k|            input.assign(
  413|   302k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   302k|        }
  415|       |
  416|   308k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.6k, False: 246k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.6k|            else {
  421|  62.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.6k|            }
  423|  62.6k|        }
  424|       |
  425|   308k|        return input.get_allocated_string().c_str();
  426|   308k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  563|   308k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|   308k|        else {
  568|   308k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|   308k|        }
  570|   308k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  509|   308k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|   308k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|   308k|        else if constexpr (std::is_same_v<T, long double>) {
  541|   308k|            return std::wcstold(str, str_end);
  542|   308k|        }
  543|   308k|#endif
  544|   308k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   995k|{
 1769|   995k|    const auto argcount = args.size();
 1770|   995k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 205k, False: 789k]
  |  Branch (1770:60): [True: 205k, False: 0]
  ------------------
 1771|   205k|        auto arg = args.get(0);
 1772|   205k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   205k|    static_cast<    \
  |  |  935|   205k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   205k|    }
 1774|       |
 1775|   789k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 789k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   789k|    SCN_UNLIKELY_ATTR
 1783|   789k|    {
 1784|   789k|        auto handler = format_handler<false, CharT>{
 1785|   789k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   789k|    static_cast<    \
  |  |  935|   789k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   789k|    static_cast<    \
  |  |  935|   789k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   789k|        return vscan_parse_format_string(format, handler);
 1787|   789k|    }
 1788|   789k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.85M|{
 1317|  1.85M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 1.46M, False: 392k]
  ------------------
 1318|  1.46M|        return false;
 1319|  1.46M|    }
 1320|   392k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 392k, False: 0]
  |  Branch (1320:39): [True: 392k, False: 0]
  ------------------
 1321|  1.85M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   308k|{
 1350|   308k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   308k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   308k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   308k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   308k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   308k|    static_cast<    \
  |  |  935|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   308k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   308k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   308k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   308k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.8k, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.8k|    }                                                  \
  |  |  |  | 3939|   308k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   287k|    return it.position();
 1367|   308k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   672k|        : format_handler_base{argcount},
 1593|   672k|          parse_ctx{format},
 1594|   672k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   672k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   672k|    static_cast<    \
  |  |  935|   672k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   672k|    static_cast<    \
  |  |  935|   672k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   672k|    {
 1596|   672k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  2.35M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  2.35M|    {
 1412|  2.35M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  2.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   672k|        : contiguous_ctx(source, args, loc)
 1544|   672k|    {
 1545|   672k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   672k|{
 1734|   672k|    const auto beg = handler.get_ctx().begin();
 1735|   672k|    detail::parse_format_string<false>(format, handler);
 1736|   672k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.5k, False: 602k]
  |  |  ------------------
  ------------------
 1737|  69.5k|        return unexpected(err.error());
 1738|  69.5k|    }
 1739|   602k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   672k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  4.56M|    {
 1718|  4.56M|        return ctx.get();
 1719|  4.56M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  4.56M|    {
 1549|  4.56M|        return contiguous_ctx;
 1550|  4.56M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  1.27M|    {
 1600|  1.27M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.27M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   417k|    {
 1460|   417k|        error = unexpected(err);
 1461|   417k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   672k|{
 1372|   672k|    auto arg = ctx.arg(id);
 1373|   672k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   672k|    return arg;
 1377|   672k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  2.35M|    {
 1486|  2.35M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  2.35M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  2.35M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.35M, False: 0]
  |  |  ------------------
  ------------------
 1498|  2.35M|            visited_args_lower64 |= (1ull << id);
 1499|  2.35M|            return;
 1500|  2.35M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  2.35M|    {
 1470|  2.35M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  2.35M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.35M, False: 0]
  |  |  ------------------
  ------------------
 1477|  2.35M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  2.35M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  2.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   672k|    {
 1640|   672k|        return parse_ctx.next_arg_id();
 1641|   672k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   672k|    {
 1680|   672k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   672k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   672k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 672k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   672k|        auto specs = detail::format_specs{};
 1693|   672k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   672k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   672k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   672k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   672k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 672k]
  |  Branch (1698:29): [True: 0, False: 672k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   672k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 672k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   672k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   672k|        on_visit_scan_arg(
 1710|   672k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   672k|                                           get_ctx().locale()},
 1712|   672k|            arg);
 1713|   672k|        return parse_ctx.begin();
 1714|   672k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   672k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   672k|    {
 1391|   672k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   672k|    {
 1651|   672k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 672k]
  |  Branch (1651:13): [True: 0, False: 672k]
  |  Branch (1651:29): [True: 0, False: 672k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   672k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   672k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   672k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.5k, False: 602k]
  |  |  ------------------
  ------------------
 1658|  69.5k|            on_error(r.error());
 1659|  69.5k|        }
 1660|   602k|        else {
 1661|   602k|            get_ctx().advance_to(*r);
 1662|   602k|        }
 1663|   672k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  2.35M|    {
 1419|  2.35M|        {
 1420|  2.35M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 2.35M]
  ------------------
 1421|  2.35M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 2.35M]
  ------------------
 1422|  2.35M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  2.35M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  2.35M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 2.35M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  2.35M|        }
 1430|       |
 1431|  2.35M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 2.35M, False: 0]
  ------------------
 1432|  2.35M|            return;
 1433|  2.35M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  9.41M|    {
 1465|  9.41M|        return error;
 1466|  9.41M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   789k|        : format_handler_base{argcount},
 1593|   789k|          parse_ctx{format},
 1594|   789k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   789k|    static_cast<    \
  |  |  935|   789k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   789k|    static_cast<    \
  |  |  935|   789k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   789k|    {
 1596|   789k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   789k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   789k|    static_cast<    \
  |  |  935|   789k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   789k|    {
 1521|   789k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   789k|{
 1734|   789k|    const auto beg = handler.get_ctx().begin();
 1735|   789k|    detail::parse_format_string<false>(format, handler);
 1736|   789k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.5k, False: 720k]
  |  |  ------------------
  ------------------
 1737|  69.5k|        return unexpected(err.error());
 1738|  69.5k|    }
 1739|   720k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   789k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  5.39M|    {
 1718|  5.39M|        return ctx.get();
 1719|  5.39M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  5.39M|    {
 1525|  5.39M|        return ctx;
 1526|  5.39M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|  1.51M|    {
 1600|  1.51M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.51M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.51M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   789k|{
 1372|   789k|    auto arg = ctx.arg(id);
 1373|   789k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   789k|    return arg;
 1377|   789k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   789k|    {
 1640|   789k|        return parse_ctx.next_arg_id();
 1641|   789k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   789k|    {
 1680|   789k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   789k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   789k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 789k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   789k|        auto specs = detail::format_specs{};
 1693|   789k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   789k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   789k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   789k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   789k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 789k]
  |  Branch (1698:29): [True: 0, False: 789k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   789k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 789k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   789k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   789k|        on_visit_scan_arg(
 1710|   789k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   789k|                                           get_ctx().locale()},
 1712|   789k|            arg);
 1713|   789k|        return parse_ctx.begin();
 1714|   789k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   789k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   789k|    {
 1391|   789k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   789k|    {
 1651|   789k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 789k]
  |  Branch (1651:13): [True: 0, False: 789k]
  |  Branch (1651:29): [True: 0, False: 789k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   789k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   789k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 69.5k, False: 720k]
  |  |  ------------------
  ------------------
 1658|  69.5k|            on_error(r.error());
 1659|  69.5k|        }
 1660|   720k|        else {
 1661|   720k|            get_ctx().advance_to(*r);
 1662|   720k|        }
 1663|   789k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   859k|{
 1749|   859k|    const auto argcount = args.size();
 1750|   859k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 187k, False: 672k]
  |  Branch (1750:60): [True: 187k, False: 0]
  ------------------
 1751|   187k|        auto arg = args.get(0);
 1752|   187k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   187k|    static_cast<    \
  |  |  935|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   187k|    }
 1754|       |
 1755|   672k|    auto handler = format_handler<true, CharT>{
 1756|   672k|        ranges::subrange<const CharT*>{source.data(),
 1757|   672k|                                       source.data() + source.size()},
 1758|   672k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   672k|    static_cast<    \
  |  |  935|   672k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   672k|    static_cast<    \
  |  |  935|   672k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   672k|    return vscan_parse_format_string(format, handler);
 1760|   859k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   280k|{
 1330|   280k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   280k|    auto reader =
 1336|   280k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   280k|            ranges::subrange<const CharT*>{source.data(),
 1338|   280k|                                           source.data() + source.size()},
 1339|   280k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   280k|    static_cast<    \
  |  |  935|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   280k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.8k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.8k|    }                                                  \
  |  |  |  | 3939|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   259k|    return ranges::distance(source.data(), it);
 1342|   280k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  1.09M|{
 1849|  1.09M|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.00M, False: 90.4k]
  |  |  ------------------
  ------------------
 1850|  1.00M|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  1.00M|    }
 1856|  90.4k|    else {
 1857|  90.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  90.4k|    }
 1863|  1.09M|    return result;
 1864|  1.09M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   556k|{
 1749|   556k|    const auto argcount = args.size();
 1750|   556k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 110k, False: 446k]
  |  Branch (1750:60): [True: 110k, False: 0]
  ------------------
 1751|   110k|        auto arg = args.get(0);
 1752|   110k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   110k|    static_cast<    \
  |  |  935|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   110k|    }
 1754|       |
 1755|   446k|    auto handler = format_handler<true, CharT>{
 1756|   446k|        ranges::subrange<const CharT*>{source.data(),
 1757|   446k|                                       source.data() + source.size()},
 1758|   446k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   446k|    static_cast<    \
  |  |  935|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   446k|    static_cast<    \
  |  |  935|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   446k|    return vscan_parse_format_string(format, handler);
 1760|   556k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.11M|{
 1317|  1.11M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 892k, False: 219k]
  ------------------
 1318|   892k|        return false;
 1319|   892k|    }
 1320|   219k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 219k, False: 0]
  |  Branch (1320:39): [True: 219k, False: 0]
  ------------------
 1321|  1.11M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   165k|{
 1330|   165k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 165k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   165k|    auto reader =
 1336|   165k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   165k|            ranges::subrange<const CharT*>{source.data(),
 1338|   165k|                                           source.data() + source.size()},
 1339|   165k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   165k|    static_cast<    \
  |  |  935|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   165k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.7k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.7k|    }                                                  \
  |  |  |  | 3939|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   123k|    return ranges::distance(source.data(), it);
 1342|   165k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   446k|        : format_handler_base{argcount},
 1593|   446k|          parse_ctx{format},
 1594|   446k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   446k|    static_cast<    \
  |  |  935|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   446k|    static_cast<    \
  |  |  935|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   446k|    {
 1596|   446k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   446k|        : contiguous_ctx(source, args, loc)
 1544|   446k|    {
 1545|   446k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   446k|{
 1734|   446k|    const auto beg = handler.get_ctx().begin();
 1735|   446k|    detail::parse_format_string<false>(format, handler);
 1736|   446k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 307k]
  |  |  ------------------
  ------------------
 1737|   139k|        return unexpected(err.error());
 1738|   139k|    }
 1739|   307k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   446k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  2.84M|    {
 1718|  2.84M|        return ctx.get();
 1719|  2.84M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  2.84M|    {
 1549|  2.84M|        return contiguous_ctx;
 1550|  2.84M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   753k|    {
 1600|   753k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 753k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   753k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   446k|{
 1372|   446k|    auto arg = ctx.arg(id);
 1373|   446k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   446k|    return arg;
 1377|   446k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   446k|    {
 1640|   446k|        return parse_ctx.next_arg_id();
 1641|   446k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   446k|    {
 1680|   446k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   446k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   446k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 446k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   446k|        auto specs = detail::format_specs{};
 1693|   446k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   446k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   446k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   446k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   446k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 446k]
  |  Branch (1698:29): [True: 0, False: 446k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   446k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 446k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   446k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   446k|        on_visit_scan_arg(
 1710|   446k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   446k|                                           get_ctx().locale()},
 1712|   446k|            arg);
 1713|   446k|        return parse_ctx.begin();
 1714|   446k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   446k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   446k|    {
 1391|   446k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   446k|    {
 1651|   446k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 446k]
  |  Branch (1651:13): [True: 0, False: 446k]
  |  Branch (1651:29): [True: 0, False: 446k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   446k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   446k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 307k]
  |  |  ------------------
  ------------------
 1658|   139k|            on_error(r.error());
 1659|   139k|        }
 1660|   307k|        else {
 1661|   307k|            get_ctx().advance_to(*r);
 1662|   307k|        }
 1663|   446k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   555k|{
 1769|   555k|    const auto argcount = args.size();
 1770|   555k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 109k, False: 445k]
  |  Branch (1770:60): [True: 109k, False: 0]
  ------------------
 1771|   109k|        auto arg = args.get(0);
 1772|   109k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   109k|    static_cast<    \
  |  |  935|   109k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   109k|    }
 1774|       |
 1775|   445k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 445k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   445k|    SCN_UNLIKELY_ATTR
 1783|   445k|    {
 1784|   445k|        auto handler = format_handler<false, CharT>{
 1785|   445k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   445k|    static_cast<    \
  |  |  935|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   445k|    static_cast<    \
  |  |  935|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   445k|        return vscan_parse_format_string(format, handler);
 1787|   445k|    }
 1788|   445k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   164k|{
 1350|   164k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   164k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   164k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   164k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   164k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   164k|    static_cast<    \
  |  |  935|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   164k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.7k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.7k|    }                                                  \
  |  |  |  | 3939|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   123k|    return it.position();
 1367|   164k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   445k|        : format_handler_base{argcount},
 1593|   445k|          parse_ctx{format},
 1594|   445k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   445k|    static_cast<    \
  |  |  935|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   445k|    static_cast<    \
  |  |  935|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   445k|    {
 1596|   445k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   445k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   445k|    static_cast<    \
  |  |  935|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   445k|    {
 1521|   445k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   445k|{
 1734|   445k|    const auto beg = handler.get_ctx().begin();
 1735|   445k|    detail::parse_format_string<false>(format, handler);
 1736|   445k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 306k]
  |  |  ------------------
  ------------------
 1737|   139k|        return unexpected(err.error());
 1738|   139k|    }
 1739|   306k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   445k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  2.84M|    {
 1718|  2.84M|        return ctx.get();
 1719|  2.84M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  2.84M|    {
 1525|  2.84M|        return ctx;
 1526|  2.84M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   752k|    {
 1600|   752k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 752k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   752k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   445k|{
 1372|   445k|    auto arg = ctx.arg(id);
 1373|   445k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   445k|    return arg;
 1377|   445k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   445k|    {
 1640|   445k|        return parse_ctx.next_arg_id();
 1641|   445k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   445k|    {
 1680|   445k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   445k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   445k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 445k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   445k|        auto specs = detail::format_specs{};
 1693|   445k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   445k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   445k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   445k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   445k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 445k]
  |  Branch (1698:29): [True: 0, False: 445k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   445k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   445k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   445k|        on_visit_scan_arg(
 1710|   445k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   445k|                                           get_ctx().locale()},
 1712|   445k|            arg);
 1713|   445k|        return parse_ctx.begin();
 1714|   445k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   445k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   445k|    {
 1391|   445k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   445k|    {
 1651|   445k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 445k]
  |  Branch (1651:13): [True: 0, False: 445k]
  |  Branch (1651:29): [True: 0, False: 445k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   445k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   445k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 139k, False: 306k]
  |  |  ------------------
  ------------------
 1658|   139k|            on_error(r.error());
 1659|   139k|        }
 1660|   306k|        else {
 1661|   306k|            get_ctx().advance_to(*r);
 1662|   306k|        }
 1663|   445k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   610k|{
 1849|   610k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   610k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 429k, False: 180k]
  |  |  ------------------
  ------------------
 1850|   429k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 429k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   429k|    }
 1856|   180k|    else {
 1857|   180k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   180k|    }
 1863|   610k|    return result;
 1864|   610k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  93.6k|{
 1795|  93.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  93.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  93.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   102k|{
 1795|   102k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   102k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  55.0k|{
 1795|  55.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  55.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  54.9k|{
 1795|  54.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  54.9k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.31k|{
 1462|  2.31k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.31k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.31k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.31k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.31k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.31k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.31k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.31k|{
 1355|  2.31k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.31k|    auto it = src.begin();
 1358|   660k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 658k, False: 2.31k]
  ------------------
 1359|   658k|        auto res = get_next_code_point(
 1360|   658k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   658k|                                                                 src.end()));
 1362|   658k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.93k, False: 656k]
  |  |  ------------------
  ------------------
 1363|  1.93k|            dest.push_back(DestCharT{0xfffd});
 1364|  1.93k|        }
 1365|   656k|        else {
 1366|   656k|            dest.push_back(res.value);
 1367|   656k|        }
 1368|   658k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   658k|    }
 1370|  2.31k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   948k|{
 1279|   948k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   948k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   948k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   948k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   948k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.5k, False: 921k]
  |  |  ------------------
  ------------------
 1283|  26.5k|        return {get_start_for_next_code_point(input),
 1284|  26.5k|                detail::invalid_code_point};
 1285|  26.5k|    }
 1286|   921k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   921k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.58k, False: 918k]
  |  |  ------------------
  ------------------
 1287|  3.58k|        return {input.end(), detail::invalid_code_point};
 1288|  3.58k|    }
 1289|       |
 1290|   918k|    return {input.begin() + len,
 1291|   918k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   921k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  26.5k|{
 1265|  26.5k|    auto it = input.begin();
 1266|   172k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 164k, False: 7.22k]
  ------------------
 1267|   164k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 19.3k, False: 145k]
  ------------------
 1268|  19.3k|            break;
 1269|  19.3k|        }
 1270|   164k|    }
 1271|  26.5k|    return it;
 1272|  26.5k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  29.3M|    constexpr parse_error(code c) : m_code(c)
  808|  29.3M|    {
  809|  29.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  29.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  29.3M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  13.1M|    {
  823|  13.1M|        return a.m_code == b.m_code;
  824|  13.1M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.44M|    {
  827|  3.44M|        return !(a == b);
  828|  3.44M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.34M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.34M|    {
 1827|  1.34M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.34M|        std::strcpy(m_locbuf, loc);
 1829|  1.34M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.34M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.34M|        std::setlocale(m_category, m_locbuf);
 1834|  1.34M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.34M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.34M|    {
 1856|  1.34M|        std::setlocale(cat, "C");
 1857|  1.34M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  2.35M|    {
 3051|  2.35M|        return m_msg == nullptr;
 3052|  2.35M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  2.32M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  14.9M|{
  458|  14.9M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  14.9M|        static_cast<unsigned char>(ch))];
  460|  14.9M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  73.2k|{
  469|  73.2k|    return static_cast<unsigned char>(ch) <= 127;
  470|  73.2k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  3.47M|{
  539|  3.47M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.47M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  10.9M|{
  784|  10.9M|    return e != eof_error::good;
  785|  10.9M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  44.0k|{
  798|  44.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  44.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  44.0k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  44.0k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   215k|{
  845|   215k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|   215k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   215k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   215k|    return parse_error::eof;
  847|   215k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.44M|{
  854|  3.44M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.44M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.44M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 79.5k, False: 3.36M]
  ------------------
  859|  79.5k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  79.5k|    }
  861|       |
  862|  3.36M|    return detail::unexpected_scan_error(code, msg);
  863|  3.44M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.44M|{
  868|  3.44M|    return [code, msg](parse_error err) {
  869|  3.44M|        assert(err != parse_error::good);
  870|  3.44M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.44M|    };
  872|  3.44M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  2.45M|{
 2320|  2.45M|    unsigned char running_diff{0};
 2321|  9.24M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 6.78M, False: 2.45M]
  ------------------
 2322|  6.78M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  6.78M|    }
 2324|  2.45M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 78.0k, False: 2.38M]
  |  Branch (2324:33): [True: 16.2k, False: 2.36M]
  ------------------
 2325|  2.45M|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  18.3M|{
 3240|  18.3M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  18.3M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  3.32M|{
 3244|  3.32M|#if WCHAR_MIN < 0
 3245|  3.32M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 3.31M, False: 14.2k]
  |  Branch (3245:20): [True: 2.10M, False: 1.20M]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  2.10M|        return char_to_int(static_cast<char>(ch));
 3250|  2.10M|    }
 3251|  1.22M|    return 255;
 3252|  3.32M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6045|  1.93M|{
 6046|  1.93M|    if (specs.width != 0) {
  ------------------
  |  Branch (6046:9): [True: 0, False: 1.93M]
  ------------------
 6047|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6047:13): [True: 0, False: 0]
  ------------------
 6048|      0|            return detail::unexpected_scan_error(
 6049|      0|                scan_error::length_too_short,
 6050|      0|                "Scanned value too narrow, width did not exceed what "
 6051|      0|                "was specified in the format string");
 6052|      0|        }
 6053|      0|    }
 6054|  1.93M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6054:9): [True: 0, False: 1.93M]
  ------------------
 6055|       |        // Ensured by take_width_view
 6056|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6057|      0|                   specs.precision);
 6058|      0|    }
 6059|  1.93M|    return {};
 6060|  1.93M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.76M|    {
  304|  2.76M|        ranges::advance(x, n);
  305|  2.76M|        return x;
  306|  2.76M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.76M|    {
  268|  2.76M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.76M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.76M|    {
  151|  2.76M|        i += n;
  152|  2.76M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.27M|    {
  108|  3.27M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.27M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.27M|    {
   87|  3.27M|        return s - i;
   88|  3.27M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.97M|    {
  304|  1.97M|        ranges::advance(x, n);
  305|  1.97M|        return x;
  306|  1.97M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.97M|    {
  268|  1.97M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.97M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.97M|    {
  151|  1.97M|        i += n;
  152|  1.97M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   566k|    {
  108|   566k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   566k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   566k|    {
   87|   566k|        return s - i;
   88|   566k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|  1.94M|    {
 2993|  1.94M|        return m_current;
 2994|  1.94M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.19M|    {
 2993|  1.19M|        return m_current;
 2994|  1.19M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.09M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.09M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.09M|        auto beg = r.begin();
  991|  1.09M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.09M, False: 0]
  ------------------
  992|  1.09M|            return false;
  993|  1.09M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.09M|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  2.88M|{
 1956|  2.88M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  2.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  2.88M|    else {
 1967|  2.88M|        auto it = range.begin();
 1968|  2.88M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 1.77M, False: 1.10M]
  ------------------
 1969|  1.77M|            return ranges::next(it, count);
 1970|  1.77M|        }
 1971|       |
 1972|  4.38M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.31M, False: 1.07M]
  ------------------
 1973|  3.31M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 35.1k, False: 3.28M]
  ------------------
 1974|  35.1k|                return unexpected(eof_error::eof);
 1975|  35.1k|            }
 1976|  3.31M|        }
 1977|       |
 1978|  1.07M|        return it;
 1979|  1.10M|    }
 1980|  2.88M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  2.88M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  2.88M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  2.88M|        else {
 1107|  2.88M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 2.88M, False: 0]
  ------------------
 1108|  2.88M|                return static_cast<size_t>(
 1109|  2.88M|                    r.begin().parent()->chars_available() -
 1110|  2.88M|                    r.begin().position());
 1111|  2.88M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  2.88M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  2.88M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  28.3M|    {
  763|  28.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  28.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.3M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.63M|        : m_fptr([](storage fn,
  743|  2.63M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.63M|              cvref<T> obj = *get<T>(fn);
  745|  2.63M|              if constexpr (std::is_void_v<R>) {
  746|  2.63M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.63M|              }
  748|  2.63M|              else {
  749|  2.63M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.63M|              }
  751|  2.63M|          }),
  752|  2.63M|          m_storage(std::addressof(f))
  753|  2.63M|    {
  754|  2.63M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.1M|              else {
  749|  14.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1M|              }
  751|  14.1M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.1M|        else if constexpr (std::is_object_v<T>) {
  688|  14.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.1M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.63M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.63M|        {
  662|  2.63M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  8.55M|    {
  763|  8.55M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  8.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.55M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.18M|        : m_fptr([](storage fn,
  743|  2.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.18M|              cvref<T> obj = *get<T>(fn);
  745|  2.18M|              if constexpr (std::is_void_v<R>) {
  746|  2.18M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.18M|              }
  748|  2.18M|              else {
  749|  2.18M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.18M|              }
  751|  2.18M|          }),
  752|  2.18M|          m_storage(std::addressof(f))
  753|  2.18M|    {
  754|  2.18M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.87M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.87M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.87M|              else {
  749|  3.87M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.87M|              }
  751|  3.87M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.87M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.87M|        else if constexpr (std::is_object_v<T>) {
  688|  3.87M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.87M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.18M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.18M|        {
  662|  2.18M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6073|   789k|    {
 6074|   789k|        const bool need_skipped_width =
 6075|   789k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 789k]
  |  Branch (6075:33): [True: 0, False: 789k]
  ------------------
 6076|   789k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   789k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 789k]
  ------------------
 6080|   789k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 789k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   789k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 789k, False: 0]
  |  Branch (6084:56): [True: 789k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   789k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 789k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  1.56M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   789k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   789k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   789k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   789k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.7k, False: 775k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.7k|    }                                                  \
  |  |  |  | 3939|   789k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   775k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  1.56M|                            make_eof_scan_error));
 6095|       |
 6096|  1.56M|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 775k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   775k|            return result_type{it, 0};
 6104|  1.56M|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   789k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.10M|{
 2075|  2.10M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.10M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.10M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.10M|    else {
 2060|  2.10M|        auto first = range.begin();
 2061|  11.5M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 11.4M, False: 26.9k]
  ------------------
 2062|  11.4M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.07M, False: 9.40M]
  ------------------
 2063|  2.07M|                return first;
 2064|  2.07M|            }
 2065|  11.4M|        }
 2066|  26.9k|        return first;
 2067|  2.10M|    }
 2068|  2.10M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.85M|    {
  108|  1.85M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.85M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.85M|    {
   94|  1.85M|        iter_difference_t<I> counter{0};
   95|  18.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 16.7M, False: 1.85M]
  ------------------
   96|  16.7M|            ++i;
   97|  16.7M|            ++counter;
   98|  16.7M|        }
   99|  1.85M|        return counter;
  100|  1.85M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.44M|    return [code, msg](parse_error err) {
  869|  3.44M|        assert(err != parse_error::good);
  870|  3.44M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.44M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   405k|    {
 1879|   405k|        auto stdloc = loc.get<std::locale>();
 1880|   405k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   405k|        grouping = numpunct.grouping();
 1882|   405k|        thousands_sep =
 1883|   405k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 405k]
  ------------------
 1884|   405k|        decimal_point = numpunct.decimal_point();
 1885|   405k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   405k|{
 1816|   405k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 405k, False: 0]
  ------------------
 1817|   405k|        return std::use_facet<Facet>(stdloc);
 1818|   405k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   405k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  3.07M|{
 1945|  3.07M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.5k, False: 3.05M]
  |  |  ------------------
  ------------------
 1946|  19.5k|        return unexpected(e);
 1947|  19.5k|    }
 1948|       |
 1949|  3.05M|    return ranges::next(range.begin());
 1950|  3.07M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  4.48M|{
  951|  4.48M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 39.1k, False: 4.44M]
  |  |  ------------------
  ------------------
  952|  39.1k|        return eof_error::eof;
  953|  39.1k|    }
  954|  4.44M|    return eof_error::good;
  955|  4.48M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  6.25M|{
  945|  6.25M|    return is_range_eof(r.begin(), r.end());
  946|  6.25M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  6.25M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.25M|    {
  938|  6.25M|        return begin == end;
  939|  6.25M|    }
  940|  6.25M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.05M|    {
  296|  3.05M|        ++x;
  297|  3.05M|        return x;
  298|  3.05M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|  1.18M|{
 3258|  1.18M|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.18M|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 900k, False: 285k]
  ------------------
 3260|   900k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 900k, False: 279]
  ------------------
 3261|   900k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   900k|        }
 3263|    279|        return unexpected(eof_error::eof);
 3264|   900k|    }
 3265|       |
 3266|   285k|    auto& it = *r;
 3267|   285k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 120k, False: 164k]
  ------------------
 3268|   120k|        return std::pair{it, sign_type::minus_sign};
 3269|   120k|    }
 3270|   164k|    return std::pair{it, sign_type::plus_sign};
 3271|   285k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  2.05M|{
 2372|  2.05M|    auto it = read_code_unit(range);
 2373|  2.05M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.3k, False: 2.04M]
  |  |  ------------------
  ------------------
 2374|  11.3k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  11.3k|    }
 2376|       |
 2377|  3.86M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 3.86M, False: 1.65M]
  ------------------
 2378|  3.86M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 392k, False: 3.47M]
  ------------------
 2379|   392k|            return *it;
 2380|   392k|        }
 2381|  3.86M|    }
 2382|       |
 2383|  1.65M|    return unexpected(parse_error::error);
 2384|  2.04M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  2.88M|{
 2331|  2.88M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  2.88M|    else {
 2344|  2.88M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  2.88M|            if (ch < 'A' || ch > 'Z') {
 2346|  2.88M|                return ch;
 2347|  2.88M|            }
 2348|  2.88M|            return static_cast<char_type>(ch +
 2349|  2.88M|                                          static_cast<char_type>('a' - 'A'));
 2350|  2.88M|        };
 2351|       |
 2352|  2.88M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.88M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.88M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.88M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  2.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 35.1k, False: 2.84M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  35.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  35.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  35.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  35.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  35.1k|    }                                                  \
  |  |  |  | 3939|  2.88M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  2.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  2.84M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  2.84M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  2.84M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.74M, False: 102k]
  |  |  ------------------
  ------------------
 2357|  2.84M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  2.84M|                    return ascii_tolower(a) ==
 2359|  2.84M|                           static_cast<detail::char_t<Range>>(b);
 2360|  2.84M|                }))) {
 2361|  2.74M|            return unexpected(parse_error::error);
 2362|  2.74M|        }
 2363|       |
 2364|   102k|        return it;
 2365|  2.84M|    }
 2366|  2.88M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  3.28M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.28M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 2.95M, False: 323k]
  |  Branch (2345:29): [True: 266k, False: 56.9k]
  ------------------
 2346|  3.22M|                return ch;
 2347|  3.22M|            }
 2348|  56.9k|            return static_cast<char_type>(ch +
 2349|  56.9k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.28M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  1.01M|{
 2246|  1.01M|    auto it = read_code_unit(range);
 2247|  1.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.25k, False: 1.01M]
  |  |  ------------------
  ------------------
 2248|  8.25k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  8.25k|    }
 2250|       |
 2251|  1.01M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 824k, False: 186k]
  |  |  ------------------
  ------------------
 2252|  1.01M|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   824k|        return unexpected(parse_error::error);
 2254|   824k|    }
 2255|       |
 2256|   186k|    return *it;
 2257|  1.01M|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  2.10M|{
 2095|  2.10M|    auto it = read_while_code_unit(range, pred);
 2096|  2.10M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 858k, False: 1.24M]
  ------------------
 2097|   858k|        return unexpected(parse_error::error);
 2098|   858k|    }
 2099|  1.24M|    return it;
 2100|  2.10M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   962k|    {
 1720|   962k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   962k|                           ranges::common_range<Range>) {
 1737|   962k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   962k|            auto end_seg = range.end().contiguous_segment();
 1739|   962k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   962k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 141k, False: 820k]
  |  |  ------------------
  ------------------
 1740|   962k|                             detail::to_address(end_seg.end()))) {
 1741|   141k|                auto& str = m_storage.emplace();
 1742|   141k|                str.reserve(range.end().position() - range.begin().position());
 1743|   141k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   141k|                m_view = string_view_type{str};
 1745|   141k|                return;
 1746|   141k|            }
 1747|       |
 1748|   820k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   820k|                                                            end_seg.data());
 1750|   820k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   962k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  6.56M|    {
 1681|  6.56M|        return m_view;
 1682|  6.56M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  4.03M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6115|   708k|    {
 6116|   708k|        const bool need_skipped_width =
 6117|   708k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 708k]
  |  Branch (6117:33): [True: 0, False: 708k]
  ------------------
 6118|   708k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   708k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 708k]
  ------------------
 6121|   708k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 708k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   708k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 708k, False: 0]
  ------------------
 6130|   708k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 708k]
  ------------------
 6131|   708k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   708k|        return result_type{rng.begin(), 0};
 6155|   708k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  1.40M|{
 1945|  1.40M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.81k, False: 1.39M]
  |  |  ------------------
  ------------------
 1946|  4.81k|        return unexpected(e);
 1947|  4.81k|    }
 1948|       |
 1949|  1.39M|    return ranges::next(range.begin());
 1950|  1.40M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  2.63M|{
  951|  2.63M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.7k, False: 2.61M]
  |  |  ------------------
  ------------------
  952|  20.7k|        return eof_error::eof;
  953|  20.7k|    }
  954|  2.61M|    return eof_error::good;
  955|  2.63M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  2.63M|{
  945|  2.63M|    return is_range_eof(r.begin(), r.end());
  946|  2.63M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  2.63M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.63M|    {
  938|  2.63M|        return begin == end;
  939|  2.63M|    }
  940|  2.63M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.39M|    {
  296|  1.39M|        ++x;
  297|  1.39M|        return x;
  298|  1.39M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   962k|{
 3258|   962k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   962k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 731k, False: 230k]
  ------------------
 3260|   731k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 731k, False: 90]
  ------------------
 3261|   731k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   731k|        }
 3263|     90|        return unexpected(eof_error::eof);
 3264|   731k|    }
 3265|       |
 3266|   230k|    auto& it = *r;
 3267|   230k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 108k, False: 122k]
  ------------------
 3268|   108k|        return std::pair{it, sign_type::minus_sign};
 3269|   108k|    }
 3270|   122k|    return std::pair{it, sign_type::plus_sign};
 3271|   230k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  1.11M|{
 2372|  1.11M|    auto it = read_code_unit(range);
 2373|  1.11M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.02k, False: 1.11M]
  |  |  ------------------
  ------------------
 2374|  2.02k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  2.02k|    }
 2376|       |
 2377|  2.08M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.08M, False: 855k]
  ------------------
 2378|  2.08M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 256k, False: 1.83M]
  ------------------
 2379|   256k|            return *it;
 2380|   256k|        }
 2381|  2.08M|    }
 2382|       |
 2383|   855k|    return unexpected(parse_error::error);
 2384|  1.11M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  2.49M|{
 2331|  2.49M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  2.49M|                  std::is_same_v<char_type, char>) {
 2335|  2.49M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 35.3k, False: 2.45M]
  ------------------
 2336|  35.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  35.3k|        }
 2338|  2.45M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 2.36M, False: 94.3k]
  ------------------
 2339|  2.36M|            return unexpected(parse_error::error);
 2340|  2.36M|        }
 2341|  94.3k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  2.49M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   286k|{
 2246|   286k|    auto it = read_code_unit(range);
 2247|   286k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.79k, False: 283k]
  |  |  ------------------
  ------------------
 2248|  2.79k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  2.79k|    }
 2250|       |
 2251|   283k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 234k, False: 49.4k]
  |  |  ------------------
  ------------------
 2252|   283k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   234k|        return unexpected(parse_error::error);
 2254|   234k|    }
 2255|       |
 2256|  49.4k|    return *it;
 2257|   283k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.60M|    {
 1602|  3.60M|        return sv;
 1603|  3.60M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   530k|{
 2075|   530k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   530k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   530k|{
 2056|   530k|    if constexpr (ranges::common_range<Range>) {
 2057|   530k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   530k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   949k|{
 3066|   949k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 949k, False: 0]
  ------------------
 3067|   949k|        auto it = read_while_classic_space(range);
 3068|   949k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   949k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   949k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.9k, False: 937k]
  |  |  ------------------
  ------------------
 3070|  11.9k|            return unexpected(e);
 3071|  11.9k|        }
 3072|       |
 3073|   937k|        return it;
 3074|   949k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   949k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   949k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   949k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   949k|        auto buf = make_contiguous_buffer(range);
 2220|   949k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   949k|        return ranges::next(range.begin(),
 2222|   949k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   949k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   949k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   949k|                  ranges::sized_range<Range>) {
 1785|   949k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   949k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   949k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   949k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   949k|    {
 1589|   949k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.91M|    {
  304|  2.91M|        ranges::advance(x, n);
  305|  2.91M|        return x;
  306|  2.91M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.87M|    {
  268|  3.87M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.87M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.87M|    {
  181|  18.3M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.4M, False: 3.87M]
  ------------------
  182|  14.4M|            ++i;
  183|  14.4M|        }
  184|  3.87M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|   254k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|   254k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|   254k|            auto rd = make_reader<T, char_type>();
 6236|   254k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   254k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 254k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|   254k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 254k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|   254k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|   254k|                return impl(rd, range, value);
 6241|   254k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   254k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.46M|    {
 3156|  1.46M|        reader_error_handler eh{};
 3157|  1.46M|        get_derived().check_specs_impl(specs, eh);
 3158|  1.46M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.46M]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|  1.46M|        return {};
 3163|  1.46M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  1.46M|    {
 3168|  1.46M|        return static_cast<Derived&>(*this);
 3169|  1.46M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  1.46M|    {
 4178|  1.46M|        detail::check_float_type_specs(specs, eh);
 4179|  1.46M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|   254k|    {
 6161|   254k|        const bool need_skipped_width =
 6162|   254k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 254k]
  |  Branch (6162:33): [True: 0, False: 254k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   254k|        auto it = rng.begin();
 6166|   254k|        std::ptrdiff_t prefix_width = 0;
 6167|   254k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 254k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   254k|        else {
 6175|   254k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.46k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.46k|    }                                                  \
  |  |  |  | 3939|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   249k|            std::tie(it, prefix_width) = prefix_result;
 6177|   249k|        }
 6178|   249k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   249k|        std::ptrdiff_t value_width = 0;
 6182|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 249k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   249k|        else {
 6198|   249k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.7k, False: 231k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.7k|    }                                                  \
  |  | 3939|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   231k|                                             specs, value, loc));
 6200|       |
 6201|   231k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 231k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   231k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   231k|        std::ptrdiff_t postfix_width = 0;
 6210|   231k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 227k, False: 3.57k]
  ------------------
 6211|   227k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   227k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   227k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   227k|                                 value_width));
 6215|   227k|            std::tie(it, postfix_width) = postfix_result;
 6216|   227k|        }
 6217|       |
 6218|   231k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   231k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 231k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   231k|            specs, prefix_width, value_width, postfix_width));
 6220|   231k|        return it;
 6221|   231k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  3.35M|    {
 3151|  3.35M|        return true;
 3152|  3.35M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|  1.43M|    {
 4250|  1.43M|        unsigned options{};
 4251|  1.43M|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 405k, False: 1.03M]
  ------------------
 4252|   405k|            options |= float_reader_base::allow_thsep;
 4253|   405k|        }
 4254|       |
 4255|  1.43M|        SCN_GCC_COMPAT_PUSH
 4256|  1.43M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|  1.43M|        switch (specs.type) {
 4259|   214k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 214k, False: 1.22M]
  ------------------
 4260|   214k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  40.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 40.9k, False: 1.39M]
  ------------------
 4263|  40.9k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   438k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 438k, False: 997k]
  ------------------
 4266|   438k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   336k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 336k, False: 1.09M]
  ------------------
 4269|   336k|                return options | float_reader_base::allow_scientific |
 4270|   336k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   405k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 405k, False: 1.03M]
  ------------------
 4273|   405k|                return options | float_reader_base::allow_scientific |
 4274|   405k|                       float_reader_base::allow_fixed |
 4275|   405k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 1.43M]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|  1.43M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|  1.43M|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|  1.43M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|  1.43M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  2.01M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  4.03M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   618k|    {
 3733|   618k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   618k|        const std::ptrdiff_t sign_len =
 3736|   618k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 152k, False: 465k]
  ------------------
 3737|       |
 3738|   618k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   618k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   618k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   618k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16.1k, False: 602k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  16.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  16.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  16.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  16.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  16.1k|    }                                                  \
  |  |  |  | 3939|   618k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   602k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   602k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   618k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|  1.91M|    {
 4090|  1.91M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 1.91M, False: 0]
  ------------------
 4091|  1.91M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 1.91M, False: 0]
  ------------------
 4092|  1.91M|            return;
 4093|  1.91M|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.19M|    {
 1686|  2.19M|        return m_storage.has_value();
 1687|  2.19M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.28M|    {
 1691|  1.28M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.28M|        return *m_storage;
 1693|  1.28M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   249k|    {
 4203|   249k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   249k|#if !SCN_DISABLE_LOCALE
 4206|   249k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 70.1k, False: 179k]
  ------------------
 4207|  70.1k|            return read_impl<Range>(
 4208|  70.1k|                range, rd,
 4209|  70.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  70.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  70.1k|                },
 4212|  70.1k|                value, loc);
 4213|  70.1k|        }
 4214|   179k|#endif
 4215|       |
 4216|   179k|        return read_impl<Range>(
 4217|   179k|            range, rd,
 4218|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   179k|                return r.read_source(SCN_FWD(args)...);
 4220|   179k|            },
 4221|   179k|            value);
 4222|   249k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   347k|    {
 4239|   347k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   347k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.2k, False: 325k]
  |  |  ------------------
  ------------------
 4241|  21.2k|            return unexpected(r.error());
 4242|  21.2k|        }
 4243|       |
 4244|   325k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.02k, False: 322k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.02k|    }                                                  \
  |  |  |  | 3939|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   322k|        return ranges::next(range.begin(), n);
 4246|   325k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.07M|    {
  763|  1.07M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.07M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  70.1k|        : m_fptr([](storage fn,
  743|  70.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.1k|              cvref<T> obj = *get<T>(fn);
  745|  70.1k|              if constexpr (std::is_void_v<R>) {
  746|  70.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.1k|              }
  748|  70.1k|              else {
  749|  70.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.1k|              }
  751|  70.1k|          }),
  752|  70.1k|          m_storage(std::addressof(f))
  753|  70.1k|    {
  754|  70.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  70.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  70.1k|              else {
  749|  70.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.1k|              }
  751|  70.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  70.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  70.1k|        else if constexpr (std::is_object_v<T>) {
  688|  70.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  70.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  70.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  70.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  70.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  70.1k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   221k|    {
 3721|   221k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   221k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   221k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   221k|        return read_source_impl(range);
 3727|   221k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|  1.07M|    {
 3747|  1.07M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|  1.07M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|  1.07M|        auto it = sign_result.first;
 3750|  1.07M|        m_sign = sign_result.second;
 3751|       |
 3752|  1.07M|        auto digits_begin = it;
 3753|  1.07M|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|  1.07M|        else {
 3780|  1.07M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 66.0k, False: 1.01M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  66.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  66.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  66.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  66.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  66.0k|    }                                                  \
  |  | 3939|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|  1.01M|                it,
 3782|  1.01M|                do_read_source_impl(
 3783|  1.01M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|  1.01M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|  1.01M|        }
 3786|       |
 3787|  1.07M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|  1.01M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 1.00M, False: 5.46k]
  |  Branch (3789:48): [True: 1.00M, False: 4.93k]
  ------------------
 3790|  1.01M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 960k, False: 41.4k]
  ------------------
 3791|  1.01M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 958k, False: 2.51k]
  ------------------
 3792|   958k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   958k|        }
 3794|       |
 3795|  1.01M|        handle_separators();
 3796|       |
 3797|  1.01M|        return it;
 3798|  1.07M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|  1.07M|    {
 4033|  1.07M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|  1.07M|        const bool allowed_nonhex =
 4035|  1.07M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|  1.07M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|  1.07M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 1.06M, False: 10.3k]
  |  Branch (4038:45): [True: 0, False: 1.06M]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|  1.07M|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 10.3k, False: 1.06M]
  ------------------
 4044|  10.3k|            return *r;
 4045|  10.3k|        }
 4046|       |
 4047|  1.06M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 1.02M, False: 43.9k]
  |  Branch (4047:45): [True: 1.32k, False: 1.02M]
  ------------------
 4048|  1.32k|            return unexpected(r.error());
 4049|  1.32k|        }
 4050|  1.06M|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 43.9k, False: 1.02M]
  ------------------
 4051|  43.9k|            return *r;
 4052|  43.9k|        }
 4053|       |
 4054|  1.02M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 724k, False: 298k]
  |  Branch (4054:28): [True: 227k, False: 496k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   227k|            auto it = range.begin();
 4058|       |
 4059|   227k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 12.6k, False: 214k]
  ------------------
 4060|  12.6k|                m_kind = float_kind::hex_with_prefix;
 4061|  12.6k|                it = *r;
 4062|  12.6k|            }
 4063|   214k|            else {
 4064|   214k|                m_kind = float_kind::hex_without_prefix;
 4065|   214k|            }
 4066|       |
 4067|   227k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   227k|        }
 4069|   795k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 298k, False: 496k]
  |  Branch (4069:29): [True: 298k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   298k|            m_kind = float_kind::generic;
 4073|   298k|            return read_regular_float(range);
 4074|   298k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   496k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.2k, False: 467k]
  |  |  ------------------
  ------------------
 4080|  29.2k|            m_kind = float_kind::hex_with_prefix;
 4081|  29.2k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  29.2k|        }
 4083|       |
 4084|   467k|        m_kind = float_kind::generic;
 4085|   467k|        return read_regular(range);
 4086|   496k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|  1.07M|    {
 3841|  1.07M|        auto it = range.begin();
 3842|  1.07M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 1.06M, False: 10.3k]
  ------------------
 3843|  1.06M|            return unexpected(r.error());
 3844|  1.06M|        }
 3845|  10.3k|        else {
 3846|  10.3k|            it = *r;
 3847|  10.3k|        }
 3848|       |
 3849|  10.3k|        if (auto r = read_matching_string_classic_nocase(
 3850|  10.3k|                ranges::subrange{it, range.end()}, "inity");
 3851|  10.3k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.46k, False: 4.93k]
  ------------------
 3852|  5.46k|            m_kind = float_kind::inf_short;
 3853|  5.46k|            return it;
 3854|  5.46k|        }
 3855|  4.93k|        else {
 3856|  4.93k|            m_kind = float_kind::inf_long;
 3857|  4.93k|            return *r;
 3858|  4.93k|        }
 3859|  10.3k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|  1.06M|    {
 3864|  1.06M|        auto it = range.begin();
 3865|  1.06M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 1.02M, False: 45.2k]
  ------------------
 3866|  1.02M|            return r.transform_error(map_parse_error_to_scan_error(
 3867|  1.02M|                scan_error::invalid_scanned_value,
 3868|  1.02M|                "Invalid floating-point NaN value"));
 3869|  1.02M|        }
 3870|  45.2k|        else {
 3871|  45.2k|            it = *r;
 3872|  45.2k|        }
 3873|       |
 3874|  45.2k|        if (auto r =
 3875|  45.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  45.2k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 41.4k, False: 3.84k]
  ------------------
 3877|  41.4k|            m_kind = float_kind::nan_simple;
 3878|  41.4k|            return it;
 3879|  41.4k|        }
 3880|  3.84k|        else {
 3881|  3.84k|            it = *r;
 3882|  3.84k|        }
 3883|       |
 3884|  3.84k|        auto payload_beg_it = it;
 3885|  3.84k|        it = read_while_code_unit(
 3886|  3.84k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  3.84k|                return is_ascii_char(ch) &&
 3888|  3.84k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  3.84k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  3.84k|            });
 3891|  3.84k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  3.84k|        m_kind = float_kind::nan_with_payload;
 3894|  3.84k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 2.51k, False: 1.32k]
  ------------------
 3895|  3.84k|                                             ')')) {
 3896|  2.51k|            return *r;
 3897|  2.51k|        }
 3898|  1.32k|        return detail::unexpected_scan_error(
 3899|  1.32k|            scan_error::invalid_scanned_value,
 3900|  1.32k|            "Invalid floating-point NaN payload");
 3901|  3.84k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  3.84k|        : m_fptr([](storage fn,
  743|  3.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.84k|              cvref<T> obj = *get<T>(fn);
  745|  3.84k|              if constexpr (std::is_void_v<R>) {
  746|  3.84k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.84k|              }
  748|  3.84k|              else {
  749|  3.84k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.84k|              }
  751|  3.84k|          }),
  752|  3.84k|          m_storage(std::addressof(f))
  753|  3.84k|    {
  754|  3.84k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  38.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.9k|        else if constexpr (std::is_object_v<T>) {
  688|  38.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.9k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3886|  38.9k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  38.9k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 38.9k, False: 83]
  ------------------
 3888|  38.9k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 36.1k, False: 2.74k]
  |  Branch (3888:39): [True: 28.3k, False: 7.81k]
  |  Branch (3888:54): [True: 2.56k, False: 7.99k]
  |  Branch (3888:67): [True: 2.47k, False: 83]
  ------------------
 3889|  38.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.33k, False: 2.74k]
  |  Branch (3889:39): [True: 2.53k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 2.83k]
  ------------------
 3890|  38.9k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  3.84k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.84k|        {
  662|  3.84k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   724k|    {
 3834|   724k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   724k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   256k|    {
 3935|   256k|        auto it = range.begin();
 3936|       |
 3937|   256k|        std::ptrdiff_t digits_count = 0;
 3938|   256k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   256k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.16k, False: 248k]
  |  |  ------------------
  ------------------
 3940|  8.16k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  8.16k|                scan_error::invalid_scanned_value,
 3942|  8.16k|                "Invalid hexadecimal floating-point value"));
 3943|  8.16k|        }
 3944|   248k|        else {
 3945|   248k|            digits_count += ranges::distance(it, *r);
 3946|   248k|            it = *r;
 3947|   248k|        }
 3948|       |
 3949|   248k|        m_integral_part_length = digits_count;
 3950|   248k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 38.1k, False: 210k]
  ------------------
 3951|   248k|                                             m_locale_options.decimal_point)) {
 3952|  38.1k|            it = *r;
 3953|  38.1k|        }
 3954|       |
 3955|   248k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 34.6k, False: 213k]
  ------------------
 3956|   248k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|  34.6k|            digits_count += ranges::distance(it, *r);
 3958|  34.6k|            it = *r;
 3959|  34.6k|        }
 3960|       |
 3961|   248k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|   248k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|   248k|        return it;
 3970|   248k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   505k|    {
 3819|   505k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 505k]
  |  |  |  Branch (865:45): [True: 0, False: 505k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   505k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   505k|        return read_while1_code_unit(
 3828|   505k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   505k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   505k|        : m_fptr([](storage fn,
  743|   505k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   505k|              cvref<T> obj = *get<T>(fn);
  745|   505k|              if constexpr (std::is_void_v<R>) {
  746|   505k|                  obj(static_cast<decltype(args)>(args)...);
  747|   505k|              }
  748|   505k|              else {
  749|   505k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   505k|              }
  751|   505k|          }),
  752|   505k|          m_storage(std::addressof(f))
  753|   505k|    {
  754|   505k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.70M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.70M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.70M|              else {
  749|  2.70M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.70M|              }
  751|  2.70M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.70M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.70M|        else if constexpr (std::is_object_v<T>) {
  688|  2.70M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.70M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3828|  2.70M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   505k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   505k|        {
  662|   505k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   873k|    {
 3907|   873k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 107k, False: 766k]
  ------------------
 3908|   107k|            auto beg_exp_it = range.begin();
 3909|   107k|            auto it = *r;
 3910|       |
 3911|   107k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 106k, False: 279]
  ------------------
 3912|   107k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|   106k|                it = r_sign->first;
 3914|   106k|            }
 3915|       |
 3916|   107k|            if (auto r_exp = read_while1_code_unit(
 3917|   107k|                    ranges::subrange{it, range.end()},
 3918|   107k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|   107k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.76k, False: 105k]
  |  |  ------------------
  ------------------
 3920|  1.76k|                it = beg_exp_it;
 3921|  1.76k|            }
 3922|   105k|            else {
 3923|   105k|                it = *r_exp;
 3924|   105k|            }
 3925|       |
 3926|   107k|            return it;
 3927|   107k|        }
 3928|   766k|        return range.begin();
 3929|   873k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   337k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   337k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   337k|              else {
  749|   337k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   337k|              }
  751|   337k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   337k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   337k|        else if constexpr (std::is_object_v<T>) {
  688|   337k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   337k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3918|   337k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   766k|    {
 3976|   766k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   766k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 657k, False: 108k]
  |  Branch (3977:50): [True: 20.0k, False: 637k]
  ------------------
 3978|       |
 3979|   766k|        auto it = ranges::begin(range);
 3980|   766k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   766k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   766k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   766k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 44.8k, False: 721k]
  |  |  ------------------
  ------------------
 3984|  44.8k|            return r.transform_error(
 3985|  44.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  44.8k|                                              "Invalid floating-point value"));
 3987|  44.8k|        }
 3988|   721k|        else {
 3989|   721k|            digits_count += ranges::distance(it, *r);
 3990|   721k|            it = *r;
 3991|   721k|        }
 3992|       |
 3993|   721k|        m_integral_part_length = digits_count;
 3994|   721k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 142k, False: 579k]
  ------------------
 3995|   721k|                                             m_locale_options.decimal_point)) {
 3996|   142k|            it = *r;
 3997|   142k|        }
 3998|       |
 3999|   721k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 131k, False: 589k]
  ------------------
 4000|   721k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|   131k|            digits_count += ranges::distance(it, *r);
 4002|   131k|            it = *r;
 4003|   131k|        }
 4004|       |
 4005|   721k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 721k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   721k|        auto beg_exp_it = it;
 4012|   721k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 624k, False: 96.6k]
  ------------------
 4013|   624k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   624k|        }
 4015|   721k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 19.2k, False: 702k]
  |  Branch (4015:29): [True: 11.7k, False: 7.50k]
  ------------------
 4016|  11.7k|            return detail::unexpected_scan_error(
 4017|  11.7k|                scan_error::invalid_scanned_value,
 4018|  11.7k|                "No exponent given to scientific float");
 4019|  11.7k|        }
 4020|       |
 4021|   709k|        m_kind =
 4022|   709k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 604k, False: 104k]
  ------------------
 4023|       |
 4024|   709k|        return it;
 4025|   721k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|  1.48M|    {
 3804|  1.48M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.48M]
  |  |  |  Branch (865:45): [True: 0, False: 1.48M]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|  1.48M|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|  1.48M|        return read_while1_code_unit(
 3813|  1.48M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|  1.48M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.48M|        : m_fptr([](storage fn,
  743|  1.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.48M|              cvref<T> obj = *get<T>(fn);
  745|  1.48M|              if constexpr (std::is_void_v<R>) {
  746|  1.48M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.48M|              }
  748|  1.48M|              else {
  749|  1.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.48M|              }
  751|  1.48M|          }),
  752|  1.48M|          m_storage(std::addressof(f))
  753|  1.48M|    {
  754|  1.48M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.40M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.40M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.40M|              else {
  749|  8.40M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.40M|              }
  751|  8.40M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.40M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.40M|        else if constexpr (std::is_object_v<T>) {
  688|  8.40M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.40M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3813|  8.40M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.48M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.48M|        {
  662|  1.48M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   962k|    {
 1676|   962k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   962k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   962k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  70.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  70.1k|        {
  662|  70.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   179k|        : m_fptr([](storage fn,
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|   179k|              if constexpr (std::is_void_v<R>) {
  746|   179k|                  obj(static_cast<decltype(args)>(args)...);
  747|   179k|              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
  752|   179k|          m_storage(std::addressof(f))
  753|   179k|    {
  754|   179k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   179k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   179k|        else if constexpr (std::is_object_v<T>) {
  688|   179k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   179k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   179k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   179k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   857k|    {
 3707|   857k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   857k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 857k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   857k|        return read_source_impl(range);
 3713|   857k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   179k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   179k|        {
  662|   179k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   215k|    {
 4203|   215k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   215k|#if !SCN_DISABLE_LOCALE
 4206|   215k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 59.4k, False: 155k]
  ------------------
 4207|  59.4k|            return read_impl<Range>(
 4208|  59.4k|                range, rd,
 4209|  59.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  59.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  59.4k|                },
 4212|  59.4k|                value, loc);
 4213|  59.4k|        }
 4214|   155k|#endif
 4215|       |
 4216|   155k|        return read_impl<Range>(
 4217|   155k|            range, rd,
 4218|   155k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   155k|                return r.read_source(SCN_FWD(args)...);
 4220|   155k|            },
 4221|   155k|            value);
 4222|   215k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   304k|    {
 4239|   304k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   304k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 292k]
  |  |  ------------------
  ------------------
 4241|  12.1k|            return unexpected(r.error());
 4242|  12.1k|        }
 4243|       |
 4244|   292k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   292k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   292k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   292k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.1k, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.1k|    }                                                  \
  |  |  |  | 3939|   292k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   279k|        return ranges::next(range.begin(), n);
 4246|   292k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   937k|    {
  763|   937k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   937k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  59.4k|        : m_fptr([](storage fn,
  743|  59.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.4k|              cvref<T> obj = *get<T>(fn);
  745|  59.4k|              if constexpr (std::is_void_v<R>) {
  746|  59.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.4k|              }
  748|  59.4k|              else {
  749|  59.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.4k|              }
  751|  59.4k|          }),
  752|  59.4k|          m_storage(std::addressof(f))
  753|  59.4k|    {
  754|  59.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  59.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.4k|              else {
  749|  59.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.4k|              }
  751|  59.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  59.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.4k|        else if constexpr (std::is_object_v<T>) {
  688|  59.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  59.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  59.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  59.4k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   184k|    {
 3721|   184k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   184k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   184k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   184k|        return read_source_impl(range);
 3727|   184k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   937k|    {
 3747|   937k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   937k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   937k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   937k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 937k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   937k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   937k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   937k|        auto it = sign_result.first;
 3750|   937k|        m_sign = sign_result.second;
 3751|       |
 3752|   937k|        auto digits_begin = it;
 3753|   937k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   937k|                      ranges::sized_range<Range>) {
 3756|   937k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 937k]
  |  |  |  Branch (865:45): [True: 0, False: 937k]
  |  |  |  Branch (865:45): [True: 0, False: 937k]
  |  |  ------------------
  ------------------
 3757|   937k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   937k|            else {
 3766|   937k|                auto cb = [&](const auto& rr)
 3767|   937k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   937k|                    auto res = read_all(rr);
 3769|   937k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   937k|                        return detail::unexpected_scan_error(
 3771|   937k|                            scan_error::invalid_scanned_value,
 3772|   937k|                            "Invalid float value");
 3773|   937k|                    }
 3774|   937k|                    return res;
 3775|   937k|                };
 3776|   937k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   937k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   937k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 37.3k, False: 899k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  37.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  37.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  37.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  37.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  37.3k|    }                                                  \
  |  | 3939|   937k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   899k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   937k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   937k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   937k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   899k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 894k, False: 5.17k]
  |  Branch (3789:48): [True: 890k, False: 4.54k]
  ------------------
 3790|   899k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 849k, False: 40.5k]
  ------------------
 3791|   899k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 847k, False: 2.39k]
  ------------------
 3792|   847k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   847k|        }
 3794|       |
 3795|   899k|        handle_separators();
 3796|       |
 3797|   899k|        return it;
 3798|   937k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   937k|    {
 3841|   937k|        auto it = range.begin();
 3842|   937k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 927k, False: 9.72k]
  ------------------
 3843|   927k|            return unexpected(r.error());
 3844|   927k|        }
 3845|  9.72k|        else {
 3846|  9.72k|            it = *r;
 3847|  9.72k|        }
 3848|       |
 3849|  9.72k|        if (auto r = read_matching_string_classic_nocase(
 3850|  9.72k|                ranges::subrange{it, range.end()}, "inity");
 3851|  9.72k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.17k, False: 4.54k]
  ------------------
 3852|  5.17k|            m_kind = float_kind::inf_short;
 3853|  5.17k|            return it;
 3854|  5.17k|        }
 3855|  4.54k|        else {
 3856|  4.54k|            m_kind = float_kind::inf_long;
 3857|  4.54k|            return *r;
 3858|  4.54k|        }
 3859|  9.72k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   927k|    {
 3864|   927k|        auto it = range.begin();
 3865|   927k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 883k, False: 44.1k]
  ------------------
 3866|   883k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   883k|                scan_error::invalid_scanned_value,
 3868|   883k|                "Invalid floating-point NaN value"));
 3869|   883k|        }
 3870|  44.1k|        else {
 3871|  44.1k|            it = *r;
 3872|  44.1k|        }
 3873|       |
 3874|  44.1k|        if (auto r =
 3875|  44.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  44.1k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 40.5k, False: 3.67k]
  ------------------
 3877|  40.5k|            m_kind = float_kind::nan_simple;
 3878|  40.5k|            return it;
 3879|  40.5k|        }
 3880|  3.67k|        else {
 3881|  3.67k|            it = *r;
 3882|  3.67k|        }
 3883|       |
 3884|  3.67k|        auto payload_beg_it = it;
 3885|  3.67k|        it = read_while_code_unit(
 3886|  3.67k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  3.67k|                return is_ascii_char(ch) &&
 3888|  3.67k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  3.67k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  3.67k|            });
 3891|  3.67k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  3.67k|        m_kind = float_kind::nan_with_payload;
 3894|  3.67k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 2.39k, False: 1.28k]
  ------------------
 3895|  3.67k|                                             ')')) {
 3896|  2.39k|            return *r;
 3897|  2.39k|        }
 3898|  1.28k|        return detail::unexpected_scan_error(
 3899|  1.28k|            scan_error::invalid_scanned_value,
 3900|  1.28k|            "Invalid floating-point NaN payload");
 3901|  3.67k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  3.67k|        : m_fptr([](storage fn,
  743|  3.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.67k|              cvref<T> obj = *get<T>(fn);
  745|  3.67k|              if constexpr (std::is_void_v<R>) {
  746|  3.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.67k|              }
  748|  3.67k|              else {
  749|  3.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.67k|              }
  751|  3.67k|          }),
  752|  3.67k|          m_storage(std::addressof(f))
  753|  3.67k|    {
  754|  3.67k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  34.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.2k|              else {
  749|  34.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.2k|              }
  751|  34.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  34.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.2k|        else if constexpr (std::is_object_v<T>) {
  688|  34.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.2k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3886|  34.2k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  34.2k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 34.1k, False: 83]
  ------------------
 3888|  34.2k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 31.5k, False: 2.59k]
  |  Branch (3888:39): [True: 23.7k, False: 7.80k]
  |  Branch (3888:54): [True: 2.55k, False: 7.84k]
  |  Branch (3888:67): [True: 2.47k, False: 83]
  ------------------
 3889|  34.1k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.33k, False: 2.59k]
  |  Branch (3889:39): [True: 2.53k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 2.68k]
  ------------------
 3890|  34.2k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  3.67k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.67k|        {
  662|  3.67k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   620k|    {
 3834|   620k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   620k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   526k|{
 2095|   526k|    auto it = read_while_code_unit(range, pred);
 2096|   526k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 223k, False: 303k]
  ------------------
 2097|   223k|        return unexpected(parse_error::error);
 2098|   223k|    }
 2099|   303k|    return it;
 2100|   526k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|   151k|    {
 3907|   151k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 25.5k, False: 126k]
  ------------------
 3908|  25.5k|            auto beg_exp_it = range.begin();
 3909|  25.5k|            auto it = *r;
 3910|       |
 3911|  25.5k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 25.4k, False: 90]
  ------------------
 3912|  25.5k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  25.4k|                it = r_sign->first;
 3914|  25.4k|            }
 3915|       |
 3916|  25.5k|            if (auto r_exp = read_while1_code_unit(
 3917|  25.5k|                    ranges::subrange{it, range.end()},
 3918|  25.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  25.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  25.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 646, False: 24.8k]
  |  |  ------------------
  ------------------
 3920|    646|                it = beg_exp_it;
 3921|    646|            }
 3922|  24.8k|            else {
 3923|  24.8k|                it = *r_exp;
 3924|  24.8k|            }
 3925|       |
 3926|  25.5k|            return it;
 3927|  25.5k|        }
 3928|   126k|        return range.begin();
 3929|   151k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  25.5k|        : m_fptr([](storage fn,
  743|  25.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.5k|              cvref<T> obj = *get<T>(fn);
  745|  25.5k|              if constexpr (std::is_void_v<R>) {
  746|  25.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.5k|              }
  748|  25.5k|              else {
  749|  25.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.5k|              }
  751|  25.5k|          }),
  752|  25.5k|          m_storage(std::addressof(f))
  753|  25.5k|    {
  754|  25.5k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  73.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  73.1k|              else {
  749|  73.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.1k|              }
  751|  73.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  73.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  73.1k|        else if constexpr (std::is_object_v<T>) {
  688|  73.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  73.1k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3918|  73.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  25.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  25.5k|        {
  662|  25.5k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   262k|    {
 3976|   262k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   262k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 163k, False: 99.3k]
  |  Branch (3977:50): [True: 18.5k, False: 144k]
  ------------------
 3978|       |
 3979|   262k|        auto it = ranges::begin(range);
 3980|   262k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   262k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   262k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.7k, False: 238k]
  |  |  ------------------
  ------------------
 3984|  23.7k|            return r.transform_error(
 3985|  23.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  23.7k|                                              "Invalid floating-point value"));
 3987|  23.7k|        }
 3988|   238k|        else {
 3989|   238k|            digits_count += ranges::distance(it, *r);
 3990|   238k|            it = *r;
 3991|   238k|        }
 3992|       |
 3993|   238k|        m_integral_part_length = digits_count;
 3994|   238k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 43.4k, False: 195k]
  ------------------
 3995|   238k|                                             m_locale_options.decimal_point)) {
 3996|  43.4k|            it = *r;
 3997|  43.4k|        }
 3998|       |
 3999|   238k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 39.6k, False: 199k]
  ------------------
 4000|   238k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  39.6k|            digits_count += ranges::distance(it, *r);
 4002|  39.6k|            it = *r;
 4003|  39.6k|        }
 4004|       |
 4005|   238k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   238k|        auto beg_exp_it = it;
 4012|   238k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 151k, False: 87.0k]
  ------------------
 4013|   151k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   151k|        }
 4015|   238k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 17.3k, False: 221k]
  |  Branch (4015:29): [True: 11.4k, False: 5.84k]
  ------------------
 4016|  11.4k|            return detail::unexpected_scan_error(
 4017|  11.4k|                scan_error::invalid_scanned_value,
 4018|  11.4k|                "No exponent given to scientific float");
 4019|  11.4k|        }
 4020|       |
 4021|   227k|        m_kind =
 4022|   227k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 202k, False: 24.8k]
  ------------------
 4023|       |
 4024|   227k|        return it;
 4025|   238k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   501k|    {
 3804|   501k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 501k]
  |  |  |  Branch (865:45): [True: 0, False: 501k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   501k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   501k|        return read_while1_code_unit(
 3813|   501k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   501k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   501k|        : m_fptr([](storage fn,
  743|   501k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   501k|              cvref<T> obj = *get<T>(fn);
  745|   501k|              if constexpr (std::is_void_v<R>) {
  746|   501k|                  obj(static_cast<decltype(args)>(args)...);
  747|   501k|              }
  748|   501k|              else {
  749|   501k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   501k|              }
  751|   501k|          }),
  752|   501k|          m_storage(std::addressof(f))
  753|   501k|    {
  754|   501k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.58M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.58M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.58M|              else {
  749|  2.58M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.58M|              }
  751|  2.58M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.58M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.58M|        else if constexpr (std::is_object_v<T>) {
  688|  2.58M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.58M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|  2.58M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   501k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   501k|        {
  662|   501k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   937k|    {
 4033|   937k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   937k|        const bool allowed_nonhex =
 4035|   937k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   937k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   937k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 927k, False: 9.72k]
  |  Branch (4038:45): [True: 0, False: 927k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   937k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 9.72k, False: 927k]
  ------------------
 4044|  9.72k|            return *r;
 4045|  9.72k|        }
 4046|       |
 4047|   927k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 884k, False: 42.9k]
  |  Branch (4047:45): [True: 1.28k, False: 883k]
  ------------------
 4048|  1.28k|            return unexpected(r.error());
 4049|  1.28k|        }
 4050|   926k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 42.9k, False: 883k]
  ------------------
 4051|  42.9k|            return *r;
 4052|  42.9k|        }
 4053|       |
 4054|   883k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 620k, False: 262k]
  |  Branch (4054:28): [True: 187k, False: 433k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   187k|            auto it = range.begin();
 4058|       |
 4059|   187k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 10.4k, False: 176k]
  ------------------
 4060|  10.4k|                m_kind = float_kind::hex_with_prefix;
 4061|  10.4k|                it = *r;
 4062|  10.4k|            }
 4063|   176k|            else {
 4064|   176k|                m_kind = float_kind::hex_without_prefix;
 4065|   176k|            }
 4066|       |
 4067|   187k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   187k|        }
 4069|   695k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 262k, False: 433k]
  |  Branch (4069:29): [True: 262k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   262k|            m_kind = float_kind::generic;
 4073|   262k|            return read_regular_float(range);
 4074|   262k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   433k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.4k, False: 407k]
  |  |  ------------------
  ------------------
 4080|  25.4k|            m_kind = float_kind::hex_with_prefix;
 4081|  25.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  25.4k|        }
 4083|       |
 4084|   407k|        m_kind = float_kind::generic;
 4085|   407k|        return read_regular(range);
 4086|   433k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   620k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   620k|                    auto res = read_all(rr);
 3769|   620k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 815, False: 619k]
  |  |  ------------------
  ------------------
 3770|    815|                        return detail::unexpected_scan_error(
 3771|    815|                            scan_error::invalid_scanned_value,
 3772|    815|                            "Invalid float value");
 3773|    815|                    }
 3774|   619k|                    return res;
 3775|   620k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   620k|{
 1938|   620k|    return ranges::next(range.begin(), range.end());
 1939|   620k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   620k|    {
  313|   620k|        ranges::advance(x, bound);
  314|   620k|        return x;
  315|   620k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   620k|    {
  275|   620k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   620k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   620k|    {
  190|   620k|        i = std::move(bound);
  191|   620k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   850k|    {
 1676|   850k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   850k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   850k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   850k|    {
 1720|   850k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   850k|                      ranges::sized_range<Range>) {
 1725|   850k|            m_storage.reset();
 1726|   850k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   850k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.4k|        {
  662|  59.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   155k|        : m_fptr([](storage fn,
  743|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   155k|              cvref<T> obj = *get<T>(fn);
  745|   155k|              if constexpr (std::is_void_v<R>) {
  746|   155k|                  obj(static_cast<decltype(args)>(args)...);
  747|   155k|              }
  748|   155k|              else {
  749|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   155k|              }
  751|   155k|          }),
  752|   155k|          m_storage(std::addressof(f))
  753|   155k|    {
  754|   155k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   155k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   155k|              else {
  749|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   155k|              }
  751|   155k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   155k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   155k|        else if constexpr (std::is_object_v<T>) {
  688|   155k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   155k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   155k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   155k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   155k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   752k|    {
 3707|   752k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 752k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   752k|        return read_source_impl(range);
 3713|   752k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   155k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   155k|        {
  662|   155k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|   266k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|   266k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|   266k|            auto rd = make_reader<T, char_type>();
 6236|   266k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   266k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 266k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|   266k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 266k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|   266k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|   266k|                return impl(rd, range, value);
 6241|   266k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   266k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|   266k|    {
 6161|   266k|        const bool need_skipped_width =
 6162|   266k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 266k]
  |  Branch (6162:33): [True: 0, False: 266k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   266k|        auto it = rng.begin();
 6166|   266k|        std::ptrdiff_t prefix_width = 0;
 6167|   266k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 266k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   266k|        else {
 6175|   266k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   266k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   266k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   266k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.98k, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.98k|    }                                                  \
  |  |  |  | 3939|   266k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   261k|            std::tie(it, prefix_width) = prefix_result;
 6177|   261k|        }
 6178|   261k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   261k|        std::ptrdiff_t value_width = 0;
 6182|   261k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 261k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   261k|        else {
 6198|   261k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.2k, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.2k|    }                                                  \
  |  | 3939|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   243k|                                             specs, value, loc));
 6200|       |
 6201|   243k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 243k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   243k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   243k|        std::ptrdiff_t postfix_width = 0;
 6210|   243k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 239k, False: 3.98k]
  ------------------
 6211|   239k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   239k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   239k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   239k|                                 value_width));
 6215|   239k|            std::tie(it, postfix_width) = postfix_result;
 6216|   239k|        }
 6217|       |
 6218|   243k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   243k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   243k|            specs, prefix_width, value_width, postfix_width));
 6220|   243k|        return it;
 6221|   243k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   644k|    {
 3733|   644k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   644k|        const std::ptrdiff_t sign_len =
 3736|   644k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 159k, False: 484k]
  ------------------
 3737|       |
 3738|   644k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   644k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   644k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   644k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.8k, False: 630k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.8k|    }                                                  \
  |  |  |  | 3939|   644k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   630k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   630k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   644k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   261k|    {
 4203|   261k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   261k|#if !SCN_DISABLE_LOCALE
 4206|   261k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 75.0k, False: 186k]
  ------------------
 4207|  75.0k|            return read_impl<Range>(
 4208|  75.0k|                range, rd,
 4209|  75.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  75.0k|                },
 4212|  75.0k|                value, loc);
 4213|  75.0k|        }
 4214|   186k|#endif
 4215|       |
 4216|   186k|        return read_impl<Range>(
 4217|   186k|            range, rd,
 4218|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   186k|                return r.read_source(SCN_FWD(args)...);
 4220|   186k|            },
 4221|   186k|            value);
 4222|   261k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   364k|    {
 4239|   364k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   364k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.0k, False: 342k]
  |  |  ------------------
  ------------------
 4241|  22.0k|            return unexpected(r.error());
 4242|  22.0k|        }
 4243|       |
 4244|   342k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   342k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.46k, False: 340k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.46k|    }                                                  \
  |  |  |  | 3939|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   340k|        return ranges::next(range.begin(), n);
 4246|   342k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  75.0k|        : m_fptr([](storage fn,
  743|  75.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.0k|              cvref<T> obj = *get<T>(fn);
  745|  75.0k|              if constexpr (std::is_void_v<R>) {
  746|  75.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.0k|              }
  748|  75.0k|              else {
  749|  75.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.0k|              }
  751|  75.0k|          }),
  752|  75.0k|          m_storage(std::addressof(f))
  753|  75.0k|    {
  754|  75.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  75.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  75.0k|              else {
  749|  75.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.0k|              }
  751|  75.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  75.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  75.0k|        else if constexpr (std::is_object_v<T>) {
  688|  75.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  75.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  75.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  75.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  75.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  75.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  75.0k|        {
  662|  75.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   186k|        : m_fptr([](storage fn,
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|   186k|              if constexpr (std::is_void_v<R>) {
  746|   186k|                  obj(static_cast<decltype(args)>(args)...);
  747|   186k|              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
  752|   186k|          m_storage(std::addressof(f))
  753|   186k|    {
  754|   186k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   186k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   186k|        else if constexpr (std::is_object_v<T>) {
  688|   186k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   186k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   186k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   186k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   186k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   186k|        {
  662|   186k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   221k|    {
 4203|   221k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   221k|#if !SCN_DISABLE_LOCALE
 4206|   221k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 61.8k, False: 159k]
  ------------------
 4207|  61.8k|            return read_impl<Range>(
 4208|  61.8k|                range, rd,
 4209|  61.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  61.8k|                },
 4212|  61.8k|                value, loc);
 4213|  61.8k|        }
 4214|   159k|#endif
 4215|       |
 4216|   159k|        return read_impl<Range>(
 4217|   159k|            range, rd,
 4218|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   159k|                return r.read_source(SCN_FWD(args)...);
 4220|   159k|            },
 4221|   159k|            value);
 4222|   221k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   314k|    {
 4239|   314k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   314k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.4k, False: 302k]
  |  |  ------------------
  ------------------
 4241|  12.4k|            return unexpected(r.error());
 4242|  12.4k|        }
 4243|       |
 4244|   302k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.3k, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   289k|        return ranges::next(range.begin(), n);
 4246|   302k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  61.8k|        : m_fptr([](storage fn,
  743|  61.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.8k|              cvref<T> obj = *get<T>(fn);
  745|  61.8k|              if constexpr (std::is_void_v<R>) {
  746|  61.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  61.8k|              }
  748|  61.8k|              else {
  749|  61.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.8k|              }
  751|  61.8k|          }),
  752|  61.8k|          m_storage(std::addressof(f))
  753|  61.8k|    {
  754|  61.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  61.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.8k|              else {
  749|  61.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.8k|              }
  751|  61.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  61.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.8k|        else if constexpr (std::is_object_v<T>) {
  688|  61.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  61.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  61.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  61.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  61.8k|        {
  662|  61.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   159k|        : m_fptr([](storage fn,
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|   159k|              if constexpr (std::is_void_v<R>) {
  746|   159k|                  obj(static_cast<decltype(args)>(args)...);
  747|   159k|              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
  752|   159k|          m_storage(std::addressof(f))
  753|   159k|    {
  754|   159k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   159k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   159k|        else if constexpr (std::is_object_v<T>) {
  688|   159k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   159k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   159k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   159k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   159k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   159k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   159k|        {
  662|   159k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6225|   269k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|   269k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|   269k|            auto rd = make_reader<T, char_type>();
 6236|   269k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   269k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 269k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|   269k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 269k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|   269k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|   269k|                return impl(rd, range, value);
 6241|   269k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   269k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|   269k|    {
 6161|   269k|        const bool need_skipped_width =
 6162|   269k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 269k]
  |  Branch (6162:33): [True: 0, False: 269k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   269k|        auto it = rng.begin();
 6166|   269k|        std::ptrdiff_t prefix_width = 0;
 6167|   269k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 269k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   269k|        else {
 6175|   269k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   269k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   269k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   269k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.29k, False: 263k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.29k|    }                                                  \
  |  |  |  | 3939|   269k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   263k|            std::tie(it, prefix_width) = prefix_result;
 6177|   263k|        }
 6178|   263k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   263k|        std::ptrdiff_t value_width = 0;
 6182|   263k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 263k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   263k|        else {
 6198|   263k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 17.8k, False: 245k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  17.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  17.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  17.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  17.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  17.8k|    }                                                  \
  |  | 3939|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   245k|                                             specs, value, loc));
 6200|       |
 6201|   245k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 245k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   245k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   245k|        std::ptrdiff_t postfix_width = 0;
 6210|   245k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 241k, False: 4.24k]
  ------------------
 6211|   241k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   241k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   241k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   241k|                                 value_width));
 6215|   241k|            std::tie(it, postfix_width) = postfix_result;
 6216|   241k|        }
 6217|       |
 6218|   245k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   245k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 245k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   245k|            specs, prefix_width, value_width, postfix_width));
 6220|   245k|        return it;
 6221|   245k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   650k|    {
 3733|   650k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   650k|        const std::ptrdiff_t sign_len =
 3736|   650k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 162k, False: 487k]
  ------------------
 3737|       |
 3738|   650k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   650k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   650k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   650k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   650k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.1k, False: 638k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.1k|    }                                                  \
  |  |  |  | 3939|   650k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   638k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   638k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   650k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   263k|    {
 4203|   263k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   263k|#if !SCN_DISABLE_LOCALE
 4206|   263k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 76.0k, False: 187k]
  ------------------
 4207|  76.0k|            return read_impl<Range>(
 4208|  76.0k|                range, rd,
 4209|  76.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  76.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  76.0k|                },
 4212|  76.0k|                value, loc);
 4213|  76.0k|        }
 4214|   187k|#endif
 4215|       |
 4216|   187k|        return read_impl<Range>(
 4217|   187k|            range, rd,
 4218|   187k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   187k|                return r.read_source(SCN_FWD(args)...);
 4220|   187k|            },
 4221|   187k|            value);
 4222|   263k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   367k|    {
 4239|   367k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   367k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.7k, False: 344k]
  |  |  ------------------
  ------------------
 4241|  22.7k|            return unexpected(r.error());
 4242|  22.7k|        }
 4243|       |
 4244|   344k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   344k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   344k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   344k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 406, False: 344k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    406|    }                                                  \
  |  |  |  | 3939|   344k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   344k|        return ranges::next(range.begin(), n);
 4246|   344k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  76.0k|        : m_fptr([](storage fn,
  743|  76.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.0k|              cvref<T> obj = *get<T>(fn);
  745|  76.0k|              if constexpr (std::is_void_v<R>) {
  746|  76.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.0k|              }
  748|  76.0k|              else {
  749|  76.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.0k|              }
  751|  76.0k|          }),
  752|  76.0k|          m_storage(std::addressof(f))
  753|  76.0k|    {
  754|  76.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  76.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  76.0k|              else {
  749|  76.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.0k|              }
  751|  76.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  76.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  76.0k|        else if constexpr (std::is_object_v<T>) {
  688|  76.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  76.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  76.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  76.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  76.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  76.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  76.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  76.0k|        {
  662|  76.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   187k|        : m_fptr([](storage fn,
  743|   187k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   187k|              cvref<T> obj = *get<T>(fn);
  745|   187k|              if constexpr (std::is_void_v<R>) {
  746|   187k|                  obj(static_cast<decltype(args)>(args)...);
  747|   187k|              }
  748|   187k|              else {
  749|   187k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   187k|              }
  751|   187k|          }),
  752|   187k|          m_storage(std::addressof(f))
  753|   187k|    {
  754|   187k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   187k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   187k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   187k|              else {
  749|   187k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   187k|              }
  751|   187k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   187k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   187k|        else if constexpr (std::is_object_v<T>) {
  688|   187k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   187k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   187k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   187k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   187k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   187k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   187k|        {
  662|   187k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   223k|    {
 4203|   223k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   223k|#if !SCN_DISABLE_LOCALE
 4206|   223k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 62.8k, False: 160k]
  ------------------
 4207|  62.8k|            return read_impl<Range>(
 4208|  62.8k|                range, rd,
 4209|  62.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  62.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  62.8k|                },
 4212|  62.8k|                value, loc);
 4213|  62.8k|        }
 4214|   160k|#endif
 4215|       |
 4216|   160k|        return read_impl<Range>(
 4217|   160k|            range, rd,
 4218|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   160k|                return r.read_source(SCN_FWD(args)...);
 4220|   160k|            },
 4221|   160k|            value);
 4222|   223k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   318k|    {
 4239|   318k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   318k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.7k, False: 305k]
  |  |  ------------------
  ------------------
 4241|  12.7k|            return unexpected(r.error());
 4242|  12.7k|        }
 4243|       |
 4244|   305k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   305k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.6k, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.6k|    }                                                  \
  |  |  |  | 3939|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   293k|        return ranges::next(range.begin(), n);
 4246|   305k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  62.8k|        : m_fptr([](storage fn,
  743|  62.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.8k|              cvref<T> obj = *get<T>(fn);
  745|  62.8k|              if constexpr (std::is_void_v<R>) {
  746|  62.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  62.8k|              }
  748|  62.8k|              else {
  749|  62.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.8k|              }
  751|  62.8k|          }),
  752|  62.8k|          m_storage(std::addressof(f))
  753|  62.8k|    {
  754|  62.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  62.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  62.8k|              else {
  749|  62.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.8k|              }
  751|  62.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  62.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  62.8k|        else if constexpr (std::is_object_v<T>) {
  688|  62.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  62.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  62.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  62.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  62.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  62.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  62.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  62.8k|        {
  662|  62.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   160k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.09M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.09M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.09M|        else {
 1055|  1.09M|            return r.begin().contiguous_segment();
 1056|  1.09M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.09M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   964k|{
 2160|   964k|    auto it = range.begin();
 2161|  1.79M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.77M, False: 15.3k]
  ------------------
 2162|  1.77M|        const auto val =
 2163|  1.77M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.77M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.77M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.76M, False: 12.1k]
  |  |  ------------------
  ------------------
 2165|  1.76M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.76M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.76M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 949k, False: 815k]
  ------------------
 2168|   949k|                return it;
 2169|   949k|            }
 2170|  1.76M|        }
 2171|   827k|        it = val.iterator;
 2172|   827k|    }
 2173|       |
 2174|  15.3k|    return it;
 2175|   964k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.77M|{
 1998|  1.77M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.77M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.77M|    auto it = range.begin();
 2002|  1.77M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.77M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.1k, False: 1.76M]
  |  |  ------------------
  ------------------
 2005|  12.1k|        ++it;
 2006|  12.1k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  12.1k|        return {it, {}};
 2008|  12.1k|    }
 2009|       |
 2010|  1.76M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.74M, False: 17.6k]
  ------------------
 2011|  1.74M|        ++it;
 2012|  1.74M|        return {it, string_type(1, *range.begin())};
 2013|  1.74M|    }
 2014|       |
 2015|  17.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  17.6k|    return {it, string_type{range.begin(), it}};
 2017|  1.76M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  12.1k|{
 1265|  12.1k|    auto it = input.begin();
 1266|  91.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 89.9k, False: 1.35k]
  ------------------
 1267|  89.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 10.8k, False: 79.1k]
  ------------------
 1268|  10.8k|            break;
 1269|  10.8k|        }
 1270|  89.9k|    }
 1271|  12.1k|    return it;
 1272|  12.1k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  17.6k|    {
  283|  17.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  17.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  17.6k|    {
  252|  17.6k|        constexpr iter_difference_t<I> zero{0};
  253|  17.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|  53.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 36.7k, False: 16.6k]
  |  Branch (255:30): [True: 35.8k, False: 986]
  ------------------
  256|  35.8k|            ++i;
  257|  35.8k|            ++counter;
  258|  35.8k|        }
  259|       |
  260|  17.6k|        return counter;
  261|  17.6k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.77M|    {
 1989|  1.77M|        return !codepoint.empty();
 1990|  1.77M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   964k|{
 2181|   964k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   964k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  1.09M|{
 3066|  1.09M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.09M, False: 0]
  ------------------
 3067|  1.09M|        auto it = read_while_classic_space(range);
 3068|  1.09M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.09M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.3k, False: 1.07M]
  |  |  ------------------
  ------------------
 3070|  15.3k|            return unexpected(e);
 3071|  15.3k|        }
 3072|       |
 3073|  1.07M|        return it;
 3074|  1.09M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.09M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.09M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.09M|    else {
 2225|  1.09M|        auto it = range.begin();
 2226|       |
 2227|  1.09M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.09M|            auto seg = get_contiguous_beginning(range);
 2229|  1.09M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.09M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 129k, False: 964k]
  ------------------
 2231|   129k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|   129k|            }
 2233|   964k|            ranges::advance(it, seg.size());
 2234|   964k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.09M|            return detail::is_cp_space(cp);
 2238|  1.09M|        });
 2239|  1.09M|    }
 2240|  1.09M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   964k|        : m_fptr([](storage fn,
  743|   964k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   964k|              cvref<T> obj = *get<T>(fn);
  745|   964k|              if constexpr (std::is_void_v<R>) {
  746|   964k|                  obj(static_cast<decltype(args)>(args)...);
  747|   964k|              }
  748|   964k|              else {
  749|   964k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   964k|              }
  751|   964k|          }),
  752|   964k|          m_storage(std::addressof(f))
  753|   964k|    {
  754|   964k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.76M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.76M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.76M|              else {
  749|  1.76M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.76M|              }
  751|  1.76M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.76M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.76M|        else if constexpr (std::is_object_v<T>) {
  688|  1.76M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.76M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.76M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.76M|            return detail::is_cp_space(cp);
 2238|  1.76M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   964k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   964k|        {
  662|   964k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   610k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   610k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   610k|        auto beg = r.begin();
  991|   610k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 610k, False: 0]
  ------------------
  992|   610k|            return false;
  993|   610k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   610k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.60M|{
 1956|  1.60M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.60M|    else {
 1967|  1.60M|        auto it = range.begin();
 1968|  1.60M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 966k, False: 639k]
  ------------------
 1969|   966k|            return ranges::next(it, count);
 1970|   966k|        }
 1971|       |
 1972|  2.46M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.88M, False: 581k]
  ------------------
 1973|  1.88M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 58.5k, False: 1.82M]
  ------------------
 1974|  58.5k|                return unexpected(eof_error::eof);
 1975|  58.5k|            }
 1976|  1.88M|        }
 1977|       |
 1978|   581k|        return it;
 1979|   639k|    }
 1980|  1.60M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.60M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.60M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.60M|        else {
 1107|  1.60M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.60M, False: 0]
  ------------------
 1108|  1.60M|                return static_cast<size_t>(
 1109|  1.60M|                    r.begin().parent()->chars_available() -
 1110|  1.60M|                    r.begin().position());
 1111|  1.60M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.60M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.60M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  4.35M|    {
  763|  4.35M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  4.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.35M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.41M|        : m_fptr([](storage fn,
  743|  1.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.41M|              cvref<T> obj = *get<T>(fn);
  745|  1.41M|              if constexpr (std::is_void_v<R>) {
  746|  1.41M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.41M|              }
  748|  1.41M|              else {
  749|  1.41M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.41M|              }
  751|  1.41M|          }),
  752|  1.41M|          m_storage(std::addressof(f))
  753|  1.41M|    {
  754|  1.41M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.17M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.17M|              else {
  749|  2.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.17M|              }
  751|  2.17M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.17M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.17M|        else if constexpr (std::is_object_v<T>) {
  688|  2.17M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.17M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.41M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.41M|        {
  662|  1.41M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6073|   445k|    {
 6074|   445k|        const bool need_skipped_width =
 6075|   445k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 445k]
  |  Branch (6075:33): [True: 0, False: 445k]
  ------------------
 6076|   445k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   445k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 445k]
  ------------------
 6080|   445k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 445k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   445k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 445k, False: 0]
  |  Branch (6084:56): [True: 445k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   445k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 445k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   888k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   445k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   445k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   445k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.21k, False: 442k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.21k|    }                                                  \
  |  |  |  | 3939|   445k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   888k|                            make_eof_scan_error));
 6095|       |
 6096|   888k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 442k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   442k|            return result_type{it, 0};
 6104|   888k|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   445k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.05M|{
 2075|  1.05M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.05M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  1.05M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.05M|    else {
 2060|  1.05M|        auto first = range.begin();
 2061|  1.64M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.64M, False: 4.01k]
  ------------------
 2062|  1.64M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.05M, False: 586k]
  ------------------
 2063|  1.05M|                return first;
 2064|  1.05M|            }
 2065|  1.64M|        }
 2066|  4.01k|        return first;
 2067|  1.05M|    }
 2068|  1.05M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   746k|    {
  108|   746k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   746k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   746k|    {
   94|   746k|        iter_difference_t<I> counter{0};
   95|  2.02M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.28M, False: 746k]
  ------------------
   96|  1.28M|            ++i;
   97|  1.28M|            ++counter;
   98|  1.28M|        }
   99|   746k|        return counter;
  100|   746k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   218k|    {
 1879|   218k|        auto stdloc = loc.get<std::locale>();
 1880|   218k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   218k|        grouping = numpunct.grouping();
 1882|   218k|        thousands_sep =
 1883|   218k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 218k]
  ------------------
 1884|   218k|        decimal_point = numpunct.decimal_point();
 1885|   218k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   218k|{
 1816|   218k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 218k, False: 0]
  ------------------
 1817|   218k|        return std::use_facet<Facet>(stdloc);
 1818|   218k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   218k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.43M|{
 1945|  1.43M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.63k, False: 1.43M]
  |  |  ------------------
  ------------------
 1946|  2.63k|        return unexpected(e);
 1947|  2.63k|    }
 1948|       |
 1949|  1.43M|    return ranges::next(range.begin());
 1950|  1.43M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.21M|{
  951|  2.21M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.95k, False: 2.20M]
  |  |  ------------------
  ------------------
  952|  6.95k|        return eof_error::eof;
  953|  6.95k|    }
  954|  2.20M|    return eof_error::good;
  955|  2.21M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.26M|{
  945|  3.26M|    return is_range_eof(r.begin(), r.end());
  946|  3.26M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.26M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.26M|    {
  938|  3.26M|        return begin == end;
  939|  3.26M|    }
  940|  3.26M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.43M|    {
  296|  1.43M|        ++x;
  297|  1.43M|        return x;
  298|  1.43M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   620k|{
 3258|   620k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   620k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 614k, False: 6.37k]
  ------------------
 3260|   614k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 614k, False: 93]
  ------------------
 3261|   614k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   614k|        }
 3263|     93|        return unexpected(eof_error::eof);
 3264|   614k|    }
 3265|       |
 3266|  6.37k|    auto& it = *r;
 3267|  6.37k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 4.83k, False: 1.54k]
  ------------------
 3268|  4.83k|        return std::pair{it, sign_type::minus_sign};
 3269|  4.83k|    }
 3270|  1.54k|    return std::pair{it, sign_type::plus_sign};
 3271|  6.37k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  1.00M|{
 2372|  1.00M|    auto it = read_code_unit(range);
 2373|  1.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.44k, False: 999k]
  |  |  ------------------
  ------------------
 2374|  1.44k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.44k|    }
 2376|       |
 2377|  1.99M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.99M, False: 979k]
  ------------------
 2378|  1.99M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 20.7k, False: 1.97M]
  ------------------
 2379|  20.7k|            return *it;
 2380|  20.7k|        }
 2381|  1.99M|    }
 2382|       |
 2383|   979k|    return unexpected(parse_error::error);
 2384|   999k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  1.60M|{
 2331|  1.60M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.60M|    else {
 2344|  1.60M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.60M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.60M|                return ch;
 2347|  1.60M|            }
 2348|  1.60M|            return static_cast<char_type>(ch +
 2349|  1.60M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.60M|        };
 2351|       |
 2352|  1.60M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.60M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.60M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.60M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58.5k, False: 1.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  58.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  58.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  58.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  58.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  58.5k|    }                                                  \
  |  |  |  | 3939|  1.60M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.54M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.54M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.54M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54M, False: 905]
  |  |  ------------------
  ------------------
 2357|  1.54M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.54M|                    return ascii_tolower(a) ==
 2359|  1.54M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.54M|                }))) {
 2361|  1.54M|            return unexpected(parse_error::error);
 2362|  1.54M|        }
 2363|       |
 2364|    905|        return it;
 2365|  1.54M|    }
 2366|  1.60M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.81M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.81M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.43M, False: 382k]
  |  Branch (2345:29): [True: 369k, False: 13.5k]
  ------------------
 2346|  1.79M|                return ch;
 2347|  1.79M|            }
 2348|  13.5k|            return static_cast<char_type>(ch +
 2349|  13.5k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.81M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   436k|{
 2246|   436k|    auto it = read_code_unit(range);
 2247|   436k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.19k, False: 435k]
  |  |  ------------------
  ------------------
 2248|  1.19k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  1.19k|    }
 2250|       |
 2251|   435k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 431k, False: 4.17k]
  |  |  ------------------
  ------------------
 2252|   435k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   431k|        return unexpected(parse_error::error);
 2254|   431k|    }
 2255|       |
 2256|  4.17k|    return *it;
 2257|   435k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  1.05M|{
 2095|  1.05M|    auto it = read_while_code_unit(range, pred);
 2096|  1.05M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 604k, False: 453k]
  ------------------
 2097|   604k|        return unexpected(parse_error::error);
 2098|   604k|    }
 2099|   453k|    return it;
 2100|  1.05M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   432k|    {
 1720|   432k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   432k|                           ranges::common_range<Range>) {
 1737|   432k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   432k|            auto end_seg = range.end().contiguous_segment();
 1739|   432k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.8k, False: 415k]
  |  |  ------------------
  ------------------
 1740|   432k|                             detail::to_address(end_seg.end()))) {
 1741|  17.8k|                auto& str = m_storage.emplace();
 1742|  17.8k|                str.reserve(range.end().position() - range.begin().position());
 1743|  17.8k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  17.8k|                m_view = string_view_type{str};
 1745|  17.8k|                return;
 1746|  17.8k|            }
 1747|       |
 1748|   415k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   415k|                                                            end_seg.data());
 1750|   415k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   432k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.82M|    {
 1681|  3.82M|        return m_view;
 1682|  3.82M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.42M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6115|   305k|    {
 6116|   305k|        const bool need_skipped_width =
 6117|   305k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 305k]
  |  Branch (6117:33): [True: 0, False: 305k]
  ------------------
 6118|   305k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   305k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 305k]
  ------------------
 6121|   305k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 305k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   305k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 305k, False: 0]
  ------------------
 6130|   305k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 305k]
  ------------------
 6131|   305k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   305k|        return result_type{rng.begin(), 0};
 6155|   305k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.60M|{
 1956|  1.60M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.60M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.60M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.60M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 58.6k, False: 1.54M]
  ------------------
 1961|  58.6k|            return unexpected(eof_error::eof);
 1962|  58.6k|        }
 1963|       |
 1964|  1.54M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.60M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  1.86M|{
 1998|  1.86M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.86M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.86M|    auto it = range.begin();
 2002|  1.86M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.86M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.86M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.86M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.86M, False: 0]
  ------------------
 2011|  1.86M|        ++it;
 2012|  1.86M|        return {it, string_type(1, *range.begin())};
 2013|  1.86M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.86M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.46M|{
  945|  3.46M|    return is_range_eof(r.begin(), r.end());
  946|  3.46M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.46M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.46M|    {
  938|  3.46M|        return begin == end;
  939|  3.46M|    }
  940|  3.46M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   394k|    {
  190|   394k|        i = std::move(bound);
  191|   394k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  1.86M|    {
 1989|  1.86M|        return !codepoint.empty();
 1990|  1.86M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.60M|{
  951|  1.60M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.98k, False: 1.59M]
  |  |  ------------------
  ------------------
  952|  4.98k|        return eof_error::eof;
  953|  4.98k|    }
  954|  1.59M|    return eof_error::good;
  955|  1.60M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   826k|{
 1945|   826k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   826k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 658, False: 825k]
  |  |  ------------------
  ------------------
 1946|    658|        return unexpected(e);
 1947|    658|    }
 1948|       |
 1949|   825k|    return ranges::next(range.begin());
 1950|   826k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   825k|    {
  296|   825k|        ++x;
  297|   825k|        return x;
  298|   825k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   611k|{
 3258|   611k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   611k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 607k, False: 4.33k]
  ------------------
 3260|   607k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 607k, False: 30]
  ------------------
 3261|   607k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   607k|        }
 3263|     30|        return unexpected(eof_error::eof);
 3264|   607k|    }
 3265|       |
 3266|  4.33k|    auto& it = *r;
 3267|  4.33k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 2.94k, False: 1.39k]
  ------------------
 3268|  2.94k|        return std::pair{it, sign_type::minus_sign};
 3269|  2.94k|    }
 3270|  1.39k|    return std::pair{it, sign_type::plus_sign};
 3271|  4.33k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   691k|{
 2372|   691k|    auto it = read_code_unit(range);
 2373|   691k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 324, False: 690k]
  |  |  ------------------
  ------------------
 2374|    324|        return unexpected(make_eof_parse_error(it.error()));
 2375|    324|    }
 2376|       |
 2377|  1.38M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.38M, False: 681k]
  ------------------
 2378|  1.38M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 9.41k, False: 1.37M]
  ------------------
 2379|  9.41k|            return *it;
 2380|  9.41k|        }
 2381|  1.38M|    }
 2382|       |
 2383|   681k|    return unexpected(parse_error::error);
 2384|   690k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  1.60M|{
 2331|  1.60M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.60M|    else {
 2344|  1.60M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.60M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.60M|                return ch;
 2347|  1.60M|            }
 2348|  1.60M|            return static_cast<char_type>(ch +
 2349|  1.60M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.60M|        };
 2351|       |
 2352|  1.60M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.60M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.60M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.60M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 58.6k, False: 1.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  58.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  58.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  58.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  58.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  58.6k|    }                                                  \
  |  |  |  | 3939|  1.60M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.54M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.54M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.54M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.54M, False: 905]
  |  |  ------------------
  ------------------
 2357|  1.54M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.54M|                    return ascii_tolower(a) ==
 2359|  1.54M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.54M|                }))) {
 2361|  1.54M|            return unexpected(parse_error::error);
 2362|  1.54M|        }
 2363|       |
 2364|    905|        return it;
 2365|  1.54M|    }
 2366|  1.60M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.81M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.81M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.43M, False: 383k]
  |  Branch (2345:29): [True: 370k, False: 13.6k]
  ------------------
 2346|  1.80M|                return ch;
 2347|  1.80M|            }
 2348|  13.6k|            return static_cast<char_type>(ch +
 2349|  13.6k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.81M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   135k|{
 2246|   135k|    auto it = read_code_unit(range);
 2247|   135k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 334, False: 134k]
  |  |  ------------------
  ------------------
 2248|    334|        return unexpected(make_eof_parse_error(it.error()));
 2249|    334|    }
 2250|       |
 2251|   134k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 133k, False: 1.63k]
  |  |  ------------------
  ------------------
 2252|   134k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   133k|        return unexpected(parse_error::error);
 2254|   133k|    }
 2255|       |
 2256|  1.63k|    return *it;
 2257|   134k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   353k|{
 2075|   353k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   353k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   353k|{
 2056|   353k|    if constexpr (ranges::common_range<Range>) {
 2057|   353k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   353k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   610k|{
 3066|   610k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 610k, False: 0]
  ------------------
 3067|   610k|        auto it = read_while_classic_space(range);
 3068|   610k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   610k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.75k, False: 606k]
  |  |  ------------------
  ------------------
 3070|  3.75k|            return unexpected(e);
 3071|  3.75k|        }
 3072|       |
 3073|   606k|        return it;
 3074|   610k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   610k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   610k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   610k|    else {
 2225|   610k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   610k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   610k|            return detail::is_cp_space(cp);
 2238|   610k|        });
 2239|   610k|    }
 2240|   610k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   610k|{
 2181|   610k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   610k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  1.04M|{
 2160|  1.04M|    auto it = range.begin();
 2161|  2.13M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.86M, False: 267k]
  ------------------
 2162|  1.86M|        const auto val =
 2163|  1.86M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.86M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.86M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.86M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.86M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.86M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.86M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 773k, False: 1.09M]
  ------------------
 2168|   773k|                return it;
 2169|   773k|            }
 2170|  1.86M|        }
 2171|  1.09M|        it = val.iterator;
 2172|  1.09M|    }
 2173|       |
 2174|   267k|    return it;
 2175|  1.04M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   610k|        : m_fptr([](storage fn,
  743|   610k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   610k|              cvref<T> obj = *get<T>(fn);
  745|   610k|              if constexpr (std::is_void_v<R>) {
  746|   610k|                  obj(static_cast<decltype(args)>(args)...);
  747|   610k|              }
  748|   610k|              else {
  749|   610k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   610k|              }
  751|   610k|          }),
  752|   610k|          m_storage(std::addressof(f))
  753|   610k|    {
  754|   610k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  1.05M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.05M|            return detail::is_cp_space(cp);
 2238|  1.05M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   610k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   610k|        {
  662|   610k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.39M|    {
  304|  1.39M|        ranges::advance(x, n);
  305|  1.39M|        return x;
  306|  1.39M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.39M|    {
  268|  1.39M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.39M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.39M|    {
  181|  4.49M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.09M, False: 1.39M]
  ------------------
  182|  3.09M|            ++i;
  183|  3.09M|        }
  184|  1.39M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|   138k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|   138k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|   138k|            auto rd = make_reader<T, char_type>();
 6236|   138k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   138k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 138k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|   138k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 138k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|   138k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|   138k|                return impl(rd, range, value);
 6241|   138k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   138k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   892k|    {
 3156|   892k|        reader_error_handler eh{};
 3157|   892k|        get_derived().check_specs_impl(specs, eh);
 3158|   892k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   892k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 892k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   892k|        return {};
 3163|   892k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|   892k|    {
 3168|   892k|        return static_cast<Derived&>(*this);
 3169|   892k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|   892k|    {
 4178|   892k|        detail::check_float_type_specs(specs, eh);
 4179|   892k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|   138k|    {
 6161|   138k|        const bool need_skipped_width =
 6162|   138k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 138k]
  |  Branch (6162:33): [True: 0, False: 138k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   138k|        auto it = rng.begin();
 6166|   138k|        std::ptrdiff_t prefix_width = 0;
 6167|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 138k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   138k|        else {
 6175|   138k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 992, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    992|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    992|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    992|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    992|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    992|    }                                                  \
  |  |  |  | 3939|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   137k|            std::tie(it, prefix_width) = prefix_result;
 6177|   137k|        }
 6178|   137k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   137k|        std::ptrdiff_t value_width = 0;
 6182|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 137k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   137k|        else {
 6198|   137k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.3k, False: 92.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.3k|    }                                                  \
  |  | 3939|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  92.1k|                                             specs, value, loc));
 6200|       |
 6201|  92.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 92.1k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  92.1k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  92.1k|        std::ptrdiff_t postfix_width = 0;
 6210|  92.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 91.6k, False: 466]
  ------------------
 6211|  91.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  91.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  91.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  91.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  91.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 91.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  91.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  91.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  91.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  91.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  91.6k|                                 value_width));
 6215|  91.6k|            std::tie(it, postfix_width) = postfix_result;
 6216|  91.6k|        }
 6217|       |
 6218|  92.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  92.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  92.1k|            specs, prefix_width, value_width, postfix_width));
 6220|  92.1k|        return it;
 6221|  92.1k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  1.83M|    {
 3151|  1.83M|        return true;
 3152|  1.83M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|   885k|    {
 4250|   885k|        unsigned options{};
 4251|   885k|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 218k, False: 667k]
  ------------------
 4252|   218k|            options |= float_reader_base::allow_thsep;
 4253|   218k|        }
 4254|       |
 4255|   885k|        SCN_GCC_COMPAT_PUSH
 4256|   885k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|   885k|        switch (specs.type) {
 4259|   167k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 167k, False: 718k]
  ------------------
 4260|   167k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  57.4k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 57.4k, False: 828k]
  ------------------
 4263|  57.4k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   241k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 241k, False: 643k]
  ------------------
 4266|   241k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   200k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 200k, False: 684k]
  ------------------
 4269|   200k|                return options | float_reader_base::allow_scientific |
 4270|   200k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   218k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 218k, False: 667k]
  ------------------
 4273|   218k|                return options | float_reader_base::allow_scientific |
 4274|   218k|                       float_reader_base::allow_fixed |
 4275|   218k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 885k]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|   885k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|   885k|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|   885k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|   885k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.21M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.42M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   285k|    {
 3733|   285k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   285k|        const std::ptrdiff_t sign_len =
 3736|   285k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 1.99k, False: 283k]
  ------------------
 3737|       |
 3738|   285k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   285k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   285k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   285k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 33.9k, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  33.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  33.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  33.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  33.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  33.9k|    }                                                  \
  |  |  |  | 3939|   285k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   251k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   285k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|   958k|    {
 4090|   958k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 958k, False: 0]
  ------------------
 4091|   958k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 958k, False: 0]
  ------------------
 4092|   958k|            return;
 4093|   958k|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.06M|    {
 1686|  1.06M|        return m_storage.has_value();
 1687|  1.06M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   628k|    {
 1691|   628k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|   628k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   628k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   628k|        return *m_storage;
 1693|   628k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   137k|    {
 4203|   137k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   137k|#if !SCN_DISABLE_LOCALE
 4206|   137k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.3k, False: 106k]
  ------------------
 4207|  31.3k|            return read_impl<Range>(
 4208|  31.3k|                range, rd,
 4209|  31.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.3k|                },
 4212|  31.3k|                value, loc);
 4213|  31.3k|        }
 4214|   106k|#endif
 4215|       |
 4216|   106k|        return read_impl<Range>(
 4217|   106k|            range, rd,
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
 4220|   106k|            },
 4221|   106k|            value);
 4222|   137k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   184k|    {
 4239|   184k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   184k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.1k, False: 127k]
  |  |  ------------------
  ------------------
 4241|  57.1k|            return unexpected(r.error());
 4242|  57.1k|        }
 4243|       |
 4244|   127k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.87k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.87k|    }                                                  \
  |  |  |  | 3939|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   125k|        return ranges::next(range.begin(), n);
 4246|   127k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   606k|    {
  763|   606k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   606k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  31.3k|        : m_fptr([](storage fn,
  743|  31.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.3k|              cvref<T> obj = *get<T>(fn);
  745|  31.3k|              if constexpr (std::is_void_v<R>) {
  746|  31.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.3k|              }
  748|  31.3k|              else {
  749|  31.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.3k|              }
  751|  31.3k|          }),
  752|  31.3k|          m_storage(std::addressof(f))
  753|  31.3k|    {
  754|  31.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  31.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.3k|              else {
  749|  31.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.3k|              }
  751|  31.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.3k|        else if constexpr (std::is_object_v<T>) {
  688|  31.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  31.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.3k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   109k|    {
 3721|   109k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   109k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   109k|        return read_source_impl(range);
 3727|   109k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|   606k|    {
 3747|   606k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   606k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   606k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   606k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 606k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   606k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   606k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   606k|        auto it = sign_result.first;
 3750|   606k|        m_sign = sign_result.second;
 3751|       |
 3752|   606k|        auto digits_begin = it;
 3753|   606k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|   606k|        else {
 3780|   606k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|   606k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   606k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 173k, False: 432k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   173k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   173k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   173k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   173k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   173k|    }                                                  \
  |  | 3939|   606k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   432k|                it,
 3782|   432k|                do_read_source_impl(
 3783|   432k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   432k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   432k|        }
 3786|       |
 3787|   606k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   432k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 432k, False: 0]
  |  Branch (3789:48): [True: 432k, False: 0]
  ------------------
 3790|   432k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 432k, False: 0]
  ------------------
 3791|   432k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 432k, False: 0]
  ------------------
 3792|   432k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   432k|        }
 3794|       |
 3795|   432k|        handle_separators();
 3796|       |
 3797|   432k|        return it;
 3798|   606k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|   606k|    {
 4033|   606k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   606k|        const bool allowed_nonhex =
 4035|   606k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   606k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   606k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 606k, False: 0]
  |  Branch (4038:45): [True: 0, False: 606k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   606k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 606k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   606k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 606k, False: 0]
  |  Branch (4047:45): [True: 0, False: 606k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   606k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 606k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   606k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 393k, False: 212k]
  |  Branch (4054:28): [True: 120k, False: 272k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   120k|            auto it = range.begin();
 4058|       |
 4059|   120k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 270, False: 120k]
  ------------------
 4060|    270|                m_kind = float_kind::hex_with_prefix;
 4061|    270|                it = *r;
 4062|    270|            }
 4063|   120k|            else {
 4064|   120k|                m_kind = float_kind::hex_without_prefix;
 4065|   120k|            }
 4066|       |
 4067|   120k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   120k|        }
 4069|   485k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 212k, False: 272k]
  |  Branch (4069:29): [True: 212k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   212k|            m_kind = float_kind::generic;
 4073|   212k|            return read_regular_float(range);
 4074|   212k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   272k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 635, False: 272k]
  |  |  ------------------
  ------------------
 4080|    635|            m_kind = float_kind::hex_with_prefix;
 4081|    635|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    635|        }
 4083|       |
 4084|   272k|        m_kind = float_kind::generic;
 4085|   272k|        return read_regular(range);
 4086|   272k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|   606k|    {
 3841|   606k|        auto it = range.begin();
 3842|   606k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 606k, False: 0]
  ------------------
 3843|   606k|            return unexpected(r.error());
 3844|   606k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|   606k|    {
 3864|   606k|        auto it = range.begin();
 3865|   606k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 606k, False: 0]
  ------------------
 3866|   606k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   606k|                scan_error::invalid_scanned_value,
 3868|   606k|                "Invalid floating-point NaN value"));
 3869|   606k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   393k|    {
 3834|   393k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   393k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   121k|    {
 3935|   121k|        auto it = range.begin();
 3936|       |
 3937|   121k|        std::ptrdiff_t digits_count = 0;
 3938|   121k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   121k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.8k, False: 94.5k]
  |  |  ------------------
  ------------------
 3940|  26.8k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  26.8k|                scan_error::invalid_scanned_value,
 3942|  26.8k|                "Invalid hexadecimal floating-point value"));
 3943|  26.8k|        }
 3944|  94.5k|        else {
 3945|  94.5k|            digits_count += ranges::distance(it, *r);
 3946|  94.5k|            it = *r;
 3947|  94.5k|        }
 3948|       |
 3949|  94.5k|        m_integral_part_length = digits_count;
 3950|  94.5k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 754, False: 93.8k]
  ------------------
 3951|  94.5k|                                             m_locale_options.decimal_point)) {
 3952|    754|            it = *r;
 3953|    754|        }
 3954|       |
 3955|  94.5k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 614, False: 93.9k]
  ------------------
 3956|  94.5k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|    614|            digits_count += ranges::distance(it, *r);
 3958|    614|            it = *r;
 3959|    614|        }
 3960|       |
 3961|  94.5k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 94.5k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|  94.5k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|  94.5k|        return it;
 3970|  94.5k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   216k|    {
 3819|   216k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 216k]
  |  |  |  Branch (865:45): [True: 0, False: 216k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   216k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   216k|        return read_while1_code_unit(
 3828|   216k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   216k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   216k|        : m_fptr([](storage fn,
  743|   216k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   216k|              cvref<T> obj = *get<T>(fn);
  745|   216k|              if constexpr (std::is_void_v<R>) {
  746|   216k|                  obj(static_cast<decltype(args)>(args)...);
  747|   216k|              }
  748|   216k|              else {
  749|   216k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   216k|              }
  751|   216k|          }),
  752|   216k|          m_storage(std::addressof(f))
  753|   216k|    {
  754|   216k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   341k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   341k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   341k|              else {
  749|   341k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   341k|              }
  751|   341k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   341k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   341k|        else if constexpr (std::is_object_v<T>) {
  688|   341k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   341k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3828|   341k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   216k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   216k|        {
  662|   216k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   380k|    {
 3907|   380k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 14.3k, False: 366k]
  ------------------
 3908|  14.3k|            auto beg_exp_it = range.begin();
 3909|  14.3k|            auto it = *r;
 3910|       |
 3911|  14.3k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 14.2k, False: 93]
  ------------------
 3912|  14.3k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  14.2k|                it = r_sign->first;
 3914|  14.2k|            }
 3915|       |
 3916|  14.3k|            if (auto r_exp = read_while1_code_unit(
 3917|  14.3k|                    ranges::subrange{it, range.end()},
 3918|  14.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  14.3k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.21k, False: 13.1k]
  |  |  ------------------
  ------------------
 3920|  1.21k|                it = beg_exp_it;
 3921|  1.21k|            }
 3922|  13.1k|            else {
 3923|  13.1k|                it = *r_exp;
 3924|  13.1k|            }
 3925|       |
 3926|  14.3k|            return it;
 3927|  14.3k|        }
 3928|   366k|        return range.begin();
 3929|   380k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  14.3k|        : m_fptr([](storage fn,
  743|  14.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.3k|              cvref<T> obj = *get<T>(fn);
  745|  14.3k|              if constexpr (std::is_void_v<R>) {
  746|  14.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.3k|              }
  748|  14.3k|              else {
  749|  14.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.3k|              }
  751|  14.3k|          }),
  752|  14.3k|          m_storage(std::addressof(f))
  753|  14.3k|    {
  754|  14.3k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  45.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  45.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  45.5k|              else {
  749|  45.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  45.5k|              }
  751|  45.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  45.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  45.5k|        else if constexpr (std::is_object_v<T>) {
  688|  45.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  45.5k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  45.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  14.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  14.3k|        {
  662|  14.3k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   485k|    {
 3976|   485k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   485k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 401k, False: 83.5k]
  |  Branch (3977:50): [True: 28.7k, False: 372k]
  ------------------
 3978|       |
 3979|   485k|        auto it = ranges::begin(range);
 3980|   485k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   485k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   485k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 143k, False: 342k]
  |  |  ------------------
  ------------------
 3984|   143k|            return r.transform_error(
 3985|   143k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|   143k|                                              "Invalid floating-point value"));
 3987|   143k|        }
 3988|   342k|        else {
 3989|   342k|            digits_count += ranges::distance(it, *r);
 3990|   342k|            it = *r;
 3991|   342k|        }
 3992|       |
 3993|   342k|        m_integral_part_length = digits_count;
 3994|   342k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 3.42k, False: 338k]
  ------------------
 3995|   342k|                                             m_locale_options.decimal_point)) {
 3996|  3.42k|            it = *r;
 3997|  3.42k|        }
 3998|       |
 3999|   342k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 2.77k, False: 339k]
  ------------------
 4000|   342k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  2.77k|            digits_count += ranges::distance(it, *r);
 4002|  2.77k|            it = *r;
 4003|  2.77k|        }
 4004|       |
 4005|   342k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 342k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   342k|        auto beg_exp_it = it;
 4012|   342k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 285k, False: 56.2k]
  ------------------
 4013|   285k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   285k|        }
 4015|   342k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.02k, False: 337k]
  |  Branch (4015:29): [True: 3.74k, False: 1.27k]
  ------------------
 4016|  3.74k|            return detail::unexpected_scan_error(
 4017|  3.74k|                scan_error::invalid_scanned_value,
 4018|  3.74k|                "No exponent given to scientific float");
 4019|  3.74k|        }
 4020|       |
 4021|   338k|        m_kind =
 4022|   338k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 325k, False: 12.9k]
  ------------------
 4023|       |
 4024|   338k|        return it;
 4025|   342k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|   827k|    {
 3804|   827k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   827k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 827k]
  |  |  |  Branch (865:45): [True: 0, False: 827k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   827k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   827k|        return read_while1_code_unit(
 3813|   827k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   827k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   827k|        : m_fptr([](storage fn,
  743|   827k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   827k|              cvref<T> obj = *get<T>(fn);
  745|   827k|              if constexpr (std::is_void_v<R>) {
  746|   827k|                  obj(static_cast<decltype(args)>(args)...);
  747|   827k|              }
  748|   827k|              else {
  749|   827k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   827k|              }
  751|   827k|          }),
  752|   827k|          m_storage(std::addressof(f))
  753|   827k|    {
  754|   827k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.25M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.25M|              else {
  749|  1.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.25M|              }
  751|  1.25M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.25M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.25M|        else if constexpr (std::is_object_v<T>) {
  688|  1.25M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.25M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3813|  1.25M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   827k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   827k|        {
  662|   827k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   432k|    {
 1676|   432k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   432k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  31.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.3k|        {
  662|  31.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   106k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   497k|    {
 3707|   497k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 497k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   497k|        return read_source_impl(range);
 3713|   497k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   137k|    {
 4203|   137k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   137k|#if !SCN_DISABLE_LOCALE
 4206|   137k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.4k, False: 106k]
  ------------------
 4207|  31.4k|            return read_impl<Range>(
 4208|  31.4k|                range, rd,
 4209|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.4k|                },
 4212|  31.4k|                value, loc);
 4213|  31.4k|        }
 4214|   106k|#endif
 4215|       |
 4216|   106k|        return read_impl<Range>(
 4217|   106k|            range, rd,
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
 4220|   106k|            },
 4221|   106k|            value);
 4222|   137k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   184k|    {
 4239|   184k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   184k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.8k, False: 157k]
  |  |  ------------------
  ------------------
 4241|  26.8k|            return unexpected(r.error());
 4242|  26.8k|        }
 4243|       |
 4244|   157k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32.1k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.1k|    }                                                  \
  |  |  |  | 3939|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   125k|        return ranges::next(range.begin(), n);
 4246|   157k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   606k|    {
  763|   606k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   606k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  31.4k|        : m_fptr([](storage fn,
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|  31.4k|              if constexpr (std::is_void_v<R>) {
  746|  31.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.4k|              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
  752|  31.4k|          m_storage(std::addressof(f))
  753|  31.4k|    {
  754|  31.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.4k|        else if constexpr (std::is_object_v<T>) {
  688|  31.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.4k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   109k|    {
 3721|   109k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   109k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   109k|        return read_source_impl(range);
 3727|   109k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   606k|    {
 3747|   606k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   606k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   606k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   606k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 606k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   606k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   606k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   606k|        auto it = sign_result.first;
 3750|   606k|        m_sign = sign_result.second;
 3751|       |
 3752|   606k|        auto digits_begin = it;
 3753|   606k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   606k|                      ranges::sized_range<Range>) {
 3756|   606k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 606k]
  |  |  |  Branch (865:45): [True: 0, False: 606k]
  |  |  |  Branch (865:45): [True: 0, False: 606k]
  |  |  ------------------
  ------------------
 3757|   606k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   606k|            else {
 3766|   606k|                auto cb = [&](const auto& rr)
 3767|   606k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   606k|                    auto res = read_all(rr);
 3769|   606k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   606k|                        return detail::unexpected_scan_error(
 3771|   606k|                            scan_error::invalid_scanned_value,
 3772|   606k|                            "Invalid float value");
 3773|   606k|                    }
 3774|   606k|                    return res;
 3775|   606k|                };
 3776|   606k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   606k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   606k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 81.3k, False: 525k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  81.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  81.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  81.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  81.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  81.3k|    }                                                  \
  |  | 3939|   606k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   525k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   606k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   525k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 525k, False: 0]
  |  Branch (3789:48): [True: 525k, False: 0]
  ------------------
 3790|   525k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 525k, False: 0]
  ------------------
 3791|   525k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 525k, False: 0]
  ------------------
 3792|   525k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   525k|        }
 3794|       |
 3795|   525k|        handle_separators();
 3796|       |
 3797|   525k|        return it;
 3798|   606k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   606k|    {
 3841|   606k|        auto it = range.begin();
 3842|   606k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 606k, False: 0]
  ------------------
 3843|   606k|            return unexpected(r.error());
 3844|   606k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   606k|    {
 3864|   606k|        auto it = range.begin();
 3865|   606k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 606k, False: 0]
  ------------------
 3866|   606k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   606k|                scan_error::invalid_scanned_value,
 3868|   606k|                "Invalid floating-point NaN value"));
 3869|   606k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   394k|    {
 3834|   394k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   394k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   353k|{
 2095|   353k|    auto it = read_while_code_unit(range, pred);
 2096|   353k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 211k, False: 141k]
  ------------------
 2097|   211k|        return unexpected(parse_error::error);
 2098|   211k|    }
 2099|   141k|    return it;
 2100|   353k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|  79.1k|    {
 3907|  79.1k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 5.07k, False: 74.0k]
  ------------------
 3908|  5.07k|            auto beg_exp_it = range.begin();
 3909|  5.07k|            auto it = *r;
 3910|       |
 3911|  5.07k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 5.04k, False: 30]
  ------------------
 3912|  5.07k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  5.04k|                it = r_sign->first;
 3914|  5.04k|            }
 3915|       |
 3916|  5.07k|            if (auto r_exp = read_while1_code_unit(
 3917|  5.07k|                    ranges::subrange{it, range.end()},
 3918|  5.07k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  5.07k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  5.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 460, False: 4.61k]
  |  |  ------------------
  ------------------
 3920|    460|                it = beg_exp_it;
 3921|    460|            }
 3922|  4.61k|            else {
 3923|  4.61k|                it = *r_exp;
 3924|  4.61k|            }
 3925|       |
 3926|  5.07k|            return it;
 3927|  5.07k|        }
 3928|  74.0k|        return range.begin();
 3929|  79.1k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.07k|        : m_fptr([](storage fn,
  743|  5.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.07k|              cvref<T> obj = *get<T>(fn);
  745|  5.07k|              if constexpr (std::is_void_v<R>) {
  746|  5.07k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.07k|              }
  748|  5.07k|              else {
  749|  5.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.07k|              }
  751|  5.07k|          }),
  752|  5.07k|          m_storage(std::addressof(f))
  753|  5.07k|    {
  754|  5.07k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  15.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.7k|              else {
  749|  15.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.7k|              }
  751|  15.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  15.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.7k|        else if constexpr (std::is_object_v<T>) {
  688|  15.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.7k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  15.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.07k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.07k|        {
  662|  5.07k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   212k|    {
 3976|   212k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   212k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 129k, False: 83.5k]
  |  Branch (3977:50): [True: 28.7k, False: 100k]
  ------------------
 3978|       |
 3979|   212k|        auto it = ranges::begin(range);
 3980|   212k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   212k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   212k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 77.4k, False: 135k]
  |  |  ------------------
  ------------------
 3984|  77.4k|            return r.transform_error(
 3985|  77.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  77.4k|                                              "Invalid floating-point value"));
 3987|  77.4k|        }
 3988|   135k|        else {
 3989|   135k|            digits_count += ranges::distance(it, *r);
 3990|   135k|            it = *r;
 3991|   135k|        }
 3992|       |
 3993|   135k|        m_integral_part_length = digits_count;
 3994|   135k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 1.63k, False: 133k]
  ------------------
 3995|   135k|                                             m_locale_options.decimal_point)) {
 3996|  1.63k|            it = *r;
 3997|  1.63k|        }
 3998|       |
 3999|   135k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 1.31k, False: 133k]
  ------------------
 4000|   135k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  1.31k|            digits_count += ranges::distance(it, *r);
 4002|  1.31k|            it = *r;
 4003|  1.31k|        }
 4004|       |
 4005|   135k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   135k|        auto beg_exp_it = it;
 4012|   135k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 79.1k, False: 56.2k]
  ------------------
 4013|  79.1k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|  79.1k|        }
 4015|   135k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.02k, False: 130k]
  |  Branch (4015:29): [True: 3.74k, False: 1.27k]
  ------------------
 4016|  3.74k|            return detail::unexpected_scan_error(
 4017|  3.74k|                scan_error::invalid_scanned_value,
 4018|  3.74k|                "No exponent given to scientific float");
 4019|  3.74k|        }
 4020|       |
 4021|   131k|        m_kind =
 4022|   131k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 126k, False: 4.61k]
  ------------------
 4023|       |
 4024|   131k|        return it;
 4025|   135k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   348k|    {
 3804|   348k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 348k]
  |  |  |  Branch (865:45): [True: 0, False: 348k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   348k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   348k|        return read_while1_code_unit(
 3813|   348k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   348k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   348k|        : m_fptr([](storage fn,
  743|   348k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   348k|              cvref<T> obj = *get<T>(fn);
  745|   348k|              if constexpr (std::is_void_v<R>) {
  746|   348k|                  obj(static_cast<decltype(args)>(args)...);
  747|   348k|              }
  748|   348k|              else {
  749|   348k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   348k|              }
  751|   348k|          }),
  752|   348k|          m_storage(std::addressof(f))
  753|   348k|    {
  754|   348k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   522k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   522k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   522k|              else {
  749|   522k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   522k|              }
  751|   522k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   522k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   522k|        else if constexpr (std::is_object_v<T>) {
  688|   522k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   522k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|   522k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   348k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   348k|        {
  662|   348k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   606k|    {
 4033|   606k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   606k|        const bool allowed_nonhex =
 4035|   606k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   606k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   606k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 606k, False: 0]
  |  Branch (4038:45): [True: 0, False: 606k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   606k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 606k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   606k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 606k, False: 0]
  |  Branch (4047:45): [True: 0, False: 606k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   606k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 606k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   606k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 394k, False: 212k]
  |  Branch (4054:28): [True: 120k, False: 273k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   120k|            auto it = range.begin();
 4058|       |
 4059|   120k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 270, False: 120k]
  ------------------
 4060|    270|                m_kind = float_kind::hex_with_prefix;
 4061|    270|                it = *r;
 4062|    270|            }
 4063|   120k|            else {
 4064|   120k|                m_kind = float_kind::hex_without_prefix;
 4065|   120k|            }
 4066|       |
 4067|   120k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   120k|        }
 4069|   485k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 212k, False: 273k]
  |  Branch (4069:29): [True: 212k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   212k|            m_kind = float_kind::generic;
 4073|   212k|            return read_regular_float(range);
 4074|   212k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   273k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 635, False: 272k]
  |  |  ------------------
  ------------------
 4080|    635|            m_kind = float_kind::hex_with_prefix;
 4081|    635|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    635|        }
 4083|       |
 4084|   272k|        m_kind = float_kind::generic;
 4085|   272k|        return read_regular(range);
 4086|   273k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   394k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   394k|                    auto res = read_all(rr);
 3769|   394k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 171, False: 393k]
  |  |  ------------------
  ------------------
 3770|    171|                        return detail::unexpected_scan_error(
 3771|    171|                            scan_error::invalid_scanned_value,
 3772|    171|                            "Invalid float value");
 3773|    171|                    }
 3774|   393k|                    return res;
 3775|   394k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   394k|{
 1938|   394k|    return ranges::next(range.begin(), range.end());
 1939|   394k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   394k|    {
  313|   394k|        ranges::advance(x, bound);
  314|   394k|        return x;
  315|   394k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   394k|    {
  275|   394k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   394k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   525k|    {
 1676|   525k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   525k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   525k|    {
 1720|   525k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   525k|                      ranges::sized_range<Range>) {
 1725|   525k|            m_storage.reset();
 1726|   525k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   525k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  31.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.4k|        {
  662|  31.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   106k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   497k|    {
 3707|   497k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 497k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   497k|        return read_source_impl(range);
 3713|   497k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|   152k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|   152k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|   152k|            auto rd = make_reader<T, char_type>();
 6236|   152k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   152k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 152k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|   152k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 152k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|   152k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|   152k|                return impl(rd, range, value);
 6241|   152k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   152k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|   152k|    {
 6161|   152k|        const bool need_skipped_width =
 6162|   152k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 152k]
  |  Branch (6162:33): [True: 0, False: 152k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   152k|        auto it = rng.begin();
 6166|   152k|        std::ptrdiff_t prefix_width = 0;
 6167|   152k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 152k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   152k|        else {
 6175|   152k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.07k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.07k|    }                                                  \
  |  |  |  | 3939|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   151k|            std::tie(it, prefix_width) = prefix_result;
 6177|   151k|        }
 6178|   151k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   151k|        std::ptrdiff_t value_width = 0;
 6182|   151k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 151k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   151k|        else {
 6198|   151k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.3k, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.3k|    }                                                  \
  |  | 3939|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   106k|                                             specs, value, loc));
 6200|       |
 6201|   106k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 106k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   106k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   106k|        std::ptrdiff_t postfix_width = 0;
 6210|   106k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 105k, False: 514]
  ------------------
 6211|   105k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   105k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   105k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   105k|                                 value_width));
 6215|   105k|            std::tie(it, postfix_width) = postfix_result;
 6216|   105k|        }
 6217|       |
 6218|   106k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   106k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   106k|            specs, prefix_width, value_width, postfix_width));
 6220|   106k|        return it;
 6221|   106k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   332k|    {
 3733|   332k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   332k|        const std::ptrdiff_t sign_len =
 3736|   332k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.05k, False: 330k]
  ------------------
 3737|       |
 3738|   332k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32.6k, False: 300k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.6k|    }                                                  \
  |  |  |  | 3939|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   300k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   332k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   151k|    {
 4203|   151k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   151k|#if !SCN_DISABLE_LOCALE
 4206|   151k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.3k, False: 113k]
  ------------------
 4207|  38.3k|            return read_impl<Range>(
 4208|  38.3k|                range, rd,
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.3k|                },
 4212|  38.3k|                value, loc);
 4213|  38.3k|        }
 4214|   113k|#endif
 4215|       |
 4216|   113k|        return read_impl<Range>(
 4217|   113k|            range, rd,
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
 4220|   113k|            },
 4221|   113k|            value);
 4222|   151k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   208k|    {
 4239|   208k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   208k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.9k, False: 151k]
  |  |  ------------------
  ------------------
 4241|  57.9k|            return unexpected(r.error());
 4242|  57.9k|        }
 4243|       |
 4244|   151k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 937, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    937|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    937|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    937|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    937|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    937|    }                                                  \
  |  |  |  | 3939|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   150k|        return ranges::next(range.begin(), n);
 4246|   151k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.3k|        : m_fptr([](storage fn,
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
  752|  38.3k|          m_storage(std::addressof(f))
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   113k|        : m_fptr([](storage fn,
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|   113k|              if constexpr (std::is_void_v<R>) {
  746|   113k|                  obj(static_cast<decltype(args)>(args)...);
  747|   113k|              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
  752|   113k|          m_storage(std::addressof(f))
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   113k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   113k|        else if constexpr (std::is_object_v<T>) {
  688|   113k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   113k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   113k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   113k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   151k|    {
 4203|   151k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   151k|#if !SCN_DISABLE_LOCALE
 4206|   151k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.3k, False: 113k]
  ------------------
 4207|  38.3k|            return read_impl<Range>(
 4208|  38.3k|                range, rd,
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.3k|                },
 4212|  38.3k|                value, loc);
 4213|  38.3k|        }
 4214|   113k|#endif
 4215|       |
 4216|   113k|        return read_impl<Range>(
 4217|   113k|            range, rd,
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
 4220|   113k|            },
 4221|   113k|            value);
 4222|   151k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   209k|    {
 4239|   209k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   209k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.1k, False: 181k]
  |  |  ------------------
  ------------------
 4241|  27.1k|            return unexpected(r.error());
 4242|  27.1k|        }
 4243|       |
 4244|   181k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.7k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.7k|    }                                                  \
  |  |  |  | 3939|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   150k|        return ranges::next(range.begin(), n);
 4246|   181k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  38.3k|        : m_fptr([](storage fn,
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|  38.3k|              if constexpr (std::is_void_v<R>) {
  746|  38.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.3k|              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
  752|  38.3k|          m_storage(std::addressof(f))
  753|  38.3k|    {
  754|  38.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  38.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.3k|              else {
  749|  38.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.3k|              }
  751|  38.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.3k|        else if constexpr (std::is_object_v<T>) {
  688|  38.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  38.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  38.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.3k|        {
  662|  38.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   113k|        : m_fptr([](storage fn,
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|   113k|              if constexpr (std::is_void_v<R>) {
  746|   113k|                  obj(static_cast<decltype(args)>(args)...);
  747|   113k|              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
  752|   113k|          m_storage(std::addressof(f))
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   113k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   113k|        else if constexpr (std::is_object_v<T>) {
  688|   113k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   113k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   113k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   113k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   113k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6225|   154k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|       |                          basic_contiguous_scan_context<char_type>>) {
 6230|       |            auto rd = make_reader<T, char_type>();
 6231|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6232|       |            return impl(rd, range, value);
 6233|       |        }
 6234|   154k|        else if constexpr (!detail::is_type_disabled<T>) {
 6235|   154k|            auto rd = make_reader<T, char_type>();
 6236|   154k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6237|       |
 6238|   154k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6238:17): [True: 154k, False: 0]
  |  Branch (6238:50): [True: 0, False: 0]
  ------------------
 6239|   154k|                specs.width != 0) {
  ------------------
  |  Branch (6239:17): [True: 0, False: 0]
  ------------------
 6240|   154k|                return impl(rd, range, value);
 6241|   154k|            }
 6242|       |
 6243|      0|            auto crange = get_as_contiguous(range);
 6244|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6245|      0|            return ranges::next(range.begin(),
 6246|      0|                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   154k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6160|   154k|    {
 6161|   154k|        const bool need_skipped_width =
 6162|   154k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 154k]
  |  Branch (6162:33): [True: 0, False: 154k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   154k|        auto it = rng.begin();
 6166|   154k|        std::ptrdiff_t prefix_width = 0;
 6167|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 154k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   154k|        else {
 6175|   154k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.14k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.14k|    }                                                  \
  |  |  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   153k|            std::tie(it, prefix_width) = prefix_result;
 6177|   153k|        }
 6178|   153k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   153k|        std::ptrdiff_t value_width = 0;
 6182|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 153k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   153k|        else {
 6198|   153k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.2k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.2k|    }                                                  \
  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   108k|                                             specs, value, loc));
 6200|       |
 6201|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 108k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   108k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   108k|        std::ptrdiff_t postfix_width = 0;
 6210|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 107k, False: 560]
  ------------------
 6211|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   107k|                                 value_width));
 6215|   107k|            std::tie(it, postfix_width) = postfix_result;
 6216|   107k|        }
 6217|       |
 6218|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   108k|            specs, prefix_width, value_width, postfix_width));
 6220|   108k|        return it;
 6221|   108k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   340k|    {
 3733|   340k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   340k|        const std::ptrdiff_t sign_len =
 3736|   340k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.11k, False: 338k]
  ------------------
 3737|       |
 3738|   340k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.5k, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.5k|    }                                                  \
  |  |  |  | 3939|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   308k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   340k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   153k|    {
 4203|   153k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   153k|#if !SCN_DISABLE_LOCALE
 4206|   153k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.4k, False: 114k]
  ------------------
 4207|  39.4k|            return read_impl<Range>(
 4208|  39.4k|                range, rd,
 4209|  39.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.4k|                },
 4212|  39.4k|                value, loc);
 4213|  39.4k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   153k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   212k|    {
 4239|   212k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   212k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 58.6k, False: 154k]
  |  |  ------------------
  ------------------
 4241|  58.6k|            return unexpected(r.error());
 4242|  58.6k|        }
 4243|       |
 4244|   154k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 127, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    127|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    127|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    127|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    127|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    127|    }                                                  \
  |  |  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   154k|        return ranges::next(range.begin(), n);
 4246|   154k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  39.4k|        : m_fptr([](storage fn,
  743|  39.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.4k|              cvref<T> obj = *get<T>(fn);
  745|  39.4k|              if constexpr (std::is_void_v<R>) {
  746|  39.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.4k|              }
  748|  39.4k|              else {
  749|  39.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.4k|              }
  751|  39.4k|          }),
  752|  39.4k|          m_storage(std::addressof(f))
  753|  39.4k|    {
  754|  39.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  39.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.4k|              else {
  749|  39.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.4k|              }
  751|  39.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.4k|        else if constexpr (std::is_object_v<T>) {
  688|  39.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  39.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.4k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  39.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.4k|        {
  662|  39.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   153k|    {
 4203|   153k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   153k|#if !SCN_DISABLE_LOCALE
 4206|   153k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.5k, False: 114k]
  ------------------
 4207|  39.5k|            return read_impl<Range>(
 4208|  39.5k|                range, rd,
 4209|  39.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.5k|                },
 4212|  39.5k|                value, loc);
 4213|  39.5k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   153k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   213k|    {
 4239|   213k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   213k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.3k, False: 185k]
  |  |  ------------------
  ------------------
 4241|  27.3k|            return unexpected(r.error());
 4242|  27.3k|        }
 4243|       |
 4244|   185k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.3k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.3k|    }                                                  \
  |  |  |  | 3939|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   154k|        return ranges::next(range.begin(), n);
 4246|   185k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  39.5k|        : m_fptr([](storage fn,
  743|  39.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.5k|              cvref<T> obj = *get<T>(fn);
  745|  39.5k|              if constexpr (std::is_void_v<R>) {
  746|  39.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.5k|              }
  748|  39.5k|              else {
  749|  39.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.5k|              }
  751|  39.5k|          }),
  752|  39.5k|          m_storage(std::addressof(f))
  753|  39.5k|    {
  754|  39.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  39.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.5k|              else {
  749|  39.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.5k|              }
  751|  39.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.5k|        else if constexpr (std::is_object_v<T>) {
  688|  39.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  39.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  39.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.5k|        {
  662|  39.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   610k|{
 2160|   610k|    auto it = range.begin();
 2161|  1.05M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.05M, False: 3.75k]
  ------------------
 2162|  1.05M|        const auto val =
 2163|  1.05M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.05M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.05M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.05M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.05M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 606k, False: 446k]
  ------------------
 2168|   606k|                return it;
 2169|   606k|            }
 2170|  1.05M|        }
 2171|   446k|        it = val.iterator;
 2172|   446k|    }
 2173|       |
 2174|  3.75k|    return it;
 2175|   610k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.05M|{
 1998|  1.05M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.05M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.05M|    auto it = range.begin();
 2002|  1.05M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.05M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.05M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.05M, False: 0]
  ------------------
 2011|  1.05M|        ++it;
 2012|  1.05M|        return {it, string_type(1, *range.begin())};
 2013|  1.05M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.05M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  1.05M|    {
 1989|  1.05M|        return !codepoint.empty();
 1990|  1.05M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   610k|{
 2181|   610k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   610k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   610k|{
 3066|   610k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 610k, False: 0]
  ------------------
 3067|   610k|        auto it = read_while_classic_space(range);
 3068|   610k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   610k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.75k, False: 606k]
  |  |  ------------------
  ------------------
 3070|  3.75k|            return unexpected(e);
 3071|  3.75k|        }
 3072|       |
 3073|   606k|        return it;
 3074|   610k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   610k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   610k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   610k|    else {
 2225|   610k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   610k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   610k|            return detail::is_cp_space(cp);
 2238|   610k|        });
 2239|   610k|    }
 2240|   610k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   610k|        : m_fptr([](storage fn,
  743|   610k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   610k|              cvref<T> obj = *get<T>(fn);
  745|   610k|              if constexpr (std::is_void_v<R>) {
  746|   610k|                  obj(static_cast<decltype(args)>(args)...);
  747|   610k|              }
  748|   610k|              else {
  749|   610k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   610k|              }
  751|   610k|          }),
  752|   610k|          m_storage(std::addressof(f))
  753|   610k|    {
  754|   610k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.05M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.05M|            return detail::is_cp_space(cp);
 2238|  1.05M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   610k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   610k|        {
  662|   610k|        }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   854k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   854k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   854k|        auto buf = make_contiguous_buffer(range);
 2191|   854k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   854k|        return ranges::next(range.begin(),
 2193|   854k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   854k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   854k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   854k|                  ranges::sized_range<Range>) {
 1785|   854k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   854k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   854k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   854k|    {
 1589|   854k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   854k|    {
 1676|   854k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   854k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   854k|    {
 1720|   854k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   854k|                                          std::basic_string<CharT>>) {
 1730|   854k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   854k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   854k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4132|   602k|    {
 4133|   602k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 69.1k, False: 532k]
  ------------------
 4134|  69.1k|            return std::copysign(value, T{-1.0});
 4135|  69.1k|        }
 4136|   532k|        return std::copysign(value, T{1.0});
 4137|   602k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   430k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   430k|    else {
 2196|   430k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   430k|        return read_until_code_point(
 2208|   430k|            ranges::subrange{it, range.end()},
 2209|   430k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   430k|    }
 2211|   430k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   430k|        : m_fptr([](storage fn,
  743|   430k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   430k|              cvref<T> obj = *get<T>(fn);
  745|   430k|              if constexpr (std::is_void_v<R>) {
  746|   430k|                  obj(static_cast<decltype(args)>(args)...);
  747|   430k|              }
  748|   430k|              else {
  749|   430k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   430k|              }
  751|   430k|          }),
  752|   430k|          m_storage(std::addressof(f))
  753|   430k|    {
  754|   430k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   812k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   812k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   812k|              else {
  749|   812k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   812k|              }
  751|   812k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   812k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   812k|        else if constexpr (std::is_object_v<T>) {
  688|   812k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   812k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|   812k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   430k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   430k|        {
  662|   430k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   430k|    {
 1676|   430k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   430k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   430k|    {
 1720|   430k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   430k|                                          std::basic_string<CharT>>) {
 1730|   430k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   430k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   430k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4132|   251k|    {
 4133|   251k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.15k, False: 250k]
  ------------------
 4134|  1.15k|            return std::copysign(value, T{-1.0});
 4135|  1.15k|        }
 4136|   250k|        return std::copysign(value, T{1.0});
 4137|   251k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4132|   630k|    {
 4133|   630k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 72.0k, False: 558k]
  ------------------
 4134|  72.0k|            return std::copysign(value, T{-1.0});
 4135|  72.0k|        }
 4136|   558k|        return std::copysign(value, T{1.0});
 4137|   630k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4132|   300k|    {
 4133|   300k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.17k, False: 299k]
  ------------------
 4134|  1.17k|            return std::copysign(value, T{-1.0});
 4135|  1.17k|        }
 4136|   299k|        return std::copysign(value, T{1.0});
 4137|   300k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4132|   638k|    {
 4133|   638k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 74.6k, False: 563k]
  ------------------
 4134|  74.6k|            return std::copysign(value, T{-1.0});
 4135|  74.6k|        }
 4136|   563k|        return std::copysign(value, T{1.0});
 4137|   638k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4132|   308k|    {
 4133|   308k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.32k, False: 307k]
  ------------------
 4134|  1.32k|            return std::copysign(value, T{-1.0});
 4135|  1.32k|        }
 4136|   307k|        return std::copysign(value, T{1.0});
 4137|   308k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   280k|{
 5835|   280k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.96k, False: 276k]
  |  |  ------------------
  ------------------
 5836|  3.96k|        return unexpected(e);
 5837|  3.96k|    }
 5838|       |
 5839|   276k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 276k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   276k|    return skip_classic_whitespace(range);
 5844|   276k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  90.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  90.5k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  90.5k|            auto rd = make_reader<T, char_type>();
 5916|  90.5k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  90.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  90.5k|    {
 5903|  90.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  90.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  90.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  90.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  90.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.32k, False: 89.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.32k|    }                                                  \
  |  |  |  | 3939|  90.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  89.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  89.2k|                        .transform_error(make_eof_scan_error));
 5905|  89.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  90.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  89.2k|    {
 4185|  89.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  89.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  89.2k|        float_reader<CharT> rd{};
 4188|  89.2k|        return read_impl<Range>(
 4189|  89.2k|            range, rd,
 4190|  89.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  89.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  89.2k|            },
 4193|  89.2k|            value);
 4194|  89.2k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|   579k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|   907k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  89.2k|        : m_fptr([](storage fn,
  743|  89.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.2k|              cvref<T> obj = *get<T>(fn);
  745|  89.2k|              if constexpr (std::is_void_v<R>) {
  746|  89.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.2k|              }
  748|  89.2k|              else {
  749|  89.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.2k|              }
  751|  89.2k|          }),
  752|  89.2k|          m_storage(std::addressof(f))
  753|  89.2k|    {
  754|  89.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  89.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.2k|              else {
  749|  89.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.2k|              }
  751|  89.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  89.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.2k|        else if constexpr (std::is_object_v<T>) {
  688|  89.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  89.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  89.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  89.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  89.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  89.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.2k|        {
  662|  89.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  94.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  94.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  94.3k|            auto rd = make_reader<T, char_type>();
 5916|  94.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  94.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  94.3k|    {
 5903|  94.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  94.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  94.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  94.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  94.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 92.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  94.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  92.8k|                        .transform_error(make_eof_scan_error));
 5905|  92.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  94.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  92.8k|    {
 4185|  92.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  92.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  92.8k|        float_reader<CharT> rd{};
 4188|  92.8k|        return read_impl<Range>(
 4189|  92.8k|            range, rd,
 4190|  92.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.8k|                return r.read_source(SCN_FWD(args)...);
 4192|  92.8k|            },
 4193|  92.8k|            value);
 4194|  92.8k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  92.8k|        : m_fptr([](storage fn,
  743|  92.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.8k|              cvref<T> obj = *get<T>(fn);
  745|  92.8k|              if constexpr (std::is_void_v<R>) {
  746|  92.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.8k|              }
  748|  92.8k|              else {
  749|  92.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.8k|              }
  751|  92.8k|          }),
  752|  92.8k|          m_storage(std::addressof(f))
  753|  92.8k|    {
  754|  92.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  92.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  92.8k|              else {
  749|  92.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.8k|              }
  751|  92.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  92.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  92.8k|        else if constexpr (std::is_object_v<T>) {
  688|  92.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  92.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  92.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  92.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  92.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.8k|        {
  662|  92.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  95.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  95.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  95.9k|            auto rd = make_reader<T, char_type>();
 5916|  95.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  95.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  95.9k|    {
 5903|  95.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  95.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  95.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  95.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  95.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.62k, False: 94.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.62k|    }                                                  \
  |  |  |  | 3939|  95.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  94.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  94.3k|                        .transform_error(make_eof_scan_error));
 5905|  94.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  95.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  94.3k|    {
 4185|  94.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  94.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  94.3k|        float_reader<CharT> rd{};
 4188|  94.3k|        return read_impl<Range>(
 4189|  94.3k|            range, rd,
 4190|  94.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  94.3k|                return r.read_source(SCN_FWD(args)...);
 4192|  94.3k|            },
 4193|  94.3k|            value);
 4194|  94.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  94.3k|        : m_fptr([](storage fn,
  743|  94.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.3k|              cvref<T> obj = *get<T>(fn);
  745|  94.3k|              if constexpr (std::is_void_v<R>) {
  746|  94.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.3k|              }
  748|  94.3k|              else {
  749|  94.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.3k|              }
  751|  94.3k|          }),
  752|  94.3k|          m_storage(std::addressof(f))
  753|  94.3k|    {
  754|  94.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  94.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.3k|              else {
  749|  94.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.3k|              }
  751|  94.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.3k|        else if constexpr (std::is_object_v<T>) {
  688|  94.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  94.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  94.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  94.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  94.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  94.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.3k|        {
  662|  94.3k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   308k|{
 5835|   308k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.20k, False: 304k]
  |  |  ------------------
  ------------------
 5836|  4.20k|        return unexpected(e);
 5837|  4.20k|    }
 5838|       |
 5839|   304k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 304k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   304k|    return skip_classic_whitespace(range);
 5844|   304k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  98.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  98.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  98.5k|            auto rd = make_reader<T, char_type>();
 5920|  98.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 98.5k, False: 0]
  ------------------
 5921|  98.5k|                return impl(rd, range, value);
 5922|  98.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  98.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  98.5k|    {
 5903|  98.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  98.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  98.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  98.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.42k, False: 97.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.42k|    }                                                  \
  |  |  |  | 3939|  98.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  97.1k|                        .transform_error(make_eof_scan_error));
 5905|  97.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  98.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  97.1k|    {
 4185|  97.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  97.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  97.1k|        float_reader<CharT> rd{};
 4188|  97.1k|        return read_impl<Range>(
 4189|  97.1k|            range, rd,
 4190|  97.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  97.1k|                return r.read_source(SCN_FWD(args)...);
 4192|  97.1k|            },
 4193|  97.1k|            value);
 4194|  97.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  97.1k|        : m_fptr([](storage fn,
  743|  97.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.1k|              cvref<T> obj = *get<T>(fn);
  745|  97.1k|              if constexpr (std::is_void_v<R>) {
  746|  97.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  97.1k|              }
  748|  97.1k|              else {
  749|  97.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.1k|              }
  751|  97.1k|          }),
  752|  97.1k|          m_storage(std::addressof(f))
  753|  97.1k|    {
  754|  97.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  97.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  97.1k|              else {
  749|  97.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.1k|              }
  751|  97.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  97.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  97.1k|        else if constexpr (std::is_object_v<T>) {
  688|  97.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  97.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  97.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  97.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  97.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  97.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  97.1k|        {
  662|  97.1k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   104k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   104k|            auto rd = make_reader<T, char_type>();
 5920|   104k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 104k, False: 0]
  ------------------
 5921|   104k|                return impl(rd, range, value);
 5922|   104k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   104k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   104k|    {
 5903|   104k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.61k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.61k|    }                                                  \
  |  |  |  | 3939|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   102k|                        .transform_error(make_eof_scan_error));
 5905|   102k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   104k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   102k|    {
 4185|   102k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   102k|        float_reader<CharT> rd{};
 4188|   102k|        return read_impl<Range>(
 4189|   102k|            range, rd,
 4190|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   102k|                return r.read_source(SCN_FWD(args)...);
 4192|   102k|            },
 4193|   102k|            value);
 4194|   102k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   102k|        : m_fptr([](storage fn,
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
  752|   102k|          m_storage(std::addressof(f))
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   102k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   102k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   105k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   105k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   105k|            auto rd = make_reader<T, char_type>();
 5920|   105k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 105k, False: 0]
  ------------------
 5921|   105k|                return impl(rd, range, value);
 5922|   105k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   105k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   105k|    {
 5903|   105k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.73k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.73k|    }                                                  \
  |  |  |  | 3939|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   103k|                        .transform_error(make_eof_scan_error));
 5905|   103k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   105k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   103k|    {
 4185|   103k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   103k|        float_reader<CharT> rd{};
 4188|   103k|        return read_impl<Range>(
 4189|   103k|            range, rd,
 4190|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   103k|                return r.read_source(SCN_FWD(args)...);
 4192|   103k|            },
 4193|   103k|            value);
 4194|   103k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   103k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   672k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   672k|    static_cast<    \
  |  |  935|   672k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   672k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   672k|          m_current(m_range.begin())
 2988|   672k|    {
 2989|   672k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|  1.27M|    {
 2998|  1.27M|        return m_range.end();
 2999|  1.27M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   602k|    {
 3013|   602k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   602k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   602k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   602k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   602k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 602k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   602k|        }
 3019|   602k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   602k|    static_cast<    \
  |  |  935|   602k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   602k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   672k|    {
 3003|   672k|        return ranges::subrange{begin(), end()};
 3004|   672k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|   672k|    {
 6074|   672k|        const bool need_skipped_width =
 6075|   672k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 672k]
  |  Branch (6075:33): [True: 0, False: 672k]
  ------------------
 6076|   672k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   672k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 672k]
  ------------------
 6080|   672k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 672k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   672k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 672k, False: 0]
  |  Branch (6084:56): [True: 672k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   672k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 672k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|  1.33M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   672k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   672k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   672k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.4k, False: 660k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   672k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|  1.33M|                            make_eof_scan_error));
 6095|       |
 6096|  1.33M|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 660k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   660k|            return result_type{it, 0};
 6104|  1.33M|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   672k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|   592k|    {
 6116|   592k|        const bool need_skipped_width =
 6117|   592k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 592k]
  |  Branch (6117:33): [True: 0, False: 592k]
  ------------------
 6118|   592k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   592k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 592k]
  ------------------
 6121|   592k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 592k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   592k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 592k, False: 0]
  ------------------
 6130|   592k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 592k]
  ------------------
 6131|   592k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   592k|        return result_type{rng.begin(), 0};
 6155|   592k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6225|   218k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   218k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   218k|            auto rd = make_reader<T, char_type>();
 6231|   218k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   218k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 218k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|   218k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   218k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|   218k|    {
 6161|   218k|        const bool need_skipped_width =
 6162|   218k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 218k]
  |  Branch (6162:33): [True: 0, False: 218k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   218k|        auto it = rng.begin();
 6166|   218k|        std::ptrdiff_t prefix_width = 0;
 6167|   218k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 218k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   218k|        else {
 6175|   218k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.50k, False: 215k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.50k|    }                                                  \
  |  |  |  | 3939|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   215k|            std::tie(it, prefix_width) = prefix_result;
 6177|   215k|        }
 6178|   215k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   215k|        std::ptrdiff_t value_width = 0;
 6182|   215k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 215k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   215k|        else {
 6198|   215k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   215k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   215k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.6k, False: 195k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.6k|    }                                                  \
  |  | 3939|   215k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   195k|                                             specs, value, loc));
 6200|       |
 6201|   195k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 195k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   195k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   195k|        std::ptrdiff_t postfix_width = 0;
 6210|   195k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 192k, False: 3.08k]
  ------------------
 6211|   192k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 192k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   192k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   192k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   192k|                                 value_width));
 6215|   192k|            std::tie(it, postfix_width) = postfix_result;
 6216|   192k|        }
 6217|       |
 6218|   195k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   195k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 195k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   195k|            specs, prefix_width, value_width, postfix_width));
 6220|   195k|        return it;
 6221|   195k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6225|   225k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   225k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   225k|            auto rd = make_reader<T, char_type>();
 6231|   225k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   225k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|   225k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   225k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|   225k|    {
 6161|   225k|        const bool need_skipped_width =
 6162|   225k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 225k]
  |  Branch (6162:33): [True: 0, False: 225k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   225k|        auto it = rng.begin();
 6166|   225k|        std::ptrdiff_t prefix_width = 0;
 6167|   225k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 225k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   225k|        else {
 6175|   225k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.85k, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.85k|    }                                                  \
  |  |  |  | 3939|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   221k|            std::tie(it, prefix_width) = prefix_result;
 6177|   221k|        }
 6178|   221k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   221k|        std::ptrdiff_t value_width = 0;
 6182|   221k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 221k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   221k|        else {
 6198|   221k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.3k, False: 202k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.3k|    }                                                  \
  |  | 3939|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   202k|                                             specs, value, loc));
 6200|       |
 6201|   202k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 202k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   202k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   202k|        std::ptrdiff_t postfix_width = 0;
 6210|   202k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 198k, False: 3.39k]
  ------------------
 6211|   198k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   198k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   198k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   198k|                                 value_width));
 6215|   198k|            std::tie(it, postfix_width) = postfix_result;
 6216|   198k|        }
 6217|       |
 6218|   202k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   202k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 202k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   202k|            specs, prefix_width, value_width, postfix_width));
 6220|   202k|        return it;
 6221|   202k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6225|   227k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   227k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   227k|            auto rd = make_reader<T, char_type>();
 6231|   227k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   227k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 227k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|   227k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   227k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|   227k|    {
 6161|   227k|        const bool need_skipped_width =
 6162|   227k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 227k]
  |  Branch (6162:33): [True: 0, False: 227k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   227k|        auto it = rng.begin();
 6166|   227k|        std::ptrdiff_t prefix_width = 0;
 6167|   227k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 227k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   227k|        else {
 6175|   227k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.09k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.09k|    }                                                  \
  |  |  |  | 3939|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   223k|            std::tie(it, prefix_width) = prefix_result;
 6177|   223k|        }
 6178|   223k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   223k|        std::ptrdiff_t value_width = 0;
 6182|   223k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 223k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   223k|        else {
 6198|   223k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.0k, False: 204k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.0k|    }                                                  \
  |  | 3939|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   204k|                                             specs, value, loc));
 6200|       |
 6201|   204k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 204k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   204k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   204k|        std::ptrdiff_t postfix_width = 0;
 6210|   204k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 201k, False: 3.61k]
  ------------------
 6211|   201k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   201k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   201k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   201k|                                 value_width));
 6215|   201k|            std::tie(it, postfix_width) = postfix_result;
 6216|   201k|        }
 6217|       |
 6218|   204k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   204k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 204k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   204k|            specs, prefix_width, value_width, postfix_width));
 6220|   204k|        return it;
 6221|   204k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   165k|{
 5835|   165k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 570, False: 164k]
  |  |  ------------------
  ------------------
 5836|    570|        return unexpected(e);
 5837|    570|    }
 5838|       |
 5839|   164k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 164k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   164k|    return skip_classic_whitespace(range);
 5844|   164k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  47.4k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  47.4k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  47.4k|            auto rd = make_reader<T, char_type>();
 5916|  47.4k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  47.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  47.4k|    {
 5903|  47.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  47.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 321, False: 47.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    321|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    321|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    321|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    321|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    321|    }                                                  \
  |  |  |  | 3939|  47.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.1k|                        .transform_error(make_eof_scan_error));
 5905|  47.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  47.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  47.1k|    {
 4185|  47.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  47.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.1k|        float_reader<CharT> rd{};
 4188|  47.1k|        return read_impl<Range>(
 4189|  47.1k|            range, rd,
 4190|  47.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.1k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.1k|            },
 4193|  47.1k|            value);
 4194|  47.1k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|   327k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  47.1k|        : m_fptr([](storage fn,
  743|  47.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.1k|              cvref<T> obj = *get<T>(fn);
  745|  47.1k|              if constexpr (std::is_void_v<R>) {
  746|  47.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.1k|              }
  748|  47.1k|              else {
  749|  47.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.1k|              }
  751|  47.1k|          }),
  752|  47.1k|          m_storage(std::addressof(f))
  753|  47.1k|    {
  754|  47.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  47.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.1k|              else {
  749|  47.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.1k|              }
  751|  47.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.1k|        else if constexpr (std::is_object_v<T>) {
  688|  47.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  47.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  47.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  47.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.1k|        {
  662|  47.1k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  57.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  57.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  57.9k|            auto rd = make_reader<T, char_type>();
 5916|  57.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  57.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  57.9k|    {
 5903|  57.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 372, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    372|    }                                                  \
  |  |  |  | 3939|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.5k|                        .transform_error(make_eof_scan_error));
 5905|  57.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  57.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  57.5k|    {
 4185|  57.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  57.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  57.5k|        float_reader<CharT> rd{};
 4188|  57.5k|        return read_impl<Range>(
 4189|  57.5k|            range, rd,
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
 4192|  57.5k|            },
 4193|  57.5k|            value);
 4194|  57.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  57.5k|        : m_fptr([](storage fn,
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|  57.5k|              if constexpr (std::is_void_v<R>) {
  746|  57.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.5k|              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
  752|  57.5k|          m_storage(std::addressof(f))
  753|  57.5k|    {
  754|  57.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.5k|        else if constexpr (std::is_object_v<T>) {
  688|  57.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  57.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  57.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.5k|        {
  662|  57.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  59.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  59.6k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  59.6k|            auto rd = make_reader<T, char_type>();
 5916|  59.6k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  59.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  59.6k|    {
 5903|  59.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  59.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 417, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    417|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    417|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    417|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    417|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    417|    }                                                  \
  |  |  |  | 3939|  59.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  59.2k|                        .transform_error(make_eof_scan_error));
 5905|  59.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  59.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  59.2k|    {
 4185|  59.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  59.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  59.2k|        float_reader<CharT> rd{};
 4188|  59.2k|        return read_impl<Range>(
 4189|  59.2k|            range, rd,
 4190|  59.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  59.2k|            },
 4193|  59.2k|            value);
 4194|  59.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  59.2k|        : m_fptr([](storage fn,
  743|  59.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.2k|              cvref<T> obj = *get<T>(fn);
  745|  59.2k|              if constexpr (std::is_void_v<R>) {
  746|  59.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.2k|              }
  748|  59.2k|              else {
  749|  59.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.2k|              }
  751|  59.2k|          }),
  752|  59.2k|          m_storage(std::addressof(f))
  753|  59.2k|    {
  754|  59.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  59.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.2k|              else {
  749|  59.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.2k|              }
  751|  59.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.2k|        else if constexpr (std::is_object_v<T>) {
  688|  59.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  59.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  59.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.2k|        {
  662|  59.2k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   446k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   446k|    static_cast<    \
  |  |  935|   446k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   446k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   446k|          m_current(m_range.begin())
 2988|   446k|    {
 2989|   446k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   753k|    {
 2998|   753k|        return m_range.end();
 2999|   753k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   307k|    {
 3013|   307k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   307k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   307k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 307k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   307k|        }
 3019|   307k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   307k|    static_cast<    \
  |  |  935|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   307k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   446k|    {
 3003|   446k|        return ranges::subrange{begin(), end()};
 3004|   446k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6073|   446k|    {
 6074|   446k|        const bool need_skipped_width =
 6075|   446k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6075:13): [True: 0, False: 446k]
  |  Branch (6075:33): [True: 0, False: 446k]
  ------------------
 6076|   446k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6077|       |
 6078|       |        // Read prefix
 6079|   446k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6079:13): [True: 0, False: 446k]
  ------------------
 6080|   446k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6080:13): [True: 0, False: 446k]
  ------------------
 6081|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6082|      0|                             need_skipped_width);
 6083|      0|        }
 6084|   446k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6084:13): [True: 446k, False: 0]
  |  Branch (6084:56): [True: 446k, False: 0]
  ------------------
 6085|       |            // Default alignment:
 6086|       |            // Skip preceding whitespace, if required by the reader
 6087|   446k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6087:17): [True: 0, False: 446k]
  ------------------
 6088|      0|                auto max_width_view = take_width(rng, specs.precision);
 6089|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6090|      0|                                  .transform_error(make_eof_scan_error));
 6091|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6092|      0|            }
 6093|   889k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   446k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   446k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   446k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.21k, False: 442k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.21k|    }                                                  \
  |  |  |  | 3939|   446k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6094|   889k|                            make_eof_scan_error));
 6095|       |
 6096|   889k|            if (need_skipped_width) {
  ------------------
  |  Branch (6096:17): [True: 0, False: 442k]
  ------------------
 6097|      0|                return result_type{
 6098|      0|                    it,
 6099|      0|                    calculate_text_width(make_contiguous_buffer(
 6100|      0|                                             ranges::subrange{rng.begin(), it})
 6101|      0|                                             .view())};
 6102|      0|            }
 6103|   442k|            return result_type{it, 0};
 6104|   889k|        }
 6105|       |
 6106|      0|        return result_type{rng.begin(), 0};
 6107|   446k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6115|   305k|    {
 6116|   305k|        const bool need_skipped_width =
 6117|   305k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6117:13): [True: 0, False: 305k]
  |  Branch (6117:33): [True: 0, False: 305k]
  ------------------
 6118|   305k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6119|       |
 6120|   305k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6120:13): [True: 0, False: 305k]
  ------------------
 6121|   305k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6121:13): [True: 0, False: 305k]
  ------------------
 6122|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6122:17): [True: 0, False: 0]
  ------------------
 6123|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                return result_type{rng.begin(), 0};
 6125|      0|            }
 6126|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6127|      0|                             specs.fill, need_skipped_width);
 6128|      0|        }
 6129|   305k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6129:13): [True: 305k, False: 0]
  ------------------
 6130|   305k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6130:13): [True: 0, False: 305k]
  ------------------
 6131|   305k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6131:15): [True: 0, False: 0]
  |  Branch (6131:35): [True: 0, False: 0]
  ------------------
 6132|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  ------------------
 6133|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                const auto initial_width =
 6136|      0|                    specs.precision - prefix_width - value_width;
 6137|      0|                auto max_width_view = take_width(rng, initial_width);
 6138|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|      0|                                  .transform_error(make_eof_scan_error));
 6140|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6141|      0|            }
 6142|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|                            make_eof_scan_error));
 6144|       |
 6145|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6145:17): [True: 0, False: 0]
  ------------------
 6146|      0|                return result_type{
 6147|      0|                    it,
 6148|      0|                    calculate_text_width(make_contiguous_buffer(
 6149|      0|                                             ranges::subrange{rng.begin(), it})
 6150|      0|                                             .view())};
 6151|      0|            }
 6152|      0|            return result_type{it, 0};
 6153|      0|        }
 6154|   305k|        return result_type{rng.begin(), 0};
 6155|   305k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6225|   138k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   138k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   138k|            auto rd = make_reader<T, char_type>();
 6231|   138k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   138k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 138k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|   138k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   138k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|   138k|    {
 6161|   138k|        const bool need_skipped_width =
 6162|   138k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 138k]
  |  Branch (6162:33): [True: 0, False: 138k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   138k|        auto it = rng.begin();
 6166|   138k|        std::ptrdiff_t prefix_width = 0;
 6167|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 138k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   138k|        else {
 6175|   138k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 992, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    992|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    992|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    992|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    992|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    992|    }                                                  \
  |  |  |  | 3939|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   137k|            std::tie(it, prefix_width) = prefix_result;
 6177|   137k|        }
 6178|   137k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   137k|        std::ptrdiff_t value_width = 0;
 6182|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 137k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   137k|        else {
 6198|   137k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.3k, False: 92.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.3k|    }                                                  \
  |  | 3939|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|  92.1k|                                             specs, value, loc));
 6200|       |
 6201|  92.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 92.1k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|  92.1k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|  92.1k|        std::ptrdiff_t postfix_width = 0;
 6210|  92.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 91.7k, False: 466]
  ------------------
 6211|  91.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  91.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  91.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  91.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 91.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  91.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|  91.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|  91.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|  91.7k|                                 value_width));
 6215|  91.7k|            std::tie(it, postfix_width) = postfix_result;
 6216|  91.7k|        }
 6217|       |
 6218|  92.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  92.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 92.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|  92.1k|            specs, prefix_width, value_width, postfix_width));
 6220|  92.1k|        return it;
 6221|  92.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6225|   152k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   152k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   152k|            auto rd = make_reader<T, char_type>();
 6231|   152k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   152k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 152k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|   152k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   152k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|   152k|    {
 6161|   152k|        const bool need_skipped_width =
 6162|   152k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 152k]
  |  Branch (6162:33): [True: 0, False: 152k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   152k|        auto it = rng.begin();
 6166|   152k|        std::ptrdiff_t prefix_width = 0;
 6167|   152k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 152k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   152k|        else {
 6175|   152k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.07k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.07k|    }                                                  \
  |  |  |  | 3939|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   151k|            std::tie(it, prefix_width) = prefix_result;
 6177|   151k|        }
 6178|   151k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   151k|        std::ptrdiff_t value_width = 0;
 6182|   151k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 151k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   151k|        else {
 6198|   151k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.3k, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.3k|    }                                                  \
  |  | 3939|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   106k|                                             specs, value, loc));
 6200|       |
 6201|   106k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 106k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   106k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   106k|        std::ptrdiff_t postfix_width = 0;
 6210|   106k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 105k, False: 514]
  ------------------
 6211|   105k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   105k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   105k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   105k|                                 value_width));
 6215|   105k|            std::tie(it, postfix_width) = postfix_result;
 6216|   105k|        }
 6217|       |
 6218|   106k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   106k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 106k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   106k|            specs, prefix_width, value_width, postfix_width));
 6220|   106k|        return it;
 6221|   106k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6225|   155k|    {
 6226|       |        if constexpr (!detail::is_type_disabled<T> &&
 6227|       |                      std::is_same_v<
 6228|       |                          context_type,
 6229|   155k|                          basic_contiguous_scan_context<char_type>>) {
 6230|   155k|            auto rd = make_reader<T, char_type>();
 6231|   155k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   155k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6232|   155k|            return impl(rd, range, value);
 6233|       |        }
 6234|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6235|       |            auto rd = make_reader<T, char_type>();
 6236|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6237|       |
 6238|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6239|       |                specs.width != 0) {
 6240|       |                return impl(rd, range, value);
 6241|       |            }
 6242|       |
 6243|       |            auto crange = get_as_contiguous(range);
 6244|       |            SCN_TRY(it, impl(rd, crange, value));
 6245|       |            return ranges::next(range.begin(),
 6246|       |                                ranges::distance(crange.begin(), it));
 6247|       |        }
 6248|       |        else {
 6249|       |            SCN_EXPECT(false);
 6250|       |            SCN_UNREACHABLE;
 6251|       |        }
 6252|   155k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6160|   155k|    {
 6161|   155k|        const bool need_skipped_width =
 6162|   155k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6162:13): [True: 0, False: 155k]
  |  Branch (6162:33): [True: 0, False: 155k]
  ------------------
 6163|       |
 6164|       |        // Read prefix
 6165|   155k|        auto it = rng.begin();
 6166|   155k|        std::ptrdiff_t prefix_width = 0;
 6167|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6167:13): [True: 0, False: 155k]
  ------------------
 6168|      0|            auto max_width_view = take_width(rng, specs.precision);
 6169|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6170|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6171|      0|            it = prefix_result.first.base();
 6172|      0|            prefix_width = prefix_result.second;
 6173|      0|        }
 6174|   155k|        else {
 6175|   155k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.14k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.14k|    }                                                  \
  |  |  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6176|   153k|            std::tie(it, prefix_width) = prefix_result;
 6177|   153k|        }
 6178|   153k|        auto prefix_end_it = it;
 6179|       |
 6180|       |        // Read value
 6181|   153k|        std::ptrdiff_t value_width = 0;
 6182|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6182:13): [True: 0, False: 153k]
  ------------------
 6183|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6183:17): [True: 0, False: 0]
  ------------------
 6184|      0|                return detail::unexpected_scan_error(
 6185|      0|                    scan_error::invalid_fill,
 6186|      0|                    "Too many fill characters before value, "
 6187|      0|                    "precision exceeded before reading value");
 6188|      0|            }
 6189|       |
 6190|      0|            const auto initial_width = specs.precision - prefix_width;
 6191|      0|            auto max_width_view =
 6192|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6193|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|      0|            it = w_it.base();
 6195|      0|            value_width = initial_width - w_it.count();
 6196|      0|        }
 6197|   153k|        else {
 6198|   153k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 45.2k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.2k|    }                                                  \
  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6199|   108k|                                             specs, value, loc));
 6200|       |
 6201|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6201:17): [True: 0, False: 108k]
  ------------------
 6202|      0|                value_width = calculate_text_width(
 6203|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6204|      0|                        .view());
 6205|      0|            }
 6206|   108k|        }
 6207|       |
 6208|       |        // Read postfix
 6209|   108k|        std::ptrdiff_t postfix_width = 0;
 6210|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6210:13): [True: 108k, False: 560]
  ------------------
 6211|   108k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6212|   108k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6213|   108k|                                 rd.skip_ws_before_read(), prefix_width,
 6214|   108k|                                 value_width));
 6215|   108k|            std::tie(it, postfix_width) = postfix_result;
 6216|   108k|        }
 6217|       |
 6218|   108k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   108k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6219|   108k|            specs, prefix_width, value_width, postfix_width));
 6220|   108k|        return it;
 6221|   108k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   164k|{
 5835|   164k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 570, False: 164k]
  |  |  ------------------
  ------------------
 5836|    570|        return unexpected(e);
 5837|    570|    }
 5838|       |
 5839|   164k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 164k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   164k|    return skip_classic_whitespace(range);
 5844|   164k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  47.4k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  47.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  47.4k|            auto rd = make_reader<T, char_type>();
 5920|  47.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 47.4k, False: 0]
  ------------------
 5921|  47.4k|                return impl(rd, range, value);
 5922|  47.4k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  47.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  47.4k|    {
 5903|  47.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  47.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  47.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  47.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 321, False: 47.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    321|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    321|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    321|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    321|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    321|    }                                                  \
  |  |  |  | 3939|  47.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.0k|                        .transform_error(make_eof_scan_error));
 5905|  47.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  47.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  47.0k|    {
 4185|  47.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  47.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.0k|        float_reader<CharT> rd{};
 4188|  47.0k|        return read_impl<Range>(
 4189|  47.0k|            range, rd,
 4190|  47.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.0k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.0k|            },
 4193|  47.0k|            value);
 4194|  47.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  47.0k|        : m_fptr([](storage fn,
  743|  47.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.0k|              cvref<T> obj = *get<T>(fn);
  745|  47.0k|              if constexpr (std::is_void_v<R>) {
  746|  47.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.0k|              }
  748|  47.0k|              else {
  749|  47.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.0k|              }
  751|  47.0k|          }),
  752|  47.0k|          m_storage(std::addressof(f))
  753|  47.0k|    {
  754|  47.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  47.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.0k|              else {
  749|  47.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.0k|              }
  751|  47.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.0k|        else if constexpr (std::is_object_v<T>) {
  688|  47.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  47.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  47.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  47.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.0k|        {
  662|  47.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  57.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  57.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  57.8k|            auto rd = make_reader<T, char_type>();
 5920|  57.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 57.8k, False: 0]
  ------------------
 5921|  57.8k|                return impl(rd, range, value);
 5922|  57.8k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  57.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  57.8k|    {
 5903|  57.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  57.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  57.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  57.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 372, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    372|    }                                                  \
  |  |  |  | 3939|  57.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.5k|                        .transform_error(make_eof_scan_error));
 5905|  57.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  57.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  57.5k|    {
 4185|  57.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  57.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  57.5k|        float_reader<CharT> rd{};
 4188|  57.5k|        return read_impl<Range>(
 4189|  57.5k|            range, rd,
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
 4192|  57.5k|            },
 4193|  57.5k|            value);
 4194|  57.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  57.5k|        : m_fptr([](storage fn,
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|  57.5k|              if constexpr (std::is_void_v<R>) {
  746|  57.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.5k|              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
  752|  57.5k|          m_storage(std::addressof(f))
  753|  57.5k|    {
  754|  57.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  57.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.5k|              else {
  749|  57.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.5k|              }
  751|  57.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.5k|        else if constexpr (std::is_object_v<T>) {
  688|  57.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  57.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  57.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  57.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.5k|        {
  662|  57.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  59.6k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  59.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  59.6k|            auto rd = make_reader<T, char_type>();
 5920|  59.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 59.6k, False: 0]
  ------------------
 5921|  59.6k|                return impl(rd, range, value);
 5922|  59.6k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  59.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  59.6k|    {
 5903|  59.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  59.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  59.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  59.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 417, False: 59.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    417|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    417|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    417|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    417|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    417|    }                                                  \
  |  |  |  | 3939|  59.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  59.2k|                        .transform_error(make_eof_scan_error));
 5905|  59.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  59.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  59.2k|    {
 4185|  59.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  59.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  59.2k|        float_reader<CharT> rd{};
 4188|  59.2k|        return read_impl<Range>(
 4189|  59.2k|            range, rd,
 4190|  59.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.2k|                return r.read_source(SCN_FWD(args)...);
 4192|  59.2k|            },
 4193|  59.2k|            value);
 4194|  59.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  59.2k|        : m_fptr([](storage fn,
  743|  59.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.2k|              cvref<T> obj = *get<T>(fn);
  745|  59.2k|              if constexpr (std::is_void_v<R>) {
  746|  59.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.2k|              }
  748|  59.2k|              else {
  749|  59.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.2k|              }
  751|  59.2k|          }),
  752|  59.2k|          m_storage(std::addressof(f))
  753|  59.2k|    {
  754|  59.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  59.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.2k|              else {
  749|  59.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.2k|              }
  751|  59.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.2k|        else if constexpr (std::is_object_v<T>) {
  688|  59.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  59.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  59.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  59.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.2k|        {
  662|  59.2k|        }

LLVMFuzzerTestOneInput:
   54|  2.31k|{
   55|  2.31k|    scn::fuzz::run(data, size);
   56|  2.31k|    return 0;
   57|  2.31k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.31k|{
   33|  2.31k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.31k]
  |  Branch (33:35): [True: 0, False: 2.31k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.31k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.31k|    const auto& f =
   40|  2.31k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.31k|    do_basic_run(sv, f);
   42|       |
   43|  2.31k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.31k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.31k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.31k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.31k, False: 0]
  ------------------
   47|  2.31k|        do_basic_run(wsv_transcode, wf);
   48|  2.31k|    }
   49|  2.31k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.31k|{
   25|  2.31k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.31k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.31k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.31k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.31k|{
   25|  2.31k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.31k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.31k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.31k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.63k|{
   25|  4.63k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.63k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.63k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.63k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.63k|{
   25|  4.63k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.63k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.63k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.63k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.31k|{
   53|  2.31k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.31k|    string_buffer.resize(size);
   57|  2.31k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.31k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.31k|    const auto wsv_reinterpret_size =
   62|  2.31k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 67, False: 2.25k]
  ------------------
   63|  2.31k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.31k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.31k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.31k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.31k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.31k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.31k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.31k|{
  123|  2.31k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.31k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.31k|    buf.resize(sizeof...(Args));
  126|  2.31k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.31k|    return buf;
  128|  2.31k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  2.31k|{
  109|  2.31k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  2.31k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  2.31k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  2.31k|{
  186|  2.31k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  2.31k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  2.31k|                                   format_strings);
  189|  2.31k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.31k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.31k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   139k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   139k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   139k|            auto result = scn::scan<T>(
  140|   139k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   139k|                scn::runtime_format(f));
  142|   139k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 125k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   125k|            it = result->begin();
  146|   125k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.31k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   139k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   139k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   139k|            auto result = scn::scan<T>(
  155|   139k|                global_locale,
  156|   139k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   139k|                scn::runtime_format(f));
  158|   139k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 125k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   125k|            it = result->begin();
  162|   125k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.31k|    {
  167|  2.31k|        auto it = scn::ranges::begin(source);
  168|  30.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  30.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  30.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  30.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  30.1k|            auto result = scn::scan_value<T>(
  171|  30.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  30.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.31k, False: 27.8k]
  ------------------
  173|  2.31k|                break;
  174|  2.31k|            }
  175|  27.8k|            it = result->begin();
  176|  27.8k|        }
  177|  2.31k|    }
  178|  2.31k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.31k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.31k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   144k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   144k|            auto result = scn::scan<T>(
  140|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   144k|                scn::runtime_format(f));
  142|   144k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 130k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   130k|            it = result->begin();
  146|   130k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.31k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   144k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   144k|            auto result = scn::scan<T>(
  155|   144k|                global_locale,
  156|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   144k|                scn::runtime_format(f));
  158|   144k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 130k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   130k|            it = result->begin();
  162|   130k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.31k|    {
  167|  2.31k|        auto it = scn::ranges::begin(source);
  168|  31.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  31.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.4k|            auto result = scn::scan_value<T>(
  171|  31.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.31k, False: 29.1k]
  ------------------
  173|  2.31k|                break;
  174|  2.31k|            }
  175|  29.1k|            it = result->begin();
  176|  29.1k|        }
  177|  2.31k|    }
  178|  2.31k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.31k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.31k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   145k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   145k|            auto result = scn::scan<T>(
  140|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   145k|                scn::runtime_format(f));
  142|   145k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 132k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   132k|            it = result->begin();
  146|   132k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.31k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   145k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   145k|            auto result = scn::scan<T>(
  155|   145k|                global_locale,
  156|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   145k|                scn::runtime_format(f));
  158|   145k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 132k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   132k|            it = result->begin();
  162|   132k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.31k|    {
  167|  2.31k|        auto it = scn::ranges::begin(source);
  168|  31.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.9k|            auto result = scn::scan_value<T>(
  171|  31.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.31k, False: 29.6k]
  ------------------
  173|  2.31k|                break;
  174|  2.31k|            }
  175|  29.6k|            it = result->begin();
  176|  29.6k|        }
  177|  2.31k|    }
  178|  2.31k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.31k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.31k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   160k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   160k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   160k|            auto result = scn::scan<T>(
  140|   160k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   160k|                scn::runtime_format(f));
  142|   160k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 146k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   146k|            it = result->begin();
  146|   146k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.31k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   160k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   160k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   160k|            auto result = scn::scan<T>(
  155|   160k|                global_locale,
  156|   160k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   160k|                scn::runtime_format(f));
  158|   160k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 146k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   146k|            it = result->begin();
  162|   146k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.31k|    {
  167|  2.31k|        auto it = scn::ranges::begin(source);
  168|  32.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  32.8k|            auto result = scn::scan_value<T>(
  171|  32.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  32.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.31k, False: 30.5k]
  ------------------
  173|  2.31k|                break;
  174|  2.31k|            }
  175|  30.5k|            it = result->begin();
  176|  30.5k|        }
  177|  2.31k|    }
  178|  2.31k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.31k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.31k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   167k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   167k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   167k|            auto result = scn::scan<T>(
  140|   167k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   167k|                scn::runtime_format(f));
  142|   167k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 154k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   154k|            it = result->begin();
  146|   154k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.31k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   167k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   167k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   167k|            auto result = scn::scan<T>(
  155|   167k|                global_locale,
  156|   167k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   167k|                scn::runtime_format(f));
  158|   167k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 154k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   154k|            it = result->begin();
  162|   154k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.31k|    {
  167|  2.31k|        auto it = scn::ranges::begin(source);
  168|  34.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.7k|            auto result = scn::scan_value<T>(
  171|  34.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.31k, False: 32.4k]
  ------------------
  173|  2.31k|                break;
  174|  2.31k|            }
  175|  32.4k|            it = result->begin();
  176|  32.4k|        }
  177|  2.31k|    }
  178|  2.31k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.31k|{
  134|       |    // Regular scan
  135|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 13.9k, False: 2.31k]
  ------------------
  136|  13.9k|        auto it = scn::ranges::begin(source);
  137|   169k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   169k|            auto result = scn::scan<T>(
  140|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   169k|                scn::runtime_format(f));
  142|   169k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 13.9k, False: 155k]
  ------------------
  143|  13.9k|                break;
  144|  13.9k|            }
  145|   155k|            it = result->begin();
  146|   155k|        }
  147|  13.9k|    }
  148|       |
  149|       |    // scan localized
  150|  13.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 13.9k, False: 2.31k]
  ------------------
  151|  13.9k|        auto it = scn::ranges::begin(source);
  152|   169k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   169k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   169k|            auto result = scn::scan<T>(
  155|   169k|                global_locale,
  156|   169k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   169k|                scn::runtime_format(f));
  158|   169k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 13.9k, False: 155k]
  ------------------
  159|  13.9k|                break;
  160|  13.9k|            }
  161|   155k|            it = result->begin();
  162|   155k|        }
  163|  13.9k|    }
  164|       |
  165|       |    // scan_value
  166|  2.31k|    {
  167|  2.31k|        auto it = scn::ranges::begin(source);
  168|  35.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  35.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  35.1k|            auto result = scn::scan_value<T>(
  171|  35.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  35.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.31k, False: 32.8k]
  ------------------
  173|  2.31k|                break;
  174|  2.31k|            }
  175|  32.8k|            it = result->begin();
  176|  32.8k|        }
  177|  2.31k|    }
  178|  2.31k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  2.31k|{
   91|  2.31k|    using char_type = ranges::range_value_t<Source>;
   92|  2.31k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  2.31k|    deque.clear();
   94|  2.31k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  2.31k|              std::back_inserter(deque));
   96|  2.31k|    return deque;
   97|  2.31k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  2.31k|{
   80|  2.31k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  2.31k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  2.31k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.31k|{
  123|  2.31k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.31k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.31k|    buf.resize(sizeof...(Args));
  126|  2.31k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.31k|    return buf;
  128|  2.31k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  2.31k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  2.31k|    else {
  113|  2.31k|        return wformat_string_view_buffer;
  114|  2.31k|    }
  115|  2.31k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  4.63k|{
  186|  4.63k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  4.63k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  4.63k|                                   format_strings);
  189|  4.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.63k|{
  134|       |    // Regular scan
  135|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.8k, False: 4.63k]
  ------------------
  136|  27.8k|        auto it = scn::ranges::begin(source);
  137|  85.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  85.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  85.1k|            auto result = scn::scan<T>(
  140|  85.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  85.1k|                scn::runtime_format(f));
  142|  85.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.8k, False: 57.2k]
  ------------------
  143|  27.8k|                break;
  144|  27.8k|            }
  145|  57.2k|            it = result->begin();
  146|  57.2k|        }
  147|  27.8k|    }
  148|       |
  149|       |    // scan localized
  150|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.8k, False: 4.63k]
  ------------------
  151|  27.8k|        auto it = scn::ranges::begin(source);
  152|  85.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  85.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  85.1k|            auto result = scn::scan<T>(
  155|  85.1k|                global_locale,
  156|  85.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  85.1k|                scn::runtime_format(f));
  158|  85.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.8k, False: 57.2k]
  ------------------
  159|  27.8k|                break;
  160|  27.8k|            }
  161|  57.2k|            it = result->begin();
  162|  57.2k|        }
  163|  27.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.63k|    {
  167|  4.63k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.63k, False: 11.1k]
  ------------------
  173|  4.63k|                break;
  174|  4.63k|            }
  175|  11.1k|            it = result->begin();
  176|  11.1k|        }
  177|  4.63k|    }
  178|  4.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.63k|{
  134|       |    // Regular scan
  135|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.8k, False: 4.63k]
  ------------------
  136|  27.8k|        auto it = scn::ranges::begin(source);
  137|  95.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  95.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  95.6k|            auto result = scn::scan<T>(
  140|  95.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  95.6k|                scn::runtime_format(f));
  142|  95.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.8k, False: 67.7k]
  ------------------
  143|  27.8k|                break;
  144|  27.8k|            }
  145|  67.7k|            it = result->begin();
  146|  67.7k|        }
  147|  27.8k|    }
  148|       |
  149|       |    // scan localized
  150|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.8k, False: 4.63k]
  ------------------
  151|  27.8k|        auto it = scn::ranges::begin(source);
  152|  95.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  95.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  95.6k|            auto result = scn::scan<T>(
  155|  95.6k|                global_locale,
  156|  95.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  95.6k|                scn::runtime_format(f));
  158|  95.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.8k, False: 67.7k]
  ------------------
  159|  27.8k|                break;
  160|  27.8k|            }
  161|  67.7k|            it = result->begin();
  162|  67.7k|        }
  163|  27.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.63k|    {
  167|  4.63k|        auto it = scn::ranges::begin(source);
  168|  19.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.3k|            auto result = scn::scan_value<T>(
  171|  19.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.63k, False: 14.6k]
  ------------------
  173|  4.63k|                break;
  174|  4.63k|            }
  175|  14.6k|            it = result->begin();
  176|  14.6k|        }
  177|  4.63k|    }
  178|  4.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.63k|{
  134|       |    // Regular scan
  135|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.8k, False: 4.63k]
  ------------------
  136|  27.8k|        auto it = scn::ranges::begin(source);
  137|  97.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.3k|            auto result = scn::scan<T>(
  140|  97.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.3k|                scn::runtime_format(f));
  142|  97.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.8k, False: 69.5k]
  ------------------
  143|  27.8k|                break;
  144|  27.8k|            }
  145|  69.5k|            it = result->begin();
  146|  69.5k|        }
  147|  27.8k|    }
  148|       |
  149|       |    // scan localized
  150|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.8k, False: 4.63k]
  ------------------
  151|  27.8k|        auto it = scn::ranges::begin(source);
  152|  97.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.3k|            auto result = scn::scan<T>(
  155|  97.3k|                global_locale,
  156|  97.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.3k|                scn::runtime_format(f));
  158|  97.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.8k, False: 69.5k]
  ------------------
  159|  27.8k|                break;
  160|  27.8k|            }
  161|  69.5k|            it = result->begin();
  162|  69.5k|        }
  163|  27.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.63k|    {
  167|  4.63k|        auto it = scn::ranges::begin(source);
  168|  19.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.8k|            auto result = scn::scan_value<T>(
  171|  19.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.63k, False: 15.2k]
  ------------------
  173|  4.63k|                break;
  174|  4.63k|            }
  175|  15.2k|            it = result->begin();
  176|  15.2k|        }
  177|  4.63k|    }
  178|  4.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.63k|{
  134|       |    // Regular scan
  135|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.8k, False: 4.63k]
  ------------------
  136|  27.8k|        auto it = scn::ranges::begin(source);
  137|  85.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  85.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  85.0k|            auto result = scn::scan<T>(
  140|  85.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  85.0k|                scn::runtime_format(f));
  142|  85.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.8k, False: 57.2k]
  ------------------
  143|  27.8k|                break;
  144|  27.8k|            }
  145|  57.2k|            it = result->begin();
  146|  57.2k|        }
  147|  27.8k|    }
  148|       |
  149|       |    // scan localized
  150|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.8k, False: 4.63k]
  ------------------
  151|  27.8k|        auto it = scn::ranges::begin(source);
  152|  85.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  85.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  85.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  85.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  85.0k|            auto result = scn::scan<T>(
  155|  85.0k|                global_locale,
  156|  85.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  85.0k|                scn::runtime_format(f));
  158|  85.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.8k, False: 57.2k]
  ------------------
  159|  27.8k|                break;
  160|  27.8k|            }
  161|  57.2k|            it = result->begin();
  162|  57.2k|        }
  163|  27.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.63k|    {
  167|  4.63k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.63k, False: 11.1k]
  ------------------
  173|  4.63k|                break;
  174|  4.63k|            }
  175|  11.1k|            it = result->begin();
  176|  11.1k|        }
  177|  4.63k|    }
  178|  4.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.63k|{
  134|       |    // Regular scan
  135|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.8k, False: 4.63k]
  ------------------
  136|  27.8k|        auto it = scn::ranges::begin(source);
  137|  95.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  95.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  95.5k|            auto result = scn::scan<T>(
  140|  95.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  95.5k|                scn::runtime_format(f));
  142|  95.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.8k, False: 67.7k]
  ------------------
  143|  27.8k|                break;
  144|  27.8k|            }
  145|  67.7k|            it = result->begin();
  146|  67.7k|        }
  147|  27.8k|    }
  148|       |
  149|       |    // scan localized
  150|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.8k, False: 4.63k]
  ------------------
  151|  27.8k|        auto it = scn::ranges::begin(source);
  152|  95.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  95.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  95.5k|            auto result = scn::scan<T>(
  155|  95.5k|                global_locale,
  156|  95.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  95.5k|                scn::runtime_format(f));
  158|  95.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.8k, False: 67.7k]
  ------------------
  159|  27.8k|                break;
  160|  27.8k|            }
  161|  67.7k|            it = result->begin();
  162|  67.7k|        }
  163|  27.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.63k|    {
  167|  4.63k|        auto it = scn::ranges::begin(source);
  168|  19.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.2k|            auto result = scn::scan_value<T>(
  171|  19.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.63k, False: 14.6k]
  ------------------
  173|  4.63k|                break;
  174|  4.63k|            }
  175|  14.6k|            it = result->begin();
  176|  14.6k|        }
  177|  4.63k|    }
  178|  4.63k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.63k|{
  134|       |    // Regular scan
  135|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 27.8k, False: 4.63k]
  ------------------
  136|  27.8k|        auto it = scn::ranges::begin(source);
  137|  97.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.3k|            auto result = scn::scan<T>(
  140|  97.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.3k|                scn::runtime_format(f));
  142|  97.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 27.8k, False: 69.5k]
  ------------------
  143|  27.8k|                break;
  144|  27.8k|            }
  145|  69.5k|            it = result->begin();
  146|  69.5k|        }
  147|  27.8k|    }
  148|       |
  149|       |    // scan localized
  150|  27.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 27.8k, False: 4.63k]
  ------------------
  151|  27.8k|        auto it = scn::ranges::begin(source);
  152|  97.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.3k|            auto result = scn::scan<T>(
  155|  97.3k|                global_locale,
  156|  97.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.3k|                scn::runtime_format(f));
  158|  97.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 27.8k, False: 69.5k]
  ------------------
  159|  27.8k|                break;
  160|  27.8k|            }
  161|  69.5k|            it = result->begin();
  162|  69.5k|        }
  163|  27.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.63k|    {
  167|  4.63k|        auto it = scn::ranges::begin(source);
  168|  19.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.8k|            auto result = scn::scan_value<T>(
  171|  19.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.63k, False: 15.2k]
  ------------------
  173|  4.63k|                break;
  174|  4.63k|            }
  175|  15.2k|            it = result->begin();
  176|  15.2k|        }
  177|  4.63k|    }
  178|  4.63k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  4.63k|{
   91|  4.63k|    using char_type = ranges::range_value_t<Source>;
   92|  4.63k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  4.63k|    deque.clear();
   94|  4.63k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  4.63k|              std::back_inserter(deque));
   96|  4.63k|    return deque;
   97|  4.63k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  4.63k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  4.63k|    else {
   84|  4.63k|        return wnoncontiguous_buffer;
   85|  4.63k|    }
   86|  4.63k|}

