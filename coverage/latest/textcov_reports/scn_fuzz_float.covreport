_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.39M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.39M|  chars_format const fmt = options.format;
  277|  2.39M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.39M|  parsed_number_string_t<UC> answer;
  280|  2.39M|  answer.valid = false;
  281|  2.39M|  answer.too_many_digits = false;
  282|  2.39M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.39M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.39M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.39M|  UC const * const start_digits = p;
  303|       |
  304|  2.39M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  16.7M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 16.0M, False: 748k]
  |  Branch (306:25): [True: 14.3M, False: 1.64M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  14.3M|    i = 10 * i +
  310|  14.3M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  14.3M|    ++p;
  312|  14.3M|  }
  313|  2.39M|  UC const * const end_of_integer_part = p;
  314|  2.39M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.39M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.39M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  2.39M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.39M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.39M|  int64_t exponent = 0;
  324|  2.39M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.64M, False: 748k]
  |  Branch (324:49): [True: 257k, False: 1.39M]
  ------------------
  325|  2.39M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 257k, False: 2.13M]
  ------------------
  326|   257k|    ++p;
  327|   257k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   257k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   775k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 688k, False: 87.2k]
  |  Branch (332:27): [True: 518k, False: 170k]
  ------------------
  333|   518k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   518k|      ++p;
  335|   518k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   518k|    }
  337|   257k|    exponent = before - p;
  338|   257k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   257k|    digit_count -= exponent;
  340|   257k|  }
  341|  2.39M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  2.39M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.39M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.39M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.39M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.39M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.39M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 2.05M, False: 340k]
  ------------------
  352|  2.39M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 1.56M, False: 495k]
  ------------------
  353|  2.39M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 217k, False: 1.34M]
  |  Branch (353:29): [True: 14.8k, False: 1.32M]
  ------------------
  354|  2.39M|       ||
  355|  2.39M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|  2.16M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 2.16M]
  ------------------
  356|  2.16M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  2.16M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   232k|    UC const * location_of_e = p;
  359|   232k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 217k, False: 14.8k]
  |  Branch (359:28): [True: 14.8k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   232k|      ++p;
  361|   232k|    }
  362|   232k|    bool neg_exp = false;
  363|   232k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 232k, False: 515]
  |  Branch (363:24): [True: 7.33k, False: 224k]
  ------------------
  364|  7.33k|      neg_exp = true;
  365|  7.33k|      ++p;
  366|   225k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 224k, False: 515]
  |  Branch (366:31): [True: 348, False: 224k]
  ------------------
  367|    348|      ++p;
  368|    348|    }
  369|   232k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 515, False: 232k]
  |  Branch (369:24): [True: 2.50k, False: 229k]
  ------------------
  370|  3.01k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 3.01k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  3.01k|      p = location_of_e;
  376|   229k|    } else {
  377|  1.06M|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 997k, False: 69.9k]
  |  Branch (377:29): [True: 837k, False: 159k]
  ------------------
  378|   837k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   837k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 604k, False: 232k]
  ------------------
  380|   604k|          exp_number = 10 * exp_number + digit;
  381|   604k|        }
  382|   837k|        ++p;
  383|   837k|      }
  384|   229k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 7.25k, False: 222k]
  ------------------
  385|   229k|      exponent += exp_number;
  386|   229k|    }
  387|  2.16M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  2.16M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.82M, False: 340k]
  |  Branch (389:44): [True: 0, False: 1.82M]
  ------------------
  390|  2.16M|  }
  391|  2.39M|  answer.lastmatch = p;
  392|  2.39M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.39M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 294k, False: 2.10M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   294k|    UC const * start = start_digits;
  405|  1.16M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.16M, False: 1.42k]
  |  Branch (405:32): [True: 864k, False: 297k]
  |  Branch (405:53): [True: 4.06k, False: 293k]
  ------------------
  406|   868k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 864k, False: 4.06k]
  ------------------
  407|   868k|      start++;
  408|   868k|    }
  409|       |
  410|   294k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 284k, False: 9.59k]
  ------------------
  411|   284k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   284k|      i = 0;
  416|   284k|      p = answer.integer.ptr;
  417|   284k|      UC const* int_end = p + answer.integer.len();
  418|   284k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  5.19M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 4.99M, False: 193k]
  |  Branch (419:54): [True: 4.90M, False: 91.5k]
  ------------------
  420|  4.90M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  4.90M|        ++p;
  422|  4.90M|      }
  423|   284k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 193k, False: 91.5k]
  ------------------
  424|   193k|        exponent = end_of_integer_part - p + exp_number;
  425|   193k|      }
  426|  91.5k|      else { // We have a value with a fractional component.
  427|  91.5k|        p = answer.fraction.ptr;
  428|  91.5k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.23M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.14M, False: 91.5k]
  |  Branch (429:56): [True: 1.14M, False: 0]
  ------------------
  430|  1.14M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.14M|          ++p;
  432|  1.14M|        }
  433|  91.5k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  91.5k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   284k|    }
  437|   294k|  }
  438|  2.39M|  answer.exponent = exponent;
  439|  2.39M|  answer.mantissa = i;
  440|  2.39M|  return answer;
  441|  2.39M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  17.9M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  17.9M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 291k, False: 17.6M]
  |  Branch (36:27): [True: 1.68M, False: 15.9M]
  ------------------
   37|  17.9M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   257k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.14M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.05M, False: 92.9k]
  |  Branch (249:43): [True: 887k, False: 164k]
  ------------------
  250|   887k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   887k|    p += 8;
  252|   887k|  }
  253|   257k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.05M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.05M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.05M|     0x8080808080808080));
  172|  1.05M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.15M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.15M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.15M|  uint64_t val;
   63|  2.15M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.15M|  return val;
   69|  2.15M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.25M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.25M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.25M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.25M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.25M|  val -= 0x3030303030303030;
  151|  1.25M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.25M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.25M|  return uint32_t(val);
  154|  1.25M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   216k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   216k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   216k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   216k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   216k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.92M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.92M|  chars_format const fmt = options.format;
  277|  1.92M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.92M|  parsed_number_string_t<UC> answer;
  280|  1.92M|  answer.valid = false;
  281|  1.92M|  answer.too_many_digits = false;
  282|  1.92M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.92M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.92M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.92M|  UC const * const start_digits = p;
  303|       |
  304|  1.92M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  13.6M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 13.0M, False: 594k]
  |  Branch (306:25): [True: 11.7M, False: 1.32M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  11.7M|    i = 10 * i +
  310|  11.7M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  11.7M|    ++p;
  312|  11.7M|  }
  313|  1.92M|  UC const * const end_of_integer_part = p;
  314|  1.92M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.92M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.92M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  1.92M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.92M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.92M|  int64_t exponent = 0;
  324|  1.92M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.32M, False: 594k]
  |  Branch (324:49): [True: 212k, False: 1.11M]
  ------------------
  325|  1.92M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 212k, False: 1.71M]
  ------------------
  326|   212k|    ++p;
  327|   212k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   212k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  5.93M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 5.86M, False: 72.5k]
  |  Branch (332:27): [True: 5.72M, False: 139k]
  ------------------
  333|  5.72M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  5.72M|      ++p;
  335|  5.72M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  5.72M|    }
  337|   212k|    exponent = before - p;
  338|   212k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   212k|    digit_count -= exponent;
  340|   212k|  }
  341|  1.92M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   15|  1.92M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.92M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.92M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.92M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.92M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.92M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.65M, False: 271k]
  ------------------
  352|  1.92M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 1.25M, False: 396k]
  ------------------
  353|  1.92M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 184k, False: 1.07M]
  |  Branch (353:29): [True: 12.6k, False: 1.06M]
  ------------------
  354|  1.92M|       ||
  355|  1.92M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   16|  1.72M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.72M]
  ------------------
  356|  1.72M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.72M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   196k|    UC const * location_of_e = p;
  359|   196k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 184k, False: 12.6k]
  |  Branch (359:28): [True: 12.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   196k|      ++p;
  361|   196k|    }
  362|   196k|    bool neg_exp = false;
  363|   196k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 196k, False: 525]
  |  Branch (363:24): [True: 5.36k, False: 190k]
  ------------------
  364|  5.36k|      neg_exp = true;
  365|  5.36k|      ++p;
  366|   191k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 190k, False: 525]
  |  Branch (366:31): [True: 278, False: 190k]
  ------------------
  367|    278|      ++p;
  368|    278|    }
  369|   196k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 525, False: 196k]
  |  Branch (369:24): [True: 1.94k, False: 194k]
  ------------------
  370|  2.47k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 2.47k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  2.47k|      p = location_of_e;
  376|   194k|    } else {
  377|   898k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 839k, False: 59.1k]
  |  Branch (377:29): [True: 703k, False: 135k]
  ------------------
  378|   703k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   703k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 508k, False: 195k]
  ------------------
  380|   508k|          exp_number = 10 * exp_number + digit;
  381|   508k|        }
  382|   703k|        ++p;
  383|   703k|      }
  384|   194k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 5.35k, False: 188k]
  ------------------
  385|   194k|      exponent += exp_number;
  386|   194k|    }
  387|  1.72M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.72M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.45M, False: 271k]
  |  Branch (389:44): [True: 0, False: 1.45M]
  ------------------
  390|  1.72M|  }
  391|  1.92M|  answer.lastmatch = p;
  392|  1.92M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.92M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 237k, False: 1.68M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   237k|    UC const * start = start_digits;
  405|   968k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 967k, False: 1.22k]
  |  Branch (405:32): [True: 726k, False: 240k]
  |  Branch (405:53): [True: 3.61k, False: 236k]
  ------------------
  406|   730k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 726k, False: 3.61k]
  ------------------
  407|   730k|      start++;
  408|   730k|    }
  409|       |
  410|   237k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 229k, False: 8.54k]
  ------------------
  411|   229k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   229k|      i = 0;
  416|   229k|      p = answer.integer.ptr;
  417|   229k|      UC const* int_end = p + answer.integer.len();
  418|   229k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  4.19M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 4.03M, False: 158k]
  |  Branch (419:54): [True: 3.96M, False: 71.3k]
  ------------------
  420|  3.96M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.96M|        ++p;
  422|  3.96M|      }
  423|   229k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 158k, False: 71.3k]
  ------------------
  424|   158k|        exponent = end_of_integer_part - p + exp_number;
  425|   158k|      }
  426|  71.3k|      else { // We have a value with a fractional component.
  427|  71.3k|        p = answer.fraction.ptr;
  428|  71.3k|        UC const* frac_end = p + answer.fraction.len();
  429|   999k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 927k, False: 71.3k]
  |  Branch (429:56): [True: 927k, False: 0]
  ------------------
  430|   927k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|   927k|          ++p;
  432|   927k|        }
  433|  71.3k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  71.3k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   229k|    }
  437|   237k|  }
  438|  1.92M|  answer.exponent = exponent;
  439|  1.92M|  answer.mantissa = i;
  440|  1.92M|  return answer;
  441|  1.92M|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  19.9M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  19.9M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 247k, False: 19.7M]
  |  Branch (36:27): [True: 1.35M, False: 18.3M]
  ------------------
   37|  19.9M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|   212k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|   212k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|   212k|    return;
  240|   212k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|   149k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   149k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   149k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   149k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   149k|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|   149k|uint64_t read8_to_u64(const UC *chars) {
   54|   149k|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|   149k|    uint64_t val = 0;
   56|  1.34M|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 1.19M, False: 149k]
  ------------------
   57|  1.19M|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|  1.19M|      ++chars;
   59|  1.19M|    }
   60|   149k|    return val;
   61|   149k|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|   149k|}

_ZN10fast_float6bigintC2Ev:
  412|  53.8k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   130k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   249k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   249k|    return small_mul(vec, y);
  565|   249k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   373k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   373k|  limb carry = 0;
  284|  2.50M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 2.12M, False: 373k]
  ------------------
  285|  2.12M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  2.12M|  }
  287|   373k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 261k, False: 112k]
  ------------------
  288|   261k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  174|   261k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 261k]
  |  |  ------------------
  ------------------
  289|   261k|  }
  290|   373k|  return true;
  291|   373k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  3.90M|  constexpr size_t len() const noexcept {
   77|  3.90M|    return length;
   78|  3.90M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  2.12M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  2.12M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  2.12M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  2.12M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  2.12M|  carry = limb(z >> limb_bits);
  235|  2.12M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  2.12M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.48M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.48M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|  5.48M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.48M|    return data[index];
   60|  5.48M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   324k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   324k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 324k, False: 0]
  ------------------
   93|   324k|      push_unchecked(value);
   94|   324k|      return true;
   95|   324k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   324k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   426k|  constexpr size_t capacity() const noexcept {
   83|   426k|    return size;
   84|   426k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   360k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   360k|    data[length] = value;
   88|   360k|    length++;
   89|   360k|  }
_ZN10fast_float6bigint3addEm:
  567|   249k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   249k|    return small_add(vec, y);
  569|   249k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   249k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   249k|  return small_add_from(vec, y, 0);
  277|   249k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   249k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   249k|  size_t index = start;
  259|   249k|  limb carry = y;
  260|   249k|  bool overflow;
  261|   399k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 204k, False: 195k]
  |  Branch (261:24): [True: 150k, False: 53.8k]
  ------------------
  262|   150k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   150k|    carry = limb(overflow);
  264|   150k|    index += 1;
  265|   150k|  }
  266|   249k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 53.8k, False: 195k]
  ------------------
  267|  53.8k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  174|  53.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 53.8k]
  |  |  ------------------
  ------------------
  268|  53.8k|  }
  269|   249k|  return true;
  270|   249k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   593k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   593k|  limb z;
  211|       |// gcc and clang
  212|   593k|#if defined(__has_builtin)
  213|   593k|  #if __has_builtin(__builtin_add_overflow)
  214|   593k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   593k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   593k|      return z;
  217|   593k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   593k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  17.7k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  17.7k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  174|  17.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
  611|  17.7k|    return pow2(exp);
  612|  17.7k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  53.8k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  53.8k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  53.8k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  63.8k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 10.0k, False: 53.8k]
  ------------------
  582|  10.0k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  174|  10.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
  583|  10.0k|      exp -= large_step;
  584|  10.0k|    }
  585|  53.8k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  53.8k|    uint32_t small_step = 27;
  587|  53.8k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  92.3k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 38.4k, False: 53.8k]
  ------------------
  593|  38.4k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  174|  38.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 38.4k]
  |  |  ------------------
  ------------------
  594|  38.4k|      exp -= small_step;
  595|  38.4k|    }
  596|  53.8k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 36.1k, False: 17.7k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  36.1k|      FASTFLOAT_TRY(
  ------------------
  |  |  174|  36.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 36.1k]
  |  |  ------------------
  ------------------
  601|  36.1k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  36.1k|      );
  603|  36.1k|    }
  604|       |
  605|  53.8k|    return true;
  606|  53.8k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  10.0k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  10.0k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 10.0k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  174|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  10.0k|  } else {
  368|  10.0k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  174|  10.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
  369|  10.0k|  }
  370|  10.0k|  return true;
  371|  10.0k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  10.0k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  10.0k|  limb_span xs = limb_span(x.data, x.len());
  337|  10.0k|  stackvec<size> z(xs);
  338|  10.0k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  10.0k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 10.0k, False: 0]
  ------------------
  341|  10.0k|    limb y0 = y[0];
  342|  10.0k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  174|  10.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
  343|  50.0k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 40.0k, False: 10.0k]
  ------------------
  344|  40.0k|      limb yi = y[index];
  345|  40.0k|      stackvec<size> zi;
  346|  40.0k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 40.0k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  40.0k|        zi.set_len(0);
  349|  40.0k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  174|  40.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 40.0k]
  |  |  ------------------
  ------------------
  350|  40.0k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  174|  40.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 40.0k]
  |  |  ------------------
  ------------------
  351|  40.0k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  40.0k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  174|  40.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 40.0k]
  |  |  ------------------
  ------------------
  353|  40.0k|      }
  354|  40.0k|    }
  355|  10.0k|  }
  356|       |
  357|  10.0k|  x.normalize();
  358|  10.0k|  return true;
  359|  10.0k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  10.0k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  10.0k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  166|  10.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  10.0k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   142k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   142k|    length = uint16_t(len);
   75|   142k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  50.0k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  50.0k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 50.0k, False: 0]
  ------------------
  108|  50.0k|      extend_unchecked(s);
  109|  50.0k|      return true;
  110|  50.0k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  50.0k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  50.0k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  50.0k|    limb* ptr = data + length;
  102|  50.0k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  50.0k|    set_len(len() + s.len());
  104|  50.0k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  40.0k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  40.0k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 40.0k]
  |  Branch (300:26): [True: 39.9k, False: 18]
  ------------------
  301|  39.9k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  174|  39.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 39.9k]
  |  |  ------------------
  ------------------
  302|  39.9k|  }
  303|       |
  304|  40.0k|  bool carry = false;
  305|   369k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 329k, False: 40.0k]
  ------------------
  306|   329k|    limb xi = x[index + start];
  307|   329k|    limb yi = y[index];
  308|   329k|    bool c1 = false;
  309|   329k|    bool c2 = false;
  310|   329k|    xi = scalar_add(xi, yi, c1);
  311|   329k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 114k, False: 214k]
  ------------------
  312|   114k|      xi = scalar_add(xi, 1, c2);
  313|   114k|    }
  314|   329k|    x[index + start] = xi;
  315|   329k|    carry = c1 | c2;
  316|   329k|  }
  317|       |
  318|       |  // handle overflow
  319|  40.0k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 40.0k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  174|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  40.0k|  return true;
  323|  40.0k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  39.9k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  39.9k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 39.9k]
  ------------------
  132|      0|      return false;
  133|  39.9k|    } else {
  134|  39.9k|      resize_unchecked(new_len, value);
  135|  39.9k|      return true;
  136|  39.9k|    }
  137|  39.9k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  39.9k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  39.9k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 39.9k, False: 0]
  ------------------
  120|  39.9k|      size_t count = new_len - len();
  121|  39.9k|      limb* first = data + len();
  122|  39.9k|      limb* last = first + count;
  123|  39.9k|      ::std::fill(first, last, value);
  124|  39.9k|      set_len(new_len);
  125|  39.9k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  39.9k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  46.1k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  46.1k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 46.1k, False: 0]
  |  Branch (152:25): [True: 0, False: 46.1k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  46.1k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   100k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   100k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   100k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   100k|    size_t rindex = length - index - 1;
   69|   100k|    return data[rindex];
   70|   100k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  53.3k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  53.3k|    return shl(exp);
  574|  53.3k|  }
_ZN10fast_float6bigint3shlEm:
  530|  53.3k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  53.3k|    size_t rem = n % limb_bits;
  532|  53.3k|    size_t div = n / limb_bits;
  533|  53.3k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 35.7k, False: 17.5k]
  ------------------
  534|  35.7k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  174|  35.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
  535|  35.7k|    }
  536|  53.3k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 12.6k, False: 40.6k]
  ------------------
  537|  12.6k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  174|  12.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (174:32): [True: 0, False: 12.6k]
  |  |  ------------------
  ------------------
  538|  12.6k|    }
  539|  53.3k|    return true;
  540|  53.3k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  35.7k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  35.7k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  170|  35.7k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  35.7k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  170|  35.7k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  35.7k|    size_t shl = n;
  493|  35.7k|    size_t shr = limb_bits - shl;
  494|  35.7k|    limb prev = 0;
  495|   171k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 136k, False: 35.7k]
  ------------------
  496|   136k|      limb xi = vec[index];
  497|   136k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   136k|      prev = xi;
  499|   136k|    }
  500|       |
  501|  35.7k|    limb carry = prev >> shr;
  502|  35.7k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 8.78k, False: 27.0k]
  ------------------
  503|  8.78k|      return vec.try_push(carry);
  504|  8.78k|    }
  505|  27.0k|    return true;
  506|  35.7k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  12.6k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  12.6k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  170|  12.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  12.6k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 12.6k]
  ------------------
  512|      0|      return false;
  513|  12.6k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 12.6k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  12.6k|      limb* dst = vec.data + n;
  516|  12.6k|      const limb* src = vec.data;
  517|  12.6k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  12.6k|      limb* first = vec.data;
  520|  12.6k|      limb* last = first + n;
  521|  12.6k|      ::std::fill(first, last, 0);
  522|  12.6k|      vec.set_len(n + vec.len());
  523|  12.6k|      return true;
  524|  12.6k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  12.6k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  30.3k|  constexpr bool is_empty() const noexcept {
   80|  30.3k|    return length == 0;
   81|  30.3k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  17.7k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  17.7k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  17.7k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 17.7k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  17.7k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 264, False: 17.4k]
  ------------------
  435|    264|      return uint64_hi64(vec.rindex(0), truncated);
  436|  17.4k|    } else {
  437|  17.4k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  17.4k|      truncated |= vec.nonzero(2);
  439|  17.4k|      return result;
  440|  17.4k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  17.7k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    264|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    264|  truncated = false;
  167|    264|  int shl = leading_zeroes(r0);
  168|    264|  return r0 << shl;
  169|    264|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  17.4k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  17.4k|  int shl = leading_zeroes(r0);
  174|  17.4k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 0, False: 17.4k]
  ------------------
  175|      0|    truncated = r1 != 0;
  176|      0|    return r0;
  177|  17.4k|  } else {
  178|  17.4k|    int shr = 64 - shl;
  179|  17.4k|    truncated = (r1 << shl) != 0;
  180|  17.4k|    return (r0 << shl) | (r1 >> shr);
  181|  17.4k|  }
  182|  17.4k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  17.4k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  17.4k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 1.67k, False: 15.8k]
  ------------------
  143|  1.67k|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 1.67k, False: 0]
  ------------------
  144|  1.67k|        return true;
  145|  1.67k|      }
  146|      0|      index++;
  147|      0|    }
  148|  15.8k|    return false;
  149|  17.4k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  17.7k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  17.7k|    int lz = ctlz();
  560|  17.7k|    return int(limb_bits * vec.len()) - lz;
  561|  17.7k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  17.7k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  17.7k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 17.7k]
  ------------------
  545|      0|      return 0;
  546|  17.7k|    } else {
  547|  17.7k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  17.7k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  17.7k|    }
  555|  17.7k|  }
_ZN10fast_float6bigintC2Em:
  418|  36.1k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  36.1k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  36.1k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  36.1k|    vec.normalize();
  426|  36.1k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  36.1k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  36.1k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 36.1k]
  ------------------
  464|      0|      return 1;
  465|  36.1k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 36.1k]
  ------------------
  466|      0|      return -1;
  467|  36.1k|    } else {
  468|  73.9k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 59.9k, False: 13.9k]
  ------------------
  469|  59.9k|        limb xi = vec[index - 1];
  470|  59.9k|        limb yi = other.vec[index - 1];
  471|  59.9k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 3.14k, False: 56.8k]
  ------------------
  472|  3.14k|          return 1;
  473|  56.8k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 19.0k, False: 37.7k]
  ------------------
  474|  19.0k|          return -1;
  475|  19.0k|        }
  476|  59.9k|      }
  477|  13.9k|      return 0;
  478|  36.1k|    }
  479|  36.1k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   119k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   119k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   119k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   119k|    return data[index];
   64|   119k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   848k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   848k|  adjusted_mantissa answer;
   96|   848k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.26k, False: 843k]
  |  Branch (96:19): [True: 3.75k, False: 839k]
  ------------------
   97|  8.01k|    answer.power2 = 0;
   98|  8.01k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  8.01k|    return answer;
  101|  8.01k|  }
  102|   839k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 23.5k, False: 816k]
  ------------------
  103|       |    // we want to get infinity:
  104|  23.5k|    answer.power2 = binary::infinite_power();
  105|  23.5k|    answer.mantissa = 0;
  106|  23.5k|    return answer;
  107|  23.5k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   816k|  int lz = leading_zeroes(w);
  112|   816k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   816k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   816k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   816k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   816k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   816k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.51k, False: 814k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.51k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 90, False: 1.42k]
  ------------------
  137|     90|      answer.power2 = 0;
  138|     90|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     90|      return answer;
  141|     90|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.42k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.42k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.42k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.42k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.42k, False: 0]
  ------------------
  156|  1.42k|    return answer;
  157|  1.51k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   814k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 283k, False: 531k]
  |  Branch (162:30): [True: 282k, False: 733]
  |  Branch (162:77): [True: 274k, False: 8.53k]
  ------------------
  163|   814k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 67.1k, False: 207k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  67.1k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 10.5k, False: 56.5k]
  ------------------
  168|  10.5k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  10.5k|    }
  170|  67.1k|  }
  171|       |
  172|   814k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   814k|  answer.mantissa >>= 1;
  174|   814k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 3.75k, False: 811k]
  ------------------
  175|  3.75k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  3.75k|    answer.power2++; // undo previous addition
  177|  3.75k|  }
  178|       |
  179|   814k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   814k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 12.6k, False: 802k]
  ------------------
  181|  12.6k|    answer.power2 = binary::infinite_power();
  182|  12.6k|    answer.mantissa = 0;
  183|  12.6k|  }
  184|   814k|  return answer;
  185|   816k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   839k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   839k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   839k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   839k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   839k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   839k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   839k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 38.3k, False: 800k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  38.3k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  38.3k|    firstproduct.low += secondproduct.high;
   35|  38.3k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 38.0k, False: 355]
  ------------------
   36|  38.0k|      firstproduct.high++;
   37|  38.0k|    }
   38|  38.3k|  }
   39|   839k|  return firstproduct;
   40|   839k|}
_ZN10fast_float6detail5powerEi:
   58|  1.67M|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|  1.67M|    return (((152170 + 65536) * q) >> 16) + 63;
   60|  1.67M|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  22.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  22.8k|  int lz = leading_zeroes(w);
   82|  22.8k|  w <<= lz;
   83|  22.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  22.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  22.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  22.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  22.8k|  int hilz = int(w >> 63) ^ 1;
   69|  22.8k|  adjusted_mantissa answer;
   70|  22.8k|  answer.mantissa = w << hilz;
   71|  22.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  22.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  22.8k|  return answer;
   74|  22.8k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   827k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   827k|  adjusted_mantissa answer;
   96|   827k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 8.54k, False: 819k]
  |  Branch (96:19): [True: 2.37k, False: 816k]
  ------------------
   97|  10.9k|    answer.power2 = 0;
   98|  10.9k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  10.9k|    return answer;
  101|  10.9k|  }
  102|   816k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 14.1k, False: 802k]
  ------------------
  103|       |    // we want to get infinity:
  104|  14.1k|    answer.power2 = binary::infinite_power();
  105|  14.1k|    answer.mantissa = 0;
  106|  14.1k|    return answer;
  107|  14.1k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   802k|  int lz = leading_zeroes(w);
  112|   802k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   802k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   802k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   802k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   802k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   802k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.08k, False: 801k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.08k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 212, False: 869]
  ------------------
  137|    212|      answer.power2 = 0;
  138|    212|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    212|      return answer;
  141|    212|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    869|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    869|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    869|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    869|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 869, False: 0]
  ------------------
  156|    869|    return answer;
  157|  1.08k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   801k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 135k, False: 665k]
  |  Branch (162:30): [True: 104k, False: 31.4k]
  |  Branch (162:77): [True: 95.5k, False: 8.78k]
  ------------------
  163|   801k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 41.3k, False: 54.1k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  41.3k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 26.6k, False: 14.7k]
  ------------------
  168|  26.6k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  26.6k|    }
  170|  41.3k|  }
  171|       |
  172|   801k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   801k|  answer.mantissa >>= 1;
  174|   801k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 1.07k, False: 800k]
  ------------------
  175|  1.07k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  1.07k|    answer.power2++; // undo previous addition
  177|  1.07k|  }
  178|       |
  179|   801k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   801k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.37k, False: 800k]
  ------------------
  181|  1.37k|    answer.power2 = binary::infinite_power();
  182|  1.37k|    answer.mantissa = 0;
  183|  1.37k|  }
  184|   801k|  return answer;
  185|   802k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   833k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   833k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   833k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   833k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   833k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   833k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   833k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 74.1k, False: 759k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  74.1k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  74.1k|    firstproduct.low += secondproduct.high;
   35|  74.1k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 48.1k, False: 26.0k]
  ------------------
   36|  48.1k|      firstproduct.high++;
   37|  48.1k|    }
   38|  74.1k|  }
   39|   833k|  return firstproduct;
   40|   833k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  31.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  31.0k|  int lz = leading_zeroes(w);
   82|  31.0k|  w <<= lz;
   83|  31.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  31.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  31.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  31.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  31.0k|  int hilz = int(w >> 63) ^ 1;
   69|  31.0k|  adjusted_mantissa answer;
   70|  31.0k|  answer.mantissa = w << hilz;
   71|  31.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  31.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  31.0k|  return answer;
   74|  31.0k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  13.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  13.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  13.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  13.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  13.0k|  size_t digits = 0;
  413|  13.0k|  bigint bigmant;
  414|  13.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  13.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  13.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 13.0k]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|  13.0k|  } else {
  420|  13.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  13.0k|  }
  422|  13.0k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  30.6k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  30.6k|  uint64_t mantissa = num.mantissa;
   30|  30.6k|  int32_t exponent = int32_t(num.exponent);
   31|   153k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 122k, False: 30.6k]
  ------------------
   32|   122k|    mantissa /= 10000;
   33|   122k|    exponent += 4;
   34|   122k|  }
   35|  61.3k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 30.6k, False: 30.6k]
  ------------------
   36|  30.6k|    mantissa /= 100;
   37|  30.6k|    exponent += 2;
   38|  30.6k|  }
   39|  30.6k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 30.6k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  30.6k|  return exponent;
   44|  30.6k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  30.6k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  30.6k|  size_t counter = 0;
  245|  30.6k|  digits = 0;
  246|  30.6k|  limb value = 0;
  247|  30.6k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  30.6k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  30.6k|  UC const * p = num.integer.ptr;
  255|  30.6k|  UC const * pend = p + num.integer.len();
  256|  30.6k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  73.5k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 42.8k, False: 30.6k]
  ------------------
  259|  85.1k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 51.5k, False: 33.6k]
  |  Branch (259:45): [True: 42.3k, False: 9.15k]
  |  Branch (259:70): [True: 42.3k, False: 0]
  ------------------
  260|  42.3k|      parse_eight_digits(p, value, counter, digits);
  261|  42.3k|    }
  262|   179k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 167k, False: 12.1k]
  |  Branch (262:30): [True: 136k, False: 30.6k]
  |  Branch (262:43): [True: 136k, False: 0]
  ------------------
  263|   136k|      parse_one_digit(p, value, counter, digits);
  264|   136k|    }
  265|  42.8k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 42.8k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  42.8k|    } else {
  277|  42.8k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  42.8k|      counter = 0;
  279|  42.8k|      value = 0;
  280|  42.8k|    }
  281|  42.8k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  30.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 20.7k, False: 9.89k]
  ------------------
  285|  20.7k|    p = num.fraction.ptr;
  286|  20.7k|    pend = p + num.fraction.len();
  287|  20.7k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 20.7k]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|   115k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 99.4k, False: 15.7k]
  ------------------
  292|   273k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 256k, False: 16.7k]
  |  Branch (292:47): [True: 178k, False: 78.0k]
  |  Branch (292:72): [True: 174k, False: 4.67k]
  ------------------
  293|   174k|        parse_eight_digits(p, value, counter, digits);
  294|   174k|      }
  295|   399k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 320k, False: 78.9k]
  |  Branch (295:32): [True: 305k, False: 15.6k]
  |  Branch (295:45): [True: 300k, False: 4.84k]
  ------------------
  296|   300k|        parse_one_digit(p, value, counter, digits);
  297|   300k|      }
  298|  99.4k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 5.02k, False: 94.3k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  5.02k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  5.02k|        bool truncated = is_truncated(p, pend);
  302|  5.02k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.89k, False: 1.12k]
  ------------------
  303|  3.89k|          round_up_bigint(result, digits);
  304|  3.89k|        }
  305|  5.02k|        return;
  306|  94.3k|      } else {
  307|  94.3k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  94.3k|        counter = 0;
  309|  94.3k|        value = 0;
  310|  94.3k|      }
  311|  99.4k|    }
  312|  20.7k|  }
  313|       |
  314|  25.6k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 25.6k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  25.6k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  30.6k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  30.6k|  uint64_t val;
  161|  52.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 45.1k, False: 6.93k]
  ------------------
  162|  45.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  45.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 23.7k, False: 21.4k]
  ------------------
  164|  23.7k|      break;
  165|  23.7k|    }
  166|  21.4k|    first += int_cmp_len<UC>();
  167|  21.4k|  }
  168|  87.3k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 87.3k, False: 0]
  ------------------
  169|  87.3k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 30.6k, False: 56.6k]
  ------------------
  170|  30.6k|      break;
  171|  30.6k|    }
  172|  56.6k|    first++;
  173|  56.6k|  }
  174|  30.6k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   216k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   216k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   216k|  p += 8;
  210|   216k|  counter += 8;
  211|   216k|  count += 8;
  212|   216k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   436k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   436k|  value = value * 10 + limb(*p - UC('0'));
  218|   436k|  p++;
  219|   436k|  counter++;
  220|   436k|  count++;
  221|   436k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   249k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   249k|  big.mul(power);
  226|   249k|  big.add(value);
  227|   249k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  5.02k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  5.02k|  uint64_t val;
  183|  19.9k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 18.7k, False: 1.24k]
  ------------------
  184|  18.7k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  18.7k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 3.77k, False: 14.9k]
  ------------------
  186|  3.77k|      return true;
  187|  3.77k|    }
  188|  14.9k|    first += int_cmp_len<UC>();
  189|  14.9k|  }
  190|  5.91k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 4.78k, False: 1.12k]
  ------------------
  191|  4.78k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 117, False: 4.67k]
  ------------------
  192|    117|      return true;
  193|    117|    }
  194|  4.67k|    ++first;
  195|  4.67k|  }
  196|  1.12k|  return false;
  197|  1.24k|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  6.29k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  6.29k|  add_native(big, 10, 1);
  234|  6.29k|  count++;
  235|  6.29k|}
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  22.8k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  22.8k|  bigint& real_digits = bigmant;
  347|  22.8k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  22.8k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  22.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  22.8k|  T b;
  354|  22.8k|  to_float(false, am_b, b);
  355|  22.8k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  22.8k|  bigint theor_digits(theor.mantissa);
  357|  22.8k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  22.8k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  22.8k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  22.8k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 22.8k, False: 0]
  ------------------
  363|  22.8k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  166|  22.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  22.8k|  }
  365|  22.8k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 22.8k, False: 0]
  ------------------
  366|  22.8k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  166|  22.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  22.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  166|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  22.8k|  int ord = real_digits.compare(theor_digits);
  373|  22.8k|  adjusted_mantissa answer = am;
  374|  22.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  379|  22.8k|        return true;
  380|  22.8k|      } else if (ord < 0) {
  381|  22.8k|        return false;
  382|  22.8k|      } else {
  383|  22.8k|        return is_odd;
  384|  22.8k|      }
  385|  22.8k|    });
  386|  22.8k|  });
  387|       |
  388|  22.8k|  return answer;
  389|  22.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  22.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  22.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  36.1k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  36.1k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 36.1k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  36.1k|  } else {
  153|  36.1k|    am.mantissa >>= shift;
  154|  36.1k|  }
  155|  36.1k|  am.power2 += shift;
  156|  36.1k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  22.8k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  22.8k|  adjusted_mantissa am = to_extended(value);
   84|  22.8k|  am.mantissa <<= 1;
   85|  22.8k|  am.mantissa += 1;
   86|  22.8k|  am.power2 -= 1;
   87|  22.8k|  return am;
   88|  22.8k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  22.8k|adjusted_mantissa to_extended(T value) noexcept {
   50|  22.8k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  22.8k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  22.8k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  22.8k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  22.8k|  adjusted_mantissa am;
   56|  22.8k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  22.8k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  22.8k|  ::memcpy(&bits, &value, sizeof(T));
   62|  22.8k|#endif
   63|  22.8k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 22.8k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  22.8k|  } else {
   68|       |    // normal
   69|  22.8k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  22.8k|    am.power2 -= bias;
   71|  22.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  22.8k|  }
   73|       |
   74|  22.8k|  return am;
   75|  22.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  22.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  22.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  379|  22.8k|        return true;
  380|  22.8k|      } else if (ord < 0) {
  381|  22.8k|        return false;
  382|  22.8k|      } else {
  383|  22.8k|        return is_odd;
  384|  22.8k|      }
  385|  22.8k|    });
  386|  22.8k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  22.8k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  22.8k|  const uint64_t mask
  125|  22.8k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 22.8k]
  ------------------
  126|  22.8k|    ? UINT64_MAX
  127|  22.8k|    : (uint64_t(1) << shift) - 1;
  128|  22.8k|  const uint64_t halfway
  129|  22.8k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 22.8k]
  ------------------
  130|  22.8k|    ? 0
  131|  22.8k|    : uint64_t(1) << (shift - 1);
  132|  22.8k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  22.8k|  bool is_above = truncated_bits > halfway;
  134|  22.8k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  22.8k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 22.8k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  22.8k|  } else {
  140|  22.8k|    am.mantissa >>= shift;
  141|  22.8k|  }
  142|  22.8k|  am.power2 += shift;
  143|       |
  144|  22.8k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  22.8k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  22.8k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 298, False: 22.5k]
  ------------------
  379|    298|        return true;
  380|  22.5k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 15.0k, False: 7.53k]
  ------------------
  381|  15.0k|        return false;
  382|  15.0k|      } else {
  383|  7.53k|        return is_odd;
  384|  7.53k|      }
  385|  22.8k|    });
_ZN10fast_float10digit_compIfDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  9.80k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  9.80k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  9.80k|  int32_t sci_exp = scientific_exponent(num);
  411|  9.80k|  size_t max_digits = binary_format<T>::max_digits();
  412|  9.80k|  size_t digits = 0;
  413|  9.80k|  bigint bigmant;
  414|  9.80k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  9.80k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  9.80k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 9.80k]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|  9.80k|  } else {
  420|  9.80k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  9.80k|  }
  422|  9.80k|}
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|  23.1k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  23.1k|  uint64_t mantissa = num.mantissa;
   30|  23.1k|  int32_t exponent = int32_t(num.exponent);
   31|   115k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 92.7k, False: 23.1k]
  ------------------
   32|  92.7k|    mantissa /= 10000;
   33|  92.7k|    exponent += 4;
   34|  92.7k|  }
   35|  46.3k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 23.1k, False: 23.1k]
  ------------------
   36|  23.1k|    mantissa /= 100;
   37|  23.1k|    exponent += 2;
   38|  23.1k|  }
   39|  23.1k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 23.1k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  23.1k|  return exponent;
   44|  23.1k|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  23.1k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  23.1k|  size_t counter = 0;
  245|  23.1k|  digits = 0;
  246|  23.1k|  limb value = 0;
  247|  23.1k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  23.1k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  23.1k|  UC const * p = num.integer.ptr;
  255|  23.1k|  UC const * pend = p + num.integer.len();
  256|  23.1k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  55.9k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 32.7k, False: 23.1k]
  ------------------
  259|  64.5k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 38.9k, False: 25.6k]
  |  Branch (259:45): [True: 31.8k, False: 7.05k]
  |  Branch (259:70): [True: 31.8k, False: 0]
  ------------------
  260|  31.8k|      parse_eight_digits(p, value, counter, digits);
  261|  31.8k|    }
  262|   140k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 130k, False: 9.51k]
  |  Branch (262:30): [True: 107k, False: 23.1k]
  |  Branch (262:43): [True: 107k, False: 0]
  ------------------
  263|   107k|      parse_one_digit(p, value, counter, digits);
  264|   107k|    }
  265|  32.7k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 32.7k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  32.7k|    } else {
  277|  32.7k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  32.7k|      counter = 0;
  279|  32.7k|      value = 0;
  280|  32.7k|    }
  281|  32.7k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  23.1k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 15.4k, False: 7.72k]
  ------------------
  285|  15.4k|    p = num.fraction.ptr;
  286|  15.4k|    pend = p + num.fraction.len();
  287|  15.4k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 15.4k]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|  79.9k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 67.8k, False: 12.0k]
  ------------------
  292|   185k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 172k, False: 12.7k]
  |  Branch (292:47): [True: 120k, False: 52.0k]
  |  Branch (292:72): [True: 117k, False: 3.08k]
  ------------------
  293|   117k|        parse_eight_digits(p, value, counter, digits);
  294|   117k|      }
  295|   276k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 223k, False: 52.6k]
  |  Branch (295:32): [True: 211k, False: 12.0k]
  |  Branch (295:45): [True: 208k, False: 3.24k]
  ------------------
  296|   208k|        parse_one_digit(p, value, counter, digits);
  297|   208k|      }
  298|  67.8k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 3.39k, False: 64.4k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  3.39k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  3.39k|        bool truncated = is_truncated(p, pend);
  302|  3.39k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.40k, False: 991]
  ------------------
  303|  2.40k|          round_up_bigint(result, digits);
  304|  2.40k|        }
  305|  3.39k|        return;
  306|  64.4k|      } else {
  307|  64.4k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  64.4k|        counter = 0;
  309|  64.4k|        value = 0;
  310|  64.4k|      }
  311|  67.8k|    }
  312|  15.4k|  }
  313|       |
  314|  19.8k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 19.8k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  19.8k|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|  23.1k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  23.1k|  uint64_t val;
  161|   113k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 112k, False: 380]
  ------------------
  162|   112k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   112k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 22.8k, False: 90.0k]
  ------------------
  164|  22.8k|      break;
  165|  22.8k|    }
  166|  90.0k|    first += int_cmp_len<UC>();
  167|  90.0k|  }
  168|  27.0k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 27.0k, False: 0]
  ------------------
  169|  27.0k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 23.1k, False: 3.87k]
  ------------------
  170|  23.1k|      break;
  171|  23.1k|    }
  172|  3.87k|    first++;
  173|  3.87k|  }
  174|  23.1k|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|   149k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   149k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   149k|  p += 8;
  210|   149k|  counter += 8;
  211|   149k|  count += 8;
  212|   149k|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|   315k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   315k|  value = value * 10 + limb(*p - UC('0'));
  218|   315k|  p++;
  219|   315k|  counter++;
  220|   315k|  count++;
  221|   315k|}
_ZN10fast_float12is_truncatedIDiEEbPKT_S3_:
  180|  3.39k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.39k|  uint64_t val;
  183|  51.7k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 50.6k, False: 1.06k]
  ------------------
  184|  50.6k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  50.6k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 2.33k, False: 48.3k]
  ------------------
  186|  2.33k|      return true;
  187|  2.33k|    }
  188|  48.3k|    first += int_cmp_len<UC>();
  189|  48.3k|  }
  190|  1.42k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 438, False: 991]
  ------------------
  191|    438|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 69, False: 369]
  ------------------
  192|     69|      return true;
  193|     69|    }
  194|    369|    ++first;
  195|    369|  }
  196|    991|  return false;
  197|  1.06k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  17.6k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  17.6k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  17.6k|  int32_t sci_exp = scientific_exponent(num);
  411|  17.6k|  size_t max_digits = binary_format<T>::max_digits();
  412|  17.6k|  size_t digits = 0;
  413|  17.6k|  bigint bigmant;
  414|  17.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  17.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  17.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 9.95k, False: 7.65k]
  ------------------
  418|  9.95k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  9.95k|  } else {
  420|  7.65k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  7.65k|  }
  422|  17.6k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  17.7k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  17.7k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  166|  17.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  17.7k|  adjusted_mantissa answer;
  324|  17.7k|  bool truncated;
  325|  17.7k|  answer.mantissa = bigmant.hi64(truncated);
  326|  17.7k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  17.7k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  17.7k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  17.7k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  17.7k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  17.7k|    });
  333|  17.7k|  });
  334|       |
  335|  17.7k|  return answer;
  336|  17.7k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  17.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  17.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  17.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 17.7k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  17.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  17.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 17.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  17.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  17.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 17.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  17.7k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  17.7k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  17.7k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  17.7k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  17.7k|    });
  333|  17.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  17.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  17.7k|  const uint64_t mask
  125|  17.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 17.7k]
  ------------------
  126|  17.7k|    ? UINT64_MAX
  127|  17.7k|    : (uint64_t(1) << shift) - 1;
  128|  17.7k|  const uint64_t halfway
  129|  17.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 17.7k]
  ------------------
  130|  17.7k|    ? 0
  131|  17.7k|    : uint64_t(1) << (shift - 1);
  132|  17.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  17.7k|  bool is_above = truncated_bits > halfway;
  134|  17.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  17.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 17.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  17.7k|  } else {
  140|  17.7k|    am.mantissa >>= shift;
  141|  17.7k|  }
  142|  17.7k|  am.power2 += shift;
  143|       |
  144|  17.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  17.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  17.7k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  17.7k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  17.7k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.36k, False: 16.3k]
  |  Branch (331:27): [True: 14.8k, False: 1.56k]
  |  Branch (331:41): [True: 4.00k, False: 10.8k]
  |  Branch (331:56): [True: 510, False: 11.8k]
  |  Branch (331:66): [True: 56, False: 454]
  ------------------
  332|  17.7k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  13.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  13.2k|  bigint& real_digits = bigmant;
  347|  13.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  13.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  13.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  13.2k|  T b;
  354|  13.2k|  to_float(false, am_b, b);
  355|  13.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  13.2k|  bigint theor_digits(theor.mantissa);
  357|  13.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  13.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  13.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  13.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 13.2k, False: 0]
  ------------------
  363|  13.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  166|  13.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  13.2k|  }
  365|  13.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 11.6k, False: 1.59k]
  ------------------
  366|  11.6k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  166|  11.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  11.6k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 1.03k, False: 555]
  ------------------
  368|  1.03k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  166|  1.03k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  1.03k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  13.2k|  int ord = real_digits.compare(theor_digits);
  373|  13.2k|  adjusted_mantissa answer = am;
  374|  13.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  13.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  13.2k|      (void)_;  // not needed, since we've done our comparison
  377|  13.2k|      (void)__; // not needed, since we've done our comparison
  378|  13.2k|      if (ord > 0) {
  379|  13.2k|        return true;
  380|  13.2k|      } else if (ord < 0) {
  381|  13.2k|        return false;
  382|  13.2k|      } else {
  383|  13.2k|        return is_odd;
  384|  13.2k|      }
  385|  13.2k|    });
  386|  13.2k|  });
  387|       |
  388|  13.2k|  return answer;
  389|  13.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  13.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  13.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  13.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 13.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  13.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  13.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 13.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  13.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  13.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 13.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  13.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  13.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  13.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  13.2k|  adjusted_mantissa am = to_extended(value);
   84|  13.2k|  am.mantissa <<= 1;
   85|  13.2k|  am.mantissa += 1;
   86|  13.2k|  am.power2 -= 1;
   87|  13.2k|  return am;
   88|  13.2k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  13.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  13.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  13.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  13.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  13.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  13.2k|  adjusted_mantissa am;
   56|  13.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  13.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  13.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  13.2k|#endif
   63|  13.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 13.2k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  13.2k|  } else {
   68|       |    // normal
   69|  13.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  13.2k|    am.power2 -= bias;
   71|  13.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  13.2k|  }
   73|       |
   74|  13.2k|  return am;
   75|  13.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  13.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  13.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  13.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 13.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  13.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  13.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 13.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  13.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  13.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 13.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  13.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  13.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  13.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  13.2k|      (void)_;  // not needed, since we've done our comparison
  377|  13.2k|      (void)__; // not needed, since we've done our comparison
  378|  13.2k|      if (ord > 0) {
  379|  13.2k|        return true;
  380|  13.2k|      } else if (ord < 0) {
  381|  13.2k|        return false;
  382|  13.2k|      } else {
  383|  13.2k|        return is_odd;
  384|  13.2k|      }
  385|  13.2k|    });
  386|  13.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  13.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  13.2k|  const uint64_t mask
  125|  13.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 13.2k]
  ------------------
  126|  13.2k|    ? UINT64_MAX
  127|  13.2k|    : (uint64_t(1) << shift) - 1;
  128|  13.2k|  const uint64_t halfway
  129|  13.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 13.2k]
  ------------------
  130|  13.2k|    ? 0
  131|  13.2k|    : uint64_t(1) << (shift - 1);
  132|  13.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  13.2k|  bool is_above = truncated_bits > halfway;
  134|  13.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  13.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 13.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  13.2k|  } else {
  140|  13.2k|    am.mantissa >>= shift;
  141|  13.2k|  }
  142|  13.2k|  am.power2 += shift;
  143|       |
  144|  13.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  13.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  13.2k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  13.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  13.2k|      (void)_;  // not needed, since we've done our comparison
  377|  13.2k|      (void)__; // not needed, since we've done our comparison
  378|  13.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 2.85k, False: 10.4k]
  ------------------
  379|  2.85k|        return true;
  380|  10.4k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 3.99k, False: 6.40k]
  ------------------
  381|  3.99k|        return false;
  382|  6.40k|      } else {
  383|  6.40k|        return is_odd;
  384|  6.40k|      }
  385|  13.2k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  13.3k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  13.3k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  13.3k|  int32_t sci_exp = scientific_exponent(num);
  411|  13.3k|  size_t max_digits = binary_format<T>::max_digits();
  412|  13.3k|  size_t digits = 0;
  413|  13.3k|  bigint bigmant;
  414|  13.3k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  13.3k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  13.3k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 7.79k, False: 5.60k]
  ------------------
  418|  7.79k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  7.79k|  } else {
  420|  5.60k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  5.60k|  }
  422|  13.3k|}

_ZN10fast_float4spanIKcEC2Ev:
  224|  4.79M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  223|  2.65M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  226|   427k|  constexpr size_t len() const noexcept {
  227|   427k|    return length;
  228|   427k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  453|  1.98M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  454|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  455|       |  return 0;
  456|       |#else
  457|  1.98M|  return -10;
  458|  1.98M|#endif
  459|  1.98M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  504|  1.94M|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  505|  1.94M|  return 10;
  506|  1.94M|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  518|  1.58M|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  519|  1.58M|  return uint64_t(2) << mantissa_explicit_bits();
  520|  1.58M|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  464|  4.96M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  465|  4.96M|  return 23;
  466|  4.96M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  535|  1.35M|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  536|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  537|  1.35M|  return (void)powers_of_ten[0], powers_of_ten[power];
  538|  1.35M|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  336|  1.78M|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  555|   843k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  556|   843k|  return -65;
  557|   843k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  546|   839k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  547|   839k|  return 38;
  548|   839k|}
_ZN10fast_float14leading_zeroesEm:
  257|  1.70M|int leading_zeroes(uint64_t input_num) {
  258|  1.70M|  assert(input_num > 0);
  259|  1.70M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (259:7): [Folded - Ignored]
  ------------------
  260|      0|    return leading_zeroes_generic(input_num);
  261|      0|  }
  262|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  263|       |  #if defined(_M_X64) || defined(_M_ARM64)
  264|       |  unsigned long leading_zero = 0;
  265|       |  // Search the mask data from most significant bit (MSB)
  266|       |  // to least significant bit (LSB) for a set bit (1).
  267|       |  _BitScanReverse64(&leading_zero, input_num);
  268|       |  return (int)(63 - leading_zero);
  269|       |  #else
  270|       |  return leading_zeroes_generic(input_num);
  271|       |  #endif
  272|       |#else
  273|  1.70M|  return __builtin_clzll(input_num);
  274|  1.70M|#endif
  275|  1.70M|}
_ZN10fast_float19full_multiplicationEmm:
  309|  1.78M|value128 full_multiplication(uint64_t a, uint64_t b) {
  310|  1.78M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (310:7): [Folded - Ignored]
  ------------------
  311|      0|    value128 answer;
  312|      0|    answer.low = umul128_generic(a, b, &answer.high);
  313|      0|    return answer;
  314|      0|  }
  315|  1.78M|  value128 answer;
  316|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  317|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  318|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  319|       |  answer.high = __umulh(a, b);
  320|       |  answer.low = a * b;
  321|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  322|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  323|       |#elif defined(FASTFLOAT_64BIT)
  324|  1.78M|  __uint128_t r = ((__uint128_t)a) * b;
  325|  1.78M|  answer.low = uint64_t(r);
  326|  1.78M|  answer.high = uint64_t(r >> 64);
  327|       |#else
  328|       |  answer.low = umul128_generic(a, b, &answer.high);
  329|       |#endif
  330|  1.78M|  return answer;
  331|  1.78M|}
_ZN10fast_float8value128C2Ev:
  240|  1.78M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  487|   862k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  488|   862k|  return -127;
  489|   862k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  480|   283k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  481|   283k|  return -17;
  482|   283k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  472|   282k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  473|   282k|  return 10;
  474|   282k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  340|   514k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  341|   514k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (341:12): [True: 53.8k, False: 460k]
  |  Branch (341:38): [True: 0, False: 460k]
  ------------------
  342|   514k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  562|  22.8k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  563|  22.8k|  return 114;
  564|  22.8k|}
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  638|   108k|{
  639|   108k|    return sizeof(uint64_t) / sizeof(UC);
  640|   108k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  632|  63.9k|{
  633|  63.9k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  634|  63.9k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (634:12): [Folded - Ignored]
  |  Branch (634:53): [Folded - Ignored]
  ------------------
  635|  63.9k|}
_ZN10fast_float4spanImEC2EPKmm:
  223|   113k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  226|   669k|  constexpr size_t len() const noexcept {
  227|   669k|    return length;
  228|   669k|  }
_ZNK10fast_float4spanImEixEm:
  230|   379k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  231|   379k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  170|   379k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  232|   379k|    return ptr[index];
  233|   379k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  595|   652k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|   652k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|   652k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|   652k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|   652k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|   652k|  ::memcpy(&value, &word, sizeof(T));
  604|   652k|#endif
  605|   652k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  499|   652k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  494|  1.52M|template <> inline constexpr int binary_format<float>::infinite_power() {
  495|  1.52M|  return 0xFF;
  496|  1.52M|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   42|  2.39M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  224|  3.84M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  223|  2.13M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  226|   339k|  constexpr size_t len() const noexcept {
  227|   339k|    return length;
  228|   339k|  }
float_reader.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  638|   303k|{
  639|   303k|    return sizeof(uint64_t) / sizeof(UC);
  640|   303k|}
float_reader.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  632|   163k|{
  633|   163k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  634|   163k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (634:12): [Folded - Ignored]
  |  Branch (634:53): [Folded - Ignored]
  ------------------
  635|   163k|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   42|  1.92M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  445|  2.34M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  446|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  447|       |  return 0;
  448|       |#else
  449|  2.34M|  return -22;
  450|  2.34M|#endif
  451|  2.34M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  501|  2.33M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  502|  2.33M|  return 22;
  503|  2.33M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  508|  1.86M|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  509|  1.86M|  return uint64_t(2) << mantissa_explicit_bits();
  510|  1.86M|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  461|  5.06M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  462|  5.06M|  return 52;
  463|  5.06M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  530|  1.80M|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  531|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  532|  1.80M|  return (void)powers_of_ten[0], powers_of_ten[power];
  533|  1.80M|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  551|   819k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  552|   819k|  return -342;
  553|   819k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  542|   816k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  543|   816k|  return 308;
  544|   816k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  484|   864k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  485|   864k|  return -1023;
  486|   864k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  476|   135k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  477|   135k|  return -4;
  478|   135k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  468|   104k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  469|   104k|  return 23;
  470|   104k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  559|  31.0k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  560|  31.0k|  return 769;
  561|  31.0k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  595|   545k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  596|   545k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  597|   545k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  598|   545k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  599|   545k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  600|       |#if FASTFLOAT_HAS_BIT_CAST
  601|       |  value = std::bit_cast<T>(word);
  602|       |#else
  603|   545k|  ::memcpy(&value, &word, sizeof(T));
  604|   545k|#endif
  605|   545k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  498|   545k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  491|  1.39M|template <> inline constexpr int binary_format<double>::infinite_power() {
  492|  1.39M|  return 0x7FF;
  493|  1.39M|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|  1.10M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|  1.10M|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|  1.10M|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|  1.10M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|  1.10M|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|  1.10M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|  1.10M|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|  1.10M|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 1.10M]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|  1.10M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|  1.10M|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 1.10M]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|  1.10M|  answer.ec = std::errc(); // be optimistic
  174|  1.10M|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|  1.10M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 1.08M, False: 21.9k]
  |  Branch (180:69): [True: 982k, False: 99.5k]
  |  Branch (180:131): [True: 887k, False: 94.8k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   887k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 887k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   887k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 757k, False: 129k]
  ------------------
  192|   757k|        value = T(pns.mantissa);
  193|   757k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 7.95k, False: 749k]
  ------------------
  194|   749k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   757k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 757k]
  ------------------
  196|   757k|        return answer;
  197|   757k|      }
  198|   887k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   887k|  }
  215|   345k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   345k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 122k, False: 223k]
  |  Branch (216:29): [True: 122k, False: 0]
  ------------------
  217|   122k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 13.0k, False: 109k]
  ------------------
  218|  13.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  13.0k|    }
  220|   122k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   345k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 13.0k, False: 332k]
  ------------------
  224|   345k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   345k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 343k, False: 2.32k]
  |  Branch (226:29): [True: 16.0k, False: 327k]
  |  Branch (226:49): [True: 1.69k, False: 14.4k]
  |  Branch (226:68): [True: 13.0k, False: 331k]
  ------------------
  227|  14.7k|    answer.ec = std::errc::result_out_of_range;
  228|  14.7k|  }
  229|   345k|  return answer;
  230|  1.10M|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   75|  3.44M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   76|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   77|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   78|       |  return false;
   79|       |#endif
   80|       |  // See
   81|       |  // A fast function to check your floating-point rounding mode
   82|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   83|       |  //
   84|       |  // This function is meant to be equivalent to :
   85|       |  // prior: #include <cfenv>
   86|       |  //  return fegetround() == FE_TONEAREST;
   87|       |  // However, it is expected to be much faster than the fegetround()
   88|       |  // function call.
   89|       |  //
   90|       |  // The volatile keywoard prevents the compiler from computing the function
   91|       |  // at compile-time.
   92|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   93|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   94|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   95|       |  // precision, as in 387 instructions).
   96|  3.44M|  static volatile float fmin = std::numeric_limits<float>::min();
   97|  3.44M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   98|       |  //
   99|       |  // Explanation:
  100|       |  // Only when fegetround() == FE_TONEAREST do we have that
  101|       |  // fmin + 1.0f == 1.0f - fmin.
  102|       |  //
  103|       |  // FE_UPWARD:
  104|       |  //  fmin + 1.0f > 1
  105|       |  //  1.0f - fmin == 1
  106|       |  //
  107|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  108|       |  //  fmin + 1.0f == 1
  109|       |  //  1.0f - fmin < 1
  110|       |  //
  111|       |  // Note: This may fail to be accurate if fast-math has been
  112|       |  // enabled, as rounding conventions may not apply.
  113|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  114|       |  #   pragma warning(push)
  115|       |  //  todo: is there a VS warning?
  116|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  117|       |  #elif defined(__clang__)
  118|  3.44M|  #   pragma clang diagnostic push
  119|  3.44M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  120|       |  #elif defined(__GNUC__)
  121|       |  #   pragma GCC diagnostic push
  122|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  123|       |  #endif
  124|  3.44M|  return (fmini + 1.0f == 1.0f - fmini);
  125|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  126|       |  #   pragma warning(pop)
  127|       |  #elif defined(__clang__)
  128|  3.44M|  #   pragma clang diagnostic pop
  129|       |  #elif defined(__GNUC__)
  130|       |  #   pragma GCC diagnostic pop
  131|       |  #endif
  132|  3.44M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|   877k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|   877k|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|   877k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|   877k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|   877k|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|   877k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|   877k|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|   877k|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 877k]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|   877k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|   877k|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 877k]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|   877k|  answer.ec = std::errc(); // be optimistic
  174|   877k|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|   877k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 859k, False: 18.3k]
  |  Branch (180:69): [True: 774k, False: 84.4k]
  |  Branch (180:131): [True: 700k, False: 74.5k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   700k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 700k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   700k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 594k, False: 106k]
  ------------------
  192|   594k|        value = T(pns.mantissa);
  193|   594k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 6.71k, False: 587k]
  ------------------
  194|   587k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   594k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 594k]
  ------------------
  196|   594k|        return answer;
  197|   594k|      }
  198|   700k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   700k|  }
  215|   283k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   283k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 96.6k, False: 186k]
  |  Branch (216:29): [True: 96.6k, False: 0]
  ------------------
  217|  96.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 9.80k, False: 86.8k]
  ------------------
  218|  9.80k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  9.80k|    }
  220|  96.6k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   283k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 9.80k, False: 273k]
  ------------------
  224|   283k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   283k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 281k, False: 1.93k]
  |  Branch (226:29): [True: 12.3k, False: 269k]
  |  Branch (226:49): [True: 1.34k, False: 10.9k]
  |  Branch (226:68): [True: 9.64k, False: 272k]
  ------------------
  227|  10.9k|    answer.ec = std::errc::result_out_of_range;
  228|  10.9k|  }
  229|   283k|  return answer;
  230|   877k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|  1.29M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|  1.29M|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|  1.29M|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|  1.29M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|  1.29M|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|  1.29M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|  1.29M|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|  1.29M|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 1.29M]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|  1.29M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|  1.29M|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 1.29M]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|  1.29M|  answer.ec = std::errc(); // be optimistic
  174|  1.29M|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|  1.29M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 1.29M, False: 2.47k]
  |  Branch (180:69): [True: 1.18M, False: 105k]
  |  Branch (180:131): [True: 1.03M, False: 152k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|  1.03M|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 1.03M, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|  1.03M|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 1.00M, False: 28.9k]
  ------------------
  192|  1.00M|        value = T(pns.mantissa);
  193|  1.00M|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 19.8k, False: 983k]
  ------------------
  194|   983k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|  1.00M|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 1.00M]
  ------------------
  196|  1.00M|        return answer;
  197|  1.00M|      }
  198|  1.03M|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|  1.03M|  }
  215|   290k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   290k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 162k, False: 127k]
  |  Branch (216:29): [True: 162k, False: 0]
  ------------------
  217|   162k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 17.6k, False: 145k]
  ------------------
  218|  17.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  17.6k|    }
  220|   162k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   290k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 17.6k, False: 272k]
  ------------------
  224|   290k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   290k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 285k, False: 4.46k]
  |  Branch (226:29): [True: 8.27k, False: 277k]
  |  Branch (226:49): [True: 1.05k, False: 7.22k]
  |  Branch (226:68): [True: 6.79k, False: 282k]
  ------------------
  227|  7.84k|    answer.ec = std::errc::result_out_of_range;
  228|  7.84k|  }
  229|   290k|  return answer;
  230|  1.29M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  139|  1.04M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  140|  1.04M|  return from_chars_advanced(first, last, value, parse_options_t<UC>{fmt});
  141|  1.04M|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  146|  1.04M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  147|       |
  148|  1.04M|  static_assert (is_supported_float_type<T>(), "only float and double are supported");
  149|  1.04M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  150|       |
  151|  1.04M|  from_chars_result_t<UC> answer;
  152|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  153|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  154|       |    first++;
  155|       |  }
  156|       |#endif
  157|  1.04M|  if (first == last) {
  ------------------
  |  Branch (157:7): [True: 0, False: 1.04M]
  ------------------
  158|      0|    answer.ec = std::errc::invalid_argument;
  159|      0|    answer.ptr = first;
  160|      0|    return answer;
  161|      0|  }
  162|  1.04M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  163|  1.04M|  if (!pns.valid) {
  ------------------
  |  Branch (163:7): [True: 0, False: 1.04M]
  ------------------
  164|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (164:9): [True: 0, False: 0]
  ------------------
  165|      0|      answer.ec = std::errc::invalid_argument;
  166|      0|      answer.ptr = first;
  167|      0|      return answer;
  168|      0|    } else {
  169|      0|      return detail::parse_infnan(first, last, value);
  170|      0|    }
  171|      0|  }
  172|       |
  173|  1.04M|  answer.ec = std::errc(); // be optimistic
  174|  1.04M|  answer.ptr = pns.lastmatch;
  175|       |  // The implementation of the Clinger's fast path is convoluted because
  176|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  177|       |  // selected on the thread.
  178|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  179|       |  // true.
  180|  1.04M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (180:7): [True: 1.04M, False: 1.77k]
  |  Branch (180:69): [True: 954k, False: 90.1k]
  |  Branch (180:131): [True: 829k, False: 125k]
  ------------------
  181|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  182|       |    // when the system rounds to the nearest float.
  183|       |    //
  184|       |    // We expect the next branch to almost always be selected.
  185|       |    // We could check it first (before the previous branch), but
  186|       |    // there might be performance advantages at having the check
  187|       |    // be last.
  188|   829k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (188:8): [Folded - Ignored]
  |  Branch (188:37): [True: 829k, False: 0]
  ------------------
  189|       |      // We have that fegetround() == FE_TONEAREST.
  190|       |      // Next is Clinger's fast path.
  191|   829k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (191:11): [True: 804k, False: 24.8k]
  ------------------
  192|   804k|        value = T(pns.mantissa);
  193|   804k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (193:13): [True: 16.7k, False: 787k]
  ------------------
  194|   787k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  195|   804k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (195:13): [True: 0, False: 804k]
  ------------------
  196|   804k|        return answer;
  197|   804k|      }
  198|   829k|    } else {
  199|       |      // We do not have that fegetround() == FE_TONEAREST.
  200|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  201|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (201:11): [True: 0, False: 0]
  |  Branch (201:32): [True: 0, False: 0]
  ------------------
  202|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  203|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  204|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (204:12): [True: 0, False: 0]
  ------------------
  205|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (205:19): [True: 0, False: 0]
  ------------------
  206|      0|          return answer;
  207|      0|        }
  208|      0|#endif
  209|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  210|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (210:13): [True: 0, False: 0]
  ------------------
  211|      0|        return answer;
  212|      0|      }
  213|      0|    }
  214|   829k|  }
  215|   242k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  216|   242k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (216:6): [True: 132k, False: 109k]
  |  Branch (216:29): [True: 132k, False: 0]
  ------------------
  217|   132k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (217:8): [True: 13.3k, False: 119k]
  ------------------
  218|  13.3k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  219|  13.3k|    }
  220|   132k|  }
  221|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  222|       |  // then we need to go the long way around again. This is very uncommon.
  223|   242k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (223:6): [True: 13.3k, False: 228k]
  ------------------
  224|   242k|  to_float(pns.negative, am, value);
  225|       |  // Test for over/underflow.
  226|   242k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (226:8): [True: 237k, False: 4.08k]
  |  Branch (226:29): [True: 6.17k, False: 231k]
  |  Branch (226:49): [True: 872, False: 5.30k]
  |  Branch (226:68): [True: 4.89k, False: 236k]
  ------------------
  227|  5.76k|    answer.ec = std::errc::result_out_of_range;
  228|  5.76k|  }
  229|   242k|  return answer;
  230|  1.04M|}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|  2.57M|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

_ZN7simdutf6resultC2ENS_10error_codeEm:
    5|   493k|  simdutf_really_inline result::result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   499k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   539k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   539k|  return idx < lenminusstep;
   70|   539k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  39.8k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  39.8k|  return &buf[idx];
   75|  39.8k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   539k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   539k|  idx += STEP_SIZE;
   88|   539k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   499k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   499k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 499k]
  ------------------
   80|   499k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   499k|  std::memcpy(dst, buf + idx, len - idx);
   82|   499k|  return len - idx;
   83|   499k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   497k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   497k|    size_t pos = 0;
   12|   497k|    size_t count = 0;
   13|   529k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 31.7k, False: 497k]
  ------------------
   14|  31.7k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  31.7k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  31.7k|      count += count_ones(utf8_continuation_mask);
   17|  31.7k|    }
   18|   497k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   497k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  1.57M|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  1.32M|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  1.32M|      size_t pos = 0;
  131|  1.32M|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  1.32M|      size_t leading_byte = 0;
  139|  1.32M|      size_t margin = size;
  140|  3.08M|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 1.75M, False: 1.32M]
  |  Branch (140:27): [True: 1.75M, False: 0]
  ------------------
  141|  1.75M|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|  1.75M|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  1.32M|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  1.32M|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 1.32M]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  1.32M|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 1.32M]
  ------------------
  195|  1.32M|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 1.32M, False: 0]
  ------------------
  196|  1.32M|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  1.32M|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 147k, False: 1.17M]
  ------------------
  198|  1.17M|        utf32_output += howmany;
  199|  1.17M|      }
  200|  1.17M|      return utf32_output - start;
  201|  1.32M|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  1.57M|    simdutf_really_inline bool errors() const {
  291|  1.57M|      return this->error.any_bits_set_anywhere();
  292|  1.57M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|   246k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|   246k|      size_t pos = 0;
  205|   246k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  211|       |      // to give us a good margin.
  212|   246k|      size_t leading_byte = 0;
  213|   246k|      size_t margin = size;
  214|   493k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (214:13): [True: 246k, False: 246k]
  |  Branch (214:27): [True: 246k, False: 0]
  ------------------
  215|   246k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|   246k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|   246k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|   246k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 0, False: 246k]
  ------------------
  220|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 0]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|      0|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|      0|              "We support either two or four chunks per 64-byte block.");
  229|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  232|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|      0|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 0, False: 0]
  ------------------
  240|      0|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|      0|            res.count += pos;
  242|      0|            return res;
  243|      0|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|      0|      }
  273|   246k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 246k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|   246k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 246k, False: 0]
  ------------------
  279|   246k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|   246k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 0, False: 246k]
  ------------------
  281|      0|          res.count += pos;
  282|      0|          return res;
  283|   246k|        } else {    // In case of success, we want the number of word written
  284|   246k|          utf32_output += res.count;
  285|   246k|        }
  286|   246k|      }
  287|   246k|      return result(error_code::SUCCESS, utf32_output - start);
  288|   246k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  4.57k|    char32_t* utf32_output) noexcept {
   13|  4.57k|  size_t pos = 0;
   14|  4.57k|  char32_t* start{utf32_output};
   15|  4.57k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  35.8k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 31.2k, False: 4.57k]
  ------------------
   17|  31.2k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  31.2k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 29.1k, False: 2.16k]
  ------------------
   19|  29.1k|      in.store_ascii_as_utf32(utf32_output);
   20|  29.1k|      utf32_output += 64;
   21|  29.1k|      pos += 64;
   22|  29.1k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  2.16k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  2.16k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  2.16k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  2.16k|    size_t max_starting_point = (pos + 64) - 12;
   28|  14.2k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 12.0k, False: 2.16k]
  ------------------
   29|  12.0k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  12.0k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  12.0k|      pos += consumed;
   32|  12.0k|      utf8_end_of_code_point_mask >>= consumed;
   33|  12.0k|      }
   34|  2.16k|    }
   35|  31.2k|  }
   36|  4.57k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  4.57k|  return utf32_output - start;
   38|  4.57k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   539k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   539k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   539k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 534k, False: 5.07k]
  |  |  ------------------
  ------------------
  154|   534k|        this->error |= this->prev_incomplete;
  155|   534k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  5.07k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  5.07k|            "We support either two or four chunks per 64-byte block.");
  159|  5.07k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  5.07k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  5.07k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  5.07k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  5.07k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  5.07k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  5.07k|      }
  172|   539k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  10.1k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  10.1k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  10.1k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  10.1k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  10.1k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  10.1k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  10.1k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  10.1k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  10.1k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  10.1k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  10.1k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  10.1k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  10.1k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  10.1k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  10.1k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  10.1k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  10.1k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  10.1k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  10.1k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  10.1k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  10.1k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  10.1k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  10.1k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  10.1k|    );
   51|  10.1k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  10.1k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  10.1k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  10.1k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  10.1k|      CARRY,
   59|  10.1k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  10.1k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  10.1k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  10.1k|    );
   80|  10.1k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  10.1k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  10.1k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  10.1k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  10.1k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  10.1k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  10.1k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  10.1k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  10.1k|    );
   96|  10.1k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  10.1k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  10.1k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  10.1k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  10.1k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  10.1k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  10.1k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  10.1k|    return must23_80 ^ sc;
  105|  10.1k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  5.07k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  5.07k|    static const uint8_t max_array[32] = {
  115|  5.07k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  5.07k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  5.07k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  5.07k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  5.07k|    };
  120|  5.07k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  5.07k|    return input.gt_bits(max_value);
  122|  5.07k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   499k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   499k|      this->error |= this->prev_incomplete;
  150|   499k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   499k|    simdutf_really_inline bool errors() const {
  176|   499k|      return this->error.any_bits_set_anywhere();
  177|   499k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   499k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   499k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   499k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   499k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   499k|    checker c{};
   12|   499k|    buf_block_reader<64> reader(input, length);
   13|   539k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 39.8k, False: 499k]
  ------------------
   14|  39.8k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  39.8k|      c.check_next_input(in);
   16|  39.8k|      reader.advance();
   17|  39.8k|    }
   18|   499k|    uint8_t block[64]{};
   19|   499k|    reader.get_remainder(block);
   20|   499k|    simd::simd8x64<uint8_t> in(block);
   21|   499k|    c.check_next_input(in);
   22|   499k|    reader.advance();
   23|   499k|    c.check_eof();
   24|   499k|    return !c.errors();
   25|   499k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  12.0k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  12.0k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  12.0k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  12.0k|      utf8_end_of_code_point_mask & 0xfff;
   24|  12.0k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 4.81k, False: 7.24k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  4.81k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  4.81k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  4.81k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  4.81k|    return 16; // We consumed 16 bytes.
   30|  4.81k|  }
   31|  7.24k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 0, False: 7.24k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|      0|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|      0|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|      0|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|      0|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|      0|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|      0|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|      0|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|      0|    return 16;
   42|      0|  }
   43|  7.24k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 0, False: 7.24k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|      0|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|      0|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|      0|    const __m128i ascii =
   49|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|      0|    const __m128i middlebyte =
   51|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|      0|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|      0|    const __m128i highbyte =
   54|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|      0|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|      0|    const __m128i composed =
   57|      0|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|      0|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|      0|    utf32_output += 4;
   60|      0|    return 12;
   61|      0|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  7.24k|  const uint8_t idx =
   65|  7.24k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  7.24k|  const uint8_t consumed =
   67|  7.24k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  7.24k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 5.32k, False: 1.92k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  5.32k|    const __m128i sh =
   75|  5.32k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  5.32k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  5.32k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  5.32k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  5.32k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  5.32k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  5.32k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  5.32k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 547, False: 1.37k]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    547|    const __m128i sh =
   86|    547|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    547|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    547|    const __m128i ascii =
   89|    547|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    547|    const __m128i middlebyte =
   91|    547|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    547|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    547|    const __m128i highbyte =
   94|    547|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    547|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    547|    const __m128i composed =
   97|    547|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    547|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    547|    utf32_output += 4;
  100|  1.37k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 1.37k, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|  1.37k|    const __m128i sh =
  103|  1.37k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|  1.37k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|  1.37k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|  1.37k|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|  1.37k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|  1.37k|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|  1.37k|    const __m128i correct =
  111|  1.37k|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|  1.37k|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|  1.37k|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|  1.37k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|  1.37k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|  1.37k|    const __m128i composed =
  117|  1.37k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|  1.37k|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|  1.37k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|  1.37k|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|  1.37k|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  7.24k|  return consumed;
  125|  7.24k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|   499k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|   499k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|   499k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  1.32M|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  1.32M|  utf8_to_utf32::validating_transcoder converter;
  276|  1.32M|  return converter.convert(buf, len, utf32_output);
  277|  1.32M|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  279|   246k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  280|   246k|  utf8_to_utf32::validating_transcoder converter;
  281|   246k|  return converter.convert_with_errors(buf, len, utf32_output);
  282|   246k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  4.57k|    char32_t* utf32_output) const noexcept {
  286|  4.57k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  4.57k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|   497k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|   497k|  return utf8::count_code_points(input, length);
  778|   497k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   539k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   539k|  return input.reduce_or().is_ascii();
   25|   539k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  10.1k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  10.1k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  10.1k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  10.1k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  10.1k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|  2.57M|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|  2.57M|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|  2.57M|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|  2.57M|    return active_implementation;
  815|  2.57M|}
_ZN7simdutf13validate_utf8EPKcm:
  817|   499k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|   499k|  return get_active_implementation()->validate_utf8(buf, len);
  819|   499k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  1.32M|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  1.32M|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  1.32M|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  879|   246k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  880|   246k|  return get_active_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  881|   246k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  4.57k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  4.57k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  4.57k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|   497k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|   497k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|   497k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   497k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   497k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   497k|    size_t counter{0};
  171|  1.11M|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 621k, False: 497k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   621k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 620k, False: 945]
  ------------------
  174|   621k|    }
  175|   497k|    return counter;
  176|   497k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  1.32M|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.32M| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.32M|  size_t pos = 0;
   12|  1.32M|  char32_t* start{utf32_output};
   13|  2.50M|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 1.32M, False: 1.17M]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  1.32M|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 1.32M]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  1.32M|    uint8_t leading_byte = data[pos]; // leading byte
   31|  1.32M|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 1.08M, False: 241k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  1.08M|      *utf32_output++ = char32_t(leading_byte);
   34|  1.08M|      pos++;
   35|  1.08M|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 111k, False: 130k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|   111k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 111k]
  ------------------
   38|   111k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 32.0k, False: 78.9k]
  ------------------
   39|       |      // range check
   40|  78.9k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  78.9k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 2.03k, False: 76.9k]
  |  Branch (41:32): [True: 0, False: 76.9k]
  ------------------
   42|  76.9k|      *utf32_output++ = char32_t(code_point);
   43|  76.9k|      pos += 2;
   44|   130k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 68.7k, False: 62.0k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  68.7k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 68.7k]
  ------------------
   47|       |
   48|  68.7k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 52.5k, False: 16.1k]
  ------------------
   49|  16.1k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.23k, False: 14.9k]
  ------------------
   50|       |      // range check
   51|  14.9k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  14.9k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  14.9k|                   (data[pos + 2] & 0b00111111);
   54|  14.9k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 1.91k, False: 13.0k]
  |  Branch (54:33): [True: 0, False: 13.0k]
  ------------------
   55|  14.9k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 7.19k, False: 5.85k]
  |  Branch (55:35): [True: 1.77k, False: 5.41k]
  ------------------
   56|  3.68k|        return 0;
   57|  3.68k|      }
   58|  11.2k|      *utf32_output++ = char32_t(code_point);
   59|  11.2k|      pos += 3;
   60|  62.0k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 62.0k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  62.0k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 62.0k]
  ------------------
   63|  62.0k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 48.4k, False: 13.5k]
  ------------------
   64|  13.5k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 1.49k, False: 12.0k]
  ------------------
   65|  12.0k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 1.23k, False: 10.8k]
  ------------------
   66|       |
   67|       |      // range check
   68|  10.8k|      uint32_t code_point =
   69|  10.8k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  10.8k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  10.8k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 1.65k, False: 9.19k]
  |  Branch (71:35): [True: 3.31k, False: 5.87k]
  ------------------
   72|  5.87k|      *utf32_output++ = char32_t(code_point);
   73|  5.87k|      pos += 4;
   74|  5.87k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  1.32M|  }
   78|  1.17M|  return utf32_output - start;
   79|  1.32M|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|   246k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|   246k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|   246k|  size_t pos = 0;
   84|   246k|  char32_t* start{utf32_output};
   85|   493k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 246k, False: 246k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|   246k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 0, False: 246k]
  ------------------
   88|      0|      uint64_t v1;
   89|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|      0|      uint64_t v2;
   91|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|      0|      uint64_t v{v1 | v2};
   93|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 0, False: 0]
  ------------------
   94|      0|        size_t final_pos = pos + 16;
   95|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 0, False: 0]
  ------------------
   96|      0|          *utf32_output++ = char32_t(buf[pos]);
   97|      0|          pos++;
   98|      0|        }
   99|      0|        continue;
  100|      0|      }
  101|      0|    }
  102|   246k|    uint8_t leading_byte = data[pos]; // leading byte
  103|   246k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 246k, False: 0]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|   246k|      *utf32_output++ = char32_t(leading_byte);
  106|   246k|      pos++;
  107|   246k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 0, False: 0]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|      0|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 0, False: 0]
  ------------------
  110|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 0, False: 0]
  ------------------
  111|       |      // range check
  112|      0|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|      0|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 0, False: 0]
  |  Branch (113:32): [True: 0, False: 0]
  ------------------
  114|      0|      *utf32_output++ = char32_t(code_point);
  115|      0|      pos += 2;
  116|      0|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 0, False: 0]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|      0|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 0, False: 0]
  ------------------
  119|       |
  120|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 0, False: 0]
  ------------------
  122|       |      // range check
  123|      0|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|      0|                   (data[pos + 1] & 0b00111111) << 6 |
  125|      0|                   (data[pos + 2] & 0b00111111);
  126|      0|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 0, False: 0]
  |  Branch (126:33): [True: 0, False: 0]
  ------------------
  127|      0|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 0, False: 0]
  |  Branch (127:34): [True: 0, False: 0]
  ------------------
  128|      0|      *utf32_output++ = char32_t(code_point);
  129|      0|      pos += 3;
  130|      0|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 0, False: 0]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|      0|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 0, False: 0]
  ------------------
  133|      0|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 0, False: 0]
  ------------------
  134|      0|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 0, False: 0]
  ------------------
  135|      0|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|       |
  137|       |      // range check
  138|      0|      uint32_t code_point =
  139|      0|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|      0|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|      0|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 0, False: 0]
  ------------------
  142|      0|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  ------------------
  143|      0|      *utf32_output++ = char32_t(code_point);
  144|      0|      pos += 4;
  145|      0|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|      0|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 0, False: 0]
  ------------------
  148|      0|      else { return result(error_code::HEADER_BITS, pos); }
  149|      0|    }
  150|   246k|  }
  151|   246k|  return result(error_code::SUCCESS, utf32_output - start);
  152|   246k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|   246k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|   246k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|   246k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|   246k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 246k, False: 0]
  ------------------
  172|   246k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|   246k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 246k, False: 0]
  ------------------
  175|   246k|    unsigned char byte = buf[0-i];
  176|   246k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|   246k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 246k, False: 0]
  ------------------
  178|   246k|      buf -= i;
  179|   246k|      extra_len = i;
  180|   246k|      break;
  181|   246k|    }
  182|   246k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|   246k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 0, False: 246k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|      0|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|      0|  }
  196|       |
  197|   246k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|   246k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 0, False: 246k]
  ------------------
  199|      0|    res.count -= extra_len;
  200|      0|  }
  201|   246k|  return res;
  202|   246k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  4.57k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  4.57k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  4.57k|  size_t pos = 0;
   12|  4.57k|  char32_t* start{utf32_output};
   13|  42.4k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 37.9k, False: 4.57k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  37.9k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 21.7k, False: 16.1k]
  ------------------
   16|  21.7k|      uint64_t v;
   17|  21.7k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  21.7k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 19.4k, False: 2.30k]
  ------------------
   19|  19.4k|        size_t final_pos = pos + 8;
   20|   175k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 155k, False: 19.4k]
  ------------------
   21|   155k|          *utf32_output++ = char32_t(buf[pos]);
   22|   155k|          pos++;
   23|   155k|        }
   24|  19.4k|        continue;
   25|  19.4k|      }
   26|  21.7k|    }
   27|  18.4k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  18.4k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 17.7k, False: 718]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  17.7k|      *utf32_output++ = char32_t(leading_byte);
   31|  17.7k|      pos++;
   32|  17.7k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 439, False: 279]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    439|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 439]
  ------------------
   35|    439|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    439|      pos += 2;
   37|    439|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 167, False: 112]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    167|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 167]
  ------------------
   40|    167|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    167|      pos += 3;
   42|    167|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 112, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|    112|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 112]
  ------------------
   45|    112|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|    112|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|    112|      *utf32_output++ = char32_t(code_word);
   48|    112|      pos += 4;
   49|    112|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  18.4k|  }
   54|  4.57k|  return utf32_output - start;
   55|  4.57k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  31.7k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  31.7k|  return _popcnt64(input_num);
   16|  31.7k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  1.49M|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  1.49M|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  1.49M|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  1.49M|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   539k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  1.08M|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  1.08M|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  1.08M|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  4.52M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  4.52M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  4.52M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  4.52M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   539k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   539k|      return this->chunks[0] | this->chunks[1];
  297|   539k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  1.59M|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  8.20M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   539k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  1.04M|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  10.1k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  10.1k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  20.2k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  30.4k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  30.4k|      return lookup_16(simd8<L>::repeat_16(
  140|  30.4k|        replace0,  replace1,  replace2,  replace3,
  141|  30.4k|        replace4,  replace5,  replace6,  replace7,
  142|  30.4k|        replace8,  replace9,  replace10, replace11,
  143|  30.4k|        replace12, replace13, replace14, replace15
  144|  30.4k|      ));
  145|  30.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  30.4k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  30.4k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  30.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  40.5k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  30.4k|    ) {
  218|  30.4k|      return simd8<uint8_t>(
  219|  30.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  30.4k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  30.4k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  30.4k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  30.4k|      );
  224|  30.4k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  30.4k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  60.8k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  1.63M|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  1.63M|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  10.1k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  10.1k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  10.1k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  10.1k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  25.3k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|   211k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|   211k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|   211k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|   211k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  73.6k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   482k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  77.9k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  77.9k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  77.9k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  10.1k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  44.0k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  10.1k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  10.1k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  5.07k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  5.07k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  2.06M|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  2.06M|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  63.0k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|   126k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   126k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   126k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  31.2k|    simdutf_really_inline bool is_ascii() const {
  300|  31.2k|      return this->reduce_or().is_ascii();
  301|  31.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  31.2k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  31.2k|      return this->chunks[0] | this->chunks[1];
  297|  31.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  31.2k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  31.2k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  2.16k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  2.16k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  2.16k|      return  simd8x64<bool>(
  365|  2.16k|        this->chunks[0] < mask,
  366|  2.16k|        this->chunks[1] < mask
  367|  2.16k|      ).to_bitmask();
  368|  2.16k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  4.32k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  33.9k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  33.9k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  33.9k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  33.9k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  33.9k|      return r_lo | (r_hi << 32);
  287|  33.9k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  67.8k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  67.8k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  29.1k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  29.1k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  29.1k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  29.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  58.2k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  58.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  58.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  58.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  58.2k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  58.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  31.7k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  31.7k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  31.7k|      return  simd8x64<bool>(
  373|  31.7k|        this->chunks[0] > mask,
  374|  31.7k|        this->chunks[1] > mask
  375|  31.7k|      ).to_bitmask();
  376|  31.7k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.45M|{
  619|  1.45M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.45M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.45M|    static_cast<    \
  |  |  247|  1.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.45M|}
_ZN3scn2v26detail20check_scan_arg_typesIJfEEEvv:
  386|  3.26M|{
  387|  3.26M|    static_assert(
  388|  3.26M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.26M|        "Scan argument types must be default constructible");
  390|  3.26M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.26M|                  "Scan argument types must be Destructible");
  392|  3.26M|    static_assert(
  393|  3.26M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.26M|        "Scan argument types must not be references");
  395|  3.26M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2EONSt3__15tupleIJfEEE:
  563|  1.45M|    {
  564|  1.45M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.45M|    {
  574|  1.45M|        return {
  575|  1.45M|            detail::make_arg<base::is_packed, Context,
  576|  1.45M|                             detail::mapped_type_constant<
  577|  1.45M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.45M|                args)...};
  579|  1.45M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|  1.45M|{
  415|  1.45M|    return make_value<Context>(value);
  416|  1.45M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
  371|  1.61M|{
  372|  1.61M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.61M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.61M|                                  needs_context_tag>) {
  376|  1.61M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.61M|    }
  378|  1.61M|    else {
  379|  1.61M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.61M|            value, context_tag<Context>{}));
  381|  1.61M|    }
  382|  1.61M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERf:
  216|  1.61M|    {                                                                        \
  217|  1.61M|        return val;                                                          \
  218|  1.61M|    }
_ZN3scn2v26detail15make_value_implIRfEEDaOT_:
  340|  3.26M|{
  341|  3.26M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.26M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.26M|    constexpr bool scannable_char =
  345|  3.26M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.26M|    static_assert(scannable_char,
  347|  3.26M|                  "Cannot scan an argument of an unsupported character "
  348|  3.26M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.26M|    constexpr bool scannable_const =
  351|  3.26M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.26M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.26M|    constexpr bool scannable_disabled =
  355|  3.26M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.26M|    static_assert(scannable_disabled,
  357|  3.26M|                  "Cannot scan an argument that has been disabled by "
  358|  3.26M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.26M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.26M|    static_assert(
  362|  3.26M|        scannable,
  363|  3.26M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.26M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.26M|    return arg_value{arg};
  367|  3.26M|}
_ZN3scn2v26detail9arg_valueC2IfEERT_:
  159|  3.26M|    {
  160|  3.26M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.45M|    {
  647|  1.45M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  4.99M|    {
  694|  4.99M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
  553|  1.30M|    {
  554|  1.30M|        return m_args;
  555|  1.30M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
  399|   154k|{
  400|   154k|    check_scan_arg_types<T>();
  401|       |
  402|   154k|    basic_scan_arg<Context> arg;
  403|   154k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   154k|    arg.m_value = make_value<Context>(value);
  405|   154k|    return arg;
  406|   154k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  5.52M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  11.0M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.73M|{
  619|  1.73M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.73M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.73M|    static_cast<    \
  |  |  247|  1.73M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.73M|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  386|  3.83M|{
  387|  3.83M|    static_assert(
  388|  3.83M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.83M|        "Scan argument types must be default constructible");
  390|  3.83M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.83M|                  "Scan argument types must be Destructible");
  392|  3.83M|    static_assert(
  393|  3.83M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.83M|        "Scan argument types must not be references");
  395|  3.83M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  563|  1.73M|    {
  564|  1.73M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.73M|    {
  574|  1.73M|        return {
  575|  1.73M|            detail::make_arg<base::is_packed, Context,
  576|  1.73M|                             detail::mapped_type_constant<
  577|  1.73M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.73M|                args)...};
  579|  1.73M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|  1.73M|{
  415|  1.73M|    return make_value<Context>(value);
  416|  1.73M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  371|  1.91M|{
  372|  1.91M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.91M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.91M|                                  needs_context_tag>) {
  376|  1.91M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.91M|    }
  378|  1.91M|    else {
  379|  1.91M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.91M|            value, context_tag<Context>{}));
  381|  1.91M|    }
  382|  1.91M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  216|  1.91M|    {                                                                        \
  217|  1.91M|        return val;                                                          \
  218|  1.91M|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  340|  3.83M|{
  341|  3.83M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.83M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.83M|    constexpr bool scannable_char =
  345|  3.83M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.83M|    static_assert(scannable_char,
  347|  3.83M|                  "Cannot scan an argument of an unsupported character "
  348|  3.83M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.83M|    constexpr bool scannable_const =
  351|  3.83M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.83M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.83M|    constexpr bool scannable_disabled =
  355|  3.83M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.83M|    static_assert(scannable_disabled,
  357|  3.83M|                  "Cannot scan an argument that has been disabled by "
  358|  3.83M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.83M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.83M|    static_assert(
  362|  3.83M|        scannable,
  363|  3.83M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.83M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.83M|    return arg_value{arg};
  367|  3.83M|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  3.83M|    {
  160|  3.83M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.73M|    {
  647|  1.73M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
  553|  1.58M|    {
  554|  1.58M|        return m_args;
  555|  1.58M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
  399|   182k|{
  400|   182k|    check_scan_arg_types<T>();
  401|       |
  402|   182k|    basic_scan_arg<Context> arg;
  403|   182k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   182k|    arg.m_value = make_value<Context>(value);
  405|   182k|    return arg;
  406|   182k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.80M|{
  619|  1.80M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.80M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.80M|    static_cast<    \
  |  |  247|  1.80M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.80M|}
_ZN3scn2v26detail20check_scan_arg_typesIJeEEEvv:
  386|  3.98M|{
  387|  3.98M|    static_assert(
  388|  3.98M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.98M|        "Scan argument types must be default constructible");
  390|  3.98M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.98M|                  "Scan argument types must be Destructible");
  392|  3.98M|    static_assert(
  393|  3.98M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.98M|        "Scan argument types must not be references");
  395|  3.98M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2EONSt3__15tupleIJeEEE:
  563|  1.80M|    {
  564|  1.80M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.80M|    {
  574|  1.80M|        return {
  575|  1.80M|            detail::make_arg<base::is_packed, Context,
  576|  1.80M|                             detail::mapped_type_constant<
  577|  1.80M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.80M|                args)...};
  579|  1.80M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|  1.80M|{
  415|  1.80M|    return make_value<Context>(value);
  416|  1.80M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
  371|  1.99M|{
  372|  1.99M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.99M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.99M|                                  needs_context_tag>) {
  376|  1.99M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.99M|    }
  378|  1.99M|    else {
  379|  1.99M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.99M|            value, context_tag<Context>{}));
  381|  1.99M|    }
  382|  1.99M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERe:
  216|  1.99M|    {                                                                        \
  217|  1.99M|        return val;                                                          \
  218|  1.99M|    }
_ZN3scn2v26detail15make_value_implIReEEDaOT_:
  340|  3.98M|{
  341|  3.98M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.98M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.98M|    constexpr bool scannable_char =
  345|  3.98M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.98M|    static_assert(scannable_char,
  347|  3.98M|                  "Cannot scan an argument of an unsupported character "
  348|  3.98M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.98M|    constexpr bool scannable_const =
  351|  3.98M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.98M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.98M|    constexpr bool scannable_disabled =
  355|  3.98M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.98M|    static_assert(scannable_disabled,
  357|  3.98M|                  "Cannot scan an argument that has been disabled by "
  358|  3.98M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.98M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.98M|    static_assert(
  362|  3.98M|        scannable,
  363|  3.98M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.98M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.98M|    return arg_value{arg};
  367|  3.98M|}
_ZN3scn2v26detail9arg_valueC2IeEERT_:
  159|  3.98M|    {
  160|  3.98M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.80M|    {
  647|  1.80M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
  553|  1.65M|    {
  554|  1.65M|        return m_args;
  555|  1.65M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
  399|   194k|{
  400|   194k|    check_scan_arg_types<T>();
  401|       |
  402|   194k|    basic_scan_arg<Context> arg;
  403|   194k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   194k|    arg.m_value = make_value<Context>(value);
  405|   194k|    return arg;
  406|   194k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.49M|{
  619|  1.49M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.49M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.49M|    static_cast<    \
  |  |  247|  1.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.49M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2EONSt3__15tupleIJfEEE:
  563|  1.49M|    {
  564|  1.49M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE15make_data_arrayIJfEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.49M|    {
  574|  1.49M|        return {
  575|  1.49M|            detail::make_arg<base::is_packed, Context,
  576|  1.49M|                             detail::mapped_type_constant<
  577|  1.49M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.49M|                args)...};
  579|  1.49M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEENS1_9arg_valueERT2_:
  414|  1.49M|{
  415|  1.49M|    return make_value<Context>(value);
  416|  1.49M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
  371|  1.64M|{
  372|  1.64M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.64M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.64M|                                  needs_context_tag>) {
  376|  1.64M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.64M|    }
  378|  1.64M|    else {
  379|  1.64M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.64M|            value, context_tag<Context>{}));
  381|  1.64M|    }
  382|  1.64M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERf:
  216|  1.64M|    {                                                                        \
  217|  1.64M|        return val;                                                          \
  218|  1.64M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.49M|    {
  647|  1.49M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  5.04M|    {
  694|  5.04M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
  553|  1.04M|    {
  554|  1.04M|        return m_args;
  555|  1.04M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
  399|   151k|{
  400|   151k|    check_scan_arg_types<T>();
  401|       |
  402|   151k|    basic_scan_arg<Context> arg;
  403|   151k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   151k|    arg.m_value = make_value<Context>(value);
  405|   151k|    return arg;
  406|   151k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  5.55M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.74M|{
  619|  1.74M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.74M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.74M|    static_cast<    \
  |  |  247|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.74M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  563|  1.74M|    {
  564|  1.74M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.74M|    {
  574|  1.74M|        return {
  575|  1.74M|            detail::make_arg<base::is_packed, Context,
  576|  1.74M|                             detail::mapped_type_constant<
  577|  1.74M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.74M|                args)...};
  579|  1.74M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|  1.74M|{
  415|  1.74M|    return make_value<Context>(value);
  416|  1.74M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  371|  1.92M|{
  372|  1.92M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.92M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.92M|                                  needs_context_tag>) {
  376|  1.92M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.92M|    }
  378|  1.92M|    else {
  379|  1.92M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.92M|            value, context_tag<Context>{}));
  381|  1.92M|    }
  382|  1.92M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  216|  1.92M|    {                                                                        \
  217|  1.92M|        return val;                                                          \
  218|  1.92M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.74M|    {
  647|  1.74M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
  553|  1.28M|    {
  554|  1.28M|        return m_args;
  555|  1.28M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
  399|   176k|{
  400|   176k|    check_scan_arg_types<T>();
  401|       |
  402|   176k|    basic_scan_arg<Context> arg;
  403|   176k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   176k|    arg.m_value = make_value<Context>(value);
  405|   176k|    return arg;
  406|   176k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.79M|{
  619|  1.79M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.79M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.79M|    static_cast<    \
  |  |  247|  1.79M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.79M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2EONSt3__15tupleIJeEEE:
  563|  1.79M|    {
  564|  1.79M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE15make_data_arrayIJeEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.79M|    {
  574|  1.79M|        return {
  575|  1.79M|            detail::make_arg<base::is_packed, Context,
  576|  1.79M|                             detail::mapped_type_constant<
  577|  1.79M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.79M|                args)...};
  579|  1.79M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEENS1_9arg_valueERT2_:
  414|  1.79M|{
  415|  1.79M|    return make_value<Context>(value);
  416|  1.79M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
  371|  1.98M|{
  372|  1.98M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.98M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.98M|                                  needs_context_tag>) {
  376|  1.98M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.98M|    }
  378|  1.98M|    else {
  379|  1.98M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.98M|            value, context_tag<Context>{}));
  381|  1.98M|    }
  382|  1.98M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERe:
  216|  1.98M|    {                                                                        \
  217|  1.98M|        return val;                                                          \
  218|  1.98M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.79M|    {
  647|  1.79M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
  553|  1.34M|    {
  554|  1.34M|        return m_args;
  555|  1.34M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
  399|   185k|{
  400|   185k|    check_scan_arg_types<T>();
  401|       |
  402|   185k|    basic_scan_arg<Context> arg;
  403|   185k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   185k|    arg.m_value = make_value<Context>(value);
  405|   185k|    return arg;
  406|   185k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  4.99M|    {
  682|  4.99M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.99M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  4.99M|        return static_cast<std::size_t>(m_desc &
  687|  4.99M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  4.99M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  9.99M|    {
  702|  9.99M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  9.99M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  4.99M|    {
  655|  4.99M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.99M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  4.99M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  4.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.99M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  4.99M|        const auto t = type(id);
  667|  4.99M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  4.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.99M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  4.99M|        basic_scan_arg<Context> arg;
  672|  4.99M|        arg.m_type = t;
  673|  4.99M|        arg.m_value = m_values[id];
  674|  4.99M|        return arg;
  675|  4.99M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  4.99M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  4.99M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  4.99M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  4.99M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  4.99M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  9.45M|    {
  483|  9.45M|        return m_type != detail::arg_type::none_type;
  484|  9.45M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  7.86M|    {
  488|  7.86M|        return m_type;
  489|  7.86M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  5.04M|    {
  682|  5.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.04M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  5.04M|        return static_cast<std::size_t>(m_desc &
  687|  5.04M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  5.04M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  10.0M|    {
  702|  10.0M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  10.0M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  5.04M|    {
  655|  5.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  5.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.04M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  5.04M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  5.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.04M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  5.04M|        const auto t = type(id);
  667|  5.04M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  5.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.04M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  5.04M|        basic_scan_arg<Context> arg;
  672|  5.04M|        arg.m_type = t;
  673|  5.04M|        arg.m_value = m_values[id];
  674|  5.04M|        return arg;
  675|  5.04M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  5.04M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  5.04M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  5.04M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  5.04M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  5.04M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  9.56M|    {
  483|  9.56M|        return m_type != detail::arg_type::none_type;
  484|  9.56M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  8.02M|    {
  488|  8.02M|        return m_type;
  489|  8.02M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   532k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   513k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   189k|    {
  109|   189k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  3.93M|    {
   60|  3.93M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   379k|    {
  124|   379k|        return m_current;
  125|   379k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  3.93M|    {
   43|  3.93M|        return m_args.get(id);
   44|  3.93M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  3.93M|    {
   53|  3.93M|        return m_locale;
   54|  3.93M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   189k|    {
  132|   189k|        return ranges_std::default_sentinel;
  133|   189k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   189k|    {
  140|   189k|        return ranges::subrange{begin(), end()};
  141|   189k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   568k|    {
  109|   568k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  4.01M|    {
   60|  4.01M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.13M|    {
  124|  1.13M|        return m_current;
  125|  1.13M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  4.01M|    {
   43|  4.01M|        return m_args.get(id);
   44|  4.01M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  4.01M|    {
   53|  4.01M|        return m_locale;
   54|  4.01M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   568k|    {
  132|   568k|        return ranges_std::default_sentinel;
  133|   568k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   568k|    {
  140|   568k|        return ranges::subrange{begin(), end()};
  141|   568k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  12.6M|    {
   69|  12.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  12.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  12.6M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  44.2M|    {
   75|  44.2M|        return m_code == good;
   76|  44.2M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  1.51M|    {
   86|  1.51M|        return m_code;
   87|  1.51M|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  1.51M|{
  111|  1.51M|    return a.code() == b;
  112|  1.51M|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  1.51M|{
  116|  1.51M|    return !(a == b);
  117|  1.51M|}
_ZN3scn2v210scan_errorC2Ev:
   62|  28.3M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.38M|    {
  675|  1.38M|        return m_str;
  676|  1.38M|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  4.99M|{
  385|  4.99M|    return s;
  386|  4.99M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  4.99M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.38M|    {
  671|  1.38M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.65M|    {
  675|  1.65M|        return m_str;
  676|  1.65M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.65M|    {
  671|  1.65M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.72M|    {
  675|  1.72M|        return m_str;
  676|  1.72M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.72M|    {
  671|  1.72M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  75.8k|    {
  675|  75.8k|        return m_str;
  676|  75.8k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  75.8k|    {
  671|  75.8k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  75.8k|    {
  675|  75.8k|        return m_str;
  676|  75.8k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  75.8k|    {
  671|  75.8k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  75.8k|    {
  675|  75.8k|        return m_str;
  676|  75.8k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  75.8k|    {
  671|  75.8k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.27M|    {
  675|  1.27M|        return m_str;
  676|  1.27M|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  5.04M|{
  390|  5.04M|    return s;
  391|  5.04M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  5.04M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.27M|    {
  671|  1.27M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.51M|    {
  675|  1.51M|        return m_str;
  676|  1.51M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.51M|    {
  671|  1.51M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.57M|    {
  675|  1.57M|        return m_str;
  676|  1.57M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.57M|    {
  671|  1.57M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   227k|    {
  675|   227k|        return m_str;
  676|   227k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   227k|    {
  671|   227k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   227k|    {
  675|   227k|        return m_str;
  676|   227k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   227k|    {
  671|   227k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   227k|    {
  675|   227k|        return m_str;
  676|   227k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   227k|    {
  671|   227k|    }

_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  7.94M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  2.09M|    {
  245|  2.09M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  2.09M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  2.09M|            m_specs.localized = true;
  247|  2.09M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  2.09M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  5.85M|    {
  260|  5.85M|        m_specs.type = type;
  261|  5.85M|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  7.94M|    {
  333|  7.94M|        return static_cast<bool>(m_error);
  334|  7.94M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  980|  2.09M|{
  981|  2.09M|    switch (type) {
  982|      0|        case arg_type::none_type:
  ------------------
  |  Branch (982:9): [True: 0, False: 2.09M]
  ------------------
  983|      0|            return arg_type_category::none;
  984|       |
  985|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (985:9): [True: 0, False: 2.09M]
  ------------------
  986|      0|        case arg_type::short_type:
  ------------------
  |  Branch (986:9): [True: 0, False: 2.09M]
  ------------------
  987|      0|        case arg_type::int_type:
  ------------------
  |  Branch (987:9): [True: 0, False: 2.09M]
  ------------------
  988|      0|        case arg_type::long_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 2.09M]
  ------------------
  989|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (989:9): [True: 0, False: 2.09M]
  ------------------
  990|      0|            return arg_type_category::integer;
  991|       |
  992|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 2.09M]
  ------------------
  993|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 2.09M]
  ------------------
  994|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 2.09M]
  ------------------
  995|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 2.09M]
  ------------------
  996|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (996:9): [True: 0, False: 2.09M]
  ------------------
  997|      0|            return arg_type_category::unsigned_integer;
  998|       |
  999|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 2.09M]
  ------------------
 1000|      0|            return arg_type_category::pointer;
 1001|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 2.09M]
  ------------------
 1002|      0|            return arg_type_category::boolean;
 1003|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1003:9): [True: 0, False: 2.09M]
  ------------------
 1004|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1004:9): [True: 0, False: 2.09M]
  ------------------
 1005|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 2.09M]
  ------------------
 1006|      0|            return arg_type_category::character;
 1007|       |
 1008|   613k|        case arg_type::float_type:
  ------------------
  |  Branch (1008:9): [True: 613k, False: 1.47M]
  ------------------
 1009|  1.33M|        case arg_type::double_type:
  ------------------
  |  Branch (1009:9): [True: 718k, False: 1.37M]
  ------------------
 1010|  2.09M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1010:9): [True: 760k, False: 1.33M]
  ------------------
 1011|  2.09M|            return arg_type_category::floating;
 1012|       |
 1013|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1013:9): [True: 0, False: 2.09M]
  ------------------
 1014|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 2.09M]
  ------------------
 1015|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 2.09M]
  ------------------
 1016|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 2.09M]
  ------------------
 1017|      0|            return arg_type_category::string;
 1018|       |
 1019|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 2.09M]
  ------------------
 1020|      0|            return arg_type_category::custom;
 1021|       |
 1022|      0|            SCN_CLANG_PUSH
 1023|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1024|      0|        default:
  ------------------
  |  Branch (1024:9): [True: 0, False: 2.09M]
  ------------------
 1025|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1026|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1027|  2.09M|            SCN_CLANG_POP
 1028|  2.09M|    }
 1029|       |
 1030|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1031|  2.09M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  3.74M|{
  962|  3.74M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  3.74M|    handler.check_args_exhausted();
  964|  3.74M|    return handler.get_error();
  965|  3.74M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  3.74M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  3.74M|    auto begin = format.data();
  931|  3.74M|    auto it = begin;
  932|  3.74M|    const auto end = format.data() + format.size();
  933|       |
  934|  7.29M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 3.74M, False: 3.55M]
  ------------------
  935|  3.74M|        const auto ch = *it++;
  936|  3.74M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 3.74M, False: 0]
  ------------------
  937|  3.74M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  3.74M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  3.74M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 189k, False: 3.55M]
  ------------------
  941|   189k|                return;
  942|   189k|            }
  943|  3.74M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  3.74M|    }
  954|       |
  955|  3.55M|    handler.on_literal_text(begin, end);
  956|  3.55M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  859|  3.74M|{
  860|  3.74M|    struct id_adapter {
  861|  3.74M|        constexpr void operator()()
  862|  3.74M|        {
  863|  3.74M|            arg_id = handler.on_arg_id();
  864|  3.74M|        }
  865|  3.74M|        constexpr void operator()(std::size_t id)
  866|  3.74M|        {
  867|  3.74M|            arg_id = handler.on_arg_id(id);
  868|  3.74M|        }
  869|       |
  870|  3.74M|        constexpr void on_error(const char* msg)
  871|  3.74M|        {
  872|  3.74M|            SCN_UNLIKELY_ATTR
  873|  3.74M|            handler.on_error(msg);
  874|  3.74M|        }
  875|       |
  876|  3.74M|        Handler& handler;
  877|  3.74M|        std::size_t arg_id;
  878|  3.74M|    };
  879|       |
  880|  3.74M|    ++begin;
  881|  3.74M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  3.74M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 3.74M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  3.74M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 3.74M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  3.74M|    else {
  893|  3.74M|        auto adapter = id_adapter{handler, 0};
  894|  3.74M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  3.74M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  3.74M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 3.74M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  3.74M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 3.74M, False: 0]
  ------------------
  905|  3.74M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  3.74M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  3.74M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  7.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  |  Branch (153:45): [True: 0, False: 3.74M]
  |  |  |  Branch (153:45): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|  3.74M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  3.74M|    }
  921|  3.74M|    return begin + 1;
  922|  3.74M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  3.74M|{
  400|  3.74M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  3.74M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 3.74M, False: 0]
  |  Branch (401:26): [True: 0, False: 3.74M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  3.74M|    handler();
  406|  3.74M|    return begin;
  407|  3.74M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  3.74M|        {
  863|  3.74M|            arg_id = handler.on_arg_id();
  864|  3.74M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  3.74M|    {
 1040|  3.74M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  3.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  3.74M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  788|  3.74M|{
  789|  3.74M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.74M|        if (*begin == CharT{'['}) {
  791|  3.74M|            auto set = parse_presentation_set(begin, end, handler);
  792|  3.74M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  3.74M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  3.74M|                return begin;
  797|  3.74M|            }
  798|  3.74M|            handler.on_character_set_string(set);
  799|  3.74M|            return begin;
  800|  3.74M|        }
  801|  3.74M|        if (*begin == CharT{'/'}) {
  802|  3.74M|            return parse_presentation_regex(begin, end, handler);
  803|  3.74M|        }
  804|  3.74M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.74M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  3.74M|            handler.on_error("Invalid type specifier in format string");
  807|  3.74M|            return begin;
  808|  3.74M|        }
  809|  3.74M|        handler.on_type(type);
  810|  3.74M|        return begin;
  811|  3.74M|    };
  812|       |
  813|  3.74M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 3.74M, False: 0]
  |  Branch (813:28): [True: 3.74M, False: 0]
  ------------------
  814|  3.74M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 3.74M, False: 0]
  |  Branch (814:36): [True: 2.71M, False: 1.02M]
  ------------------
  815|  2.71M|        return do_presentation();
  816|  2.71M|    }
  817|       |
  818|  1.02M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.02M|    begin = parse_align(begin, end, handler);
  824|  1.02M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.02M|    begin = parse_width(begin, end, handler);
  830|  1.02M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.02M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.02M, False: 0]
  ------------------
  836|  1.02M|        handler.on_localized();
  837|  1.02M|        ++begin;
  838|  1.02M|    }
  839|  1.02M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.02M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.02M, False: 0]
  |  Branch (844:25): [True: 0, False: 1.02M]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|  1.02M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.02M|    return begin;
  853|  1.02M|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  3.93M|{
  464|  3.93M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.86M, False: 1.06M]
  |  Branch (464:33): [True: 2.86M, False: 0]
  ------------------
  465|  3.93M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.06M, False: 0]
  |  Branch (465:33): [True: 1.06M, False: 0]
  ------------------
  466|  3.93M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  2.71M|    auto do_presentation = [&]() -> const CharT* {
  790|  2.71M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 2.71M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  2.71M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 2.71M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  2.71M|        presentation_type type = parse_presentation_type(*begin++);
  805|  2.71M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.71M]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|  2.71M|        handler.on_type(type);
  810|  2.71M|        return begin;
  811|  2.71M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.86M|{
  412|  2.86M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 2.86M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 2.86M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 2.86M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 2.86M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.86M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 2.86M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 2.86M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.86M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.86M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.86M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|  1.18M|        case 'a':
  ------------------
  |  Branch (430:9): [True: 1.18M, False: 1.67M]
  ------------------
  431|  1.18M|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.86M]
  ------------------
  432|  1.18M|            return presentation_type::float_hex;
  433|  82.6k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 82.6k, False: 2.78M]
  ------------------
  434|  82.6k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.86M]
  ------------------
  435|  82.6k|            return presentation_type::float_scientific;
  436|   616k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 616k, False: 2.24M]
  ------------------
  437|   616k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.86M]
  ------------------
  438|   616k|            return presentation_type::float_fixed;
  439|   976k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 976k, False: 1.88M]
  ------------------
  440|   976k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.86M]
  ------------------
  441|   976k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.86M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.86M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.86M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.86M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.86M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.86M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 2.86M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  2.86M|    }
  459|  2.86M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.02M|{
  489|  1.02M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.02M|        switch (ch) {
  493|  1.02M|            case L'<':
  494|  1.02M|                return align_type::left;
  495|  1.02M|            case L'>':
  496|  1.02M|                return align_type::right;
  497|  1.02M|            case L'^':
  498|  1.02M|                return align_type::center;
  499|  1.02M|            default:
  500|  1.02M|                return align_type::none;
  501|  1.02M|        }
  502|  1.02M|    };
  503|       |
  504|  1.02M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.02M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  |  Branch (153:45): [True: 0, False: 1.02M]
  |  |  |  Branch (153:45): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  506|  1.02M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.02M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.02M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.02M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.02M|    const auto begin_before_fill = begin;
  516|  1.02M|    begin += potential_fill_len;
  517|       |
  518|  1.02M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.02M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.02M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.02M|    const auto begin_after_fill = begin;
  524|  1.02M|    ++begin;
  525|       |
  526|  1.02M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.02M, False: 0]
  ------------------
  527|  1.02M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.02M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.02M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.02M|    }
  535|       |
  536|  1.02M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.02M, False: 0]
  ------------------
  537|  1.02M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.02M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.02M|        return begin_before_fill;
  542|  1.02M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.02M|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.06M|{
  471|  1.06M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.06M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.06M|        return 1;
  474|  1.06M|    }
  475|  1.06M|    else {
  476|  1.06M|        const auto lengths =
  477|  1.06M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.06M|            "\3\4";
  479|  1.06M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.06M|        return len;
  481|  1.06M|    }
  482|  1.06M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.05M|    auto check_align = [](wchar_t ch) {
  492|  2.05M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.05M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.05M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.05M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.05M|            default:
  ------------------
  |  Branch (499:13): [True: 2.05M, False: 0]
  ------------------
  500|  2.05M|                return align_type::none;
  501|  2.05M|        }
  502|  2.05M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.02M|{
  554|  1.02M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.02M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.02M, False: 0]
  |  Branch (556:33): [True: 0, False: 1.02M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.02M|    return begin;
  567|  1.02M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1044|  1.02M|    {
 1045|  1.02M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.02M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 1.02M, False: 0]
  ------------------
 1047|  1.02M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 1.02M, False: 0]
  ------------------
 1048|  1.02M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 1.02M]
  ------------------
 1049|  1.02M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.02M|        Handler::on_localized();
 1057|  1.02M|    }
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1110|  7.94M|{
 1111|  7.94M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1111:9): [True: 5.85M, False: 2.09M]
  ------------------
 1112|  7.94M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1112:10): [True: 0, False: 5.85M]
  ------------------
 1113|  5.85M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1113:10): [True: 0, False: 5.85M]
  ------------------
 1114|      0|        SCN_UNLIKELY_ATTR
 1115|      0|        return handler.on_error("Invalid type specifier for float type");
 1116|      0|    }
 1117|  7.94M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   189k|{
  962|   189k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   189k|    handler.check_args_exhausted();
  964|   189k|    return handler.get_error();
  965|   189k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   189k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   189k|    auto begin = format.data();
  931|   189k|    auto it = begin;
  932|   189k|    const auto end = format.data() + format.size();
  933|       |
  934|   189k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 189k, False: 0]
  ------------------
  935|   189k|        const auto ch = *it++;
  936|   189k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 189k, False: 0]
  ------------------
  937|   189k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   189k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   189k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 189k, False: 0]
  ------------------
  941|   189k|                return;
  942|   189k|            }
  943|   189k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   189k|    }
  954|       |
  955|      0|    handler.on_literal_text(begin, end);
  956|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  859|   189k|{
  860|   189k|    struct id_adapter {
  861|   189k|        constexpr void operator()()
  862|   189k|        {
  863|   189k|            arg_id = handler.on_arg_id();
  864|   189k|        }
  865|   189k|        constexpr void operator()(std::size_t id)
  866|   189k|        {
  867|   189k|            arg_id = handler.on_arg_id(id);
  868|   189k|        }
  869|       |
  870|   189k|        constexpr void on_error(const char* msg)
  871|   189k|        {
  872|   189k|            SCN_UNLIKELY_ATTR
  873|   189k|            handler.on_error(msg);
  874|   189k|        }
  875|       |
  876|   189k|        Handler& handler;
  877|   189k|        std::size_t arg_id;
  878|   189k|    };
  879|       |
  880|   189k|    ++begin;
  881|   189k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   189k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 189k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   189k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 189k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   189k|    else {
  893|   189k|        auto adapter = id_adapter{handler, 0};
  894|   189k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   189k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   189k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 189k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   189k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 189k, False: 0]
  ------------------
  905|   189k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   189k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   189k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  |  Branch (153:45): [True: 0, False: 189k]
  |  |  |  Branch (153:45): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|   189k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   189k|    }
  921|   189k|    return begin + 1;
  922|   189k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   189k|{
  400|   189k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   189k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 189k, False: 0]
  |  Branch (401:26): [True: 0, False: 189k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   189k|    handler();
  406|   189k|    return begin;
  407|   189k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   189k|        {
  863|   189k|            arg_id = handler.on_arg_id();
  864|   189k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   189k|    {
 1040|   189k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   189k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  788|   189k|{
  789|   189k|    auto do_presentation = [&]() -> const CharT* {
  790|   189k|        if (*begin == CharT{'['}) {
  791|   189k|            auto set = parse_presentation_set(begin, end, handler);
  792|   189k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   189k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   189k|                return begin;
  797|   189k|            }
  798|   189k|            handler.on_character_set_string(set);
  799|   189k|            return begin;
  800|   189k|        }
  801|   189k|        if (*begin == CharT{'/'}) {
  802|   189k|            return parse_presentation_regex(begin, end, handler);
  803|   189k|        }
  804|   189k|        presentation_type type = parse_presentation_type(*begin++);
  805|   189k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   189k|            handler.on_error("Invalid type specifier in format string");
  807|   189k|            return begin;
  808|   189k|        }
  809|   189k|        handler.on_type(type);
  810|   189k|        return begin;
  811|   189k|    };
  812|       |
  813|   189k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 189k, False: 0]
  |  Branch (813:28): [True: 189k, False: 0]
  ------------------
  814|   189k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 189k, False: 0]
  |  Branch (814:36): [True: 151k, False: 37.9k]
  ------------------
  815|   151k|        return do_presentation();
  816|   151k|    }
  817|       |
  818|  37.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  37.9k|    begin = parse_align(begin, end, handler);
  824|  37.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  37.9k|    begin = parse_width(begin, end, handler);
  830|  37.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  37.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 37.9k, False: 0]
  ------------------
  836|  37.9k|        handler.on_localized();
  837|  37.9k|        ++begin;
  838|  37.9k|    }
  839|  37.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  37.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 37.9k, False: 0]
  |  Branch (844:25): [True: 0, False: 37.9k]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|  37.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  37.9k|    return begin;
  853|  37.9k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   151k|    auto do_presentation = [&]() -> const CharT* {
  790|   151k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 151k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   151k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 151k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   151k|        presentation_type type = parse_presentation_type(*begin++);
  805|   151k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|   151k|        handler.on_type(type);
  810|   151k|        return begin;
  811|   151k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  37.9k|{
  489|  37.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  37.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  37.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  37.9k|        switch (ch) {
  493|  37.9k|            case L'<':
  494|  37.9k|                return align_type::left;
  495|  37.9k|            case L'>':
  496|  37.9k|                return align_type::right;
  497|  37.9k|            case L'^':
  498|  37.9k|                return align_type::center;
  499|  37.9k|            default:
  500|  37.9k|                return align_type::none;
  501|  37.9k|        }
  502|  37.9k|    };
  503|       |
  504|  37.9k|    auto potential_fill_len = code_point_length(begin, end);
  505|  37.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  |  Branch (153:45): [True: 0, False: 37.9k]
  |  |  |  Branch (153:45): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  506|  37.9k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  37.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  37.9k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  37.9k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  37.9k|    const auto begin_before_fill = begin;
  516|  37.9k|    begin += potential_fill_len;
  517|       |
  518|  37.9k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 37.9k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  37.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  37.9k|    const auto begin_after_fill = begin;
  524|  37.9k|    ++begin;
  525|       |
  526|  37.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 37.9k, False: 0]
  ------------------
  527|  37.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  37.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 37.9k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  37.9k|    }
  535|       |
  536|  37.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 37.9k, False: 0]
  ------------------
  537|  37.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 37.9k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  37.9k|        return begin_before_fill;
  542|  37.9k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  37.9k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|  75.8k|    auto check_align = [](wchar_t ch) {
  492|  75.8k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 75.8k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 75.8k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 75.8k]
  ------------------
  498|      0|                return align_type::center;
  499|  75.8k|            default:
  ------------------
  |  Branch (499:13): [True: 75.8k, False: 0]
  ------------------
  500|  75.8k|                return align_type::none;
  501|  75.8k|        }
  502|  75.8k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  37.9k|{
  554|  37.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  37.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  37.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  37.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 37.9k, False: 0]
  |  Branch (556:33): [True: 0, False: 37.9k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  37.9k|    return begin;
  567|  37.9k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1044|  37.9k|    {
 1045|  37.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  37.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 37.9k, False: 0]
  ------------------
 1047|  37.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 37.9k, False: 0]
  ------------------
 1048|  37.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 37.9k]
  ------------------
 1049|  37.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  37.9k|        Handler::on_localized();
 1057|  37.9k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  3.44M|{
  962|  3.44M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  3.44M|    handler.check_args_exhausted();
  964|  3.44M|    return handler.get_error();
  965|  3.44M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  3.44M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  3.44M|    auto begin = format.data();
  931|  3.44M|    auto it = begin;
  932|  3.44M|    const auto end = format.data() + format.size();
  933|       |
  934|  6.31M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 3.44M, False: 2.87M]
  ------------------
  935|  3.44M|        const auto ch = *it++;
  936|  3.44M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 3.44M, False: 0]
  ------------------
  937|  3.44M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  3.44M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  3.44M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 568k, False: 2.87M]
  ------------------
  941|   568k|                return;
  942|   568k|            }
  943|  3.44M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  3.44M|    }
  954|       |
  955|  2.87M|    handler.on_literal_text(begin, end);
  956|  2.87M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  859|  3.44M|{
  860|  3.44M|    struct id_adapter {
  861|  3.44M|        constexpr void operator()()
  862|  3.44M|        {
  863|  3.44M|            arg_id = handler.on_arg_id();
  864|  3.44M|        }
  865|  3.44M|        constexpr void operator()(std::size_t id)
  866|  3.44M|        {
  867|  3.44M|            arg_id = handler.on_arg_id(id);
  868|  3.44M|        }
  869|       |
  870|  3.44M|        constexpr void on_error(const char* msg)
  871|  3.44M|        {
  872|  3.44M|            SCN_UNLIKELY_ATTR
  873|  3.44M|            handler.on_error(msg);
  874|  3.44M|        }
  875|       |
  876|  3.44M|        Handler& handler;
  877|  3.44M|        std::size_t arg_id;
  878|  3.44M|    };
  879|       |
  880|  3.44M|    ++begin;
  881|  3.44M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  3.44M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 3.44M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  3.44M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 3.44M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  3.44M|    else {
  893|  3.44M|        auto adapter = id_adapter{handler, 0};
  894|  3.44M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  3.44M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  3.44M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 3.44M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  3.44M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 3.44M, False: 0]
  ------------------
  905|  3.44M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  3.44M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  3.44M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  6.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.44M]
  |  |  |  Branch (153:45): [True: 0, False: 3.44M]
  |  |  |  Branch (153:45): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|  3.44M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  3.44M|    }
  921|  3.44M|    return begin + 1;
  922|  3.44M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  3.44M|{
  400|  3.44M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  3.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  3.44M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 3.44M, False: 0]
  |  Branch (401:26): [True: 0, False: 3.44M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  3.44M|    handler();
  406|  3.44M|    return begin;
  407|  3.44M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  3.44M|        {
  863|  3.44M|            arg_id = handler.on_arg_id();
  864|  3.44M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  3.44M|    {
 1040|  3.44M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  3.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  3.44M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  788|  3.44M|{
  789|  3.44M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.44M|        if (*begin == CharT{'['}) {
  791|  3.44M|            auto set = parse_presentation_set(begin, end, handler);
  792|  3.44M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  3.44M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  3.44M|                return begin;
  797|  3.44M|            }
  798|  3.44M|            handler.on_character_set_string(set);
  799|  3.44M|            return begin;
  800|  3.44M|        }
  801|  3.44M|        if (*begin == CharT{'/'}) {
  802|  3.44M|            return parse_presentation_regex(begin, end, handler);
  803|  3.44M|        }
  804|  3.44M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.44M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  3.44M|            handler.on_error("Invalid type specifier in format string");
  807|  3.44M|            return begin;
  808|  3.44M|        }
  809|  3.44M|        handler.on_type(type);
  810|  3.44M|        return begin;
  811|  3.44M|    };
  812|       |
  813|  3.44M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 3.44M, False: 0]
  |  Branch (813:28): [True: 3.44M, False: 0]
  ------------------
  814|  3.44M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 3.44M, False: 0]
  |  Branch (814:36): [True: 2.52M, False: 913k]
  ------------------
  815|  2.52M|        return do_presentation();
  816|  2.52M|    }
  817|       |
  818|   913k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   913k|    begin = parse_align(begin, end, handler);
  824|   913k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   913k|    begin = parse_width(begin, end, handler);
  830|   913k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   913k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 913k, False: 0]
  ------------------
  836|   913k|        handler.on_localized();
  837|   913k|        ++begin;
  838|   913k|    }
  839|   913k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   913k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 913k, False: 0]
  |  Branch (844:25): [True: 0, False: 913k]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|   913k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   913k|    return begin;
  853|   913k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  4.01M|{
  464|  4.01M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.98M, False: 1.02M]
  |  Branch (464:33): [True: 2.98M, False: 0]
  ------------------
  465|  4.01M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.02M, False: 0]
  |  Branch (465:33): [True: 1.02M, False: 0]
  ------------------
  466|  4.01M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  2.52M|    auto do_presentation = [&]() -> const CharT* {
  790|  2.52M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 2.52M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  2.52M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 2.52M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  2.52M|        presentation_type type = parse_presentation_type(*begin++);
  805|  2.52M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.52M]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|  2.52M|        handler.on_type(type);
  810|  2.52M|        return begin;
  811|  2.52M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.98M|{
  412|  2.98M|    switch (type) {
  413|      0|        case 'b':
  ------------------
  |  Branch (413:9): [True: 0, False: 2.98M]
  ------------------
  414|      0|        case 'B':
  ------------------
  |  Branch (414:9): [True: 0, False: 2.98M]
  ------------------
  415|      0|            return presentation_type::int_binary;
  416|      0|        case 'd':
  ------------------
  |  Branch (416:9): [True: 0, False: 2.98M]
  ------------------
  417|      0|            return presentation_type::int_decimal;
  418|      0|        case 'i':
  ------------------
  |  Branch (418:9): [True: 0, False: 2.98M]
  ------------------
  419|      0|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.98M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|      0|        case 'o':
  ------------------
  |  Branch (422:9): [True: 0, False: 2.98M]
  ------------------
  423|      0|            return presentation_type::int_octal;
  424|      0|        case 'x':
  ------------------
  |  Branch (424:9): [True: 0, False: 2.98M]
  ------------------
  425|      0|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.98M]
  ------------------
  426|      0|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.98M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.98M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|  1.13M|        case 'a':
  ------------------
  |  Branch (430:9): [True: 1.13M, False: 1.84M]
  ------------------
  431|  1.13M|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.98M]
  ------------------
  432|  1.13M|            return presentation_type::float_hex;
  433|   232k|        case 'e':
  ------------------
  |  Branch (433:9): [True: 232k, False: 2.75M]
  ------------------
  434|   232k|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.98M]
  ------------------
  435|   232k|            return presentation_type::float_scientific;
  436|   659k|        case 'f':
  ------------------
  |  Branch (436:9): [True: 659k, False: 2.32M]
  ------------------
  437|   659k|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.98M]
  ------------------
  438|   659k|            return presentation_type::float_fixed;
  439|   954k|        case 'g':
  ------------------
  |  Branch (439:9): [True: 954k, False: 2.03M]
  ------------------
  440|   954k|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.98M]
  ------------------
  441|   954k|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.98M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.98M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.98M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.98M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.98M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.98M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|      0|        default:
  ------------------
  |  Branch (456:9): [True: 0, False: 2.98M]
  ------------------
  457|      0|            return presentation_type::none;
  458|  2.98M|    }
  459|  2.98M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   913k|{
  489|   913k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   913k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   913k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   913k|        switch (ch) {
  493|   913k|            case L'<':
  494|   913k|                return align_type::left;
  495|   913k|            case L'>':
  496|   913k|                return align_type::right;
  497|   913k|            case L'^':
  498|   913k|                return align_type::center;
  499|   913k|            default:
  500|   913k|                return align_type::none;
  501|   913k|        }
  502|   913k|    };
  503|       |
  504|   913k|    auto potential_fill_len = code_point_length(begin, end);
  505|   913k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  |  Branch (153:45): [True: 0, False: 913k]
  |  |  |  Branch (153:45): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  506|   913k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   913k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   913k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   913k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   913k|    const auto begin_before_fill = begin;
  516|   913k|    begin += potential_fill_len;
  517|       |
  518|   913k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 913k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   913k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   913k|    const auto begin_after_fill = begin;
  524|   913k|    ++begin;
  525|       |
  526|   913k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 913k, False: 0]
  ------------------
  527|   913k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   913k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 913k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   913k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 913k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   913k|    }
  535|       |
  536|   913k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 913k, False: 0]
  ------------------
  537|   913k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 913k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   913k|        return begin_before_fill;
  542|   913k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   913k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.02M|{
  471|  1.02M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.02M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.02M|        return 1;
  474|  1.02M|    }
  475|  1.02M|    else {
  476|  1.02M|        const auto lengths =
  477|  1.02M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.02M|            "\3\4";
  479|  1.02M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.02M|        return len;
  481|  1.02M|    }
  482|  1.02M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.82M|    auto check_align = [](wchar_t ch) {
  492|  1.82M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.82M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.82M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.82M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.82M|            default:
  ------------------
  |  Branch (499:13): [True: 1.82M, False: 0]
  ------------------
  500|  1.82M|                return align_type::none;
  501|  1.82M|        }
  502|  1.82M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   913k|{
  554|   913k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   913k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   913k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   913k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 913k, False: 0]
  |  Branch (556:33): [True: 0, False: 913k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   913k|    return begin;
  567|   913k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1044|   913k|    {
 1045|   913k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|   913k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 913k, False: 0]
  ------------------
 1047|   913k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 913k, False: 0]
  ------------------
 1048|   913k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 913k]
  ------------------
 1049|   913k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|   913k|        Handler::on_localized();
 1057|   913k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   568k|{
  962|   568k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   568k|    handler.check_args_exhausted();
  964|   568k|    return handler.get_error();
  965|   568k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   568k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   568k|    auto begin = format.data();
  931|   568k|    auto it = begin;
  932|   568k|    const auto end = format.data() + format.size();
  933|       |
  934|   568k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 568k, False: 0]
  ------------------
  935|   568k|        const auto ch = *it++;
  936|   568k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 568k, False: 0]
  ------------------
  937|   568k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   568k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   568k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 568k, False: 0]
  ------------------
  941|   568k|                return;
  942|   568k|            }
  943|   568k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   568k|    }
  954|       |
  955|      0|    handler.on_literal_text(begin, end);
  956|      0|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  859|   568k|{
  860|   568k|    struct id_adapter {
  861|   568k|        constexpr void operator()()
  862|   568k|        {
  863|   568k|            arg_id = handler.on_arg_id();
  864|   568k|        }
  865|   568k|        constexpr void operator()(std::size_t id)
  866|   568k|        {
  867|   568k|            arg_id = handler.on_arg_id(id);
  868|   568k|        }
  869|       |
  870|   568k|        constexpr void on_error(const char* msg)
  871|   568k|        {
  872|   568k|            SCN_UNLIKELY_ATTR
  873|   568k|            handler.on_error(msg);
  874|   568k|        }
  875|       |
  876|   568k|        Handler& handler;
  877|   568k|        std::size_t arg_id;
  878|   568k|    };
  879|       |
  880|   568k|    ++begin;
  881|   568k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   568k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 568k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   568k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 568k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   568k|    else {
  893|   568k|        auto adapter = id_adapter{handler, 0};
  894|   568k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   568k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   568k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 568k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   568k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 568k, False: 0]
  ------------------
  905|   568k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   568k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   568k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 568k]
  |  |  |  Branch (153:45): [True: 0, False: 568k]
  |  |  |  Branch (153:45): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
  911|      0|                handler.on_error("Unknown format specifier");
  912|      0|                return begin;
  913|      0|            }
  914|   568k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   568k|    }
  921|   568k|    return begin + 1;
  922|   568k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   568k|{
  400|   568k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   568k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   568k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   568k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 568k, False: 0]
  |  Branch (401:26): [True: 0, False: 568k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   568k|    handler();
  406|   568k|    return begin;
  407|   568k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   568k|        {
  863|   568k|            arg_id = handler.on_arg_id();
  864|   568k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   568k|    {
 1040|   568k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   568k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   568k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   568k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  788|   568k|{
  789|   568k|    auto do_presentation = [&]() -> const CharT* {
  790|   568k|        if (*begin == CharT{'['}) {
  791|   568k|            auto set = parse_presentation_set(begin, end, handler);
  792|   568k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   568k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   568k|                return begin;
  797|   568k|            }
  798|   568k|            handler.on_character_set_string(set);
  799|   568k|            return begin;
  800|   568k|        }
  801|   568k|        if (*begin == CharT{'/'}) {
  802|   568k|            return parse_presentation_regex(begin, end, handler);
  803|   568k|        }
  804|   568k|        presentation_type type = parse_presentation_type(*begin++);
  805|   568k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   568k|            handler.on_error("Invalid type specifier in format string");
  807|   568k|            return begin;
  808|   568k|        }
  809|   568k|        handler.on_type(type);
  810|   568k|        return begin;
  811|   568k|    };
  812|       |
  813|   568k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 568k, False: 0]
  |  Branch (813:28): [True: 568k, False: 0]
  ------------------
  814|   568k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 568k, False: 0]
  |  Branch (814:36): [True: 455k, False: 113k]
  ------------------
  815|   455k|        return do_presentation();
  816|   455k|    }
  817|       |
  818|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   113k|    begin = parse_align(begin, end, handler);
  824|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   113k|    begin = parse_width(begin, end, handler);
  830|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   113k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 113k, False: 0]
  ------------------
  836|   113k|        handler.on_localized();
  837|   113k|        ++begin;
  838|   113k|    }
  839|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   113k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 113k, False: 0]
  |  Branch (844:25): [True: 0, False: 113k]
  ------------------
  845|      0|        do_presentation();
  846|      0|    }
  847|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   113k|    return begin;
  853|   113k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   455k|    auto do_presentation = [&]() -> const CharT* {
  790|   455k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 455k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   455k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 455k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   455k|        presentation_type type = parse_presentation_type(*begin++);
  805|   455k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 455k]
  |  |  ------------------
  ------------------
  806|      0|            handler.on_error("Invalid type specifier in format string");
  807|      0|            return begin;
  808|      0|        }
  809|   455k|        handler.on_type(type);
  810|   455k|        return begin;
  811|   455k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   113k|{
  489|   113k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   113k|        switch (ch) {
  493|   113k|            case L'<':
  494|   113k|                return align_type::left;
  495|   113k|            case L'>':
  496|   113k|                return align_type::right;
  497|   113k|            case L'^':
  498|   113k|                return align_type::center;
  499|   113k|            default:
  500|   113k|                return align_type::none;
  501|   113k|        }
  502|   113k|    };
  503|       |
  504|   113k|    auto potential_fill_len = code_point_length(begin, end);
  505|   113k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  |  Branch (153:45): [True: 0, False: 113k]
  |  |  |  Branch (153:45): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  506|   113k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   113k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   113k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   113k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   113k|    const auto begin_before_fill = begin;
  516|   113k|    begin += potential_fill_len;
  517|       |
  518|   113k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 113k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   113k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   113k|    const auto begin_after_fill = begin;
  524|   113k|    ++begin;
  525|       |
  526|   113k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 113k, False: 0]
  ------------------
  527|   113k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   113k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 113k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   113k|    }
  535|       |
  536|   113k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 113k, False: 0]
  ------------------
  537|   113k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 113k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   113k|        return begin_before_fill;
  542|   113k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   113k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   227k|    auto check_align = [](wchar_t ch) {
  492|   227k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 227k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 227k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 227k]
  ------------------
  498|      0|                return align_type::center;
  499|   227k|            default:
  ------------------
  |  Branch (499:13): [True: 227k, False: 0]
  ------------------
  500|   227k|                return align_type::none;
  501|   227k|        }
  502|   227k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   113k|{
  554|   113k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   113k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 113k, False: 0]
  |  Branch (556:33): [True: 0, False: 113k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   113k|    return begin;
  567|   113k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1044|   113k|    {
 1045|   113k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|   113k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 113k, False: 0]
  ------------------
 1047|   113k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 113k, False: 0]
  ------------------
 1048|   113k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 113k]
  ------------------
 1049|   113k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|   113k|        Handler::on_localized();
 1057|   113k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  5.28M|{
  226|  5.28M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  5.28M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  5.28M|                  "\n"
  230|  5.28M|                  "Unsupported range type given as input to a scanning "
  231|  5.28M|                  "function.\n"
  232|  5.28M|                  "A range needs to have a character type (value type) "
  233|  5.28M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  5.28M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  5.28M|                  "to be included.\n"
  236|  5.28M|                  "See the scnlib documentation for more details.");
  237|  5.28M|    static_assert(
  238|  5.28M|        !std::is_same_v<T, custom_char_traits>,
  239|  5.28M|        "\n"
  240|  5.28M|        "Unsupported range type given as input to a scanning "
  241|  5.28M|        "function.\n"
  242|  5.28M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  5.28M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  5.28M|        "not supported.");
  245|  5.28M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  5.28M|                  "\n"
  247|  5.28M|                  "Unsupported range type given as input to a scanning "
  248|  5.28M|                  "function.\n"
  249|  5.28M|                  "file_marker_found cannot be used as an "
  250|  5.28M|                  "source range type to scn::scan.\n"
  251|  5.28M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  5.28M|                  "and do not provide an explicit source range, "
  253|  5.28M|                  "or use scn::scan with a FILE* directly.");
  254|  5.28M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  5.28M|                  "\n"
  256|  5.28M|                  "Unsupported range type given as input to a scanning "
  257|  5.28M|                  "function.\n"
  258|  5.28M|                  "In order to be scannable, a range needs to satisfy "
  259|  5.28M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  5.28M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  5.28M|                  "\n"
  262|  5.28M|                  "Unsupported range type given as input to a scanning "
  263|  5.28M|                  "function.\n"
  264|  5.28M|                  "A range needs to model forward_range and have a valid "
  265|  5.28M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  5.28M|                  "Examples of scannable ranges are std::string, "
  267|  5.28M|                  "std::string_view, "
  268|  5.28M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  5.28M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  5.28M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  5.28M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  5.28M|{
  153|  5.28M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  5.28M|        return std::basic_string_view{ranges::data(r),
  155|  5.28M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  5.28M|    }
  162|  5.28M|    else {
  163|  5.28M|        return invalid_char_type{};
  164|  5.28M|    }
  165|  5.28M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   246k|{
  226|   246k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   246k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   246k|                  "\n"
  230|   246k|                  "Unsupported range type given as input to a scanning "
  231|   246k|                  "function.\n"
  232|   246k|                  "A range needs to have a character type (value type) "
  233|   246k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   246k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   246k|                  "to be included.\n"
  236|   246k|                  "See the scnlib documentation for more details.");
  237|   246k|    static_assert(
  238|   246k|        !std::is_same_v<T, custom_char_traits>,
  239|   246k|        "\n"
  240|   246k|        "Unsupported range type given as input to a scanning "
  241|   246k|        "function.\n"
  242|   246k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   246k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   246k|        "not supported.");
  245|   246k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   246k|                  "\n"
  247|   246k|                  "Unsupported range type given as input to a scanning "
  248|   246k|                  "function.\n"
  249|   246k|                  "file_marker_found cannot be used as an "
  250|   246k|                  "source range type to scn::scan.\n"
  251|   246k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   246k|                  "and do not provide an explicit source range, "
  253|   246k|                  "or use scn::scan with a FILE* directly.");
  254|   246k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   246k|                  "\n"
  256|   246k|                  "Unsupported range type given as input to a scanning "
  257|   246k|                  "function.\n"
  258|   246k|                  "In order to be scannable, a range needs to satisfy "
  259|   246k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   246k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   246k|                  "\n"
  262|   246k|                  "Unsupported range type given as input to a scanning "
  263|   246k|                  "function.\n"
  264|   246k|                  "A range needs to model forward_range and have a valid "
  265|   246k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   246k|                  "Examples of scannable ranges are std::string, "
  267|   246k|                  "std::string_view, "
  268|   246k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   246k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   246k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   246k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   246k|{
  196|   246k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   246k|        return file_marker_found{};
  198|   246k|    }
  199|   246k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   246k|        if constexpr (ranges::input_range<Range>) {
  201|   246k|            return insufficient_range{};
  202|   246k|        }
  203|   246k|        else {
  204|   246k|            return invalid_input_range{};
  205|   246k|        }
  206|   246k|    }
  207|   246k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   246k|        return invalid_char_type{};
  209|   246k|    }
  210|   246k|    else {
  211|   246k|        return make_forward_scan_buffer(r);
  212|   246k|    }
  213|   246k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  4.81M|{
  226|  4.81M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  4.81M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  4.81M|                  "\n"
  230|  4.81M|                  "Unsupported range type given as input to a scanning "
  231|  4.81M|                  "function.\n"
  232|  4.81M|                  "A range needs to have a character type (value type) "
  233|  4.81M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  4.81M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  4.81M|                  "to be included.\n"
  236|  4.81M|                  "See the scnlib documentation for more details.");
  237|  4.81M|    static_assert(
  238|  4.81M|        !std::is_same_v<T, custom_char_traits>,
  239|  4.81M|        "\n"
  240|  4.81M|        "Unsupported range type given as input to a scanning "
  241|  4.81M|        "function.\n"
  242|  4.81M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  4.81M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  4.81M|        "not supported.");
  245|  4.81M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  4.81M|                  "\n"
  247|  4.81M|                  "Unsupported range type given as input to a scanning "
  248|  4.81M|                  "function.\n"
  249|  4.81M|                  "file_marker_found cannot be used as an "
  250|  4.81M|                  "source range type to scn::scan.\n"
  251|  4.81M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  4.81M|                  "and do not provide an explicit source range, "
  253|  4.81M|                  "or use scn::scan with a FILE* directly.");
  254|  4.81M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  4.81M|                  "\n"
  256|  4.81M|                  "Unsupported range type given as input to a scanning "
  257|  4.81M|                  "function.\n"
  258|  4.81M|                  "In order to be scannable, a range needs to satisfy "
  259|  4.81M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  4.81M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  4.81M|                  "\n"
  262|  4.81M|                  "Unsupported range type given as input to a scanning "
  263|  4.81M|                  "function.\n"
  264|  4.81M|                  "A range needs to model forward_range and have a valid "
  265|  4.81M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  4.81M|                  "Examples of scannable ranges are std::string, "
  267|  4.81M|                  "std::string_view, "
  268|  4.81M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  4.81M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  4.81M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  4.81M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  4.81M|{
  153|  4.81M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  4.81M|        return std::basic_string_view{ranges::data(r),
  155|  4.81M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  4.81M|    }
  162|  4.81M|    else {
  163|  4.81M|        return invalid_char_type{};
  164|  4.81M|    }
  165|  4.81M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   739k|{
  226|   739k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   739k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   739k|                  "\n"
  230|   739k|                  "Unsupported range type given as input to a scanning "
  231|   739k|                  "function.\n"
  232|   739k|                  "A range needs to have a character type (value type) "
  233|   739k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   739k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   739k|                  "to be included.\n"
  236|   739k|                  "See the scnlib documentation for more details.");
  237|   739k|    static_assert(
  238|   739k|        !std::is_same_v<T, custom_char_traits>,
  239|   739k|        "\n"
  240|   739k|        "Unsupported range type given as input to a scanning "
  241|   739k|        "function.\n"
  242|   739k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   739k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   739k|        "not supported.");
  245|   739k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   739k|                  "\n"
  247|   739k|                  "Unsupported range type given as input to a scanning "
  248|   739k|                  "function.\n"
  249|   739k|                  "file_marker_found cannot be used as an "
  250|   739k|                  "source range type to scn::scan.\n"
  251|   739k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   739k|                  "and do not provide an explicit source range, "
  253|   739k|                  "or use scn::scan with a FILE* directly.");
  254|   739k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   739k|                  "\n"
  256|   739k|                  "Unsupported range type given as input to a scanning "
  257|   739k|                  "function.\n"
  258|   739k|                  "In order to be scannable, a range needs to satisfy "
  259|   739k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   739k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   739k|                  "\n"
  262|   739k|                  "Unsupported range type given as input to a scanning "
  263|   739k|                  "function.\n"
  264|   739k|                  "A range needs to model forward_range and have a valid "
  265|   739k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   739k|                  "Examples of scannable ranges are std::string, "
  267|   739k|                  "std::string_view, "
  268|   739k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   739k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   739k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   739k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   739k|{
  196|   739k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   739k|        return file_marker_found{};
  198|   739k|    }
  199|   739k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   739k|        if constexpr (ranges::input_range<Range>) {
  201|   739k|            return insufficient_range{};
  202|   739k|        }
  203|   739k|        else {
  204|   739k|            return invalid_input_range{};
  205|   739k|        }
  206|   739k|    }
  207|   739k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   739k|        return invalid_char_type{};
  209|   739k|    }
  210|   739k|    else {
  211|   739k|        return make_forward_scan_buffer(r);
  212|   739k|    }
  213|   739k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  17.1M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  3.93M|    {
   45|  3.93M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  3.93M|    {
   66|  3.93M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  3.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.93M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  3.93M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  3.93M|        do_check_arg_id(id);
   74|  3.93M|        return id;
   75|  3.93M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  3.93M|{
  210|  3.93M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  3.93M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  3.93M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  3.93M|    {
   61|  3.93M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  3.93M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  7.86M|    {
   50|  7.86M|        return m_format.data();
   51|  7.86M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  4.01M|    {
   45|  4.01M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  4.01M|    {
   66|  4.01M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  4.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.01M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  4.01M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  4.01M|        do_check_arg_id(id);
   74|  4.01M|        return id;
   75|  4.01M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  4.01M|{
  210|  4.01M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  4.01M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  4.01M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  4.01M|    {
   61|  4.01M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.01M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  8.02M|    {
   50|  8.02M|        return m_format.data();
   51|  8.02M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  14.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  153|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  10.5M|    {
  482|  10.5M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  10.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  10.5M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  10.5M|    {
  473|  10.5M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  10.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  10.5M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.81M|    {
  482|  4.81M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.81M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  4.81M|    {
  473|  4.81M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.81M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.98M|    {
  482|  4.98M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.98M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  4.98M|    {
  473|  4.98M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.98M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.55M|    {
  549|  3.55M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.55M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.55M|    {
  541|  3.55M|        return ranges::distance(lhs, rhs);
  542|  3.55M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   625k|    {
  513|   625k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   625k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   625k|    {
  498|   625k|        it.batch_advance(n);
  499|   625k|        return it;
  500|   625k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  4.31M|    {
  482|  4.31M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  4.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  4.31M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  4.31M|    {
  473|  4.31M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  4.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  4.31M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.87M|    {
  549|  2.87M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.87M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.87M|    {
  541|  2.87M|        return ranges::distance(lhs, rhs);
  542|  2.87M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.13M|    {
  513|  1.13M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.13M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.13M|    {
  498|  1.13M|        it.batch_advance(n);
  499|  1.13M|        return it;
  500|  1.13M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.51M|    {
  482|  2.51M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.51M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSC_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeELm8EEmNS5_13make_unsignedISO_E4typeEE4typeE_EEOSH_:
  472|  2.51M|    {
  473|  2.51M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.51M|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  5.03M|{
  343|  5.03M|    return {ranges::next(ranges::begin(source), n),
  344|  5.03M|            make_vscan_result_range_end(source)};
  345|  5.03M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  5.03M|{
  330|  5.03M|    return ranges::end(source);
  331|  5.03M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|  1.44M|    {
  253|  1.44M|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  5.03M|    {
  104|  5.03M|    }
_ZN3scn2v26detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
   38|  2.60M|    {
   39|  2.60M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  5.03M|    {
  121|  5.03M|        return ranges::begin(m_range);
  122|  5.03M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|  1.75M|    {
  253|  1.75M|    }
_ZN3scn2v26detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
   38|  3.17M|    {
   39|  3.17M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|  1.83M|    {
  253|  1.83M|    }
_ZN3scn2v26detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
   38|  3.32M|    {
   39|  3.32M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  4.07M|{
  343|  4.07M|    return {ranges::next(ranges::begin(source), n),
  344|  4.07M|            make_vscan_result_range_end(source)};
  345|  4.07M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  4.07M|{
  330|  4.07M|    return ranges::end(source);
  331|  4.07M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJfEEC2ES9_ONSt3__15tupleIJfEEE:
  252|  1.15M|    {
  253|  1.15M|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  4.07M|    {
  104|  4.07M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  4.07M|    {
  121|  4.07M|        return ranges::begin(m_range);
  122|  4.07M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJdEEC2ES9_ONSt3__15tupleIJdEEE:
  252|  1.42M|    {
  253|  1.42M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJeEEC2ES9_ONSt3__15tupleIJeEEE:
  252|  1.49M|    {
  253|  1.49M|    }

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   691k|{
  117|   691k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   691k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   691k|{
   77|   691k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   691k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   691k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   691k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   691k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.38M|{
   55|  1.38M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.8k, False: 1.30M]
  |  |  ------------------
  ------------------
   56|  75.8k|        return unexpected(result.error());
   57|  75.8k|    }
   58|  1.30M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.30M|    static_cast<    \
  |  |  247|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.30M|    static_cast<    \
  |  |  247|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.38M|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   691k|{
  201|   691k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   691k|                                                      format, {});
  203|   691k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   691k|{
  163|   691k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   691k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   691k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   691k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   691k|    static_cast<    \
  |  |  247|   691k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   691k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   148k|{
  248|   148k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   148k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   148k|{
  229|   148k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   148k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.32k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.32k|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   142k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   142k|    static_cast<    \
  |  |  247|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   142k|    static_cast<    \
  |  |  247|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   148k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   828k|{
  117|   828k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   828k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   828k|{
   77|   828k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   828k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   828k|    static_cast<    \
  |  |  247|   828k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   828k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   828k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   828k|    static_cast<    \
  |  |  247|   828k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   828k|    static_cast<    \
  |  |  247|   828k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   828k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.65M|{
   55|  1.65M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.8k, False: 1.58M]
  |  |  ------------------
  ------------------
   56|  75.8k|        return unexpected(result.error());
   57|  75.8k|    }
   58|  1.58M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.58M|    static_cast<    \
  |  |  247|  1.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.58M|    static_cast<    \
  |  |  247|  1.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.65M|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   828k|{
  201|   828k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   828k|                                                      format, {});
  203|   828k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   828k|{
  163|   828k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   828k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   828k|    static_cast<    \
  |  |  247|   828k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   828k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   828k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   828k|    static_cast<    \
  |  |  247|   828k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   828k|    static_cast<    \
  |  |  247|   828k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   828k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   176k|{
  248|   176k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   176k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   176k|{
  229|   176k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   176k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.32k, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.32k|    }                                                  \
  |  |  |  |   70|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   170k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   170k|    static_cast<    \
  |  |  247|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   170k|    static_cast<    \
  |  |  247|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   176k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   864k|{
  117|   864k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   864k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   864k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   864k|{
   77|   864k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   864k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   864k|    static_cast<    \
  |  |  247|   864k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   864k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   864k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   864k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   864k|    static_cast<    \
  |  |  247|   864k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   864k|    static_cast<    \
  |  |  247|   864k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   864k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.72M|{
   55|  1.72M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.8k, False: 1.65M]
  |  |  ------------------
  ------------------
   56|  75.8k|        return unexpected(result.error());
   57|  75.8k|    }
   58|  1.65M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.65M|    static_cast<    \
  |  |  247|  1.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.65M|    static_cast<    \
  |  |  247|  1.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.72M|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   864k|{
  201|   864k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   864k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   864k|                                                      format, {});
  203|   864k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   864k|{
  163|   864k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   864k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   864k|    static_cast<    \
  |  |  247|   864k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   864k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   864k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   864k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   864k|    static_cast<    \
  |  |  247|   864k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   864k|    static_cast<    \
  |  |  247|   864k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   864k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   188k|{
  248|   188k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   188k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   188k|{
  229|   188k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   188k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.32k, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.32k|    }                                                  \
  |  |  |  |   70|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   181k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   181k|    static_cast<    \
  |  |  247|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   181k|    static_cast<    \
  |  |  247|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   188k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  37.9k|{
  117|  37.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  37.9k|}
_ZN3scn2v26detail9scan_implIcJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  37.9k|{
   77|  37.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  37.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  37.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  37.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  37.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  75.8k|{
   55|  75.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  75.8k|        return unexpected(result.error());
   57|  75.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  75.8k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  37.9k|{
  201|  37.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  37.9k|                                                      format, {});
  203|  37.9k|}
_ZN3scn2v26detail19scan_localized_implIcJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  37.9k|{
  163|  37.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  37.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  37.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  37.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  37.9k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  6.32k|{
  248|  6.32k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  6.32k|}
_ZN3scn2v26detail15scan_value_implIcfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.32k|{
  229|  6.32k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.32k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.32k|    }                                                  \
  |  |  |  |   70|  6.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.32k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  37.9k|{
  117|  37.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  37.9k|}
_ZN3scn2v26detail9scan_implIcJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  37.9k|{
   77|  37.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  37.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  37.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  37.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  37.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  75.8k|{
   55|  75.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  75.8k|        return unexpected(result.error());
   57|  75.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  75.8k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  37.9k|{
  201|  37.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  37.9k|                                                      format, {});
  203|  37.9k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  37.9k|{
  163|  37.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  37.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  37.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  37.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  37.9k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  6.32k|{
  248|  6.32k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  6.32k|}
_ZN3scn2v26detail15scan_value_implIcdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.32k|{
  229|  6.32k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.32k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.32k|    }                                                  \
  |  |  |  |   70|  6.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.32k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  37.9k|{
  117|  37.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  37.9k|}
_ZN3scn2v26detail9scan_implIcJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  37.9k|{
   77|  37.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  37.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  37.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  37.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  37.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  75.8k|{
   55|  75.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 75.8k, False: 0]
  |  |  ------------------
  ------------------
   56|  75.8k|        return unexpected(result.error());
   57|  75.8k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  75.8k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  37.9k|{
  201|  37.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  37.9k|                                                      format, {});
  203|  37.9k|}
_ZN3scn2v26detail19scan_localized_implIcJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  37.9k|{
  163|  37.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  37.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  37.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  37.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  37.9k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  6.32k|{
  248|  6.32k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  6.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  6.32k|}
_ZN3scn2v26detail15scan_value_implIceN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  6.32k|{
  229|  6.32k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  6.32k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  6.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.32k|    }                                                  \
  |  |  |  |   70|  6.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  6.32k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JfEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   635k|{
   77|   635k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   635k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   635k|    static_cast<    \
  |  |  247|   635k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   635k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   635k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   635k|    static_cast<    \
  |  |  247|   635k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   635k|    static_cast<    \
  |  |  247|   635k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   635k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.27M|{
   55|  1.27M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 1.04M]
  |  |  ------------------
  ------------------
   56|   227k|        return unexpected(result.error());
   57|   227k|    }
   58|  1.04M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.04M|    static_cast<    \
  |  |  247|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.27M|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   635k|{
  163|   635k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   635k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   635k|    static_cast<    \
  |  |  247|   635k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   635k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   635k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   635k|    static_cast<    \
  |  |  247|   635k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   635k|    static_cast<    \
  |  |  247|   635k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   635k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   132k|{
  229|   132k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   132k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.9k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.9k|    }                                                  \
  |  |  |  |   70|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   113k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   132k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JdEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   758k|{
   77|   758k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   758k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   758k|    static_cast<    \
  |  |  247|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   758k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   758k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   758k|    static_cast<    \
  |  |  247|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   758k|    static_cast<    \
  |  |  247|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   758k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.51M|{
   55|  1.51M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 1.28M]
  |  |  ------------------
  ------------------
   56|   227k|        return unexpected(result.error());
   57|   227k|    }
   58|  1.28M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.28M|    static_cast<    \
  |  |  247|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.28M|    static_cast<    \
  |  |  247|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.51M|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   758k|{
  163|   758k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   758k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   758k|    static_cast<    \
  |  |  247|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   758k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   758k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   758k|    static_cast<    \
  |  |  247|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   758k|    static_cast<    \
  |  |  247|   758k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   758k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   157k|{
  229|   157k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   157k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.9k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.9k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   138k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   138k|    static_cast<    \
  |  |  247|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   138k|    static_cast<    \
  |  |  247|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   157k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JeEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   785k|{
   77|   785k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   785k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   785k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   785k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   785k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   785k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.57M|{
   55|  1.57M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 1.34M]
  |  |  ------------------
  ------------------
   56|   227k|        return unexpected(result.error());
   57|   227k|    }
   58|  1.34M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.34M|    static_cast<    \
  |  |  247|  1.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.34M|    static_cast<    \
  |  |  247|  1.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.57M|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   785k|{
  163|   785k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   785k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   785k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   785k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   785k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   785k|    static_cast<    \
  |  |  247|   785k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   785k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   166k|{
  229|   166k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   166k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.9k, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.9k|    }                                                  \
  |  |  |  |   70|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   147k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   147k|    static_cast<    \
  |  |  247|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   147k|    static_cast<    \
  |  |  247|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   166k|}
_ZN3scn2v26detail9scan_implIwJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   113k|{
   77|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   113k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   113k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   227k|{
   55|   227k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 0]
  |  |  ------------------
  ------------------
   56|   227k|        return unexpected(result.error());
   57|   227k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   227k|}
_ZN3scn2v26detail19scan_localized_implIwJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JfEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   113k|{
  163|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   113k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   113k|}
_ZN3scn2v26detail15scan_value_implIwfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  18.9k|{
  229|  18.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  18.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.9k|    }                                                  \
  |  |  |  |   70|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  18.9k|}
_ZN3scn2v26detail9scan_implIwJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   113k|{
   77|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   113k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   113k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   227k|{
   55|   227k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 0]
  |  |  ------------------
  ------------------
   56|   227k|        return unexpected(result.error());
   57|   227k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   227k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   113k|{
  163|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   113k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   113k|}
_ZN3scn2v26detail15scan_value_implIwdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  18.9k|{
  229|  18.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  18.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.9k|    }                                                  \
  |  |  |  |   70|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  18.9k|}
_ZN3scn2v26detail9scan_implIwJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|   113k|{
   77|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   113k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   113k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   227k|{
   55|   227k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 227k, False: 0]
  |  |  ------------------
  ------------------
   56|   227k|        return unexpected(result.error());
   57|   227k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   227k|}
_ZN3scn2v26detail19scan_localized_implIwJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JeEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|   113k|{
  163|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   113k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   113k|}
_ZN3scn2v26detail15scan_value_implIweN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  18.9k|{
  229|  18.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  18.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.9k|    }                                                  \
  |  |  |  |   70|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  18.9k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   246k|{
  486|   246k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   246k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   246k|    {
  378|   246k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   246k|    {
  360|   246k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   246k|    {
  129|   246k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   246k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.23M|    {
  382|  1.23M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 636, False: 1.23M]
  ------------------
  383|    636|            return false;
  384|    636|        }
  385|  1.23M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 985k, False: 246k]
  ------------------
  386|   985k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   985k|                                          this->m_current_view.begin(),
  388|   985k|                                          this->m_current_view.end());
  389|   985k|        }
  390|  1.23M|        m_latest = *m_cursor;
  391|  1.23M|        ++m_cursor;
  392|  1.23M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.23M|        return true;
  394|  1.23M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   246k|    {
   49|   246k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   246k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   246k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   739k|{
  486|   739k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   739k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   739k|    {
  378|   739k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   739k|    {
  360|   739k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   739k|    {
  129|   739k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   739k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  5.29M|    {
  382|  5.29M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 954, False: 5.29M]
  ------------------
  383|    954|            return false;
  384|    954|        }
  385|  5.29M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 4.55M, False: 739k]
  ------------------
  386|  4.55M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  4.55M|                                          this->m_current_view.begin(),
  388|  4.55M|                                          this->m_current_view.end());
  389|  4.55M|        }
  390|  5.29M|        m_latest = *m_cursor;
  391|  5.29M|        ++m_cursor;
  392|  5.29M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  5.29M|        return true;
  394|  5.29M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   739k|    {
   49|   739k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   739k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   739k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  28.6M|    {
  173|  28.6M|        return m_end == nullptr;
  174|  28.6M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|  1.80M|    {
  189|  1.80M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.80M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.80M|        return parent()->get_segment_starting_at(position());
  195|  1.80M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  15.5M|    {
  183|  15.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  15.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  15.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|  1.80M|    {
   79|  1.80M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 568k, False: 1.23M]
  |  |  ------------------
  ------------------
   80|  1.80M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   568k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   568k|        }
   83|  1.23M|        const auto start = pos - m_putback_buffer.size();
   84|  1.23M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.80M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   625k|    {
  178|   625k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   625k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  3.41M|    {
  168|  3.41M|        return m_position;
  169|  3.41M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   739k|    {
  101|   739k|        return m_is_contiguous;
  102|   739k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|   121M|    {
  173|   121M|        return m_end == nullptr;
  174|   121M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  7.62M|    {
  189|  7.62M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 7.62M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  7.62M|        return parent()->get_segment_starting_at(position());
  195|  7.62M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  66.6M|    {
  183|  66.6M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  66.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  66.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  66.6M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  7.62M|    {
   79|  7.62M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  7.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.18M, False: 4.43M]
  |  |  ------------------
  ------------------
   80|  7.62M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  3.18M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  3.18M|        }
   83|  4.43M|        const auto start = pos - m_putback_buffer.size();
   84|  4.43M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  4.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  7.62M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.87M|    {
  178|  1.87M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.87M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  15.4M|    {
  168|  15.4M|        return m_position;
  169|  15.4M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  2.21M|    {
  101|  2.21M|        return m_is_contiguous;
  102|  2.21M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   246k|{
  322|   246k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 246k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   246k|    return ranges::subrange{forward_iterator{this, 0},
  327|   246k|                            ranges_std::default_sentinel};
  328|   246k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   246k|    {
  155|   246k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   246k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   246k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.55M|    {
  258|  1.55M|        return x.is_at_end();
  259|  1.55M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  2.86M|    {
  302|  2.86M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.86M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.86M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.86M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.86M|        return !read_at_position();
  309|  2.86M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  7.52M|    {
  282|  7.52M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  7.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  7.52M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 7.52M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  7.52M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  7.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.29M, False: 1.23M]
  |  |  ------------------
  ------------------
  289|  6.29M|            return true;
  290|  6.29M|        }
  291|       |
  292|  2.46M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.23M, False: 1.23M]
  ------------------
  293|  1.23M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 636, False: 1.23M]
  ------------------
  294|    636|                return false;
  295|    636|            }
  296|  1.23M|        }
  297|  1.23M|        return true;
  298|  1.23M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  10.6M|    {
   59|  10.6M|        return m_putback_buffer.size() + m_current_view.size();
   60|  10.6M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.30M|    {
  269|  1.30M|        return !x.is_at_end();
  270|  1.30M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  2.54M|    {
  217|  2.54M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.54M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.54M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.54M|        auto res = read_at_position();
  226|  2.54M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.54M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  2.54M|    {
   90|  2.54M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.04M, False: 493k]
  |  |  ------------------
  ------------------
   91|  2.54M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.04M|            return m_putback_buffer[pos];
   93|  2.04M|        }
   94|   493k|        const auto start = pos - m_putback_buffer.size();
   95|   493k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.54M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|  2.12M|    {
  203|  2.12M|        ++m_position;
  204|  2.12M|        std::ignore = read_at_position();
  205|  2.12M|        return *this;
  206|  2.12M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|  1.68M|    {
  252|  1.68M|        return !(lhs == rhs);
  253|  1.68M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  1.97M|    {
  247|  1.97M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.97M, False: 0]
  |  Branch (247:46): [True: 777k, False: 1.19M]
  ------------------
  248|  1.97M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   625k|    {
  232|   625k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   625k|        return *this;
  235|   625k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   246k|    {
   54|   246k|        sync(0);
   55|   246k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   739k|{
  322|   739k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 739k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   739k|    return ranges::subrange{forward_iterator{this, 0},
  327|   739k|                            ranges_std::default_sentinel};
  328|   739k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   739k|    {
  155|   739k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   739k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   739k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  4.66M|    {
  258|  4.66M|        return x.is_at_end();
  259|  4.66M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  11.7M|    {
  302|  11.7M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 11.7M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  11.7M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 11.7M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  11.7M|        return !read_at_position();
  309|  11.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  32.3M|    {
  282|  32.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  32.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  32.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  32.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 32.3M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  32.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  32.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 27.0M, False: 5.29M]
  |  |  ------------------
  ------------------
  289|  27.0M|            return true;
  290|  27.0M|        }
  291|       |
  292|  10.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 5.29M, False: 5.29M]
  ------------------
  293|  5.29M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 954, False: 5.29M]
  ------------------
  294|    954|                return false;
  295|    954|            }
  296|  5.29M|        }
  297|  5.29M|        return true;
  298|  5.29M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  44.8M|    {
   59|  44.8M|        return m_putback_buffer.size() + m_current_view.size();
   60|  44.8M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  7.11M|    {
  269|  7.11M|        return !x.is_at_end();
  270|  7.11M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  10.8M|    {
  217|  10.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  10.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 10.8M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  10.8M|        auto res = read_at_position();
  226|  10.8M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  10.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  10.8M|    {
   90|  10.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  10.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.73M, False: 3.07M]
  |  |  ------------------
  ------------------
   91|  10.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  7.73M|            return m_putback_buffer[pos];
   93|  7.73M|        }
   94|  3.07M|        const auto start = pos - m_putback_buffer.size();
   95|  3.07M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  10.8M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  9.78M|    {
  203|  9.78M|        ++m_position;
  204|  9.78M|        std::ignore = read_at_position();
  205|  9.78M|        return *this;
  206|  9.78M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  8.24M|    {
  252|  8.24M|        return !(lhs == rhs);
  253|  8.24M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  9.10M|    {
  247|  9.10M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 9.10M, False: 0]
  |  Branch (247:46): [True: 3.81M, False: 5.29M]
  ------------------
  248|  9.10M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  1.13M|    {
  232|  1.13M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.13M|        return *this;
  235|  1.13M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   739k|    {
   54|   739k|        sync(0);
   55|   739k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  2.56M|{
   72|  2.56M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  2.56M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  2.56M|    }
   75|  2.56M|    else if constexpr (sizeof(U) == 2) {
   76|  2.56M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  2.56M|    }
   78|  2.56M|    else {
   79|       |        // utf-32
   80|  2.56M|        static_assert(sizeof(U) == 4);
   81|  2.56M|        SCN_UNUSED(ch);
   82|  2.56M|        return 1;
   83|  2.56M|    }
   84|  2.56M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  2.56M|{
   36|  2.56M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  2.56M|    SCN_GCC_COMPAT_PUSH
   39|  2.56M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  2.56M|    constexpr char lengths[] =
   41|  2.56M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  2.56M|        "\1\1\1\1\1\1\1\1"
   43|  2.56M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  2.56M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  2.56M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  2.56M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  2.56M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  2.56M|    SCN_GCC_COMPAT_POP
   50|  2.56M|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|   159M|{
   72|   159M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   159M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   159M|    }
   75|   159M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|   159M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   159M|    }
   78|   159M|    else {
   79|       |        // utf-32
   80|   159M|        static_assert(sizeof(U) == 4);
   81|   159M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|   159M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|   159M|        return 1;
   83|   159M|    }
   84|   159M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.54M|{
   36|  1.54M|#define SCN_VISIT(Type)                                         \
   37|  1.54M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.54M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.54M|    }                                                           \
   40|  1.54M|    else {                                                      \
   41|  1.54M|        return vis(monostate_val);                              \
   42|  1.54M|    }
   43|       |
   44|  1.54M|    monostate monostate_val{};
   45|       |
   46|  1.54M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.54M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.54M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.54M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.54M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.54M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.54M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.54M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.54M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.54M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.54M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.54M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.54M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.54M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.54M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.54M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   445k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 445k, False: 1.09M]
  ------------------
   78|   445k|            SCN_VISIT(float);
  ------------------
  |  |   37|   445k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   445k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   445k|    }                                                           \
  |  |   40|   445k|    else {                                                      \
  |  |   41|   445k|        return vis(monostate_val);                              \
  |  |   42|   445k|    }
  ------------------
   79|   529k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 529k, False: 1.01M]
  ------------------
   80|   529k|            SCN_VISIT(double);
  ------------------
  |  |   37|   529k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   529k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   529k|    }                                                           \
  |  |   40|   529k|    else {                                                      \
  |  |   41|   529k|        return vis(monostate_val);                              \
  |  |   42|   529k|    }
  ------------------
   81|   564k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 564k, False: 975k]
  ------------------
   82|   564k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   564k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   564k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   564k|    }                                                           \
  |  |   40|   564k|    else {                                                      \
  |  |   41|   564k|        return vis(monostate_val);                              \
  |  |   42|   564k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.54M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.54M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.54M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.54M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.54M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.54M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.54M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.54M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.54M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.54M|            SCN_CLANG_POP
  114|  1.54M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.54M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  56.8k|{
   36|  56.8k|#define SCN_VISIT(Type)                                         \
   37|  56.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  56.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  56.8k|    }                                                           \
   40|  56.8k|    else {                                                      \
   41|  56.8k|        return vis(monostate_val);                              \
   42|  56.8k|    }
   43|       |
   44|  56.8k|    monostate monostate_val{};
   45|       |
   46|  56.8k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 56.8k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 56.8k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 56.8k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 56.8k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 56.8k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 56.8k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 56.8k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 56.8k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 56.8k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 56.8k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 56.8k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 56.8k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 56.8k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 56.8k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 56.8k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  18.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 18.9k, False: 37.9k]
  ------------------
   78|  18.9k|            SCN_VISIT(float);
  ------------------
  |  |   37|  18.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  18.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  18.9k|    }                                                           \
  |  |   40|  18.9k|    else {                                                      \
  |  |   41|  18.9k|        return vis(monostate_val);                              \
  |  |   42|  18.9k|    }
  ------------------
   79|  18.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 18.9k, False: 37.9k]
  ------------------
   80|  18.9k|            SCN_VISIT(double);
  ------------------
  |  |   37|  18.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  18.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  18.9k|    }                                                           \
  |  |   40|  18.9k|    else {                                                      \
  |  |   41|  18.9k|        return vis(monostate_val);                              \
  |  |   42|  18.9k|    }
  ------------------
   81|  18.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 18.9k, False: 37.9k]
  ------------------
   82|  18.9k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  18.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  18.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  18.9k|    }                                                           \
  |  |   40|  18.9k|    else {                                                      \
  |  |   41|  18.9k|        return vis(monostate_val);                              \
  |  |   42|  18.9k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 56.8k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 56.8k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 56.8k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 56.8k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 56.8k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 56.8k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 56.8k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 56.8k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 56.8k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  56.8k|            SCN_CLANG_POP
  114|  56.8k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  56.8k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.74M|{
   36|  3.74M|#define SCN_VISIT(Type)                                         \
   37|  3.74M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.74M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.74M|    }                                                           \
   40|  3.74M|    else {                                                      \
   41|  3.74M|        return vis(monostate_val);                              \
   42|  3.74M|    }
   43|       |
   44|  3.74M|    monostate monostate_val{};
   45|       |
   46|  3.74M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 3.74M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.74M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 3.74M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.74M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 3.74M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 3.74M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.74M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 3.74M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.74M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 3.74M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.74M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.74M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.74M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.74M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.74M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  1.08M|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 1.08M, False: 2.65M]
  ------------------
   78|  1.08M|            SCN_VISIT(float);
  ------------------
  |  |   37|  1.08M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.08M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.08M|    }                                                           \
  |  |   40|  1.08M|    else {                                                      \
  |  |   41|  1.08M|        return vis(monostate_val);                              \
  |  |   42|  1.08M|    }
  ------------------
   79|  1.30M|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 1.30M, False: 2.43M]
  ------------------
   80|  1.30M|            SCN_VISIT(double);
  ------------------
  |  |   37|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.30M|    }                                                           \
  |  |   40|  1.30M|    else {                                                      \
  |  |   41|  1.30M|        return vis(monostate_val);                              \
  |  |   42|  1.30M|    }
  ------------------
   81|  1.35M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 1.35M, False: 2.38M]
  ------------------
   82|  1.35M|            SCN_VISIT(long double);
  ------------------
  |  |   37|  1.35M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.35M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.35M|    }                                                           \
  |  |   40|  1.35M|    else {                                                      \
  |  |   41|  1.35M|        return vis(monostate_val);                              \
  |  |   42|  1.35M|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.74M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.74M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.74M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.74M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.74M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.74M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.74M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.74M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.74M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.74M|            SCN_CLANG_POP
  114|  3.74M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.74M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   189k|{
   36|   189k|#define SCN_VISIT(Type)                                         \
   37|   189k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   189k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   189k|    }                                                           \
   40|   189k|    else {                                                      \
   41|   189k|        return vis(monostate_val);                              \
   42|   189k|    }
   43|       |
   44|   189k|    monostate monostate_val{};
   45|       |
   46|   189k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 189k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 189k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 189k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 189k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 189k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 189k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 189k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 189k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 189k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 189k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 189k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 189k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 189k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 189k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 189k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  63.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 63.2k, False: 126k]
  ------------------
   78|  63.2k|            SCN_VISIT(float);
  ------------------
  |  |   37|  63.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  63.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  63.2k|    }                                                           \
  |  |   40|  63.2k|    else {                                                      \
  |  |   41|  63.2k|        return vis(monostate_val);                              \
  |  |   42|  63.2k|    }
  ------------------
   79|  63.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 63.2k, False: 126k]
  ------------------
   80|  63.2k|            SCN_VISIT(double);
  ------------------
  |  |   37|  63.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  63.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  63.2k|    }                                                           \
  |  |   40|  63.2k|    else {                                                      \
  |  |   41|  63.2k|        return vis(monostate_val);                              \
  |  |   42|  63.2k|    }
  ------------------
   81|  63.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 63.2k, False: 126k]
  ------------------
   82|  63.2k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  63.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  63.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  63.2k|    }                                                           \
  |  |   40|  63.2k|    else {                                                      \
  |  |   41|  63.2k|        return vis(monostate_val);                              \
  |  |   42|  63.2k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 189k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 189k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 189k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 189k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 189k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 189k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 189k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 189k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 189k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   189k|            SCN_CLANG_POP
  114|   189k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   189k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.37M|{
   36|  1.37M|#define SCN_VISIT(Type)                                         \
   37|  1.37M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.37M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.37M|    }                                                           \
   40|  1.37M|    else {                                                      \
   41|  1.37M|        return vis(monostate_val);                              \
   42|  1.37M|    }
   43|       |
   44|  1.37M|    monostate monostate_val{};
   45|       |
   46|  1.37M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 1.37M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.37M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 1.37M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.37M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 1.37M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 1.37M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.37M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 1.37M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.37M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 1.37M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.37M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.37M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.37M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.37M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.37M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   397k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 397k, False: 973k]
  ------------------
   78|   397k|            SCN_VISIT(float);
  ------------------
  |  |   37|   397k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   397k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   397k|    }                                                           \
  |  |   40|   397k|    else {                                                      \
  |  |   41|   397k|        return vis(monostate_val);                              \
  |  |   42|   397k|    }
  ------------------
   79|   472k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 472k, False: 898k]
  ------------------
   80|   472k|            SCN_VISIT(double);
  ------------------
  |  |   37|   472k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   472k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   472k|    }                                                           \
  |  |   40|   472k|    else {                                                      \
  |  |   41|   472k|        return vis(monostate_val);                              \
  |  |   42|   472k|    }
  ------------------
   81|   500k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 500k, False: 870k]
  ------------------
   82|   500k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   500k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   500k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   500k|    }                                                           \
  |  |   40|   500k|    else {                                                      \
  |  |   41|   500k|        return vis(monostate_val);                              \
  |  |   42|   500k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.37M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.37M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.37M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.37M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.37M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.37M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.37M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.37M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.37M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.37M|            SCN_CLANG_POP
  114|  1.37M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.37M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.44M|{
   36|  3.44M|#define SCN_VISIT(Type)                                         \
   37|  3.44M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.44M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.44M|    }                                                           \
   40|  3.44M|    else {                                                      \
   41|  3.44M|        return vis(monostate_val);                              \
   42|  3.44M|    }
   43|       |
   44|  3.44M|    monostate monostate_val{};
   45|       |
   46|  3.44M|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 3.44M]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.44M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 3.44M]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.44M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 3.44M]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 3.44M]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.44M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 3.44M]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.44M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 3.44M]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.44M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.44M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.44M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.44M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.44M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  1.00M|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 1.00M, False: 2.43M]
  ------------------
   78|  1.00M|            SCN_VISIT(float);
  ------------------
  |  |   37|  1.00M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.00M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.00M|    }                                                           \
  |  |   40|  1.00M|    else {                                                      \
  |  |   41|  1.00M|        return vis(monostate_val);                              \
  |  |   42|  1.00M|    }
  ------------------
   79|  1.20M|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 1.20M, False: 2.24M]
  ------------------
   80|  1.20M|            SCN_VISIT(double);
  ------------------
  |  |   37|  1.20M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.20M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.20M|    }                                                           \
  |  |   40|  1.20M|    else {                                                      \
  |  |   41|  1.20M|        return vis(monostate_val);                              \
  |  |   42|  1.20M|    }
  ------------------
   81|  1.23M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 1.23M, False: 2.20M]
  ------------------
   82|  1.23M|            SCN_VISIT(long double);
  ------------------
  |  |   37|  1.23M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.23M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.23M|    }                                                           \
  |  |   40|  1.23M|    else {                                                      \
  |  |   41|  1.23M|        return vis(monostate_val);                              \
  |  |   42|  1.23M|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.44M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.44M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.44M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.44M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.44M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.44M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.44M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.44M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.44M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.44M|            SCN_CLANG_POP
  114|  3.44M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.44M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   170k|{
   36|   170k|#define SCN_VISIT(Type)                                         \
   37|   170k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   170k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   170k|    }                                                           \
   40|   170k|    else {                                                      \
   41|   170k|        return vis(monostate_val);                              \
   42|   170k|    }
   43|       |
   44|   170k|    monostate monostate_val{};
   45|       |
   46|   170k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 170k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 170k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 170k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 170k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 170k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 170k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 170k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 170k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 170k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 170k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 170k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 170k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 170k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 170k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 170k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|  56.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 56.8k, False: 113k]
  ------------------
   78|  56.8k|            SCN_VISIT(float);
  ------------------
  |  |   37|  56.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  56.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  56.8k|    }                                                           \
  |  |   40|  56.8k|    else {                                                      \
  |  |   41|  56.8k|        return vis(monostate_val);                              \
  |  |   42|  56.8k|    }
  ------------------
   79|  56.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 56.8k, False: 113k]
  ------------------
   80|  56.8k|            SCN_VISIT(double);
  ------------------
  |  |   37|  56.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  56.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  56.8k|    }                                                           \
  |  |   40|  56.8k|    else {                                                      \
  |  |   41|  56.8k|        return vis(monostate_val);                              \
  |  |   42|  56.8k|    }
  ------------------
   81|  56.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 56.8k, False: 113k]
  ------------------
   82|  56.8k|            SCN_VISIT(long double);
  ------------------
  |  |   37|  56.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  56.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  56.8k|    }                                                           \
  |  |   40|  56.8k|    else {                                                      \
  |  |   41|  56.8k|        return vis(monostate_val);                              \
  |  |   42|  56.8k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 170k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 170k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 170k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 170k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 170k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 170k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 170k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 170k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 170k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   170k|            SCN_CLANG_POP
  114|   170k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   170k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   568k|{
   36|   568k|#define SCN_VISIT(Type)                                         \
   37|   568k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   568k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   568k|    }                                                           \
   40|   568k|    else {                                                      \
   41|   568k|        return vis(monostate_val);                              \
   42|   568k|    }
   43|       |
   44|   568k|    monostate monostate_val{};
   45|       |
   46|   568k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 568k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 568k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 0, False: 568k]
  ------------------
   52|      0|            SCN_VISIT(int);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 568k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 568k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 568k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 568k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 0, False: 568k]
  ------------------
   62|      0|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 568k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 568k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 568k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 568k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 568k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 568k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 568k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|   189k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 189k, False: 379k]
  ------------------
   78|   189k|            SCN_VISIT(float);
  ------------------
  |  |   37|   189k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   189k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   189k|    }                                                           \
  |  |   40|   189k|    else {                                                      \
  |  |   41|   189k|        return vis(monostate_val);                              \
  |  |   42|   189k|    }
  ------------------
   79|   189k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 189k, False: 379k]
  ------------------
   80|   189k|            SCN_VISIT(double);
  ------------------
  |  |   37|   189k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   189k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   189k|    }                                                           \
  |  |   40|   189k|    else {                                                      \
  |  |   41|   189k|        return vis(monostate_val);                              \
  |  |   42|   189k|    }
  ------------------
   81|   189k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 189k, False: 379k]
  ------------------
   82|   189k|            SCN_VISIT(long double);
  ------------------
  |  |   37|   189k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   189k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   189k|    }                                                           \
  |  |   40|   189k|    else {                                                      \
  |  |   41|   189k|        return vis(monostate_val);                              \
  |  |   42|   189k|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 568k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 568k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 568k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 568k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 568k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 568k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 568k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 568k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 568k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   568k|            SCN_CLANG_POP
  114|   568k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   568k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  2.38M|{
  174|  2.38M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  2.38M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.38M|{
  111|  2.38M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.38M|    auto result = vscan_impl(buffer, format, args);
  114|  2.38M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 113k, False: 2.27M]
  |  |  ------------------
  ------------------
  115|   113k|        return unexpected(result.error());
  116|   113k|    }
  117|  2.27M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.38M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  2.38M|{
  192|  2.38M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  2.38M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.38M|{
  127|  2.38M|#if !SCN_DISABLE_LOCALE
  128|  2.38M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.38M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.38M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.38M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.38M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 113k, False: 2.27M]
  |  |  ------------------
  ------------------
  135|   113k|        return unexpected(result.error());
  136|   113k|    }
  137|  2.27M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.38M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   513k|{
  205|   513k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   513k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   513k|{
  151|   513k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   513k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   513k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18.9k, False: 494k]
  |  |  ------------------
  ------------------
  155|  18.9k|        return unexpected(result.error());
  156|  18.9k|    }
  157|   494k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   513k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   113k|{
  174|   113k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   113k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   113k|{
  111|   113k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   113k|    auto result = vscan_impl(buffer, format, args);
  114|   113k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 113k, False: 0]
  |  |  ------------------
  ------------------
  115|   113k|        return unexpected(result.error());
  116|   113k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   113k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   113k|{
  192|   113k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   113k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   113k|{
  127|   113k|#if !SCN_DISABLE_LOCALE
  128|   113k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   113k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   113k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   113k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   113k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 113k, False: 0]
  |  |  ------------------
  ------------------
  135|   113k|        return unexpected(result.error());
  136|   113k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   113k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  18.9k|{
  205|  18.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  18.9k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  18.9k|{
  151|  18.9k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  18.9k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  18.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18.9k, False: 0]
  |  |  ------------------
  ------------------
  155|  18.9k|        return unexpected(result.error());
  156|  18.9k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  18.9k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.17M|{
  111|  2.17M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.17M|    auto result = vscan_impl(buffer, format, args);
  114|  2.17M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 341k, False: 1.83M]
  |  |  ------------------
  ------------------
  115|   341k|        return unexpected(result.error());
  116|   341k|    }
  117|  1.83M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.17M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.17M|{
  127|  2.17M|#if !SCN_DISABLE_LOCALE
  128|  2.17M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.17M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.17M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.17M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.17M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 341k, False: 1.83M]
  |  |  ------------------
  ------------------
  135|   341k|        return unexpected(result.error());
  136|   341k|    }
  137|  1.83M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.17M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   456k|{
  151|   456k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   456k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   456k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.8k, False: 400k]
  |  |  ------------------
  ------------------
  155|  56.8k|        return unexpected(result.error());
  156|  56.8k|    }
  157|   400k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   456k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   341k|{
  111|   341k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   341k|    auto result = vscan_impl(buffer, format, args);
  114|   341k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 341k, False: 0]
  |  |  ------------------
  ------------------
  115|   341k|        return unexpected(result.error());
  116|   341k|    }
  117|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   341k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   341k|{
  127|   341k|#if !SCN_DISABLE_LOCALE
  128|   341k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   341k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   341k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   341k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   341k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 341k, False: 0]
  |  |  ------------------
  ------------------
  135|   341k|        return unexpected(result.error());
  136|   341k|    }
  137|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   341k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  56.8k|{
  151|  56.8k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  56.8k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  56.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.8k, False: 0]
  |  |  ------------------
  ------------------
  155|  56.8k|        return unexpected(result.error());
  156|  56.8k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  56.8k|}

_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   635k|{
   90|   635k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   635k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  2.17M|{
   45|  2.17M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.17M|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   635k|{
  125|   635k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   635k|                                                         format, {});
  127|   635k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  2.17M|{
   61|  2.17M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  2.17M|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   132k|{
  159|   132k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   132k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   456k|{
   73|   456k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   456k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   758k|{
   90|   758k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   758k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   758k|{
  125|   758k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   758k|                                                         format, {});
  127|   758k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   157k|{
  159|   157k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   157k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   785k|{
   90|   785k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   785k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   785k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   785k|{
  125|   785k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   785k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   785k|                                                         format, {});
  127|   785k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   166k|{
  159|   166k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   166k|}
_ZN3scn2v24scanIJfEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   113k|{
   90|   113k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   113k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   341k|{
   45|   341k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   341k|}
_ZN3scn2v24scanIJfENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   113k|{
  125|   113k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   113k|                                                         format, {});
  127|   113k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   341k|{
   61|   341k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   341k|}
_ZN3scn2v210scan_valueIfN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  18.9k|{
  159|  18.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  18.9k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  56.8k|{
   73|  56.8k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  56.8k|}
_ZN3scn2v24scanIJdEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   113k|{
   90|   113k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   113k|}
_ZN3scn2v24scanIJdENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   113k|{
  125|   113k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   113k|                                                         format, {});
  127|   113k|}
_ZN3scn2v210scan_valueIdN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  18.9k|{
  159|  18.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  18.9k|}
_ZN3scn2v24scanIJeEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|   113k|{
   90|   113k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   113k|}
_ZN3scn2v24scanIJeENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|   113k|{
  125|   113k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   113k|                                                         format, {});
  127|   113k|}
_ZN3scn2v210scan_valueIeN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  18.9k|{
  159|  18.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  18.9k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  19.1M|            {
 2693|  19.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  19.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  19.1M|            {
 2672|  19.1M|                return decay_copy(t.begin());
 2673|  19.1M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   216M|    {
 2606|   216M|        return std::forward<T>(t);
 2607|   216M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  10.5M|            {
 3178|  10.5M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  10.5M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  10.5M|            {
 3158|  10.5M|                return t.data();
 3159|  10.5M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  10.5M|    {
 6095|  10.5M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 16.5k, False: 10.5M]
  ------------------
 6096|  10.5M|                   ? nullptr
 6097|  10.5M|                   : std::addressof(*ranges::begin(derived()));
 6098|  10.5M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  10.5M|            {
 3127|  10.5M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  10.5M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  10.5M|            {
 3098|  10.5M|                return bool((std::forward<T>(t).empty()));
 3099|  10.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  29.5M|        {
 6454|  29.5M|            return data_.begin_ == data_.end_;
 6455|  29.5M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  21.0M|    {
 6049|  21.0M|        return static_cast<const D&>(*this);
 6050|  21.0M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  39.2M|            {
 2693|  39.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  39.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  39.2M|            {
 2672|  39.2M|                return decay_copy(t.begin());
 2673|  39.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   126M|        {
 6444|   126M|            return data_.begin_;
 6445|   126M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  10.5M|            {
 3038|  10.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  10.5M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  10.5M|            {
 3000|  10.5M|                return decay_copy(std::forward<T>(t).size());
 3001|  10.5M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  51.5M|    {
 2606|  51.5M|        return std::forward<T>(t);
 2607|  51.5M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  29.6M|        {
 6462|  29.6M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  29.6M|                return data_.size_;
 6464|  29.6M|            }
 6465|  29.6M|            else {
 6466|  29.6M|                return data_.end_ - data_.begin_;
 6467|  29.6M|            }
 6468|  29.6M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  18.1M|            {
 3788|  18.1M|                ranges::advance(x, n);
 3789|  18.1M|                return x;
 3790|  18.1M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  18.1M|            {
 3678|  18.1M|                fn::impl(i, n);
 3679|  18.1M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  18.1M|            {
 3562|  18.1M|                r += n;
 3563|  18.1M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  83.1M|            {
 2693|  83.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  83.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  83.1M|            {
 2672|  83.1M|                return decay_copy(t.begin());
 2673|  83.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  23.7M|            {
 2759|  23.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  23.7M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  23.7M|            {
 2739|  23.7M|                return decay_copy(std::forward<T>(t).end());
 2740|  23.7M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  59.9M|        {
 6449|  59.9M|            return data_.end_;
 6450|  59.9M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  22.4M|            {
 2759|  22.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  22.4M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  22.4M|            {
 2739|  22.4M|                return decay_copy(std::forward<T>(t).end());
 2740|  22.4M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  46.9M|        {
 6375|  46.9M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  46.9M|        {
 6294|  46.9M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   246k|            {
 2693|   246k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   246k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   246k|            {
 2672|   246k|                return decay_copy(t.begin());
 2673|   246k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.97M|    {
 2606|  1.97M|        return std::forward<T>(t);
 2607|  1.97M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   246k|            {
 2693|   246k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   246k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   246k|            {
 2672|   246k|                return decay_copy(t.begin());
 2673|   246k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   246k|        {
 6444|   246k|            return data_.begin_;
 6445|   246k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.23M|            {
 2759|  1.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.23M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.23M|            {
 2739|  1.23M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.23M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.23M|        {
 6449|  1.23M|            return data_.end_;
 6450|  1.23M|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   246k|            {
 2759|   246k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   246k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   246k|            {
 2739|   246k|                return decay_copy(std::forward<T>(t).end());
 2740|   246k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   246k|        {
 6375|   246k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   246k|        {
 6294|   246k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  3.54M|            {
 2693|  3.54M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.54M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  3.54M|            {
 2672|  3.54M|                return decay_copy(t.begin());
 2673|  3.54M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   347M|    {
 2606|   347M|        return std::forward<T>(t);
 2607|   347M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  4.81M|            {
 3178|  4.81M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.81M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.81M|            {
 3158|  4.81M|                return t.data();
 3159|  4.81M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  4.81M|    {
 6095|  4.81M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 17.4k, False: 4.79M]
  ------------------
 6096|  4.81M|                   ? nullptr
 6097|  4.81M|                   : std::addressof(*ranges::begin(derived()));
 6098|  4.81M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  4.81M|            {
 3127|  4.81M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.81M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  4.81M|            {
 3098|  4.81M|                return bool((std::forward<T>(t).empty()));
 3099|  4.81M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  9.13M|        {
 6454|  9.13M|            return data_.begin_ == data_.end_;
 6455|  9.13M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  9.61M|    {
 6049|  9.61M|        return static_cast<const D&>(*this);
 6050|  9.61M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  34.9M|            {
 2693|  34.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  34.9M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  34.9M|            {
 2672|  34.9M|                return decay_copy(t.begin());
 2673|  34.9M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   126M|        {
 6444|   126M|            return data_.begin_;
 6445|   126M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  4.81M|            {
 3038|  4.81M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  4.81M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  4.81M|            {
 3000|  4.81M|                return decay_copy(std::forward<T>(t).size());
 3001|  4.81M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  21.8M|        {
 6462|  21.8M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  21.8M|                return data_.size_;
 6464|  21.8M|            }
 6465|  21.8M|            else {
 6466|  21.8M|                return data_.end_ - data_.begin_;
 6467|  21.8M|            }
 6468|  21.8M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  20.7M|            {
 3788|  20.7M|                ranges::advance(x, n);
 3789|  20.7M|                return x;
 3790|  20.7M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  20.7M|            {
 3678|  20.7M|                fn::impl(i, n);
 3679|  20.7M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  20.7M|            {
 3562|  20.7M|                r += n;
 3563|  20.7M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  87.8M|            {
 2693|  87.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  87.8M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  87.8M|            {
 2672|  87.8M|                return decay_copy(t.begin());
 2673|  87.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   104M|            {
 2759|   104M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   104M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|   104M|            {
 2739|   104M|                return decay_copy(std::forward<T>(t).end());
 2740|   104M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   217M|        {
 6449|   217M|            return data_.end_;
 6450|   217M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  9.83M|            {
 2759|  9.83M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  9.83M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  9.83M|            {
 2739|  9.83M|                return decay_copy(std::forward<T>(t).end());
 2740|  9.83M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  43.7M|        {
 6375|  43.7M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  43.7M|        {
 6294|  43.7M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   739k|            {
 2693|   739k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   739k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   739k|            {
 2672|   739k|                return decay_copy(t.begin());
 2673|   739k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  7.51M|    {
 2606|  7.51M|        return std::forward<T>(t);
 2607|  7.51M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   739k|            {
 2693|   739k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   739k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   739k|            {
 2672|   739k|                return decay_copy(t.begin());
 2673|   739k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   739k|        {
 6444|   739k|            return data_.begin_;
 6445|   739k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  5.29M|            {
 2759|  5.29M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.29M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  5.29M|            {
 2739|  5.29M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.29M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  5.29M|        {
 6449|  5.29M|            return data_.end_;
 6450|  5.29M|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   739k|            {
 2759|   739k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   739k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   739k|            {
 2739|   739k|                return decay_copy(std::forward<T>(t).end());
 2740|   739k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   739k|        {
 6375|   739k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   739k|        {
 6294|   739k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  9.40M|        {
 6444|  9.40M|            return data_.begin_;
 6445|  9.40M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  31.9M|        {
 6444|  31.9M|            return data_.begin_;
 6445|  31.9M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  38.0M|    {
 6044|  38.0M|        return static_cast<D&>(*this);
 6045|  38.0M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  19.0M|            {
 3098|  19.0M|                return bool((std::forward<T>(t).empty()));
 3099|  19.0M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  19.0M|            {
 3127|  19.0M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  19.0M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  19.0M|    {
 6085|  19.0M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 2.12k, False: 19.0M]
  ------------------
 6086|  19.0M|                   ? nullptr
 6087|  19.0M|                   : std::addressof(*ranges::begin(derived()));
 6088|  19.0M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  28.9M|            {
 2739|  28.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  28.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  28.9M|            {
 2759|  28.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  28.9M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  8.63M|    {
 6044|  8.63M|        return static_cast<D&>(*this);
 6045|  8.63M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  4.31M|            {
 3098|  4.31M|                return bool((std::forward<T>(t).empty()));
 3099|  4.31M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  4.31M|            {
 3127|  4.31M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  4.31M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  4.31M|    {
 6085|  4.31M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 1.56k, False: 4.31M]
  ------------------
 6086|  4.31M|                   ? nullptr
 6087|  4.31M|                   : std::addressof(*ranges::begin(derived()));
 6088|  4.31M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   106M|            {
 2739|   106M|                return decay_copy(std::forward<T>(t).end());
 2740|   106M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   106M|            {
 2759|   106M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   106M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  7.82M|            {
 3780|  7.82M|                ++x;
 3781|  7.82M|                return x;
 3782|  7.82M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  19.0M|            {
 3038|  19.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  19.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  19.0M|            {
 3000|  19.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  19.0M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  19.0M|            {
 3178|  19.0M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  19.0M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  19.0M|            {
 3158|  19.0M|                return t.data();
 3159|  19.0M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  26.8M|    {
 2606|  26.8M|        return std::forward<T>(t);
 2607|  26.8M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  15.2M|            {
 3077|  15.2M|                return fn::impl(std::forward<T>(t));
 3078|  15.2M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  15.2M|            {
 3067|  15.2M|                return static_cast<ssize_return_t<T>>(
 3068|  15.2M|                    ranges::size(std::forward<T>(t)));
 3069|  15.2M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  17.7M|            {
 3038|  17.7M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  17.7M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  17.7M|            {
 3000|  17.7M|                return decay_copy(std::forward<T>(t).size());
 3001|  17.7M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  3.57M|            {
 3597|  3.57M|                i = std::move(bound);
 3598|  3.57M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3076|  9.11M|            {
 3077|  9.11M|                return fn::impl(std::forward<T>(t));
 3078|  9.11M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISE_EENS0_20incrementable_traitsIDTclL_ZNSD_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3066|  9.11M|            {
 3067|  9.11M|                return static_cast<ssize_return_t<T>>(
 3068|  9.11M|                    ranges::size(std::forward<T>(t)));
 3069|  9.11M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  9.11M|            {
 3038|  9.11M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  9.11M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  9.11M|            {
 3000|  9.11M|                return decay_copy(std::forward<T>(t).size());
 3001|  9.11M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  3.05M|        {
 6793|  3.05M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  3.05M|                                    proj);
 6795|  3.05M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  3.05M|        {
 6761|  17.9M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 17.8M, False: 9.08k]
  ------------------
 6762|  17.8M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 3.04M, False: 14.8M]
  ------------------
 6763|  3.04M|                    return first;
 6764|  3.04M|                }
 6765|  14.8M|                ++first;
 6766|  14.8M|            }
 6767|  9.08k|            return first;
 6768|  3.05M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  17.8M|            {
 1300|  17.8M|                return fn::impl(std::forward<F>(f),
 1301|  17.8M|                                std::forward<Args>(args)...);
 1302|  17.8M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  17.8M|            {
 1289|  17.8M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  17.8M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|   103M|            {
 1300|   103M|                return fn::impl(std::forward<F>(f),
 1301|   103M|                                std::forward<Args>(args)...);
 1302|   103M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|   103M|            {
 1289|   103M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   103M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|   103M|    {
 1142|   103M|        return std::forward<T>(t);
 1143|   103M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  3.57M|            {
 3798|  3.57M|                ranges::advance(x, bound);
 3799|  3.57M|                return x;
 3800|  3.57M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  3.57M|            {
 3686|  3.57M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  3.57M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  15.0M|            {
 3756|  15.0M|                return fn::impl(std::move(first), std::move(last));
 3757|  15.0M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  15.0M|            {
 3716|  15.0M|                return s - i;
 3717|  15.0M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.06M|        {
 6375|  2.06M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.06M|        {
 6294|  2.06M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  3.92M|            {
 2693|  3.92M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.92M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  3.92M|            {
 2672|  3.92M|                return decay_copy(t.begin());
 2673|  3.92M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  9.21M|    {
 2606|  9.21M|        return std::forward<T>(t);
 2607|  9.21M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.16M|            {
 2759|  2.16M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.16M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.16M|            {
 2739|  2.16M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.16M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  22.2M|    {
 2606|  22.2M|        return std::forward<T>(t);
 2607|  22.2M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  4.45M|        {
 6449|  4.45M|            return data_.end_;
 6450|  4.45M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  1.51M|        {
 6444|  1.51M|            return data_.begin_;
 6445|  1.51M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  1.51M|        {
 6449|  1.51M|            return data_.end_;
 6450|  1.51M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   531k|        {
 6375|   531k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   531k|        {
 6294|   531k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   322k|            {
 3780|   322k|                ++x;
 3781|   322k|                return x;
 3782|   322k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   284k|        {
 6793|   284k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   284k|                                    proj);
 6795|   284k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   284k|        {
 6761|   322k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 322k, False: 12]
  ------------------
 6762|   322k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 284k, False: 37.9k]
  ------------------
 6763|   284k|                    return first;
 6764|   284k|                }
 6765|  37.9k|                ++first;
 6766|  37.9k|            }
 6767|     12|            return first;
 6768|   284k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   322k|            {
 1300|   322k|                return fn::impl(std::forward<F>(f),
 1301|   322k|                                std::forward<Args>(args)...);
 1302|   322k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   322k|            {
 1289|   322k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   322k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   322k|            {
 1300|   322k|                return fn::impl(std::forward<F>(f),
 1301|   322k|                                std::forward<Args>(args)...);
 1302|   322k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   322k|            {
 1289|   322k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   322k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   322k|    {
 1142|   322k|        return std::forward<T>(t);
 1143|   322k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.29M|            {
 2759|  2.29M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.29M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  2.29M|            {
 2739|  2.29M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.29M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  5.29M|            {
 2693|  5.29M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  5.29M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  5.29M|            {
 2672|  5.29M|                return decay_copy(t.begin());
 2673|  5.29M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|  37.9k|            {
 3756|  37.9k|                return fn::impl(std::move(first), std::move(last));
 3757|  37.9k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|  37.9k|            {
 3724|  37.9k|                iter_difference_t<I> counter{0};
 3725|  75.8k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 37.9k, False: 37.9k]
  ------------------
 3726|  37.9k|                    ++i;
 3727|  37.9k|                    ++counter;
 3728|  37.9k|                }
 3729|  37.9k|                return counter;
 3730|  37.9k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  4.31M|            {
 3178|  4.31M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  4.31M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  4.31M|            {
 3158|  4.31M|                return t.data();
 3159|  4.31M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  17.0M|            {
 3038|  17.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  17.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  17.0M|            {
 3000|  17.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  17.0M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  3.18M|            {
 3597|  3.18M|                i = std::move(bound);
 3598|  3.18M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  6.85M|            {
 3780|  6.85M|                ++x;
 3781|  6.85M|                return x;
 3782|  6.85M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  12.7M|            {
 3077|  12.7M|                return fn::impl(std::forward<T>(t));
 3078|  12.7M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  12.7M|            {
 3067|  12.7M|                return static_cast<ssize_return_t<T>>(
 3068|  12.7M|                    ranges::size(std::forward<T>(t)));
 3069|  12.7M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|  2.70M|        {
 6793|  2.70M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  2.70M|                                    proj);
 6795|  2.70M|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|  2.70M|        {
 6761|  14.6M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 14.6M, False: 10.0k]
  ------------------
 6762|  14.6M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 2.69M, False: 11.9M]
  ------------------
 6763|  2.69M|                    return first;
 6764|  2.69M|                }
 6765|  11.9M|                ++first;
 6766|  11.9M|            }
 6767|  10.0k|            return first;
 6768|  2.70M|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  14.6M|            {
 1300|  14.6M|                return fn::impl(std::forward<F>(f),
 1301|  14.6M|                                std::forward<Args>(args)...);
 1302|  14.6M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSE_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISH_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSH_DpOSK_:
 1288|  14.6M|            {
 1289|  14.6M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  14.6M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  14.6M|            {
 1300|  14.6M|                return fn::impl(std::forward<F>(f),
 1301|  14.6M|                                std::forward<Args>(args)...);
 1302|  14.6M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  14.6M|            {
 1289|  14.6M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  14.6M|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  14.6M|    {
 1142|  14.6M|        return std::forward<T>(t);
 1143|  14.6M|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  3.18M|            {
 3798|  3.18M|                ranges::advance(x, bound);
 3799|  3.18M|                return x;
 3800|  3.18M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  3.18M|            {
 3686|  3.18M|                fn::impl(i, bound, priority_tag<2>{});
 3687|  3.18M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  5.30M|            {
 3756|  5.30M|                return fn::impl(std::move(first), std::move(last));
 3757|  5.30M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  5.30M|            {
 3716|  5.30M|                return s - i;
 3717|  5.30M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  7.68M|        {
 6375|  7.68M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  7.68M|        {
 6294|  7.68M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  11.0M|            {
 2693|  11.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  11.0M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  11.0M|            {
 2672|  11.0M|                return decay_copy(t.begin());
 2673|  11.0M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  31.3M|    {
 2606|  31.3M|        return std::forward<T>(t);
 2607|  31.3M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  7.96M|            {
 2759|  7.96M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  7.96M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  7.96M|            {
 2739|  7.96M|                return decay_copy(std::forward<T>(t).end());
 2740|  7.96M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  17.8M|        {
 6449|  17.8M|            return data_.end_;
 6450|  17.8M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  8.98M|        {
 6444|  8.98M|            return data_.begin_;
 6445|  8.98M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  8.98M|        {
 6449|  8.98M|            return data_.end_;
 6450|  8.98M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  3.07M|        {
 6375|  3.07M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  3.07M|        {
 6294|  3.07M|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   967k|            {
 3780|   967k|                ++x;
 3781|   967k|                return x;
 3782|   967k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   853k|        {
 6793|   853k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   853k|                                    proj);
 6795|   853k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   853k|        {
 6761|  1.19M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.19M, False: 36]
  ------------------
 6762|  1.19M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 853k, False: 341k]
  ------------------
 6763|   853k|                    return first;
 6764|   853k|                }
 6765|   341k|                ++first;
 6766|   341k|            }
 6767|     36|            return first;
 6768|   853k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  1.19M|            {
 1300|  1.19M|                return fn::impl(std::forward<F>(f),
 1301|  1.19M|                                std::forward<Args>(args)...);
 1302|  1.19M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  1.19M|            {
 1289|  1.19M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.19M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  1.19M|            {
 1300|  1.19M|                return fn::impl(std::forward<F>(f),
 1301|  1.19M|                                std::forward<Args>(args)...);
 1302|  1.19M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  1.19M|            {
 1289|  1.19M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.19M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  1.19M|    {
 1142|  1.19M|        return std::forward<T>(t);
 1143|  1.19M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  9.84M|            {
 2759|  9.84M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  9.84M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  9.84M|            {
 2739|  9.84M|                return decay_copy(std::forward<T>(t).end());
 2740|  9.84M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  20.3M|            {
 2693|  20.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  20.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  20.3M|            {
 2672|  20.3M|                return decay_copy(t.begin());
 2673|  20.3M|            }
_ZNK4nano6ranges6detail9distance_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SE_:
 3755|   113k|            {
 3756|   113k|                return fn::impl(std::move(first), std::move(last));
 3757|   113k|            }
_ZN4nano6ranges6detail9distance_2fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorESA_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISE_E15difference_typeEE4typeESE_SD_:
 3723|   113k|            {
 3724|   113k|                iter_difference_t<I> counter{0};
 3725|   455k|                while (i != s) {
  ------------------
  |  Branch (3725:24): [True: 341k, False: 113k]
  ------------------
 3726|   341k|                    ++i;
 3727|   341k|                    ++counter;
 3728|   341k|                }
 3729|   113k|                return counter;
 3730|   113k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSB_:
 3177|  2.51M|            {
 3178|  2.51M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.51M|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.51M|            {
 3158|  2.51M|                return t.data();
 3159|  2.51M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_1EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  10.5M|        {
 6793|  10.5M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  10.5M|                                    proj);
 6795|  10.5M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_1NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  10.5M|        {
 6761|  81.7M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 73.0M, False: 8.67M]
  ------------------
 6762|  73.0M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.88M, False: 71.1M]
  ------------------
 6763|  1.88M|                    return first;
 6764|  1.88M|                }
 6765|  71.1M|                ++first;
 6766|  71.1M|            }
 6767|  8.67M|            return first;
 6768|  10.5M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  73.0M|            {
 1300|  73.0M|                return fn::impl(std::forward<F>(f),
 1301|  73.0M|                                std::forward<Args>(args)...);
 1302|  73.0M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_1JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  73.0M|            {
 1289|  73.0M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  73.0M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  5.56M|        {
 6793|  5.56M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  5.56M|                                    proj);
 6795|  5.56M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  5.56M|        {
 6761|  12.6M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 12.2M, False: 431k]
  ------------------
 6762|  12.2M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 5.13M, False: 7.07M]
  ------------------
 6763|  5.13M|                    return first;
 6764|  5.13M|                }
 6765|  7.07M|                ++first;
 6766|  7.07M|            }
 6767|   431k|            return first;
 6768|  5.56M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  12.2M|            {
 1300|  12.2M|                return fn::impl(std::forward<F>(f),
 1301|  12.2M|                                std::forward<Args>(args)...);
 1302|  12.2M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  12.2M|            {
 1289|  12.2M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  12.2M|            }

_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  5.14M|    {
   44|  5.14M|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  9.56k|{
   50|  9.56k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  9.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  9.56k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
   49|  59.3k|{
   50|  59.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  59.3k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
   49|  2.84k|{
   50|  2.84k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.84k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   455k|    {
   44|   455k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|  37.9k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|  94.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  4.93M|    {
   44|  4.93M|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|  1.36M|    {
   44|  1.36M|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E0_clISF_EEDaSN_:
   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_ENKUlSN_E_clISG_EEDaSN_:
   66|   284k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|   600k|{
   50|   600k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   600k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   600k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  31.5M|    {
 1191|  31.5M|        return has_value();
 1192|  31.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  62.2M|    {
  189|  62.2M|        return m_has_value;
  190|  62.2M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  3.27M|    {
 1197|  3.27M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.27M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  3.27M|    {
  172|  3.27M|        return m_unexpected;
  173|  3.27M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  20.3M|    {
   72|  20.3M|        return m_unexpected;
   73|  20.3M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  9.87M|    {
   58|  9.87M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  9.87M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  9.87M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  22.4M|    {
   67|  22.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  22.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  22.4M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.28M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  9.11M|    {
 1251|  9.11M|        return value();
 1252|  9.11M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  27.3M|    {
 1221|  27.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  27.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  27.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  27.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  27.3M|    {
  155|  27.3M|        return m_value;
  156|  27.3M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  5.03M|    {
 1034|  5.03M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  5.03M|    {
  142|  5.03M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  5.28M|    {
 1191|  5.28M|        return has_value();
 1192|  5.28M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.5M|    {
  189|  10.5M|        return m_has_value;
  190|  10.5M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   246k|    {
 1197|   246k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   246k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   246k|    {
  172|   246k|        return m_unexpected;
  173|   246k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  82.1k|    {
 1078|  82.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  82.1k|    {
  151|  82.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.53M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  4.54M|    {
 1251|  4.54M|        return value();
 1252|  4.54M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  5.03M|    {
 1221|  5.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.03M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.03M|    {
  155|  5.03M|        return m_value;
  156|  5.03M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.44M|    {
 1034|  1.44M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.44M|    {
  142|  1.44M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  1.53M|    {
 1191|  1.53M|        return has_value();
 1192|  1.53M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.98M|    {
  189|  2.98M|        return m_has_value;
  190|  2.98M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|  1.44M|    {
 1274|  1.44M|        return std::addressof(value());
 1275|  1.44M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.44M|    {
 1221|  1.44M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.44M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.44M|    {
  155|  1.44M|        return m_value;
  156|  1.44M|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   494k|    {
 1263|   494k|        return std::move(value());
 1264|   494k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  82.1k|    {
 1078|  82.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  82.1k|    {
  151|  82.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.83M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.75M|    {
 1034|  1.75M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.75M|    {
  142|  1.75M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  1.83M|    {
 1191|  1.83M|        return has_value();
 1192|  1.83M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.58M|    {
  189|  3.58M|        return m_has_value;
  190|  3.58M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|  1.75M|    {
 1274|  1.75M|        return std::addressof(value());
 1275|  1.75M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.75M|    {
 1221|  1.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.75M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.75M|    {
  155|  1.75M|        return m_value;
  156|  1.75M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  82.1k|    {
 1078|  82.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  82.1k|    {
  151|  82.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.91M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.83M|    {
 1034|  1.83M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.83M|    {
  142|  1.83M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  1.91M|    {
 1191|  1.91M|        return has_value();
 1192|  1.91M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.75M|    {
  189|  3.75M|        return m_has_value;
  190|  3.75M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|  1.83M|    {
 1274|  1.83M|        return std::addressof(value());
 1275|  1.83M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.83M|    {
 1221|  1.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.83M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.83M|    {
  155|  1.83M|        return m_value;
  156|  1.83M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   246k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   246k|    {
 1191|   246k|        return has_value();
 1192|   246k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   493k|    {
  189|   493k|        return m_has_value;
  190|   493k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   246k|    {
 1197|   246k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   246k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   246k|    {
  172|   246k|        return m_unexpected;
  173|   246k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  82.1k|    {
 1078|  82.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  82.1k|    {
  151|  82.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  82.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  82.1k|    {
 1191|  82.1k|        return has_value();
 1192|  82.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  82.1k|    {
  189|  82.1k|        return m_has_value;
  190|  82.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  82.1k|    {
 1078|  82.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  82.1k|    {
  151|  82.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  82.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  82.1k|    {
 1191|  82.1k|        return has_value();
 1192|  82.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  82.1k|    {
  189|  82.1k|        return m_has_value;
  190|  82.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  82.1k|    {
 1078|  82.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  82.1k|    {
  151|  82.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  82.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  82.1k|    {
 1191|  82.1k|        return has_value();
 1192|  82.1k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  82.1k|    {
  189|  82.1k|        return m_has_value;
  190|  82.1k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   739k|    {
 1078|   739k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   739k|    {
  151|   739k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.81M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  4.07M|    {
 1034|  4.07M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  4.07M|    {
  142|  4.07M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  4.81M|    {
 1191|  4.81M|        return has_value();
 1192|  4.81M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  9.62M|    {
  189|  9.62M|        return m_has_value;
  190|  9.62M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   739k|    {
 1197|   739k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   739k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   739k|    {
  172|   739k|        return m_unexpected;
  173|   739k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.40M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.67M|    {
 1251|  3.67M|        return value();
 1252|  3.67M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  4.07M|    {
 1221|  4.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.07M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.07M|    {
  155|  4.07M|        return m_value;
  156|  4.07M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.15M|    {
 1034|  1.15M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.15M|    {
  142|  1.15M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|  1.40M|    {
 1191|  1.40M|        return has_value();
 1192|  1.40M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.55M|    {
  189|  2.55M|        return m_has_value;
  190|  2.55M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEptEv:
 1273|  1.15M|    {
 1274|  1.15M|        return std::addressof(value());
 1275|  1.15M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.15M|    {
 1221|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.15M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.15M|    {
  155|  1.15M|        return m_value;
  156|  1.15M|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   400k|    {
 1263|   400k|        return std::move(value());
 1264|   400k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.67M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.42M|    {
 1034|  1.42M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.42M|    {
  142|  1.42M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|  1.67M|    {
 1191|  1.67M|        return has_value();
 1192|  1.67M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.10M|    {
  189|  3.10M|        return m_has_value;
  190|  3.10M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEptEv:
 1273|  1.42M|    {
 1274|  1.42M|        return std::addressof(value());
 1275|  1.42M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.42M|    {
 1221|  1.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.42M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.42M|    {
  155|  1.42M|        return m_value;
  156|  1.42M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.73M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.49M|    {
 1034|  1.49M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.49M|    {
  142|  1.49M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|  1.73M|    {
 1191|  1.73M|        return has_value();
 1192|  1.73M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.22M|    {
  189|  3.22M|        return m_has_value;
  190|  3.22M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEptEv:
 1273|  1.49M|    {
 1274|  1.49M|        return std::addressof(value());
 1275|  1.49M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.49M|    {
 1221|  1.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.49M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.49M|    {
  155|  1.49M|        return m_value;
  156|  1.49M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   739k|    {
 1078|   739k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   739k|    {
  151|   739k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   739k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   739k|    {
 1191|   739k|        return has_value();
 1192|   739k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.47M|    {
  189|  1.47M|        return m_has_value;
  190|  1.47M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   739k|    {
 1197|   739k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   739k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   739k|    {
  172|   739k|        return m_unexpected;
  173|   739k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   246k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJfEEENS0_10scan_errorEEcvbEv:
 1190|   246k|    {
 1191|   246k|        return has_value();
 1192|   246k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   246k|    {
  189|   246k|        return m_has_value;
  190|   246k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   246k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEcvbEv:
 1190|   246k|    {
 1191|   246k|        return has_value();
 1192|   246k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   246k|    {
  189|   246k|        return m_has_value;
  190|   246k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   246k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJeEEENS0_10scan_errorEEcvbEv:
 1190|   246k|    {
 1191|   246k|        return has_value();
 1192|   246k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   246k|    {
  189|   246k|        return m_has_value;
  190|   246k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  5.28M|    {
 1405|  5.28M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.28M|                                            std::forward<F>(f));
 1407|  5.28M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  5.28M|{
  927|  5.28M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.28M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.28M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.28M|            return result(*std::forward<Exp>(exp));
  931|  5.28M|        }
  932|       |
  933|  5.28M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.28M|        return result(unexpect, monostate{});
  935|  5.28M|    }
  936|  5.28M|    else {
  937|  5.28M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.28M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.25M, False: 23.4k]
  |  |  ------------------
  ------------------
  939|  5.28M|                   ? result(*std::forward<Exp>(exp))
  940|  5.28M|                   : result(unexpect,
  941|  23.4k|                            std::invoke(std::forward<F>(f),
  942|  23.4k|                                        std::forward<Exp>(exp).error()));
  943|  5.28M|    }
  944|  5.28M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  19.8M|    {
  189|  19.8M|        return m_has_value;
  190|  19.8M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  5.25M|    {
 1263|  5.25M|        return std::move(value());
 1264|  5.25M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  6.74M|    {
 1221|  6.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.74M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  6.74M|    {
  155|  6.74M|        return m_value;
  156|  6.74M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  20.5M|    {
 1034|  20.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  20.5M|    {
  142|  20.5M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  26.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  23.4k|    {
 1207|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  23.4k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  29.9k|    {
  172|  29.9k|        return m_unexpected;
  173|  29.9k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   378k|    {
   72|   378k|        return m_unexpected;
   73|   378k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  5.16M|    {
 1088|  5.16M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  5.56M|    {
  151|  5.56M|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  31.4M|    {
 1191|  31.4M|        return has_value();
 1192|  31.4M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  47.4M|    {
  189|  47.4M|        return m_has_value;
  190|  47.4M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   482k|    {
 1197|   482k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   482k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   482k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   482k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   482k|    {
  172|   482k|        return m_unexpected;
  173|   482k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   395k|    {
 1078|   395k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  11.8M|    {
 1263|  11.8M|        return std::move(value());
 1264|  11.8M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  15.5M|    {
 1221|  15.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  15.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  15.5M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  15.5M|    {
  155|  15.5M|        return m_value;
  156|  15.5M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   672k|    {
   58|   672k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   672k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   672k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  3.27M|    {
 1078|  3.27M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  3.27M|    {
  151|  3.27M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  30.6M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  62.8k|    {
   58|  62.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  62.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  62.8k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  29.9k|    {
 1078|  29.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  29.9k|    {
  151|  29.9k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   189k|    {
   67|   189k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   189k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   189k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  13.1M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  13.0M|    {
 1034|  13.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.0M|    {
  142|  13.0M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  7.83M|    {
 1191|  7.83M|        return has_value();
 1192|  7.83M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  6.46k|    {
 1197|  6.46k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.46k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  78.5k|    {
   58|  78.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  78.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  78.5k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  5.25M|    {
 1078|  5.25M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  43.0M|    {
   72|  43.0M|        return m_unexpected;
   73|  43.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  5.25M|    {
  151|  5.25M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  11.2M|    {
   67|  11.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  11.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  11.2M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  30.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.48M|    {
 1251|  1.48M|        return value();
 1252|  1.48M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  1.51M|    {
 1034|  1.51M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.51M|    {
  142|  1.51M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  45.6M|    {
   58|  45.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  45.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  45.6M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  21.5M|    {
 1078|  21.5M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  45.6M|    {
   72|  45.6M|        return m_unexpected;
   73|  45.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  21.5M|    {
  151|  21.5M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  45.6M|    {
   67|  45.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  45.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  45.6M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  35.4M|    {
 1191|  35.4M|        return has_value();
 1192|  35.4M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  60.1M|    {
  189|  60.1M|        return m_has_value;
  190|  60.1M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  14.4M|    {
 1197|  14.4M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  14.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  14.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  14.4M|    {
  172|  14.4M|        return m_unexpected;
  173|  14.4M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.36M|    {
 1034|  5.36M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.36M|    {
  142|  5.36M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.36M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   126k|    {
   58|   126k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   126k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   126k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    294|    {
 1078|    294|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    294|    {
  151|    294|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  5.00M|    {
 1251|  5.00M|        return value();
 1252|  5.00M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.00M|    {
 1221|  5.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.00M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  5.00M|    {
  155|  5.00M|        return m_value;
  156|  5.00M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|   110k|    {
 1191|   110k|        return has_value();
 1192|   110k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  10.7M|    {
  189|  10.7M|        return m_has_value;
  190|  10.7M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.25M|    {
 1263|  5.25M|        return std::move(value());
 1264|  5.25M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.36M|    {
 1221|  5.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.36M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.36M|    {
  155|  5.36M|        return m_value;
  156|  5.36M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  1.95M|    {
 1034|  1.95M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.95M|    {
  142|  1.95M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.65M|    {
 1251|  3.65M|        return value();
 1252|  3.65M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   174k|    {
 1034|   174k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   174k|    {
  142|   174k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  11.0M|    {
   58|  11.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  11.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  11.0M|    }
_ZNO3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1262|  18.2M|    {
 1263|  18.2M|        return std::move(value());
 1264|  18.2M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  5.25M|    {
 1405|  5.25M|        return detail::transform_error_impl(std::move(*this),
 1406|  5.25M|                                            std::forward<F>(f));
 1407|  5.25M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  5.25M|{
  927|  5.25M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.25M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.25M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.25M|            return result(*std::forward<Exp>(exp));
  931|  5.25M|        }
  932|       |
  933|  5.25M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.25M|        return result(unexpect, monostate{});
  935|  5.25M|    }
  936|  5.25M|    else {
  937|  5.25M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.25M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.25M, False: 0]
  |  |  ------------------
  ------------------
  939|  5.25M|                   ? result(*std::forward<Exp>(exp))
  940|  5.25M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  5.25M|    }
  944|  5.25M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  5.25M|    {
 1034|  5.25M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.25M|    {
  142|  5.25M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.25M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  5.25M|    {
 1191|  5.25M|        return has_value();
 1192|  5.25M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  10.5M|    {
  189|  10.5M|        return m_has_value;
  190|  10.5M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.25M|    {
 1263|  5.25M|        return std::move(value());
 1264|  5.25M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.25M|    {
 1221|  5.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.25M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.25M|    {
  155|  5.25M|        return m_value;
  156|  5.25M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  5.14M|    {
 1395|  5.14M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  5.14M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  5.14M|{
  927|  5.14M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  5.14M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  5.14M|        if (SCN_LIKELY(exp.has_value())) {
  930|  5.14M|            return result(*std::forward<Exp>(exp));
  931|  5.14M|        }
  932|       |
  933|  5.14M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  5.14M|        return result(unexpect, monostate{});
  935|  5.14M|    }
  936|  5.14M|    else {
  937|  5.14M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  5.14M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  5.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 5.14M]
  |  |  ------------------
  ------------------
  939|  5.14M|                   ? result(*std::forward<Exp>(exp))
  940|  5.14M|                   : result(unexpect,
  941|  5.14M|                            std::invoke(std::forward<F>(f),
  942|  5.14M|                                        std::forward<Exp>(exp).error()));
  943|  5.14M|    }
  944|  5.14M|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|   110k|    {
 1274|   110k|        return std::addressof(value());
 1275|   110k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  27.0M|    {
 1034|  27.0M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  27.0M|    {
  142|  27.0M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    228|    {
 1078|    228|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    228|    {
  151|    228|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.19M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.19M|    {
 1034|  1.19M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.19M|    {
  142|  1.19M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   246k|    {
 1405|   246k|        return detail::transform_error_impl(std::move(*this),
 1406|   246k|                                            std::forward<F>(f));
 1407|   246k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   246k|{
  927|   246k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   246k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   246k|        if (SCN_LIKELY(exp.has_value())) {
  930|   246k|            return result(*std::forward<Exp>(exp));
  931|   246k|        }
  932|       |
  933|   246k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   246k|        return result(unexpect, monostate{});
  935|   246k|    }
  936|   246k|    else {
  937|   246k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   246k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   246k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 246k, False: 39]
  |  |  ------------------
  ------------------
  939|   246k|                   ? result(*std::forward<Exp>(exp))
  940|   246k|                   : result(unexpect,
  941|     39|                            std::invoke(std::forward<F>(f),
  942|     39|                                        std::forward<Exp>(exp).error()));
  943|   246k|    }
  944|   246k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.06M|    {
  189|  2.06M|        return m_has_value;
  190|  2.06M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   872k|    {
 1263|   872k|        return std::move(value());
 1264|   872k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   872k|    {
 1221|   872k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   872k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   872k|    {
  155|   872k|        return m_value;
  156|   872k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   322k|    {
 1034|   322k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   322k|    {
  142|   322k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.23M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    216|    {
 1207|    216|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    216|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    216|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    216|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    228|    {
  172|    228|        return m_unexpected;
  173|    228|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   455k|    {
 1088|   455k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   910k|    {
  151|   910k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   322k|    {
 1191|   322k|        return has_value();
 1192|   322k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|     12|    {
 1197|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     12|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   246k|    {
 1078|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   246k|    {
  151|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.10M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.19M|    {
 1078|  1.19M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.19M|    {
  151|  1.19M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  2.35M|    {
 1191|  2.35M|        return has_value();
 1192|  2.35M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  4.45M|    {
  189|  4.45M|        return m_has_value;
  190|  4.45M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   948k|    {
 1197|   948k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   948k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   948k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   948k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   948k|    {
  172|   948k|        return m_unexpected;
  173|   948k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   246k|    {
 1034|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   246k|    {
  142|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   246k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|  75.8k|    {
 1251|  75.8k|        return value();
 1252|  75.8k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   701k|    {
 1221|   701k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   701k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   701k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   701k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   701k|    {
  155|   701k|        return m_value;
  156|   701k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   493k|    {
  189|   493k|        return m_has_value;
  190|   493k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   246k|    {
 1263|   246k|        return std::move(value());
 1264|   246k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   246k|    {
 1221|   246k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   246k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   246k|    {
  155|   246k|        return m_value;
  156|   246k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   625k|    {
 1405|   625k|        return detail::transform_error_impl(std::move(*this),
 1406|   625k|                                            std::forward<F>(f));
 1407|   625k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   625k|{
  927|   625k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   625k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   625k|        if (SCN_LIKELY(exp.has_value())) {
  930|   625k|            return result(*std::forward<Exp>(exp));
  931|   625k|        }
  932|       |
  933|   625k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   625k|        return result(unexpect, monostate{});
  935|   625k|    }
  936|   625k|    else {
  937|   625k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   625k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   625k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 625k, False: 177]
  |  |  ------------------
  ------------------
  939|   625k|                   ? result(*std::forward<Exp>(exp))
  940|   625k|                   : result(unexpect,
  941|    177|                            std::invoke(std::forward<F>(f),
  942|    177|                                        std::forward<Exp>(exp).error()));
  943|   625k|    }
  944|   625k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   663k|    {
 1034|   663k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   663k|    {
  142|   663k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    177|    {
 1088|    177|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   625k|    {
 1263|   625k|        return std::move(value());
 1264|   625k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   455k|    {
 1078|   455k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   284k|    {
 1221|   284k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   284k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.42M|    {
  189|  2.42M|        return m_has_value;
  190|  2.42M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   284k|    {
  155|   284k|        return m_value;
  156|   284k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   246k|    {
 1405|   246k|        return detail::transform_error_impl(std::move(*this),
 1406|   246k|                                            std::forward<F>(f));
 1407|   246k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   246k|{
  927|   246k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   246k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   246k|        if (SCN_LIKELY(exp.has_value())) {
  930|   246k|            return result(*std::forward<Exp>(exp));
  931|   246k|        }
  932|       |
  933|   246k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   246k|        return result(unexpect, monostate{});
  935|   246k|    }
  936|   246k|    else {
  937|   246k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   246k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   246k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 246k, False: 0]
  |  |  ------------------
  ------------------
  939|   246k|                   ? result(*std::forward<Exp>(exp))
  940|   246k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   246k|    }
  944|   246k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   246k|    {
 1034|   246k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   246k|    {
  142|   246k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   246k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   246k|    {
 1191|   246k|        return has_value();
 1192|   246k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   493k|    {
  189|   493k|        return m_has_value;
  190|   493k|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   246k|    {
 1263|   246k|        return std::move(value());
 1264|   246k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   246k|    {
 1221|   246k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   246k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   246k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   246k|    {
  155|   246k|        return m_value;
  156|   246k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|   455k|    {
 1395|   455k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|   455k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|   455k|{
  927|   455k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   455k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   455k|        if (SCN_LIKELY(exp.has_value())) {
  930|   455k|            return result(*std::forward<Exp>(exp));
  931|   455k|        }
  932|       |
  933|   455k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   455k|        return result(unexpect, monostate{});
  935|   455k|    }
  936|   455k|    else {
  937|   455k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   455k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   455k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 455k]
  |  |  ------------------
  ------------------
  939|   455k|                   ? result(*std::forward<Exp>(exp))
  940|   455k|                   : result(unexpect,
  941|   455k|                            std::invoke(std::forward<F>(f),
  942|   455k|                                        std::forward<Exp>(exp).error()));
  943|   455k|    }
  944|   455k|}
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.47M|    {
 1191|  1.47M|        return has_value();
 1192|  1.47M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   663k|    {
 1197|   663k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   663k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   663k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   663k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   663k|    {
  172|   663k|        return m_unexpected;
  173|   663k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   284k|    {
 1263|   284k|        return std::move(value());
 1264|   284k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   158k|    {
 1078|   158k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   158k|    {
  151|   158k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  24.4M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  24.2M|    {
 1034|  24.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  24.2M|    {
  142|  24.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  4.81M|    {
 1405|  4.81M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.81M|                                            std::forward<F>(f));
 1407|  4.81M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  4.81M|{
  927|  4.81M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.81M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.81M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.81M|            return result(*std::forward<Exp>(exp));
  931|  4.81M|        }
  932|       |
  933|  4.81M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.81M|        return result(unexpect, monostate{});
  935|  4.81M|    }
  936|  4.81M|    else {
  937|  4.81M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.81M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.81M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.78M, False: 25.5k]
  |  |  ------------------
  ------------------
  939|  4.81M|                   ? result(*std::forward<Exp>(exp))
  940|  4.81M|                   : result(unexpect,
  941|  25.5k|                            std::invoke(std::forward<F>(f),
  942|  25.5k|                                        std::forward<Exp>(exp).error()));
  943|  4.81M|    }
  944|  4.81M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  43.2M|    {
  189|  43.2M|        return m_has_value;
  190|  43.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  17.4M|    {
 1263|  17.4M|        return std::move(value());
 1264|  17.4M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  18.6M|    {
 1221|  18.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  18.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  18.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  18.6M|    {
  155|  18.6M|        return m_value;
  156|  18.6M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  17.7M|    {
 1034|  17.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  17.7M|    {
  142|  17.7M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  23.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   151k|    {
 1207|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   151k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   158k|    {
  172|   158k|        return m_unexpected;
  173|   158k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  4.96M|    {
 1088|  4.96M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  6.07M|    {
  151|  6.07M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  1.10M|    {
 1078|  1.10M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  6.86M|    {
 1191|  6.86M|        return has_value();
 1192|  6.86M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  7.18k|    {
 1197|  7.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  7.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  7.18k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  4.85M|    {
 1078|  4.85M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  4.98M|    {
  151|  4.98M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  39.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.25M|    {
 1251|  1.25M|        return value();
 1252|  1.25M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  1.28M|    {
 1034|  1.28M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  1.28M|    {
  142|  1.28M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  19.3M|    {
 1078|  19.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  19.3M|    {
  151|  19.3M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  44.6M|    {
 1191|  44.6M|        return has_value();
 1192|  44.6M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  80.0M|    {
  189|  80.0M|        return m_has_value;
  190|  80.0M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  13.6M|    {
 1197|  13.6M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  13.6M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  13.6M|    {
  172|  13.6M|        return m_unexpected;
  173|  13.6M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  4.88M|    {
 1034|  4.88M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.88M|    {
  142|  4.88M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.88M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|    306|    {
 1078|    306|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  150|    306|    {
  151|    306|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.10M|    {
 1251|  4.10M|        return value();
 1252|  4.10M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  16.7M|    {
 1221|  16.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.7M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  16.7M|    {
  155|  16.7M|        return m_value;
  156|  16.7M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  93.0k|    {
 1191|  93.0k|        return has_value();
 1192|  93.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  9.76M|    {
  189|  9.76M|        return m_has_value;
  190|  9.76M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.78M|    {
 1263|  4.78M|        return std::move(value());
 1264|  4.78M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.88M|    {
 1221|  4.88M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.88M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  4.88M|    {
  155|  4.88M|        return m_value;
  156|  4.88M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  12.7M|    {
 1405|  12.7M|        return detail::transform_error_impl(std::move(*this),
 1406|  12.7M|                                            std::forward<F>(f));
 1407|  12.7M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  12.7M|{
  927|  12.7M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  12.7M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  12.7M|        if (SCN_LIKELY(exp.has_value())) {
  930|  12.7M|            return result(*std::forward<Exp>(exp));
  931|  12.7M|        }
  932|       |
  933|  12.7M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  12.7M|        return result(unexpect, monostate{});
  935|  12.7M|    }
  936|  12.7M|    else {
  937|  12.7M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  12.7M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  12.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 12.6M, False: 125k]
  |  |  ------------------
  ------------------
  939|  12.7M|                   ? result(*std::forward<Exp>(exp))
  940|  12.7M|                   : result(unexpect,
  941|   125k|                            std::invoke(std::forward<F>(f),
  942|   125k|                                        std::forward<Exp>(exp).error()));
  943|  12.7M|    }
  944|  12.7M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  14.2M|    {
 1034|  14.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  14.2M|    {
  142|  14.2M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   125k|    {
 1088|   125k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  12.6M|    {
 1263|  12.6M|        return std::move(value());
 1264|  12.6M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.95M|    {
 1251|  2.95M|        return value();
 1252|  2.95M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.4M|    {
 1221|  13.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.4M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  43.4M|    {
  189|  43.4M|        return m_has_value;
  190|  43.4M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  13.4M|    {
  155|  13.4M|        return m_value;
  156|  13.4M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1033|   147k|    {
 1034|   147k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   147k|    {
  142|   147k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  4.78M|    {
 1405|  4.78M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.78M|                                            std::forward<F>(f));
 1407|  4.78M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  4.78M|{
  927|  4.78M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.78M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.78M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.78M|            return result(*std::forward<Exp>(exp));
  931|  4.78M|        }
  932|       |
  933|  4.78M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.78M|        return result(unexpect, monostate{});
  935|  4.78M|    }
  936|  4.78M|    else {
  937|  4.78M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.78M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.78M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.78M, False: 0]
  |  |  ------------------
  ------------------
  939|  4.78M|                   ? result(*std::forward<Exp>(exp))
  940|  4.78M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  4.78M|    }
  944|  4.78M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  4.78M|    {
 1034|  4.78M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.78M|    {
  142|  4.78M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.78M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  4.78M|    {
 1191|  4.78M|        return has_value();
 1192|  4.78M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  9.57M|    {
  189|  9.57M|        return m_has_value;
  190|  9.57M|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.78M|    {
 1263|  4.78M|        return std::move(value());
 1264|  4.78M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.78M|    {
 1221|  4.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.78M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.78M|    {
  155|  4.78M|        return m_value;
  156|  4.78M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  4.93M|    {
 1395|  4.93M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  4.93M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  4.93M|{
  927|  4.93M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.93M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.93M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.93M|            return result(*std::forward<Exp>(exp));
  931|  4.93M|        }
  932|       |
  933|  4.93M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.93M|        return result(unexpect, monostate{});
  935|  4.93M|    }
  936|  4.93M|    else {
  937|  4.93M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.93M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.93M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 4.93M]
  |  |  ------------------
  ------------------
  939|  4.93M|                   ? result(*std::forward<Exp>(exp))
  940|  4.93M|                   : result(unexpect,
  941|  4.93M|                            std::invoke(std::forward<F>(f),
  942|  4.93M|                                        std::forward<Exp>(exp).error()));
  943|  4.93M|    }
  944|  4.93M|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1273|  92.7k|    {
 1274|  92.7k|        return std::addressof(value());
 1275|  92.7k|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  28.6M|    {
 1191|  28.6M|        return has_value();
 1192|  28.6M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  1.43M|    {
 1197|  1.43M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.43M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.43M|    {
  172|  1.43M|        return m_unexpected;
  173|  1.43M|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  10.4M|    {
 1263|  10.4M|        return std::move(value());
 1264|  10.4M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  1.36M|    {
 1078|  1.36M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  2.73M|    {
  151|  2.73M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.69M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   967k|    {
 1034|   967k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   967k|    {
  142|   967k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  4.43M|    {
 1191|  4.43M|        return has_value();
 1192|  4.43M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.28M|    {
  189|  7.28M|        return m_has_value;
  190|  7.28M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  1.99M|    {
 1197|  1.99M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.99M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.99M|    {
  172|  1.99M|        return m_unexpected;
  173|  1.99M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   853k|    {
 1221|   853k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   853k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   853k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   853k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   853k|    {
  155|   853k|        return m_value;
  156|   853k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    330|    {
 1078|    330|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    330|    {
  151|    330|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.58M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  3.58M|    {
 1034|  3.58M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  3.58M|    {
  142|  3.58M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   739k|    {
 1405|   739k|        return detail::transform_error_impl(std::move(*this),
 1406|   739k|                                            std::forward<F>(f));
 1407|   739k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   739k|{
  927|   739k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   739k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   739k|        if (SCN_LIKELY(exp.has_value())) {
  930|   739k|            return result(*std::forward<Exp>(exp));
  931|   739k|        }
  932|       |
  933|   739k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   739k|        return result(unexpect, monostate{});
  935|   739k|    }
  936|   739k|    else {
  937|   739k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   739k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   739k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 739k, False: 117]
  |  |  ------------------
  ------------------
  939|   739k|                   ? result(*std::forward<Exp>(exp))
  940|   739k|                   : result(unexpect,
  941|    117|                            std::invoke(std::forward<F>(f),
  942|    117|                                        std::forward<Exp>(exp).error()));
  943|   739k|    }
  944|   739k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  6.20M|    {
  189|  6.20M|        return m_has_value;
  190|  6.20M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  2.61M|    {
 1263|  2.61M|        return std::move(value());
 1264|  2.61M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  2.61M|    {
 1221|  2.61M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.61M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  2.61M|    {
  155|  2.61M|        return m_value;
  156|  2.61M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    294|    {
 1207|    294|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    294|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    294|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    294|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    330|    {
  172|    330|        return m_unexpected;
  173|    330|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.36M|    {
 1088|  1.36M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   967k|    {
 1191|   967k|        return has_value();
 1192|   967k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1196|     36|    {
 1197|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|     36|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|   739k|    {
 1078|   739k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|   739k|    {
  151|   739k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.31M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  3.58M|    {
 1078|  3.58M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  3.58M|    {
  151|  3.58M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  7.05M|    {
 1191|  7.05M|        return has_value();
 1192|  7.05M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  13.3M|    {
  189|  13.3M|        return m_has_value;
  190|  13.3M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|  2.84M|    {
 1197|  2.84M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.84M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  2.84M|    {
  172|  2.84M|        return m_unexpected;
  173|  2.84M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   739k|    {
 1034|   739k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   739k|    {
  142|   739k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   739k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1250|   227k|    {
 1251|   227k|        return value();
 1252|   227k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  2.10M|    {
 1221|  2.10M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.10M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.10M|    {
  155|  2.10M|        return m_value;
  156|  2.10M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.47M|    {
  189|  1.47M|        return m_has_value;
  190|  1.47M|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   739k|    {
 1263|   739k|        return std::move(value());
 1264|   739k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   739k|    {
 1221|   739k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   739k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   739k|    {
  155|   739k|        return m_value;
  156|   739k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.87M|    {
 1405|  1.87M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.87M|                                            std::forward<F>(f));
 1407|  1.87M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.87M|{
  927|  1.87M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.87M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.87M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.87M|            return result(*std::forward<Exp>(exp));
  931|  1.87M|        }
  932|       |
  933|  1.87M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.87M|        return result(unexpect, monostate{});
  935|  1.87M|    }
  936|  1.87M|    else {
  937|  1.87M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.87M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.87M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.87M, False: 177]
  |  |  ------------------
  ------------------
  939|  1.87M|                   ? result(*std::forward<Exp>(exp))
  940|  1.87M|                   : result(unexpect,
  941|    177|                            std::invoke(std::forward<F>(f),
  942|    177|                                        std::forward<Exp>(exp).error()));
  943|  1.87M|    }
  944|  1.87M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.99M|    {
 1034|  1.99M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.99M|    {
  142|  1.99M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    177|    {
 1088|    177|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.87M|    {
 1263|  1.87M|        return std::move(value());
 1264|  1.87M|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDaOT_:
 1404|   739k|    {
 1405|   739k|        return detail::transform_error_impl(std::move(*this),
 1406|   739k|                                            std::forward<F>(f));
 1407|   739k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|   739k|{
  927|   739k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   739k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   739k|        if (SCN_LIKELY(exp.has_value())) {
  930|   739k|            return result(*std::forward<Exp>(exp));
  931|   739k|        }
  932|       |
  933|   739k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   739k|        return result(unexpect, monostate{});
  935|   739k|    }
  936|   739k|    else {
  937|   739k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   739k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   739k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 739k, False: 0]
  |  |  ------------------
  ------------------
  939|   739k|                   ? result(*std::forward<Exp>(exp))
  940|   739k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   739k|    }
  944|   739k|}
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1033|   739k|    {
 1034|   739k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   739k|    {
  142|   739k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   739k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|   739k|    {
 1191|   739k|        return has_value();
 1192|   739k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.47M|    {
  189|  1.47M|        return m_has_value;
  190|  1.47M|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1262|   739k|    {
 1263|   739k|        return std::move(value());
 1264|   739k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1220|   739k|    {
 1221|   739k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   739k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   739k|    {
  155|   739k|        return m_value;
  156|   739k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1394|  1.36M|    {
 1395|  1.36M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  1.36M|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
  926|  1.36M|{
  927|  1.36M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.36M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.36M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.36M|            return result(*std::forward<Exp>(exp));
  931|  1.36M|        }
  932|       |
  933|  1.36M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.36M|        return result(unexpect, monostate{});
  935|  1.36M|    }
  936|  1.36M|    else {
  937|  1.36M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.36M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  939|  1.36M|                   ? result(*std::forward<Exp>(exp))
  940|  1.36M|                   : result(unexpect,
  941|  1.36M|                            std::invoke(std::forward<F>(f),
  942|  1.36M|                                        std::forward<Exp>(exp).error()));
  943|  1.36M|    }
  944|  1.36M|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   853k|    {
 1263|   853k|        return std::move(value());
 1264|   853k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1033|   316k|    {
 1034|   316k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  141|   316k|    {
  142|   316k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.6k|{
  200|  12.6k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.6k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  12.6k|{
  180|  12.6k|    return p;
  181|  12.6k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.6k|{
  200|  12.6k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.6k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  12.6k|{
  180|  12.6k|    return p;
  181|  12.6k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  12.6k|{
  200|  12.6k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  12.6k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  12.6k|{
  180|  12.6k|    return p;
  181|  12.6k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  53.2M|{
  200|  53.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  53.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  53.2M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  54.3M|{
  180|  54.3M|    return p;
  181|  54.3M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  22.1M|{
  200|  22.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  22.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  22.1M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  22.1M|{
  180|  22.1M|    return p;
  181|  22.1M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  1.06M|{
  200|  1.06M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  1.06M|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  21.6M|{
  200|  21.6M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  21.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  21.6M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  27.8M|{
  180|  27.8M|    return p;
  181|  27.8M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  6.14M|{
  200|  6.14M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  6.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  6.14M|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  50.4k|    {
  242|  50.4k|        return static_cast<size_type>(m_end - m_ptr);
  243|  50.4k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  12.6k|    {
  181|  12.6k|        return m_ptr;
  182|  12.6k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  12.6k|    {
  185|  12.6k|        return m_end;
  186|  12.6k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  6.32k|    {
  238|  6.32k|        return m_ptr;
  239|  6.32k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  6.32k|    {
  120|  6.32k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  75.8k|    {
  181|  75.8k|        return m_ptr;
  182|  75.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  75.8k|    {
  185|  75.8k|        return m_end;
  186|  75.8k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  6.32k|    {
  120|  6.32k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|   227k|    {
  181|   227k|        return m_ptr;
  182|   227k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|   227k|    {
  185|   227k|        return m_end;
  186|   227k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  6.32k|    {
  120|  6.32k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  11.0M|    {
  120|  11.0M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  11.0M|    {
  238|  11.0M|        return m_ptr;
  239|  11.0M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  11.0M|    {
  242|  11.0M|        return static_cast<size_type>(m_end - m_ptr);
  243|  11.0M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|   284k|{
   60|   284k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|   284k|                                          const CharT*, const CharT*>) {
   62|   284k|        return {first, last};
   63|   284k|    }
   64|   284k|    else {
   65|   284k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|   284k|    }
   67|   284k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  10.9M|{
   60|  10.9M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  10.9M|                                          const CharT*, const CharT*>) {
   62|  10.9M|        return {first, last};
   63|  10.9M|    }
   64|  10.9M|    else {
   65|  10.9M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  10.9M|    }
   67|  10.9M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  17.3M|{
   44|  17.3M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  17.3M|                                          decltype(first), decltype(last)> &&
   46|  17.3M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  17.3M|        return {first, last};
   48|  17.3M|    }
   49|  17.3M|    else {
   50|  17.3M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  17.3M|                                       to_address(first), to_address(last)))};
   52|  17.3M|    }
   53|  17.3M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  24.6M|{
   75|  24.6M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  24.6M|                      typename std::basic_string_view<CharT>::iterator,
   77|  24.6M|                      decltype(it)> &&
   78|  24.6M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  24.6M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  24.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  24.6M|        return it;
   81|  24.6M|    }
   82|  24.6M|    else {
   83|  24.6M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  24.6M|    }
   85|  24.6M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   246k|{
   54|   246k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   246k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   246k|        return true;
   57|   246k|    }
   58|   246k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   246k|                           ranges::iterator_t<Range>,
   60|   246k|                           typename detail::basic_scan_buffer<
   61|   246k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   246k|        auto beg = ranges::begin(r);
   63|   246k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 246k, False: 0]
  ------------------
   64|   246k|            return false;
   65|   246k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   246k|    else {
   79|   246k|        return false;
   80|   246k|    }
   81|   246k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   493k|{
  112|   493k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   493k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   493k|        return r;
  115|   493k|    }
  116|   493k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   493k|                           ranges::iterator_t<Range>,
  118|   493k|                           typename detail::basic_scan_buffer<
  119|   493k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   493k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   493k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   493k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   493k|                ranges::begin(r), ranges::end(r)));
  124|   493k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   493k|        }
  126|   493k|        else {
  127|   493k|            return ranges::begin(r).contiguous_segment();
  128|   493k|        }
  129|   493k|    }
  130|   493k|    else {
  131|   493k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   493k|    }
  133|   493k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   625k|{
  166|   625k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   625k|        return ranges_polyfill::usize(r);
  168|   625k|    }
  169|   625k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   625k|                           ranges::iterator_t<Range>,
  171|   625k|                           typename detail::basic_scan_buffer<
  172|   625k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   625k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   625k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   625k|                                       ranges::begin(r).position());
  176|   625k|        }
  177|   625k|        else {
  178|   625k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 625k, False: 0]
  ------------------
  179|   625k|                return static_cast<size_t>(
  180|   625k|                    ranges::begin(r).parent()->chars_available() -
  181|   625k|                    ranges::begin(r).position());
  182|   625k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   625k|        }
  185|   625k|    }
  186|   625k|    else {
  187|   625k|        return 0;
  188|   625k|    }
  189|   625k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   739k|{
   54|   739k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   739k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   739k|        return true;
   57|   739k|    }
   58|   739k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   739k|                           ranges::iterator_t<Range>,
   60|   739k|                           typename detail::basic_scan_buffer<
   61|   739k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   739k|        auto beg = ranges::begin(r);
   63|   739k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 739k, False: 0]
  ------------------
   64|   739k|            return false;
   65|   739k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   739k|    else {
   79|   739k|        return false;
   80|   739k|    }
   81|   739k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   739k|{
  112|   739k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   739k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   739k|        return r;
  115|   739k|    }
  116|   739k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   739k|                           ranges::iterator_t<Range>,
  118|   739k|                           typename detail::basic_scan_buffer<
  119|   739k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   739k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   739k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   739k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   739k|                ranges::begin(r), ranges::end(r)));
  124|   739k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   739k|        }
  126|   739k|        else {
  127|   739k|            return ranges::begin(r).contiguous_segment();
  128|   739k|        }
  129|   739k|    }
  130|   739k|    else {
  131|   739k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   739k|    }
  133|   739k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.87M|{
  166|  1.87M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.87M|        return ranges_polyfill::usize(r);
  168|  1.87M|    }
  169|  1.87M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.87M|                           ranges::iterator_t<Range>,
  171|  1.87M|                           typename detail::basic_scan_buffer<
  172|  1.87M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.87M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.87M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.87M|                                       ranges::begin(r).position());
  176|  1.87M|        }
  177|  1.87M|        else {
  178|  1.87M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.87M, False: 0]
  ------------------
  179|  1.87M|                return static_cast<size_t>(
  180|  1.87M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.87M|                    ranges::begin(r).position());
  182|  1.87M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.87M|        }
  185|  1.87M|    }
  186|  1.87M|    else {
  187|  1.87M|        return 0;
  188|  1.87M|    }
  189|  1.87M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  5.26M|{
  235|  5.26M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  5.26M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  5.26M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  5.26M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  5.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  5.26M|    }
  240|  5.26M|    else {
  241|  5.26M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  5.26M|    }
  243|  5.26M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  5.26M|    {
   50|  5.26M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  15.5M|    {
   63|  15.5M|        return sv;
   64|  15.5M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  19.0M|    {
  142|  19.0M|        return m_view;
  143|  19.0M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  11.5M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  11.0M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  4.98M|    {
  137|  4.98M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  4.98M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  4.98M|    {
  181|  4.98M|        using value_t = ranges::range_value_t<Range>;
  182|  4.98M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  4.98M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  4.98M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  4.98M|            m_storage.reset();
  186|  4.98M|            m_view = string_view_type{ranges::data(range),
  187|  4.98M|                                      ranges_polyfill::usize(range)};
  188|  4.98M|        }
  189|  4.98M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  4.98M|                                          std::basic_string<CharT>>) {
  191|  4.98M|            m_storage.emplace(SCN_FWD(range));
  192|  4.98M|            m_view = string_view_type{*m_storage};
  193|  4.98M|        }
  194|  4.98M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  4.98M|                                          typename detail::basic_scan_buffer<
  196|  4.98M|                                              value_t>::forward_iterator> &&
  197|  4.98M|                           ranges::common_range<Range>) {
  198|  4.98M|            auto beg_seg = range.begin().contiguous_segment();
  199|  4.98M|            auto end_seg = range.end().contiguous_segment();
  200|  4.98M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  4.98M|                             detail::to_address(end_seg.end()))) {
  202|  4.98M|                auto& str = m_storage.emplace();
  203|  4.98M|                str.reserve(range.end().position() - range.begin().position());
  204|  4.98M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  4.98M|                m_view = string_view_type{str};
  206|  4.98M|                return;
  207|  4.98M|            }
  208|       |
  209|  4.98M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  4.98M|                                                            end_seg.data());
  211|  4.98M|            m_storage.reset();
  212|  4.98M|        }
  213|  4.98M|        else {
  214|  4.98M|            auto& str = m_storage.emplace();
  215|  4.98M|            if constexpr (ranges::sized_range<Range>) {
  216|  4.98M|                str.reserve(ranges_polyfill::usize(range));
  217|  4.98M|            }
  218|  4.98M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  4.98M|                      std::back_inserter(str));
  220|  4.98M|            m_view = string_view_type{str};
  221|  4.98M|        }
  222|  4.98M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|  6.09M|    {
  147|  6.09M|        return m_storage.has_value();
  148|  6.09M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|  3.58M|    {
  152|  3.58M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  3.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  3.58M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   493k|{
  235|   493k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   493k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   493k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   493k|        return string_view_wrapper{SCN_FWD(range)};
  239|   493k|    }
  240|   493k|    else {
  241|   493k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   493k|    }
  243|   493k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   493k|    {
   97|   493k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   493k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   531k|    {
  181|   531k|        using value_t = ranges::range_value_t<Range>;
  182|   531k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   531k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   531k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   531k|            m_storage.reset();
  186|   531k|            m_view = string_view_type{ranges::data(range),
  187|   531k|                                      ranges_polyfill::usize(range)};
  188|   531k|        }
  189|   531k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   531k|                                          std::basic_string<CharT>>) {
  191|   531k|            m_storage.emplace(SCN_FWD(range));
  192|   531k|            m_view = string_view_type{*m_storage};
  193|   531k|        }
  194|   531k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   531k|                                          typename detail::basic_scan_buffer<
  196|   531k|                                              value_t>::forward_iterator> &&
  197|   531k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   531k|            auto beg_seg = range.begin().contiguous_segment();
  199|   531k|            auto end_seg = range.end().contiguous_segment();
  200|   531k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 493k, False: 37.9k]
  |  |  ------------------
  ------------------
  201|   531k|                             detail::to_address(end_seg.end()))) {
  202|   493k|                auto& str = m_storage.emplace();
  203|   493k|                str.reserve(range.end().position() - range.begin().position());
  204|   493k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   493k|                m_view = string_view_type{str};
  206|   493k|                return;
  207|   493k|            }
  208|       |
  209|  37.9k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  37.9k|                                                            end_seg.data());
  211|  37.9k|            m_storage.reset();
  212|  37.9k|        }
  213|   531k|        else {
  214|   531k|            auto& str = m_storage.emplace();
  215|   531k|            if constexpr (ranges::sized_range<Range>) {
  216|   531k|                str.reserve(ranges_polyfill::usize(range));
  217|   531k|            }
  218|   531k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   531k|                      std::back_inserter(str));
  220|   531k|            m_view = string_view_type{str};
  221|   531k|        }
  222|   531k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEvOT_:
  136|  37.9k|    {
  137|  37.9k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  37.9k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  20.7M|    {
  142|  20.7M|        return m_view;
  143|  20.7M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  14.0M|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  11.0M|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  4.31M|    {
  137|  4.31M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  4.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  4.31M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  4.31M|    {
  181|  4.31M|        using value_t = ranges::range_value_t<Range>;
  182|  4.31M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  4.31M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  4.31M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  4.31M|            m_storage.reset();
  186|  4.31M|            m_view = string_view_type{ranges::data(range),
  187|  4.31M|                                      ranges_polyfill::usize(range)};
  188|  4.31M|        }
  189|  4.31M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  4.31M|                                          std::basic_string<CharT>>) {
  191|  4.31M|            m_storage.emplace(SCN_FWD(range));
  192|  4.31M|            m_view = string_view_type{*m_storage};
  193|  4.31M|        }
  194|  4.31M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  4.31M|                                          typename detail::basic_scan_buffer<
  196|  4.31M|                                              value_t>::forward_iterator> &&
  197|  4.31M|                           ranges::common_range<Range>) {
  198|  4.31M|            auto beg_seg = range.begin().contiguous_segment();
  199|  4.31M|            auto end_seg = range.end().contiguous_segment();
  200|  4.31M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  4.31M|                             detail::to_address(end_seg.end()))) {
  202|  4.31M|                auto& str = m_storage.emplace();
  203|  4.31M|                str.reserve(range.end().position() - range.begin().position());
  204|  4.31M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  4.31M|                m_view = string_view_type{str};
  206|  4.31M|                return;
  207|  4.31M|            }
  208|       |
  209|  4.31M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  4.31M|                                                            end_seg.data());
  211|  4.31M|            m_storage.reset();
  212|  4.31M|        }
  213|  4.31M|        else {
  214|  4.31M|            auto& str = m_storage.emplace();
  215|  4.31M|            if constexpr (ranges::sized_range<Range>) {
  216|  4.31M|                str.reserve(ranges_polyfill::usize(range));
  217|  4.31M|            }
  218|  4.31M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  4.31M|                      std::back_inserter(str));
  220|  4.31M|            m_view = string_view_type{str};
  221|  4.31M|        }
  222|  4.31M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|  4.95M|    {
  147|  4.95M|        return m_storage.has_value();
  148|  4.95M|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|  2.91M|    {
  152|  2.91M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|  2.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|      0|        return *m_storage;
  154|  2.91M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  2.95M|{
  235|  2.95M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.95M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.95M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.95M|        return string_view_wrapper{SCN_FWD(range)};
  239|  2.95M|    }
  240|  2.95M|    else {
  241|  2.95M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  2.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  2.95M|    }
  243|  2.95M|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  2.95M|    {
   97|  2.95M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  2.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  2.95M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  3.07M|    {
  181|  3.07M|        using value_t = ranges::range_value_t<Range>;
  182|  3.07M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  3.07M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  3.07M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  3.07M|            m_storage.reset();
  186|  3.07M|            m_view = string_view_type{ranges::data(range),
  187|  3.07M|                                      ranges_polyfill::usize(range)};
  188|  3.07M|        }
  189|  3.07M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  3.07M|                                          std::basic_string<CharT>>) {
  191|  3.07M|            m_storage.emplace(SCN_FWD(range));
  192|  3.07M|            m_view = string_view_type{*m_storage};
  193|  3.07M|        }
  194|  3.07M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  3.07M|                                          typename detail::basic_scan_buffer<
  196|  3.07M|                                              value_t>::forward_iterator> &&
  197|  3.07M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  3.07M|            auto beg_seg = range.begin().contiguous_segment();
  199|  3.07M|            auto end_seg = range.end().contiguous_segment();
  200|  3.07M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.95M, False: 113k]
  |  |  ------------------
  ------------------
  201|  3.07M|                             detail::to_address(end_seg.end()))) {
  202|  2.95M|                auto& str = m_storage.emplace();
  203|  2.95M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.95M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.95M|                m_view = string_view_type{str};
  206|  2.95M|                return;
  207|  2.95M|            }
  208|       |
  209|   113k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|   113k|                                                            end_seg.data());
  211|   113k|            m_storage.reset();
  212|   113k|        }
  213|  3.07M|        else {
  214|  3.07M|            auto& str = m_storage.emplace();
  215|  3.07M|            if constexpr (ranges::sized_range<Range>) {
  216|  3.07M|                str.reserve(ranges_polyfill::usize(range));
  217|  3.07M|            }
  218|  3.07M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  3.07M|                      std::back_inserter(str));
  220|  3.07M|            m_view = string_view_type{str};
  221|  3.07M|        }
  222|  3.07M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEvOT_:
  136|   113k|    {
  137|   113k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|   113k|    }
_ZN3scn2v24impl22make_contiguous_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  234|  2.51M|{
  235|  2.51M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.51M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.51M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.51M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.51M|    }
  240|  2.51M|    else {
  241|  2.51M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.51M|    }
  243|  2.51M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2INSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
   49|  2.51M|    {
   50|  2.51M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
  136|  2.51M|    {
  137|  2.51M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  2.51M|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
  180|  2.51M|    {
  181|  2.51M|        using value_t = ranges::range_value_t<Range>;
  182|  2.51M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.51M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.51M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.51M|            m_storage.reset();
  186|  2.51M|            m_view = string_view_type{ranges::data(range),
  187|  2.51M|                                      ranges_polyfill::usize(range)};
  188|  2.51M|        }
  189|  2.51M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  2.51M|                                          std::basic_string<CharT>>) {
  191|  2.51M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  2.51M|            m_view = string_view_type{*m_storage};
  193|  2.51M|        }
  194|  2.51M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  2.51M|                                          typename detail::basic_scan_buffer<
  196|  2.51M|                                              value_t>::forward_iterator> &&
  197|  2.51M|                           ranges::common_range<Range>) {
  198|  2.51M|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.51M|            auto end_seg = range.end().contiguous_segment();
  200|  2.51M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.51M|                             detail::to_address(end_seg.end()))) {
  202|  2.51M|                auto& str = m_storage.emplace();
  203|  2.51M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.51M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.51M|                m_view = string_view_type{str};
  206|  2.51M|                return;
  207|  2.51M|            }
  208|       |
  209|  2.51M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.51M|                                                            end_seg.data());
  211|  2.51M|            m_storage.reset();
  212|  2.51M|        }
  213|  2.51M|        else {
  214|  2.51M|            auto& str = m_storage.emplace();
  215|  2.51M|            if constexpr (ranges::sized_range<Range>) {
  216|  2.51M|                str.reserve(ranges_polyfill::usize(range));
  217|  2.51M|            }
  218|  2.51M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.51M|                      std::back_inserter(str));
  220|  2.51M|            m_view = string_view_type{str};
  221|  2.51M|        }
  222|  2.51M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
  136|  2.04M|    {
  137|  2.04M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  2.04M|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
  180|  2.04M|    {
  181|  2.04M|        using value_t = ranges::range_value_t<Range>;
  182|  2.04M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  2.04M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  2.04M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  2.04M|            m_storage.reset();
  186|  2.04M|            m_view = string_view_type{ranges::data(range),
  187|  2.04M|                                      ranges_polyfill::usize(range)};
  188|  2.04M|        }
  189|  2.04M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  2.04M|                                          std::basic_string<CharT>>) {
  191|  2.04M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  248|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  2.04M|            m_view = string_view_type{*m_storage};
  193|  2.04M|        }
  194|  2.04M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  2.04M|                                          typename detail::basic_scan_buffer<
  196|  2.04M|                                              value_t>::forward_iterator> &&
  197|  2.04M|                           ranges::common_range<Range>) {
  198|  2.04M|            auto beg_seg = range.begin().contiguous_segment();
  199|  2.04M|            auto end_seg = range.end().contiguous_segment();
  200|  2.04M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  2.04M|                             detail::to_address(end_seg.end()))) {
  202|  2.04M|                auto& str = m_storage.emplace();
  203|  2.04M|                str.reserve(range.end().position() - range.begin().position());
  204|  2.04M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  2.04M|                m_view = string_view_type{str};
  206|  2.04M|                return;
  207|  2.04M|            }
  208|       |
  209|  2.04M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  2.04M|                                                            end_seg.data());
  211|  2.04M|            m_storage.reset();
  212|  2.04M|        }
  213|  2.04M|        else {
  214|  2.04M|            auto& str = m_storage.emplace();
  215|  2.04M|            if constexpr (ranges::sized_range<Range>) {
  216|  2.04M|                str.reserve(ranges_polyfill::usize(range));
  217|  2.04M|            }
  218|  2.04M|            std::copy(ranges::begin(range), ranges::end(range),
  219|  2.04M|                      std::back_inserter(str));
  220|  2.04M|            m_view = string_view_type{str};
  221|  2.04M|        }
  222|  2.04M|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  18.3M|{
   97|  18.3M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  18.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.9k, False: 18.3M]
  |  |  ------------------
  ------------------
   98|  29.9k|        return eof_error::eof;
   99|  29.9k|    }
  100|  18.3M|    return eof_error::good;
  101|  18.3M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  18.3M|{
   91|  18.3M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  18.3M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  18.3M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  18.3M|    {
   84|  18.3M|        return begin == end;
   85|  18.3M|    }
   86|  18.3M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   815k|{
   97|   815k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   815k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 51, False: 815k]
  |  |  ------------------
  ------------------
   98|     51|        return eof_error::eof;
   99|     51|    }
  100|   815k|    return eof_error::good;
  101|   815k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   815k|{
   91|   815k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   815k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   815k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   815k|    {
   84|   815k|        return begin == end;
   85|   815k|    }
   86|   815k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  16.4M|{
   97|  16.4M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  16.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.7k, False: 16.4M]
  |  |  ------------------
  ------------------
   98|  32.7k|        return eof_error::eof;
   99|  32.7k|    }
  100|  16.4M|    return eof_error::good;
  101|  16.4M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  16.4M|{
   91|  16.4M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  16.4M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  16.4M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  16.4M|    {
   84|  16.4M|        return begin == end;
   85|  16.4M|    }
   86|  16.4M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.44M|{
   97|  2.44M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 153, False: 2.44M]
  |  |  ------------------
  ------------------
   98|    153|        return eof_error::eof;
   99|    153|    }
  100|  2.44M|    return eof_error::good;
  101|  2.44M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.44M|{
   91|  2.44M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.44M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.44M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.44M|    {
   84|  2.44M|        return begin == end;
   85|  2.44M|    }
   86|  2.44M|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  2.51M|{
  120|  2.51M|    return find_classic_impl(
  121|  2.51M|        source, [](char ch) { return is_ascii_space(ch); },
  122|  2.51M|        [](char32_t cp) { return is_cp_space(cp); });
  123|  2.51M|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  5.51M|{
  128|  5.51M|    return find_classic_impl(
  129|  5.51M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  5.51M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  5.51M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_1ZNS1_30find_classic_space_narrow_fastES8_E3$_2EEPKcS8_T_T0_:
   43|  2.51M|{
   44|  2.51M|    auto it = source.begin();
   45|       |
   46|  11.3M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 10.7M, False: 572k]
  ------------------
   47|  10.7M|        auto sv =
   48|  10.7M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  10.7M|                .substr(0, 8);
   50|       |
   51|  10.7M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 10.5M, False: 219k]
  ------------------
   52|  10.5M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  10.5M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  10.5M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 1.88M, False: 8.67M]
  ------------------
   55|  1.88M|                break;
   56|  1.88M|            }
   57|  8.67M|            continue;
   58|  10.5M|        }
   59|       |
   60|   828k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 668k, False: 160k]
  ------------------
   61|   668k|            auto tmp =
   62|   668k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   668k|            auto res = get_next_code_point(tmp);
   64|   668k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 59.5k, False: 608k]
  ------------------
   65|  59.5k|                return it;
   66|  59.5k|            }
   67|   608k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|   608k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|   608k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|   608k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|   608k|        }
   71|   219k|    }
   72|       |
   73|  2.45M|    return detail::make_string_view_iterator(source, it);
   74|  2.51M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  16.4M|{
   31|  16.4M|    static_assert(sizeof(*source.data()) == 1);
   32|  16.4M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  16.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  16.4M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  16.4M|    return has_byte_greater(word, 127) != 0;
   37|  16.4M|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEc:
  121|  73.0M|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_2clEDi:
  122|   668k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  5.51M|{
   44|  5.51M|    auto it = source.begin();
   45|       |
   46|  5.94M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 5.69M, False: 253k]
  ------------------
   47|  5.69M|        auto sv =
   48|  5.69M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  5.69M|                .substr(0, 8);
   50|       |
   51|  5.69M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 5.56M, False: 128k]
  ------------------
   52|  5.56M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  5.56M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  5.56M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 5.13M, False: 431k]
  ------------------
   55|  5.13M|                break;
   56|  5.13M|            }
   57|   431k|            continue;
   58|  5.56M|        }
   59|       |
   60|   212k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 210k, False: 1.61k]
  ------------------
   61|   210k|            auto tmp =
   62|   210k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   210k|            auto res = get_next_code_point(tmp);
   64|   210k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 126k, False: 83.4k]
  ------------------
   65|   126k|                return it;
   66|   126k|            }
   67|  83.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  83.4k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  83.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  83.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  83.4k|        }
   71|   128k|    }
   72|       |
   73|  5.38M|    return detail::make_string_view_iterator(source, it);
   74|  5.51M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  12.2M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   210k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  5.26M|{
  300|  5.26M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  5.26M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  5.26M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  5.26M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  5.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  5.26M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  5.26M|        return ranges::next(ranges::begin(range),
  306|  5.26M|                            ranges::distance(buf.view().begin(), it));
  307|  5.26M|    }
  308|  5.26M|    else {
  309|  5.26M|        auto it = ranges::begin(range);
  310|       |
  311|  5.26M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  5.26M|            auto seg = get_contiguous_beginning(range);
  313|  5.26M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  5.26M|                seg_it != seg.end()) {
  315|  5.26M|                return ranges_polyfill::batch_next(
  316|  5.26M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  5.26M|            }
  318|  5.26M|            ranges_polyfill::batch_next(it, seg.size());
  319|  5.26M|        }
  320|       |
  321|  5.26M|        return read_while_code_point(
  322|  5.26M|            SCN_FWD(range),
  323|  5.26M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  5.26M|    }
  325|  5.26M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  6.28M|{
  459|  6.28M|    auto it = read_code_unit(range);
  460|  6.28M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  6.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.67k, False: 6.28M]
  |  |  ------------------
  ------------------
  461|  2.67k|        return unexpected(make_eof_parse_error(it.error()));
  462|  2.67k|    }
  463|       |
  464|  11.7M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 11.7M, False: 4.96M]
  ------------------
  465|  11.7M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 1.31M, False: 10.4M]
  ------------------
  466|  1.31M|            return *it;
  467|  1.31M|        }
  468|  11.7M|    }
  469|       |
  470|  4.96M|    return unexpected(parse_error::error);
  471|  6.28M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  14.0M|{
  418|  14.0M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  14.0M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  14.0M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  14.0M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 64.0k, False: 13.9M]
  ------------------
  423|  64.0k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  64.0k|        }
  425|  13.9M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 13.7M, False: 241k]
  ------------------
  426|  13.7M|            return unexpected(parse_error::error);
  427|  13.7M|        }
  428|   241k|        return ranges::next(ranges::begin(range), str.size());
  429|  13.9M|    }
  430|  14.0M|    else {
  431|  14.0M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  14.0M|            if (ch < 'A' || ch > 'Z') {
  433|  14.0M|                return ch;
  434|  14.0M|            }
  435|  14.0M|            return static_cast<char_type>(ch +
  436|  14.0M|                                          static_cast<char_type>('a' - 'A'));
  437|  14.0M|        };
  438|       |
  439|  14.0M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  14.0M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  14.0M|        if (SCN_UNLIKELY(!std::equal(
  443|  14.0M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  14.0M|                    return ascii_tolower(a) ==
  445|  14.0M|                           static_cast<detail::char_t<Range>>(b);
  446|  14.0M|                }))) {
  447|  14.0M|            return unexpected(parse_error::error);
  448|  14.0M|        }
  449|       |
  450|  14.0M|        return it;
  451|  14.0M|    }
  452|  14.0M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  14.0M|{
  407|  14.0M|    unsigned char running_diff{0};
  408|  52.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 38.6M, False: 14.0M]
  ------------------
  409|  38.6M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  38.6M|    }
  411|  14.0M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 217k, False: 13.8M]
  |  Branch (411:33): [True: 60.5k, False: 13.7M]
  ------------------
  412|  14.0M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  70.3k|{
  418|  70.3k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  70.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  70.3k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  70.3k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 818, False: 69.5k]
  ------------------
  423|    818|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|    818|        }
  425|  69.5k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 32.8k, False: 36.7k]
  ------------------
  426|  32.8k|            return unexpected(parse_error::error);
  427|  32.8k|        }
  428|  36.7k|        return ranges::next(ranges::begin(range), str.size());
  429|  69.5k|    }
  430|  70.3k|    else {
  431|  70.3k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  70.3k|            if (ch < 'A' || ch > 'Z') {
  433|  70.3k|                return ch;
  434|  70.3k|            }
  435|  70.3k|            return static_cast<char_type>(ch +
  436|  70.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  70.3k|        };
  438|       |
  439|  70.3k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  70.3k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  70.3k|        if (SCN_UNLIKELY(!std::equal(
  443|  70.3k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  70.3k|                    return ascii_tolower(a) ==
  445|  70.3k|                           static_cast<detail::char_t<Range>>(b);
  446|  70.3k|                }))) {
  447|  70.3k|            return unexpected(parse_error::error);
  448|  70.3k|        }
  449|       |
  450|  70.3k|        return it;
  451|  70.3k|    }
  452|  70.3k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|  1.55M|{
  332|  1.55M|    auto it = read_code_unit(range);
  333|  1.55M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.78k, False: 1.54M]
  |  |  ------------------
  ------------------
  334|  3.78k|        return unexpected(make_eof_parse_error(it.error()));
  335|  3.78k|    }
  336|       |
  337|  1.54M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.38M, False: 164k]
  |  |  ------------------
  ------------------
  338|  1.54M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.38M|        return unexpected(parse_error::error);
  340|  1.38M|    }
  341|       |
  342|   164k|    return *it;
  343|  1.54M|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  6.58k|{
  139|  6.58k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  6.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  6.58k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  6.58k|{
  131|  6.58k|    return ranges::find_if(range, pred);
  132|  6.58k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  3.04M|{
  159|  3.04M|    auto it = read_while_code_unit(range, pred);
  160|  3.04M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 1.40M, False: 1.64M]
  ------------------
  161|  1.40M|        return unexpected(parse_error::error);
  162|  1.40M|    }
  163|  1.64M|    return it;
  164|  3.04M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  3.04M|{
  139|  3.04M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  3.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  3.04M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  3.04M|{
  131|  3.04M|    return ranges::find_if(range, pred);
  132|  3.04M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   246k|{
  300|   246k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   246k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   246k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   246k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   246k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   246k|        return ranges::next(ranges::begin(range),
  306|   246k|                            ranges::distance(buf.view().begin(), it));
  307|   246k|    }
  308|   246k|    else {
  309|   246k|        auto it = ranges::begin(range);
  310|       |
  311|   246k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   246k|            auto seg = get_contiguous_beginning(range);
  313|   246k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   246k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 0, False: 246k]
  ------------------
  315|      0|                return ranges_polyfill::batch_next(
  316|      0|                    it, ranges::distance(seg.begin(), seg_it));
  317|      0|            }
  318|   246k|            ranges_polyfill::batch_next(it, seg.size());
  319|   246k|        }
  320|       |
  321|   246k|        return read_while_code_point(
  322|   246k|            SCN_FWD(range),
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   246k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   246k|    }
  325|   246k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   246k|{
  264|   246k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   246k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   246k|{
  231|   246k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   246k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   246k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   246k|    }
  235|   246k|    else {
  236|   246k|        auto it = ranges::begin(range);
  237|   246k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   246k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   246k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 246k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|   493k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 493k, False: 39]
  ------------------
  246|   493k|            const auto [iter, value] =
  247|   493k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   493k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   493k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 246k, False: 246k]
  ------------------
  250|   246k|                return it;
  251|   246k|            }
  252|   246k|            it = iter;
  253|   246k|        }
  254|       |
  255|     39|        return it;
  256|   246k|    }
  257|   246k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   246k|{
  178|   246k|    static_assert(ranges::contiguous_range<Range> &&
  179|   246k|                  ranges::sized_range<Range>);
  180|       |
  181|   246k|    std::array<char32_t, 16> cp_buf{};
  182|   246k|    std::array<uint8_t, 16> idx_buf{};
  183|   246k|    auto it = ranges::begin(range);
  184|   493k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 246k, False: 246k]
  ------------------
  185|   246k|        auto chunk_begin = it;
  186|   246k|        size_t code_point_count = 0;
  187|   246k|        uint8_t code_unit_idx = 0;
  188|   493k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 493k, False: 0]
  |  Branch (188:52): [True: 246k, False: 246k]
  ------------------
  189|   246k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 246k, False: 0]
  ------------------
  190|   246k|                idx_buf[code_point_count] = code_unit_idx;
  191|   246k|                ++code_point_count;
  192|   246k|            }
  193|   246k|            ++it;
  194|   246k|            ++code_unit_idx;
  195|   246k|        }
  196|       |
  197|   246k|        auto input = detail::make_string_view_from_pointers(
  198|   246k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   246k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   246k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   246k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 246k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   493k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 246k, False: 246k]
  ------------------
  217|   246k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 246k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   246k|        }
  221|   246k|    }
  222|       |
  223|   246k|    return it;
  224|   246k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   493k|{
   42|   493k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   493k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   493k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   493k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 493k, False: 0]
  ------------------
   59|   493k|        ++it;
   60|   493k|        return {it, make_contiguous_buffer(
   61|   493k|                        ranges::subrange{ranges::begin(range), it})};
   62|   493k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   493k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   739k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   284k|{
  459|   284k|    auto it = read_code_unit(range);
  460|   284k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6, False: 284k]
  |  |  ------------------
  ------------------
  461|      6|        return unexpected(make_eof_parse_error(it.error()));
  462|      6|    }
  463|       |
  464|   568k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 568k, False: 284k]
  ------------------
  465|   568k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 568k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   568k|    }
  469|       |
  470|   284k|    return unexpected(parse_error::error);
  471|   284k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   625k|{
  418|   625k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   625k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   625k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   625k|        if (ranges::size(range) < str.size()) {
  423|   625k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   625k|        }
  425|   625k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   625k|            return unexpected(parse_error::error);
  427|   625k|        }
  428|   625k|        return ranges::next(ranges::begin(range), str.size());
  429|   625k|    }
  430|   625k|    else {
  431|   625k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   625k|            if (ch < 'A' || ch > 'Z') {
  433|   625k|                return ch;
  434|   625k|            }
  435|   625k|            return static_cast<char_type>(ch +
  436|   625k|                                          static_cast<char_type>('a' - 'A'));
  437|   625k|        };
  438|       |
  439|   625k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   625k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   625k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   625k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 625k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|   625k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   625k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   625k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 625k, False: 0]
  |  |  ------------------
  ------------------
  443|   625k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   625k|                    return ascii_tolower(a) ==
  445|   625k|                           static_cast<detail::char_t<Range>>(b);
  446|   625k|                }))) {
  447|   625k|            return unexpected(parse_error::error);
  448|   625k|        }
  449|       |
  450|      0|        return it;
  451|   625k|    }
  452|   625k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   625k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   625k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 0, False: 625k]
  |  Branch (432:29): [True: 625k, False: 0]
  ------------------
  433|   625k|                return ch;
  434|   625k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   625k|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   284k|{
  139|   284k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   284k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   284k|{
  131|   284k|    return ranges::find_if(range, pred);
  132|   284k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|  37.9k|{
  332|  37.9k|    auto it = read_code_unit(range);
  333|  37.9k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6, False: 37.9k]
  |  |  ------------------
  ------------------
  334|      6|        return unexpected(make_eof_parse_error(it.error()));
  335|      6|    }
  336|       |
  337|  37.9k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 37.9k, False: 0]
  |  |  ------------------
  ------------------
  338|  37.9k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  37.9k|        return unexpected(parse_error::error);
  340|  37.9k|    }
  341|       |
  342|      0|    return *it;
  343|  37.9k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   284k|{
  159|   284k|    auto it = read_while_code_unit(range, pred);
  160|   284k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 246k, False: 37.9k]
  ------------------
  161|   246k|        return unexpected(parse_error::error);
  162|   246k|    }
  163|  37.9k|    return it;
  164|   284k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  4.79M|{
  300|  4.79M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  4.79M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  4.79M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  4.79M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  4.79M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  4.79M|        return ranges::next(ranges::begin(range),
  306|  4.79M|                            ranges::distance(buf.view().begin(), it));
  307|  4.79M|    }
  308|  4.79M|    else {
  309|  4.79M|        auto it = ranges::begin(range);
  310|       |
  311|  4.79M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  4.79M|            auto seg = get_contiguous_beginning(range);
  313|  4.79M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  4.79M|                seg_it != seg.end()) {
  315|  4.79M|                return ranges_polyfill::batch_next(
  316|  4.79M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  4.79M|            }
  318|  4.79M|            ranges_polyfill::batch_next(it, seg.size());
  319|  4.79M|        }
  320|       |
  321|  4.79M|        return read_while_code_point(
  322|  4.79M|            SCN_FWD(range),
  ------------------
  |  |  248|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.79M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  4.79M|    }
  325|  4.79M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  4.79M|{
  264|  4.79M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  4.79M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  4.79M|{
  231|  4.79M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  4.79M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  4.79M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  4.79M|    }
  235|  4.79M|    else {
  236|  4.79M|        auto it = ranges::begin(range);
  237|  4.79M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  4.79M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  4.79M|            seg_it != seg.end()) {
  241|  4.79M|            return ranges_polyfill::batch_next(
  242|  4.79M|                it, ranges::distance(seg.begin(), seg_it));
  243|  4.79M|        }
  244|       |
  245|  4.79M|        while (it != ranges::end(range)) {
  246|  4.79M|            const auto [iter, value] =
  247|  4.79M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  4.79M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  4.79M|            if (pred(cp)) {
  250|  4.79M|                return it;
  251|  4.79M|            }
  252|  4.79M|            it = iter;
  253|  4.79M|        }
  254|       |
  255|  4.79M|        return it;
  256|  4.79M|    }
  257|  4.79M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  4.79M|{
  178|  4.79M|    static_assert(ranges::contiguous_range<Range> &&
  179|  4.79M|                  ranges::sized_range<Range>);
  180|       |
  181|  4.79M|    std::array<char32_t, 16> cp_buf{};
  182|  4.79M|    std::array<uint8_t, 16> idx_buf{};
  183|  4.79M|    auto it = ranges::begin(range);
  184|  4.87M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 4.86M, False: 8.18k]
  ------------------
  185|  4.86M|        auto chunk_begin = it;
  186|  4.86M|        size_t code_point_count = 0;
  187|  4.86M|        uint8_t code_unit_idx = 0;
  188|  79.9M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 75.3M, False: 4.54M]
  |  Branch (188:52): [True: 75.0M, False: 325k]
  ------------------
  189|  75.0M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 75.0M, False: 0]
  ------------------
  190|  75.0M|                idx_buf[code_point_count] = code_unit_idx;
  191|  75.0M|                ++code_point_count;
  192|  75.0M|            }
  193|  75.0M|            ++it;
  194|  75.0M|            ++code_unit_idx;
  195|  75.0M|        }
  196|       |
  197|  4.86M|        auto input = detail::make_string_view_from_pointers(
  198|  4.86M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  4.86M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  4.86M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  4.86M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  4.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.86M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  10.5M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 10.4M, False: 78.6k]
  ------------------
  217|  10.4M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 4.78M, False: 5.69M]
  ------------------
  218|  4.78M|                return chunk_begin + idx_buf[i];
  219|  4.78M|            }
  220|  10.4M|        }
  221|  4.86M|    }
  222|       |
  223|  8.18k|    return it;
  224|  4.79M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  10.4M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.61M|{
  459|  5.61M|    auto it = read_code_unit(range);
  460|  5.61M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.99k, False: 5.61M]
  |  |  ------------------
  ------------------
  461|  2.99k|        return unexpected(make_eof_parse_error(it.error()));
  462|  2.99k|    }
  463|       |
  464|  10.5M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 10.5M, False: 4.49M]
  ------------------
  465|  10.5M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 1.11M, False: 9.45M]
  ------------------
  466|  1.11M|            return *it;
  467|  1.11M|        }
  468|  10.5M|    }
  469|       |
  470|  4.49M|    return unexpected(parse_error::error);
  471|  5.61M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  12.7M|{
  418|  12.7M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  12.7M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  12.7M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  12.7M|        if (ranges::size(range) < str.size()) {
  423|  12.7M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  12.7M|        }
  425|  12.7M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  12.7M|            return unexpected(parse_error::error);
  427|  12.7M|        }
  428|  12.7M|        return ranges::next(ranges::begin(range), str.size());
  429|  12.7M|    }
  430|  12.7M|    else {
  431|  12.7M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  12.7M|            if (ch < 'A' || ch > 'Z') {
  433|  12.7M|                return ch;
  434|  12.7M|            }
  435|  12.7M|            return static_cast<char_type>(ch +
  436|  12.7M|                                          static_cast<char_type>('a' - 'A'));
  437|  12.7M|        };
  438|       |
  439|  12.7M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  12.7M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.7M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.7M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 125k, False: 12.5M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   125k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   125k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   125k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   125k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   125k|    }                                                  \
  |  |  |  |   70|  12.7M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  12.5M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  12.5M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  12.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.3M, False: 204k]
  |  |  ------------------
  ------------------
  443|  12.5M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  12.5M|                    return ascii_tolower(a) ==
  445|  12.5M|                           static_cast<detail::char_t<Range>>(b);
  446|  12.5M|                }))) {
  447|  12.3M|            return unexpected(parse_error::error);
  448|  12.3M|        }
  449|       |
  450|   204k|        return it;
  451|  12.5M|    }
  452|  12.7M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  14.1M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  14.1M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 12.0M, False: 2.05M]
  |  Branch (432:29): [True: 1.85M, False: 200k]
  ------------------
  433|  13.9M|                return ch;
  434|  13.9M|            }
  435|   200k|            return static_cast<char_type>(ch +
  436|   200k|                                          static_cast<char_type>('a' - 'A'));
  437|  14.1M|        };
_ZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  417|  62.6k|{
  418|  62.6k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  62.6k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  62.6k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  62.6k|        if (ranges::size(range) < str.size()) {
  423|  62.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  62.6k|        }
  425|  62.6k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  62.6k|            return unexpected(parse_error::error);
  427|  62.6k|        }
  428|  62.6k|        return ranges::next(ranges::begin(range), str.size());
  429|  62.6k|    }
  430|  62.6k|    else {
  431|  62.6k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  62.6k|            if (ch < 'A' || ch > 'Z') {
  433|  62.6k|                return ch;
  434|  62.6k|            }
  435|  62.6k|            return static_cast<char_type>(ch +
  436|  62.6k|                                          static_cast<char_type>('a' - 'A'));
  437|  62.6k|        };
  438|       |
  439|  62.6k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  62.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 680, False: 62.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    680|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    680|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    680|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    680|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    680|    }                                                  \
  |  |  |  |   70|  62.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  62.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  62.0k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  62.0k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.8k, False: 33.1k]
  |  |  ------------------
  ------------------
  443|  62.0k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  62.0k|                    return ascii_tolower(a) ==
  445|  62.0k|                           static_cast<detail::char_t<Range>>(b);
  446|  62.0k|                }))) {
  447|  28.8k|            return unexpected(parse_error::error);
  448|  28.8k|        }
  449|       |
  450|  33.1k|        return it;
  451|  62.0k|    }
  452|  62.6k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  431|   196k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   196k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 27.9k, False: 168k]
  |  Branch (432:29): [True: 168k, False: 187]
  ------------------
  433|   196k|                return ch;
  434|   196k|            }
  435|    187|            return static_cast<char_type>(ch +
  436|    187|                                          static_cast<char_type>('a' - 'A'));
  437|   196k|        };
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NDTcl4implISD_EEE4typeE:
  331|  1.24M|{
  332|  1.24M|    auto it = read_code_unit(range);
  333|  1.24M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.18k, False: 1.24M]
  |  |  ------------------
  ------------------
  334|  4.18k|        return unexpected(make_eof_parse_error(it.error()));
  335|  4.18k|    }
  336|       |
  337|  1.24M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.10M, False: 134k]
  |  |  ------------------
  ------------------
  338|  1.24M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.10M|        return unexpected(parse_error::error);
  340|  1.10M|    }
  341|       |
  342|   134k|    return *it;
  343|  1.24M|}
_ZN3scn2v24impl20read_while_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  138|  5.50k|{
  139|  5.50k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  5.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  5.50k|}
_ZN3scn2v24impl20read_until_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISJ_E8functionEEE:
  130|  5.50k|{
  131|  5.50k|    return ranges::find_if(range, pred);
  132|  5.50k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|  2.69M|{
  159|  2.69M|    auto it = read_while_code_unit(range, pred);
  160|  2.69M|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 1.37M, False: 1.32M]
  ------------------
  161|  1.37M|        return unexpected(parse_error::error);
  162|  1.37M|    }
  163|  1.32M|    return it;
  164|  2.69M|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|  2.69M|{
  139|  2.69M|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  2.69M|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|  2.69M|{
  131|  2.69M|    return ranges::find_if(range, pred);
  132|  2.69M|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|  2.04M|{
  231|  2.04M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.04M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.04M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.04M|    }
  235|  2.04M|    else {
  236|  2.04M|        auto it = ranges::begin(range);
  237|  2.04M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.04M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.04M|            seg_it != seg.end()) {
  241|  2.04M|            return ranges_polyfill::batch_next(
  242|  2.04M|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.04M|        }
  244|       |
  245|  2.04M|        while (it != ranges::end(range)) {
  246|  2.04M|            const auto [iter, value] =
  247|  2.04M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.04M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.04M|            if (pred(cp)) {
  250|  2.04M|                return it;
  251|  2.04M|            }
  252|  2.04M|            it = iter;
  253|  2.04M|        }
  254|       |
  255|  2.04M|        return it;
  256|  2.04M|    }
  257|  2.04M|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|  2.04M|{
  178|  2.04M|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.04M|                  ranges::sized_range<Range>);
  180|       |
  181|  2.04M|    std::array<char32_t, 16> cp_buf{};
  182|  2.04M|    std::array<uint8_t, 16> idx_buf{};
  183|  2.04M|    auto it = ranges::begin(range);
  184|  5.68M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 5.22M, False: 456k]
  ------------------
  185|  5.22M|        auto chunk_begin = it;
  186|  5.22M|        size_t code_point_count = 0;
  187|  5.22M|        uint8_t code_unit_idx = 0;
  188|  83.3M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 78.6M, False: 4.72M]
  |  Branch (188:52): [True: 78.0M, False: 503k]
  ------------------
  189|  78.0M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 78.0M, False: 0]
  ------------------
  190|  78.0M|                idx_buf[code_point_count] = code_unit_idx;
  191|  78.0M|                ++code_point_count;
  192|  78.0M|            }
  193|  78.0M|            ++it;
  194|  78.0M|            ++code_unit_idx;
  195|  78.0M|        }
  196|       |
  197|  5.22M|        auto input = detail::make_string_view_from_pointers(
  198|  5.22M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  5.22M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  5.22M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  5.22M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  5.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.22M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  65.4M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 61.7M, False: 3.64M]
  ------------------
  217|  61.7M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 1.58M, False: 60.1M]
  ------------------
  218|  1.58M|                return chunk_begin + idx_buf[i];
  219|  1.58M|            }
  220|  61.7M|        }
  221|  5.22M|    }
  222|       |
  223|   456k|    return it;
  224|  2.04M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   739k|{
  178|   739k|    static_assert(ranges::contiguous_range<Range> &&
  179|   739k|                  ranges::sized_range<Range>);
  180|       |
  181|   739k|    std::array<char32_t, 16> cp_buf{};
  182|   739k|    std::array<uint8_t, 16> idx_buf{};
  183|   739k|    auto it = ranges::begin(range);
  184|  1.47M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 739k, False: 739k]
  ------------------
  185|   739k|        auto chunk_begin = it;
  186|   739k|        size_t code_point_count = 0;
  187|   739k|        uint8_t code_unit_idx = 0;
  188|  1.47M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.47M, False: 0]
  |  Branch (188:52): [True: 739k, False: 739k]
  ------------------
  189|   739k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 739k, False: 0]
  ------------------
  190|   739k|                idx_buf[code_point_count] = code_unit_idx;
  191|   739k|                ++code_point_count;
  192|   739k|            }
  193|   739k|            ++it;
  194|   739k|            ++code_unit_idx;
  195|   739k|        }
  196|       |
  197|   739k|        auto input = detail::make_string_view_from_pointers(
  198|   739k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   739k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   739k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   739k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 739k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  1.47M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 739k, False: 739k]
  ------------------
  217|   739k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 739k]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|   739k|        }
  221|   739k|    }
  222|       |
  223|   739k|    return it;
  224|   739k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   739k|{
  300|   739k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   739k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   739k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   739k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   739k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   739k|        return ranges::next(ranges::begin(range),
  306|   739k|                            ranges::distance(buf.view().begin(), it));
  307|   739k|    }
  308|   739k|    else {
  309|   739k|        auto it = ranges::begin(range);
  310|       |
  311|   739k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   739k|            auto seg = get_contiguous_beginning(range);
  313|   739k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   739k|                seg_it != seg.end()) {
  315|   739k|                return ranges_polyfill::batch_next(
  316|   739k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   739k|            }
  318|   739k|            ranges_polyfill::batch_next(it, seg.size());
  319|   739k|        }
  320|       |
  321|   739k|        return read_while_code_point(
  322|   739k|            SCN_FWD(range),
  ------------------
  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   739k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   739k|    }
  325|   739k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   739k|{
  264|   739k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   739k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   739k|{
  231|   739k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   739k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   739k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   739k|    }
  235|   739k|    else {
  236|   739k|        auto it = ranges::begin(range);
  237|   739k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   739k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   739k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 739k]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  2.95M|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 2.95M, False: 117]
  ------------------
  246|  2.95M|            const auto [iter, value] =
  247|  2.95M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.95M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.95M|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 739k, False: 2.21M]
  ------------------
  250|   739k|                return it;
  251|   739k|            }
  252|  2.21M|            it = iter;
  253|  2.21M|        }
  254|       |
  255|    117|        return it;
  256|   739k|    }
  257|   739k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|  2.95M|{
   42|  2.95M|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|  2.95M|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  2.95M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  2.95M|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 2.95M, False: 0]
  ------------------
   59|  2.95M|        ++it;
   60|  2.95M|        return {it, make_contiguous_buffer(
   61|  2.95M|                        ranges::subrange{ranges::begin(range), it})};
   62|  2.95M|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  2.95M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|  3.69M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   853k|{
  459|   853k|    auto it = read_code_unit(range);
  460|   853k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   853k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18, False: 853k]
  |  |  ------------------
  ------------------
  461|     18|        return unexpected(make_eof_parse_error(it.error()));
  462|     18|    }
  463|       |
  464|  1.70M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.70M, False: 853k]
  ------------------
  465|  1.70M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.70M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.70M|    }
  469|       |
  470|   853k|    return unexpected(parse_error::error);
  471|   853k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.87M|{
  418|  1.87M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.87M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.87M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.87M|        if (ranges::size(range) < str.size()) {
  423|  1.87M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.87M|        }
  425|  1.87M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.87M|            return unexpected(parse_error::error);
  427|  1.87M|        }
  428|  1.87M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.87M|    }
  430|  1.87M|    else {
  431|  1.87M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.87M|            if (ch < 'A' || ch > 'Z') {
  433|  1.87M|                return ch;
  434|  1.87M|            }
  435|  1.87M|            return static_cast<char_type>(ch +
  436|  1.87M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.87M|        };
  438|       |
  439|  1.87M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.87M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.87M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.87M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 177, False: 1.87M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    177|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    177|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    177|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    177|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    177|    }                                                  \
  |  |  |  |   70|  1.87M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.87M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.87M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.87M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.87M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.87M|                    return ascii_tolower(a) ==
  445|  1.87M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.87M|                }))) {
  447|  1.87M|            return unexpected(parse_error::error);
  448|  1.87M|        }
  449|       |
  450|      0|        return it;
  451|  1.87M|    }
  452|  1.87M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.87M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.87M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 0, False: 1.87M]
  |  Branch (432:29): [True: 1.87M, False: 0]
  ------------------
  433|  1.87M|                return ch;
  434|  1.87M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.87M|        };
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   853k|{
  139|   853k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   853k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   853k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   853k|{
  131|   853k|    return ranges::find_if(range, pred);
  132|   853k|}
_ZN3scn2v24impl23read_matching_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|   113k|{
  332|   113k|    auto it = read_code_unit(range);
  333|   113k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18, False: 113k]
  |  |  ------------------
  ------------------
  334|     18|        return unexpected(make_eof_parse_error(it.error()));
  335|     18|    }
  336|       |
  337|   113k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 113k, False: 0]
  |  |  ------------------
  ------------------
  338|   113k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   113k|        return unexpected(parse_error::error);
  340|   113k|    }
  341|       |
  342|      0|    return *it;
  343|   113k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISO_E8functionEEE:
  158|   853k|{
  159|   853k|    auto it = read_while_code_unit(range, pred);
  160|   853k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 739k, False: 113k]
  ------------------
  161|   739k|        return unexpected(parse_error::error);
  162|   739k|    }
  163|   113k|    return it;
  164|   853k|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  2.51M|{
  270|  2.51M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  2.51M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  2.51M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  2.51M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  2.51M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  2.51M|        return ranges::next(ranges::begin(range),
  276|  2.51M|                            ranges::distance(buf.view().begin(), it));
  277|  2.51M|    }
  278|  2.51M|    else {
  279|  2.51M|        auto it = ranges::begin(range);
  280|       |
  281|  2.51M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  2.51M|            auto seg = get_contiguous_beginning(range);
  283|  2.51M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  2.51M|                seg_it != seg.end()) {
  285|  2.51M|                return ranges_polyfill::batch_next(
  286|  2.51M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  2.51M|            }
  288|  2.51M|            ranges_polyfill::batch_next(it, seg.size());
  289|  2.51M|        }
  290|       |
  291|  2.51M|        return read_until_code_point(
  292|  2.51M|            ranges::subrange{it, ranges::end(range)},
  293|  2.51M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  2.51M|    }
  295|  2.51M|}
_ZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_:
  269|  2.04M|{
  270|  2.04M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  2.04M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  2.04M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  2.04M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  2.04M|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  2.04M|        return ranges::next(ranges::begin(range),
  276|  2.04M|                            ranges::distance(buf.view().begin(), it));
  277|  2.04M|    }
  278|  2.04M|    else {
  279|  2.04M|        auto it = ranges::begin(range);
  280|       |
  281|  2.04M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  2.04M|            auto seg = get_contiguous_beginning(range);
  283|  2.04M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  2.04M|                seg_it != seg.end()) {
  285|  2.04M|                return ranges_polyfill::batch_next(
  286|  2.04M|                    it, ranges::distance(seg.begin(), seg_it));
  287|  2.04M|            }
  288|  2.04M|            ranges_polyfill::batch_next(it, seg.size());
  289|  2.04M|        }
  290|       |
  291|  2.04M|        return read_until_code_point(
  292|  2.04M|            ranges::subrange{it, ranges::end(range)},
  293|  2.04M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  2.04M|    }
  295|  2.04M|}
_ZZN3scn2v24impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEOS9_ENKUlDiE_clEDi:
  293|  61.7M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  7.83M|{
   36|  7.83M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.46k, False: 7.82M]
  |  |  ------------------
  ------------------
   37|  6.46k|        return unexpected(e);
   38|  6.46k|    }
   39|       |
   40|  7.82M|    return ranges::next(ranges::begin(range));
   41|  7.83M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  3.57M|{
   30|  3.57M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  3.57M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   322k|{
   36|   322k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 322k]
  |  |  ------------------
  ------------------
   37|     12|        return unexpected(e);
   38|     12|    }
   39|       |
   40|   322k|    return ranges::next(ranges::begin(range));
   41|   322k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   625k|{
   48|   625k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   625k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   625k|        const auto sz = ranges::ssize(range);
   52|   625k|        if (sz < count) {
   53|   625k|            return unexpected(eof_error::eof);
   54|   625k|        }
   55|       |
   56|   625k|        return ranges::next(ranges::begin(range), count);
   57|   625k|    }
   58|   625k|    else {
   59|   625k|        auto it = ranges::begin(range);
   60|   625k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 379k, False: 246k]
  ------------------
   61|   379k|            return ranges_polyfill::batch_next(it, count);
   62|   379k|        }
   63|       |
   64|   986k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 739k, False: 246k]
  ------------------
   65|   739k|             ++i, (void)++it) {
   66|   739k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 177, False: 739k]
  ------------------
   67|    177|                return unexpected(eof_error::eof);
   68|    177|            }
   69|   739k|        }
   70|       |
   71|   246k|        return it;
   72|   246k|    }
   73|   625k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  6.86M|{
   36|  6.86M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.18k, False: 6.85M]
  |  |  ------------------
  ------------------
   37|  7.18k|        return unexpected(e);
   38|  7.18k|    }
   39|       |
   40|  6.85M|    return ranges::next(ranges::begin(range));
   41|  6.86M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  12.7M|{
   48|  12.7M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  12.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  12.7M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  12.7M|        const auto sz = ranges::ssize(range);
   52|  12.7M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 125k, False: 12.6M]
  ------------------
   53|   125k|            return unexpected(eof_error::eof);
   54|   125k|        }
   55|       |
   56|  12.6M|        return ranges::next(ranges::begin(range), count);
   57|  12.7M|    }
   58|  12.7M|    else {
   59|  12.7M|        auto it = ranges::begin(range);
   60|  12.7M|        if (guaranteed_minimum_size(range) >= count) {
   61|  12.7M|            return ranges_polyfill::batch_next(it, count);
   62|  12.7M|        }
   63|       |
   64|  12.7M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  12.7M|             ++i, (void)++it) {
   66|  12.7M|            if (it == ranges::end(range)) {
   67|  12.7M|                return unexpected(eof_error::eof);
   68|  12.7M|            }
   69|  12.7M|        }
   70|       |
   71|  12.7M|        return it;
   72|  12.7M|    }
   73|  12.7M|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  3.18M|{
   30|  3.18M|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  3.18M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   967k|{
   36|   967k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   967k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 967k]
  |  |  ------------------
  ------------------
   37|     36|        return unexpected(e);
   38|     36|    }
   39|       |
   40|   967k|    return ranges::next(ranges::begin(range));
   41|   967k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.87M|{
   48|  1.87M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.87M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.87M|        const auto sz = ranges::ssize(range);
   52|  1.87M|        if (sz < count) {
   53|  1.87M|            return unexpected(eof_error::eof);
   54|  1.87M|        }
   55|       |
   56|  1.87M|        return ranges::next(ranges::begin(range), count);
   57|  1.87M|    }
   58|  1.87M|    else {
   59|  1.87M|        auto it = ranges::begin(range);
   60|  1.87M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.13M, False: 739k]
  ------------------
   61|  1.13M|            return ranges_polyfill::batch_next(it, count);
   62|  1.13M|        }
   63|       |
   64|  2.95M|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 2.21M, False: 739k]
  ------------------
   65|  2.21M|             ++i, (void)++it) {
   66|  2.21M|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 177, False: 2.21M]
  ------------------
   67|    177|                return unexpected(eof_error::eof);
   68|    177|            }
   69|  2.21M|        }
   70|       |
   71|   739k|        return it;
   72|   739k|    }
   73|  1.87M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  5.01M|{
   33|  5.01M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  5.01M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  2.08M|{
   39|  2.08M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  2.08M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 1.04M, False: 1.04M]
  ------------------
   41|  2.08M|                    : std::locale{};
   42|  2.08M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|  1.06M|    {
  112|  1.06M|        auto stdloc = loc.get<std::locale>();
  113|  1.06M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|  1.06M|        grouping = numpunct.grouping();
  115|  1.06M|        thousands_sep =
  116|  1.06M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 1.06M]
  ------------------
  117|  1.06M|        decimal_point = numpunct.decimal_point();
  118|  1.06M|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|  1.06M|{
   49|  1.06M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 1.06M, False: 0]
  ------------------
   50|  1.06M|        return std::use_facet<Facet>(stdloc);
   51|  1.06M|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|  1.06M|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  5.50M|    localized_number_formatting_options() = default;
_ZN3scn2v24impl25set_clocale_classic_guardC2Ei:
   88|  4.56M|    {
   89|  4.56M|        std::setlocale(cat, "C");
   90|  4.56M|    }
_ZN3scn2v24impl16clocale_restorerC2Ei:
   59|  4.56M|    {
   60|  4.56M|        const auto loc = std::setlocale(cat, nullptr);
   61|  4.56M|        std::strcpy(m_locbuf, loc);
   62|  4.56M|    }
_ZN3scn2v24impl16clocale_restorerD2Ev:
   64|  4.56M|    {
   65|       |        // Restore locale to what it was before
   66|  4.56M|        std::setlocale(m_category, m_locbuf);
   67|  4.56M|    }
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|  1.02M|    {
  112|  1.02M|        auto stdloc = loc.get<std::locale>();
  113|  1.02M|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|  1.02M|        grouping = numpunct.grouping();
  115|  1.02M|        thousands_sep =
  116|  1.02M|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 1.02M]
  ------------------
  117|  1.02M|        decimal_point = numpunct.decimal_point();
  118|  1.02M|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|  1.02M|{
   49|  1.02M|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 1.02M, False: 0]
  ------------------
   50|  1.02M|        return std::use_facet<Facet>(stdloc);
   51|  1.02M|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|  1.02M|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  5.52M|    localized_number_formatting_options() = default;

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  5.26M|{
   46|  5.26M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 5.26M, False: 0]
  ------------------
   47|  5.26M|        auto it = read_while_classic_space(range);
   48|  5.26M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  5.26M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.91k, False: 5.25M]
  |  |  ------------------
  ------------------
   50|  6.91k|            return unexpected(e);
   51|  6.91k|        }
   52|       |
   53|  5.25M|        return it;
   54|  5.26M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  5.26M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  5.52M|    {
  126|  5.52M|        return true;
  127|  5.52M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   246k|{
   46|   246k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 246k, False: 0]
  ------------------
   47|   246k|        auto it = read_while_classic_space(range);
   48|   246k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   246k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39, False: 246k]
  |  |  ------------------
  ------------------
   50|     39|            return unexpected(e);
   51|     39|        }
   52|       |
   53|   246k|        return it;
   54|   246k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   246k|}
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  7.94M|    {
   35|  7.94M|        return m_msg == nullptr;
   36|  7.94M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  3.93M|    {
  131|  3.93M|        reader_error_handler eh{};
  132|  3.93M|        get_derived().check_specs_impl(specs, eh);
  133|  3.93M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  3.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.93M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  3.93M|        return {};
  137|  3.93M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  3.93M|    {
  142|  3.93M|        return static_cast<Derived&>(*this);
  143|  3.93M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  4.79M|{
   46|  4.79M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 4.79M, False: 0]
  ------------------
   47|  4.79M|        auto it = read_while_classic_space(range);
   48|  4.79M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  4.79M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.18k, False: 4.78M]
  |  |  ------------------
  ------------------
   50|  8.18k|            return unexpected(e);
   51|  8.18k|        }
   52|       |
   53|  4.78M|        return it;
   54|  4.79M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  4.79M|}
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  5.55M|    {
  126|  5.55M|        return true;
  127|  5.55M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  4.01M|    {
  131|  4.01M|        reader_error_handler eh{};
  132|  4.01M|        get_derived().check_specs_impl(specs, eh);
  133|  4.01M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.01M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.01M|        return {};
  137|  4.01M|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  4.01M|    {
  142|  4.01M|        return static_cast<Derived&>(*this);
  143|  4.01M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   739k|{
   46|   739k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 739k, False: 0]
  ------------------
   47|   739k|        auto it = read_while_classic_space(range);
   48|   739k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   739k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 117, False: 739k]
  |  |  ------------------
  ------------------
   50|    117|            return unexpected(e);
   51|    117|        }
   52|       |
   53|   739k|        return it;
   54|   739k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   739k|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  638|  1.50M|{
  639|  1.50M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  640|  1.50M|                                  m_nan_payload_buffer, value);
  641|  1.50M|    value = this->setsign(value);
  642|  1.50M|    return n;
  643|  1.50M|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  638|  1.32M|{
  639|  1.32M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  640|  1.32M|                                  m_nan_payload_buffer, value);
  641|  1.32M|    value = this->setsign(value);
  642|  1.32M|    return n;
  643|  1.32M|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  638|  1.80M|{
  639|  1.80M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  640|  1.80M|                                  m_nan_payload_buffer, value);
  641|  1.80M|    value = this->setsign(value);
  642|  1.80M|    return n;
  643|  1.80M|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  638|  1.59M|{
  639|  1.59M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  640|  1.59M|                                  m_nan_payload_buffer, value);
  641|  1.59M|    value = this->setsign(value);
  642|  1.59M|    return n;
  643|  1.59M|}
_ZN3scn2v24impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  638|  1.88M|{
  639|  1.88M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  640|  1.88M|                                  m_nan_payload_buffer, value);
  641|  1.88M|    value = this->setsign(value);
  642|  1.88M|    return n;
  643|  1.88M|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  638|  1.65M|{
  639|  1.65M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  640|  1.65M|                                  m_nan_payload_buffer, value);
  641|  1.65M|    value = this->setsign(value);
  642|  1.65M|    return n;
  643|  1.65M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.50M|{
  556|  1.50M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 10.2k, False: 1.49M]
  ------------------
  557|  10.2k|        value = std::numeric_limits<T>::infinity();
  558|  10.2k|        return 3;
  559|  10.2k|    }
  560|  1.49M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 11.3k, False: 1.48M]
  ------------------
  561|  11.3k|        value = std::numeric_limits<T>::infinity();
  562|  11.3k|        return 8;
  563|  11.3k|    }
  564|  1.48M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 28.1k, False: 1.45M]
  ------------------
  565|  28.1k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  28.1k|        return 3;
  567|  28.1k|    }
  568|  1.45M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 427, False: 1.45M]
  ------------------
  569|    427|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|    427|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|    427|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|    427|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|    427|    }
  600|       |
  601|  1.45M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  602|  1.45M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (602:9): [True: 318k, False: 1.13M]
  ------------------
  603|   318k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.69k, False: 311k]
  |  |  ------------------
  ------------------
  604|  6.69k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  605|  6.69k|                                         "Invalid floating-point digit");
  606|  6.69k|        }
  607|   318k|    }
  608|  1.44M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.3k, False: 1.41M]
  |  |  ------------------
  ------------------
  609|  31.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  610|  31.3k|                                     "Invalid floating-point digit");
  611|  31.3k|    }
  612|       |
  613|  1.41M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (613:19): [Folded - Ignored]
  ------------------
  614|  1.41M|        if constexpr (sizeof(double) == sizeof(long double)) {
  615|       |            // If double == long double (true on Windows),
  616|       |            // use fast_float with double
  617|  1.41M|            double tmp{};
  618|  1.41M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  619|  1.41M|            value = tmp;
  620|  1.41M|            return ret;
  621|  1.41M|        }
  622|  1.41M|        else {
  623|       |            // long doubles aren't supported by fast_float ->
  624|       |            // fall back to from_chars or strtod
  625|  1.41M|            return fast_float_fallback(data, value);
  626|  1.41M|        }
  627|  1.41M|    }
  628|  1.41M|    else {
  629|       |        // Default to fast_float
  630|  1.41M|        return fast_float_impl<CharT, T>{data}(value);
  631|  1.41M|    }
  632|  1.41M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  495|  1.41M|    {
  496|  1.41M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  129|  5.63M|    {
  130|  5.63M|        return {kind, options};
  131|  5.63M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  499|  1.41M|    {
  500|  1.41M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 298k, False: 1.11M]
  ------------------
  501|  1.41M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 14.7k, False: 1.10M]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|   313k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|   313k|                                              value);
  505|   313k|        }
  506|       |
  507|  1.10M|        const auto flags = get_flags();
  508|  1.10M|        const auto view = get_view();
  509|  1.10M|        const auto result = fast_float::from_chars(
  510|  1.10M|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|  1.10M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
  513|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|      0|                                         "fast_float: invalid_argument");
  515|      0|        }
  516|  1.10M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.7k, False: 1.08M]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|  14.7k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|  14.7k|                                              value);
  520|  14.7k|        }
  521|       |
  522|  1.08M|        return result.ptr - view.data();
  523|  1.10M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|   328k|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|   328k|    {
  466|   328k|#if !SCN_DISABLE_STRTOD
  467|   328k|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|   328k|    }
  474|   328k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  311|   328k|    {
  312|   328k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  143|   590k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfEclERf:
  315|   328k|    {
  316|   328k|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|   328k|                           generic_strtod);
  318|   328k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  149|   328k|    {
  150|   328k|        CharT* end{};
  151|   328k|        errno = 0;
  152|   328k|        value = strtod_cb(src, &end);
  153|   328k|        const auto saved_errno = errno;
  154|   328k|        auto chars_read = end - src;
  155|       |
  156|   328k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|   328k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18.0k, False: 310k]
  |  |  ------------------
  ------------------
  158|  18.0k|            return unexpected(e);
  159|  18.0k|        }
  160|       |
  161|   310k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 295k, False: 14.3k]
  ------------------
  162|   310k|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 295k, False: 0]
  ------------------
  163|   295k|            chars_read -= 2;
  164|   295k|        }
  165|       |
  166|   310k|        return chars_read;
  167|   328k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  195|   590k|    {
  196|   590k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (196:13): [True: 166k, False: 423k]
  |  Branch (196:37): [True: 0, False: 166k]
  ------------------
  197|      0|            SCN_UNLIKELY_ATTR
  198|      0|            return {scan_error::invalid_scanned_value,
  199|      0|                    "strtod failed: No conversion"};
  200|      0|        }
  201|       |
  202|   590k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (202:13): [True: 27.1k, False: 562k]
  ------------------
  203|   590k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (203:13): [True: 0, False: 27.1k]
  ------------------
  204|      0|            SCN_UNLIKELY_ATTR
  205|      0|            return {scan_error::invalid_scanned_value,
  206|      0|                    "Hexfloats disallowed by format string"};
  207|      0|        }
  208|       |
  209|   590k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (209:13): [True: 31.6k, False: 558k]
  |  Branch (209:34): [True: 3.89k, False: 27.7k]
  ------------------
  210|  3.89k|            SCN_UNLIKELY_ATTR
  211|  3.89k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  212|  3.89k|        }
  213|       |
  214|   586k|        SCN_GCC_COMPAT_PUSH
  215|   586k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  216|       |
  217|   586k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (217:13): [True: 586k, False: 0]
  ------------------
  218|   586k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (218:13): [True: 586k, False: 0]
  ------------------
  219|   586k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (219:13): [True: 27.7k, False: 558k]
  ------------------
  220|  27.7k|            SCN_UNLIKELY_ATTR
  221|  27.7k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  222|  27.7k|        }
  223|       |
  224|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  225|       |
  226|   558k|            return {};
  227|   586k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEf:
  104|   621k|{
  105|   621k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (105:12): [True: 170k, False: 451k]
  |  Branch (105:25): [True: 0, False: 451k]
  ------------------
  106|   621k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|   328k|    {
  173|   328k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 328k, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|   328k|            auto first_space = read_until_classic_space(input.view());
  176|   328k|            input.assign(
  177|   328k|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|   328k|        }
  179|       |
  180|   328k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 298k, False: 29.5k]
  ------------------
  181|   298k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   298k|                input.get_allocated_string().insert(0, "0x");
  183|   298k|            }
  184|   298k|            else {
  185|   298k|                input.get_allocated_string().insert(0, L"0x");
  186|   298k|            }
  187|   298k|        }
  188|       |
  189|   328k|        return input.get_allocated_string().c_str();
  190|   328k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  322|   328k|    {
  323|   328k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|   328k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|   328k|        }
  326|   328k|        else {
  327|   328k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|   328k|        }
  329|   328k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  230|   328k|    {
  231|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  232|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  233|       |        if constexpr (std::is_same_v<T, float>) {
  234|       |            return ::strtof_l(str, str_end, cloc);
  235|       |        }
  236|       |        else if constexpr (std::is_same_v<T, double>) {
  237|       |            return ::strtod_l(str, str_end, cloc);
  238|       |        }
  239|       |        else if constexpr (std::is_same_v<T, long double>) {
  240|       |            return ::strtold_l(str, str_end, cloc);
  241|       |        }
  242|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  243|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  244|       |        if constexpr (std::is_same_v<T, float>) {
  245|       |            return ::_strtof_l(str, str_end, cloc);
  246|       |        }
  247|       |        else if constexpr (std::is_same_v<T, double>) {
  248|       |            return ::_strtod_l(str, str_end, cloc);
  249|       |        }
  250|       |        else if constexpr (std::is_same_v<T, long double>) {
  251|       |            return ::_strtold_l(str, str_end, cloc);
  252|       |        }
  253|       |#else
  254|   328k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  255|   328k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (255:23): [Folded - Ignored]
  ------------------
  256|   328k|            return std::strtof(str, str_end);
  257|   328k|        }
  258|   328k|        else if constexpr (std::is_same_v<T, double>) {
  259|   328k|            return std::strtod(str, str_end);
  260|   328k|        }
  261|   328k|        else if constexpr (std::is_same_v<T, long double>) {
  262|   328k|            return std::strtold(str, str_end);
  263|   328k|        }
  264|   328k|#endif
  265|   328k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  478|  4.32M|    {
  479|  4.32M|        unsigned format_flags{};
  480|  4.32M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (480:13): [True: 4.31M, False: 8.52k]
  ------------------
  481|  4.31M|            format_flags |= fast_float::fixed;
  482|  4.31M|        }
  483|  4.32M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (483:13): [True: 3.70M, False: 611k]
  ------------------
  484|  3.70M|            format_flags |= fast_float::scientific;
  485|  3.70M|        }
  486|       |
  487|  4.32M|        return static_cast<fast_float::chars_format>(format_flags);
  488|  4.32M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  527|  1.10M|    {
  528|  1.10M|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|  1.10M|            return m_input.view();
  530|  1.10M|        }
  531|  1.10M|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  532|  1.10M|            return std::u16string_view{
  533|  1.10M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|  1.10M|                m_input.view().size()};
  535|  1.10M|        }
  536|  1.10M|        else {
  537|  1.10M|            return std::u32string_view{
  538|  1.10M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|  1.10M|                m_input.view().size()};
  540|  1.10M|        }
  541|  1.10M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.32M|{
  556|  1.32M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 8.96k, False: 1.31M]
  ------------------
  557|  8.96k|        value = std::numeric_limits<T>::infinity();
  558|  8.96k|        return 3;
  559|  8.96k|    }
  560|  1.31M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 10.2k, False: 1.30M]
  ------------------
  561|  10.2k|        value = std::numeric_limits<T>::infinity();
  562|  10.2k|        return 8;
  563|  10.2k|    }
  564|  1.30M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 22.1k, False: 1.28M]
  ------------------
  565|  22.1k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  22.1k|        return 3;
  567|  22.1k|    }
  568|  1.28M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 317, False: 1.28M]
  ------------------
  569|    317|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|    317|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|    317|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|    317|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|    317|    }
  600|       |
  601|  1.28M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  602|  1.28M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (602:9): [True: 309k, False: 973k]
  ------------------
  603|   309k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.6k, False: 276k]
  |  |  ------------------
  ------------------
  604|  32.6k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  605|  32.6k|                                         "Invalid floating-point digit");
  606|  32.6k|        }
  607|   309k|    }
  608|  1.25M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 122k, False: 1.12M]
  |  |  ------------------
  ------------------
  609|   122k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  610|   122k|                                     "Invalid floating-point digit");
  611|   122k|    }
  612|       |
  613|  1.12M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (613:19): [Folded - Ignored]
  ------------------
  614|  1.12M|        if constexpr (sizeof(double) == sizeof(long double)) {
  615|       |            // If double == long double (true on Windows),
  616|       |            // use fast_float with double
  617|  1.12M|            double tmp{};
  618|  1.12M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  619|  1.12M|            value = tmp;
  620|  1.12M|            return ret;
  621|  1.12M|        }
  622|  1.12M|        else {
  623|       |            // long doubles aren't supported by fast_float ->
  624|       |            // fall back to from_chars or strtod
  625|  1.12M|            return fast_float_fallback(data, value);
  626|  1.12M|        }
  627|  1.12M|    }
  628|  1.12M|    else {
  629|       |        // Default to fast_float
  630|  1.12M|        return fast_float_impl<CharT, T>{data}(value);
  631|  1.12M|    }
  632|  1.12M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  495|  1.12M|    {
  496|  1.12M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  129|  4.55M|    {
  130|  4.55M|        return {kind, options};
  131|  4.55M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  499|  1.12M|    {
  500|  1.12M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 238k, False: 889k]
  ------------------
  501|  1.12M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 12.3k, False: 877k]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|   250k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|   250k|                                              value);
  505|   250k|        }
  506|       |
  507|   877k|        const auto flags = get_flags();
  508|   877k|        const auto view = get_view();
  509|   877k|        const auto result = fast_float::from_chars(
  510|   877k|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|   877k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 877k]
  |  |  ------------------
  ------------------
  513|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|      0|                                         "fast_float: invalid_argument");
  515|      0|        }
  516|   877k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.9k, False: 866k]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|  10.9k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|  10.9k|                                              value);
  520|  10.9k|        }
  521|       |
  522|   866k|        return result.ptr - view.data();
  523|   877k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|   261k|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|   261k|    {
  466|   261k|#if !SCN_DISABLE_STRTOD
  467|   261k|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|   261k|    }
  474|   261k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  311|   261k|    {
  312|   261k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfEclERf:
  315|   261k|    {
  316|   261k|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|   261k|                           generic_strtod);
  318|   261k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  149|   261k|    {
  150|   261k|        CharT* end{};
  151|   261k|        errno = 0;
  152|   261k|        value = strtod_cb(src, &end);
  153|   261k|        const auto saved_errno = errno;
  154|   261k|        auto chars_read = end - src;
  155|       |
  156|   261k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|   261k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.5k, False: 248k]
  |  |  ------------------
  ------------------
  158|  13.5k|            return unexpected(e);
  159|  13.5k|        }
  160|       |
  161|   248k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 236k, False: 12.0k]
  ------------------
  162|   248k|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 236k, False: 0]
  ------------------
  163|   236k|            chars_read -= 2;
  164|   236k|        }
  165|       |
  166|   248k|        return chars_read;
  167|   261k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|   261k|    {
  173|   261k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 261k, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|   261k|            auto first_space = read_until_classic_space(input.view());
  176|   261k|            input.assign(
  177|   261k|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|   261k|        }
  179|       |
  180|   261k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 238k, False: 23.3k]
  ------------------
  181|   238k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   238k|                input.get_allocated_string().insert(0, "0x");
  183|   238k|            }
  184|   238k|            else {
  185|   238k|                input.get_allocated_string().insert(0, L"0x");
  186|   238k|            }
  187|   238k|        }
  188|       |
  189|   261k|        return input.get_allocated_string().c_str();
  190|   261k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  322|   261k|    {
  323|   261k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|   261k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|   261k|        }
  326|   261k|        else {
  327|   261k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|   261k|        }
  329|   261k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  268|   261k|    {
  269|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  270|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  271|       |        if constexpr (std::is_same_v<T, float>) {
  272|       |            return ::wcstof_l(str, str_end, cloc);
  273|       |        }
  274|       |        else if constexpr (std::is_same_v<T, double>) {
  275|       |            return ::wcstod_l(str, str_end, cloc);
  276|       |        }
  277|       |        else if constexpr (std::is_same_v<T, long double>) {
  278|       |            return ::wcstold_l(str, str_end, cloc);
  279|       |        }
  280|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  281|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  282|       |        if constexpr (std::is_same_v<T, float>) {
  283|       |            return ::_wcstof_l(str, str_end, cloc);
  284|       |        }
  285|       |        else if constexpr (std::is_same_v<T, double>) {
  286|       |            return ::_wcstod_l(str, str_end, cloc);
  287|       |        }
  288|       |        else if constexpr (std::is_same_v<T, long double>) {
  289|       |            return ::_wcstold_l(str, str_end, cloc);
  290|       |        }
  291|       |#else
  292|   261k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  293|   261k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (293:23): [Folded - Ignored]
  ------------------
  294|   261k|            return std::wcstof(str, str_end);
  295|   261k|        }
  296|   261k|        else if constexpr (std::is_same_v<T, double>) {
  297|   261k|            return std::wcstod(str, str_end);
  298|   261k|        }
  299|   261k|        else if constexpr (std::is_same_v<T, long double>) {
  300|   261k|            return std::wcstold(str, str_end);
  301|   261k|        }
  302|   261k|#endif
  303|   261k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  527|   877k|    {
  528|   877k|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|   877k|            return m_input.view();
  530|   877k|        }
  531|   877k|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (531:28): [Folded - Ignored]
  ------------------
  532|   877k|            return std::u16string_view{
  533|   877k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|   877k|                m_input.view().size()};
  535|   877k|        }
  536|   877k|        else {
  537|   877k|            return std::u32string_view{
  538|   877k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|   877k|                m_input.view().size()};
  540|   877k|        }
  541|   877k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.80M|{
  556|  1.80M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 11.2k, False: 1.79M]
  ------------------
  557|  11.2k|        value = std::numeric_limits<T>::infinity();
  558|  11.2k|        return 3;
  559|  11.2k|    }
  560|  1.79M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 12.6k, False: 1.77M]
  ------------------
  561|  12.6k|        value = std::numeric_limits<T>::infinity();
  562|  12.6k|        return 8;
  563|  12.6k|    }
  564|  1.77M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 36.5k, False: 1.74M]
  ------------------
  565|  36.5k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  36.5k|        return 3;
  567|  36.5k|    }
  568|  1.74M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 481, False: 1.74M]
  ------------------
  569|    481|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|    481|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|    481|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|    481|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|    481|    }
  600|       |
  601|  1.74M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  602|  1.74M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (602:9): [True: 403k, False: 1.33M]
  ------------------
  603|   403k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.19k, False: 394k]
  |  |  ------------------
  ------------------
  604|  8.19k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  605|  8.19k|                                         "Invalid floating-point digit");
  606|  8.19k|        }
  607|   403k|    }
  608|  1.73M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.9k, False: 1.69M]
  |  |  ------------------
  ------------------
  609|  34.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  610|  34.9k|                                     "Invalid floating-point digit");
  611|  34.9k|    }
  612|       |
  613|  1.69M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (613:19): [Folded - Ignored]
  ------------------
  614|  1.69M|        if constexpr (sizeof(double) == sizeof(long double)) {
  615|       |            // If double == long double (true on Windows),
  616|       |            // use fast_float with double
  617|  1.69M|            double tmp{};
  618|  1.69M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  619|  1.69M|            value = tmp;
  620|  1.69M|            return ret;
  621|  1.69M|        }
  622|  1.69M|        else {
  623|       |            // long doubles aren't supported by fast_float ->
  624|       |            // fall back to from_chars or strtod
  625|  1.69M|            return fast_float_fallback(data, value);
  626|  1.69M|        }
  627|  1.69M|    }
  628|  1.69M|    else {
  629|       |        // Default to fast_float
  630|  1.69M|        return fast_float_impl<CharT, T>{data}(value);
  631|  1.69M|    }
  632|  1.69M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  495|  1.69M|    {
  496|  1.69M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  499|  1.69M|    {
  500|  1.69M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 381k, False: 1.31M]
  ------------------
  501|  1.69M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 23.8k, False: 1.29M]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|   405k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|   405k|                                              value);
  505|   405k|        }
  506|       |
  507|  1.29M|        const auto flags = get_flags();
  508|  1.29M|        const auto view = get_view();
  509|  1.29M|        const auto result = fast_float::from_chars(
  510|  1.29M|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|  1.29M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
  513|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|      0|                                         "fast_float: invalid_argument");
  515|      0|        }
  516|  1.29M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.84k, False: 1.28M]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|  7.84k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|  7.84k|                                              value);
  520|  7.84k|        }
  521|       |
  522|  1.28M|        return result.ptr - view.data();
  523|  1.29M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|   413k|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|   413k|    {
  466|   413k|#if !SCN_DISABLE_STRTOD
  467|   413k|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|   413k|    }
  474|   413k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  311|   413k|    {
  312|   413k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  143|   754k|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdEclERd:
  315|   413k|    {
  316|   413k|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|   413k|                           generic_strtod);
  318|   413k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  149|   413k|    {
  150|   413k|        CharT* end{};
  151|   413k|        errno = 0;
  152|   413k|        value = strtod_cb(src, &end);
  153|   413k|        const auto saved_errno = errno;
  154|   413k|        auto chars_read = end - src;
  155|       |
  156|   413k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|   413k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.75k, False: 404k]
  |  |  ------------------
  ------------------
  158|  8.75k|            return unexpected(e);
  159|  8.75k|        }
  160|       |
  161|   404k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 381k, False: 23.7k]
  ------------------
  162|   404k|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 381k, False: 0]
  ------------------
  163|   381k|            chars_read -= 2;
  164|   381k|        }
  165|       |
  166|   404k|        return chars_read;
  167|   413k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  195|   754k|    {
  196|   754k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (196:13): [True: 204k, False: 549k]
  |  Branch (196:37): [True: 0, False: 204k]
  ------------------
  197|      0|            SCN_UNLIKELY_ATTR
  198|      0|            return {scan_error::invalid_scanned_value,
  199|      0|                    "strtod failed: No conversion"};
  200|      0|        }
  201|       |
  202|   754k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (202:13): [True: 44.6k, False: 709k]
  ------------------
  203|   754k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (203:13): [True: 0, False: 44.6k]
  ------------------
  204|      0|            SCN_UNLIKELY_ATTR
  205|      0|            return {scan_error::invalid_scanned_value,
  206|      0|                    "Hexfloats disallowed by format string"};
  207|      0|        }
  208|       |
  209|   754k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (209:13): [True: 15.0k, False: 739k]
  |  Branch (209:34): [True: 2.56k, False: 12.4k]
  ------------------
  210|  2.56k|            SCN_UNLIKELY_ATTR
  211|  2.56k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  212|  2.56k|        }
  213|       |
  214|   752k|        SCN_GCC_COMPAT_PUSH
  215|   752k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  216|       |
  217|   752k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (217:13): [True: 752k, False: 0]
  ------------------
  218|   752k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (218:13): [True: 752k, False: 0]
  ------------------
  219|   752k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (219:13): [True: 12.4k, False: 739k]
  ------------------
  220|  12.4k|            SCN_UNLIKELY_ATTR
  221|  12.4k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  222|  12.4k|        }
  223|       |
  224|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  225|       |
  226|   739k|            return {};
  227|   752k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEd:
  108|   769k|{
  109|   769k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (109:12): [True: 207k, False: 562k]
  |  Branch (109:24): [True: 0, False: 562k]
  ------------------
  110|   769k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|   413k|    {
  173|   413k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 413k, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|   413k|            auto first_space = read_until_classic_space(input.view());
  176|   413k|            input.assign(
  177|   413k|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|   413k|        }
  179|       |
  180|   413k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 381k, False: 31.6k]
  ------------------
  181|   381k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   381k|                input.get_allocated_string().insert(0, "0x");
  183|   381k|            }
  184|   381k|            else {
  185|   381k|                input.get_allocated_string().insert(0, L"0x");
  186|   381k|            }
  187|   381k|        }
  188|       |
  189|   413k|        return input.get_allocated_string().c_str();
  190|   413k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  322|   413k|    {
  323|   413k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|   413k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|   413k|        }
  326|   413k|        else {
  327|   413k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|   413k|        }
  329|   413k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  230|   413k|    {
  231|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  232|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  233|       |        if constexpr (std::is_same_v<T, float>) {
  234|       |            return ::strtof_l(str, str_end, cloc);
  235|       |        }
  236|       |        else if constexpr (std::is_same_v<T, double>) {
  237|       |            return ::strtod_l(str, str_end, cloc);
  238|       |        }
  239|       |        else if constexpr (std::is_same_v<T, long double>) {
  240|       |            return ::strtold_l(str, str_end, cloc);
  241|       |        }
  242|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  243|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  244|       |        if constexpr (std::is_same_v<T, float>) {
  245|       |            return ::_strtof_l(str, str_end, cloc);
  246|       |        }
  247|       |        else if constexpr (std::is_same_v<T, double>) {
  248|       |            return ::_strtod_l(str, str_end, cloc);
  249|       |        }
  250|       |        else if constexpr (std::is_same_v<T, long double>) {
  251|       |            return ::_strtold_l(str, str_end, cloc);
  252|       |        }
  253|       |#else
  254|   413k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  255|   413k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (255:23): [Folded - Ignored]
  ------------------
  256|   413k|            return std::strtof(str, str_end);
  257|   413k|        }
  258|   413k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (258:28): [Folded - Ignored]
  ------------------
  259|   413k|            return std::strtod(str, str_end);
  260|   413k|        }
  261|   413k|        else if constexpr (std::is_same_v<T, long double>) {
  262|   413k|            return std::strtold(str, str_end);
  263|   413k|        }
  264|   413k|#endif
  265|   413k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  527|  1.29M|    {
  528|  1.29M|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|  1.29M|            return m_input.view();
  530|  1.29M|        }
  531|  1.29M|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  532|  1.29M|            return std::u16string_view{
  533|  1.29M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|  1.29M|                m_input.view().size()};
  535|  1.29M|        }
  536|  1.29M|        else {
  537|  1.29M|            return std::u32string_view{
  538|  1.29M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|  1.29M|                m_input.view().size()};
  540|  1.29M|        }
  541|  1.29M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.59M|{
  556|  1.59M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 9.93k, False: 1.58M]
  ------------------
  557|  9.93k|        value = std::numeric_limits<T>::infinity();
  558|  9.93k|        return 3;
  559|  9.93k|    }
  560|  1.58M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 11.4k, False: 1.57M]
  ------------------
  561|  11.4k|        value = std::numeric_limits<T>::infinity();
  562|  11.4k|        return 8;
  563|  11.4k|    }
  564|  1.57M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 29.8k, False: 1.54M]
  ------------------
  565|  29.8k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  29.8k|        return 3;
  567|  29.8k|    }
  568|  1.54M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 371, False: 1.54M]
  ------------------
  569|    371|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|    371|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|    371|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|    371|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|    371|    }
  600|       |
  601|  1.54M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  602|  1.54M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (602:9): [True: 386k, False: 1.15M]
  ------------------
  603|   386k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.8k, False: 352k]
  |  |  ------------------
  ------------------
  604|  33.8k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  605|  33.8k|                                         "Invalid floating-point digit");
  606|  33.8k|        }
  607|   386k|    }
  608|  1.50M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124k, False: 1.38M]
  |  |  ------------------
  ------------------
  609|   124k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  610|   124k|                                     "Invalid floating-point digit");
  611|   124k|    }
  612|       |
  613|  1.38M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (613:19): [Folded - Ignored]
  ------------------
  614|  1.38M|        if constexpr (sizeof(double) == sizeof(long double)) {
  615|       |            // If double == long double (true on Windows),
  616|       |            // use fast_float with double
  617|  1.38M|            double tmp{};
  618|  1.38M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  619|  1.38M|            value = tmp;
  620|  1.38M|            return ret;
  621|  1.38M|        }
  622|  1.38M|        else {
  623|       |            // long doubles aren't supported by fast_float ->
  624|       |            // fall back to from_chars or strtod
  625|  1.38M|            return fast_float_fallback(data, value);
  626|  1.38M|        }
  627|  1.38M|    }
  628|  1.38M|    else {
  629|       |        // Default to fast_float
  630|  1.38M|        return fast_float_impl<CharT, T>{data}(value);
  631|  1.38M|    }
  632|  1.38M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  495|  1.38M|    {
  496|  1.38M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  499|  1.38M|    {
  500|  1.38M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (500:13): [True: 314k, False: 1.06M]
  ------------------
  501|  1.38M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (501:13): [True: 20.7k, False: 1.04M]
  ------------------
  502|       |            // fast_float doesn't support hexfloats
  503|   335k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  504|   335k|                                              value);
  505|   335k|        }
  506|       |
  507|  1.04M|        const auto flags = get_flags();
  508|  1.04M|        const auto view = get_view();
  509|  1.04M|        const auto result = fast_float::from_chars(
  510|  1.04M|            view.data(), view.data() + view.size(), value, flags);
  511|       |
  512|  1.04M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
  513|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  514|      0|                                         "fast_float: invalid_argument");
  515|      0|        }
  516|  1.04M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  153|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.76k, False: 1.04M]
  |  |  ------------------
  ------------------
  517|       |            // may just be very large: fall back
  518|  5.76k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  519|  5.76k|                                              value);
  520|  5.76k|        }
  521|       |
  522|  1.04M|        return result.ptr - view.data();
  523|  1.04M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|   340k|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|   340k|    {
  466|   340k|#if !SCN_DISABLE_STRTOD
  467|   340k|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|   340k|    }
  474|   340k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  311|   340k|    {
  312|   340k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdEclERd:
  315|   340k|    {
  316|   340k|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|   340k|                           generic_strtod);
  318|   340k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  149|   340k|    {
  150|   340k|        CharT* end{};
  151|   340k|        errno = 0;
  152|   340k|        value = strtod_cb(src, &end);
  153|   340k|        const auto saved_errno = errno;
  154|   340k|        auto chars_read = end - src;
  155|       |
  156|   340k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|   340k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.27k, False: 334k]
  |  |  ------------------
  ------------------
  158|  6.27k|            return unexpected(e);
  159|  6.27k|        }
  160|       |
  161|   334k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 313k, False: 20.7k]
  ------------------
  162|   334k|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 313k, False: 0]
  ------------------
  163|   313k|            chars_read -= 2;
  164|   313k|        }
  165|       |
  166|   334k|        return chars_read;
  167|   340k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|   340k|    {
  173|   340k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 340k, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|   340k|            auto first_space = read_until_classic_space(input.view());
  176|   340k|            input.assign(
  177|   340k|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|   340k|        }
  179|       |
  180|   340k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 314k, False: 26.5k]
  ------------------
  181|   314k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   314k|                input.get_allocated_string().insert(0, "0x");
  183|   314k|            }
  184|   314k|            else {
  185|   314k|                input.get_allocated_string().insert(0, L"0x");
  186|   314k|            }
  187|   314k|        }
  188|       |
  189|   340k|        return input.get_allocated_string().c_str();
  190|   340k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  322|   340k|    {
  323|   340k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|   340k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|   340k|        }
  326|   340k|        else {
  327|   340k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|   340k|        }
  329|   340k|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  268|   340k|    {
  269|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  270|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  271|       |        if constexpr (std::is_same_v<T, float>) {
  272|       |            return ::wcstof_l(str, str_end, cloc);
  273|       |        }
  274|       |        else if constexpr (std::is_same_v<T, double>) {
  275|       |            return ::wcstod_l(str, str_end, cloc);
  276|       |        }
  277|       |        else if constexpr (std::is_same_v<T, long double>) {
  278|       |            return ::wcstold_l(str, str_end, cloc);
  279|       |        }
  280|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  281|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  282|       |        if constexpr (std::is_same_v<T, float>) {
  283|       |            return ::_wcstof_l(str, str_end, cloc);
  284|       |        }
  285|       |        else if constexpr (std::is_same_v<T, double>) {
  286|       |            return ::_wcstod_l(str, str_end, cloc);
  287|       |        }
  288|       |        else if constexpr (std::is_same_v<T, long double>) {
  289|       |            return ::_wcstold_l(str, str_end, cloc);
  290|       |        }
  291|       |#else
  292|   340k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  293|   340k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (293:23): [Folded - Ignored]
  ------------------
  294|   340k|            return std::wcstof(str, str_end);
  295|   340k|        }
  296|   340k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (296:28): [Folded - Ignored]
  ------------------
  297|   340k|            return std::wcstod(str, str_end);
  298|   340k|        }
  299|   340k|        else if constexpr (std::is_same_v<T, long double>) {
  300|   340k|            return std::wcstold(str, str_end);
  301|   340k|        }
  302|   340k|#endif
  303|   340k|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  527|  1.04M|    {
  528|  1.04M|        if constexpr (get_encoding<CharT>() == encoding::utf8) {
  ------------------
  |  Branch (528:23): [Folded - Ignored]
  ------------------
  529|  1.04M|            return m_input.view();
  530|  1.04M|        }
  531|  1.04M|        else if constexpr (get_encoding<CharT>() == encoding::utf16) {
  ------------------
  |  Branch (531:28): [Folded - Ignored]
  ------------------
  532|  1.04M|            return std::u16string_view{
  533|  1.04M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
  534|  1.04M|                m_input.view().size()};
  535|  1.04M|        }
  536|  1.04M|        else {
  537|  1.04M|            return std::u32string_view{
  538|  1.04M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  539|  1.04M|                m_input.view().size()};
  540|  1.04M|        }
  541|  1.04M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.88M|{
  556|  1.88M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 12.1k, False: 1.87M]
  ------------------
  557|  12.1k|        value = std::numeric_limits<T>::infinity();
  558|  12.1k|        return 3;
  559|  12.1k|    }
  560|  1.87M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 12.7k, False: 1.85M]
  ------------------
  561|  12.7k|        value = std::numeric_limits<T>::infinity();
  562|  12.7k|        return 8;
  563|  12.7k|    }
  564|  1.85M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 36.9k, False: 1.82M]
  ------------------
  565|  36.9k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  36.9k|        return 3;
  567|  36.9k|    }
  568|  1.82M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 531, False: 1.82M]
  ------------------
  569|    531|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|    531|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|    531|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|    531|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|    531|    }
  600|       |
  601|  1.82M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  602|  1.82M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (602:9): [True: 404k, False: 1.41M]
  ------------------
  603|   404k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.74k, False: 396k]
  |  |  ------------------
  ------------------
  604|  8.74k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  605|  8.74k|                                         "Invalid floating-point digit");
  606|  8.74k|        }
  607|   404k|    }
  608|  1.81M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 37.2k, False: 1.77M]
  |  |  ------------------
  ------------------
  609|  37.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  610|  37.2k|                                     "Invalid floating-point digit");
  611|  37.2k|    }
  612|       |
  613|  1.77M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (613:19): [Folded - Ignored]
  ------------------
  614|  1.77M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (614:23): [Folded - Ignored]
  ------------------
  615|       |            // If double == long double (true on Windows),
  616|       |            // use fast_float with double
  617|  1.77M|            double tmp{};
  618|  1.77M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  619|  1.77M|            value = tmp;
  620|  1.77M|            return ret;
  621|  1.77M|        }
  622|  1.77M|        else {
  623|       |            // long doubles aren't supported by fast_float ->
  624|       |            // fall back to from_chars or strtod
  625|  1.77M|            return fast_float_fallback(data, value);
  626|  1.77M|        }
  627|  1.77M|    }
  628|  1.77M|    else {
  629|       |        // Default to fast_float
  630|  1.77M|        return fast_float_impl<CharT, T>{data}(value);
  631|  1.77M|    }
  632|  1.77M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|  1.77M|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|  1.77M|    {
  466|  1.77M|#if !SCN_DISABLE_STRTOD
  467|  1.77M|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|  1.77M|    }
  474|  1.77M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  311|  1.77M|    {
  312|  1.77M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  143|  3.21M|    strtod_impl_base(impl_base base) : impl_base{base} {}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceEclERe:
  315|  1.77M|    {
  316|  1.77M|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|  1.77M|                           generic_strtod);
  318|  1.77M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  149|  1.77M|    {
  150|  1.77M|        CharT* end{};
  151|  1.77M|        errno = 0;
  152|  1.77M|        value = strtod_cb(src, &end);
  153|  1.77M|        const auto saved_errno = errno;
  154|  1.77M|        auto chars_read = end - src;
  155|       |
  156|  1.77M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|  1.77M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.28k, False: 1.77M]
  |  |  ------------------
  ------------------
  158|  3.28k|            return unexpected(e);
  159|  3.28k|        }
  160|       |
  161|  1.77M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 383k, False: 1.38M]
  ------------------
  162|  1.77M|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 383k, False: 0]
  ------------------
  163|   383k|            chars_read -= 2;
  164|   383k|        }
  165|       |
  166|  1.77M|        return chars_read;
  167|  1.77M|    }
float_reader.cpp:_ZNK3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  195|  3.21M|    {
  196|  3.21M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (196:13): [True: 941k, False: 2.27M]
  |  Branch (196:37): [True: 0, False: 941k]
  ------------------
  197|      0|            SCN_UNLIKELY_ATTR
  198|      0|            return {scan_error::invalid_scanned_value,
  199|      0|                    "strtod failed: No conversion"};
  200|      0|        }
  201|       |
  202|  3.21M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (202:13): [True: 45.3k, False: 3.17M]
  ------------------
  203|  3.21M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (203:13): [True: 0, False: 45.3k]
  ------------------
  204|      0|            SCN_UNLIKELY_ATTR
  205|      0|            return {scan_error::invalid_scanned_value,
  206|      0|                    "Hexfloats disallowed by format string"};
  207|      0|        }
  208|       |
  209|  3.21M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (209:13): [True: 5.94k, False: 3.21M]
  |  Branch (209:34): [True: 699, False: 5.24k]
  ------------------
  210|    699|            SCN_UNLIKELY_ATTR
  211|    699|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  212|    699|        }
  213|       |
  214|  3.21M|        SCN_GCC_COMPAT_PUSH
  215|  3.21M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  216|       |
  217|  3.21M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (217:13): [True: 3.21M, False: 0]
  ------------------
  218|  3.21M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (218:13): [True: 3.21M, False: 0]
  ------------------
  219|  3.21M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (219:13): [True: 5.24k, False: 3.21M]
  ------------------
  220|  5.24k|            SCN_UNLIKELY_ATTR
  221|  5.24k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  222|  5.24k|        }
  223|       |
  224|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  225|       |
  226|  3.21M|            return {};
  227|  3.21M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113is_float_zeroEe:
  112|  3.22M|{
  113|  3.22M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (113:12): [True: 942k, False: 2.28M]
  |  Branch (113:26): [True: 0, False: 2.28M]
  ------------------
  114|  3.22M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|  1.77M|    {
  173|  1.77M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 1.77M, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|  1.77M|            auto first_space = read_until_classic_space(input.view());
  176|  1.77M|            input.assign(
  177|  1.77M|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|  1.77M|        }
  179|       |
  180|  1.77M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 383k, False: 1.39M]
  ------------------
  181|   383k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   383k|                input.get_allocated_string().insert(0, "0x");
  183|   383k|            }
  184|   383k|            else {
  185|   383k|                input.get_allocated_string().insert(0, L"0x");
  186|   383k|            }
  187|   383k|        }
  188|       |
  189|  1.77M|        return input.get_allocated_string().c_str();
  190|  1.77M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  322|  1.77M|    {
  323|  1.77M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|  1.77M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|  1.77M|        }
  326|  1.77M|        else {
  327|  1.77M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|  1.77M|        }
  329|  1.77M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  230|  1.77M|    {
  231|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  232|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  233|       |        if constexpr (std::is_same_v<T, float>) {
  234|       |            return ::strtof_l(str, str_end, cloc);
  235|       |        }
  236|       |        else if constexpr (std::is_same_v<T, double>) {
  237|       |            return ::strtod_l(str, str_end, cloc);
  238|       |        }
  239|       |        else if constexpr (std::is_same_v<T, long double>) {
  240|       |            return ::strtold_l(str, str_end, cloc);
  241|       |        }
  242|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  243|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  244|       |        if constexpr (std::is_same_v<T, float>) {
  245|       |            return ::_strtof_l(str, str_end, cloc);
  246|       |        }
  247|       |        else if constexpr (std::is_same_v<T, double>) {
  248|       |            return ::_strtod_l(str, str_end, cloc);
  249|       |        }
  250|       |        else if constexpr (std::is_same_v<T, long double>) {
  251|       |            return ::_strtold_l(str, str_end, cloc);
  252|       |        }
  253|       |#else
  254|  1.77M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  255|  1.77M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (255:23): [Folded - Ignored]
  ------------------
  256|  1.77M|            return std::strtof(str, str_end);
  257|  1.77M|        }
  258|  1.77M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (258:28): [Folded - Ignored]
  ------------------
  259|  1.77M|            return std::strtod(str, str_end);
  260|  1.77M|        }
  261|  1.77M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (261:28): [Folded - Ignored]
  ------------------
  262|  1.77M|            return std::strtold(str, str_end);
  263|  1.77M|        }
  264|  1.77M|#endif
  265|  1.77M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  555|  1.65M|{
  556|  1.65M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (556:9): [True: 10.6k, False: 1.64M]
  ------------------
  557|  10.6k|        value = std::numeric_limits<T>::infinity();
  558|  10.6k|        return 3;
  559|  10.6k|    }
  560|  1.64M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (560:9): [True: 11.4k, False: 1.63M]
  ------------------
  561|  11.4k|        value = std::numeric_limits<T>::infinity();
  562|  11.4k|        return 8;
  563|  11.4k|    }
  564|  1.63M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (564:9): [True: 30.1k, False: 1.60M]
  ------------------
  565|  30.1k|        value = std::numeric_limits<T>::quiet_NaN();
  566|  30.1k|        return 3;
  567|  30.1k|    }
  568|  1.60M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (568:9): [True: 403, False: 1.60M]
  ------------------
  569|    403|        value = std::numeric_limits<T>::quiet_NaN();
  570|       |
  571|       |        // TODO: use payload
  572|       |#if 0
  573|       |                    {
  574|       |                        auto reader = integer_reader<CharT>{
  575|       |                            integer_reader_base::only_unsigned, 0};
  576|       |                        if (auto r = reader.read_source(
  577|       |                                detail::tag_type<unsigned long long>{},
  578|       |                                nan_payload.view());
  579|       |                            SCN_UNLIKELY(!r)) {
  580|       |                            return unexpected(r.error());
  581|       |                        }
  582|       |
  583|       |                        unsigned long long payload;
  584|       |                        if (auto r = reader.parse_value(payload);
  585|       |                            SCN_UNLIKELY(!r)) {
  586|       |                            return unexpected(r.error());
  587|       |                        }
  588|       |
  589|       |                        constexpr auto mantissa_payload_len =
  590|       |                            std::numeric_limits<T>::digits - 2;
  591|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  592|       |
  593|       |
  594|       |                    }
  595|       |#endif
  596|    403|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|    403|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  597|       |
  598|    403|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  599|    403|    }
  600|       |
  601|  1.60M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  602|  1.60M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (602:9): [True: 387k, False: 1.21M]
  ------------------
  603|   387k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.0k, False: 353k]
  |  |  ------------------
  ------------------
  604|  34.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  605|  34.0k|                                         "Invalid floating-point digit");
  606|  34.0k|        }
  607|   387k|    }
  608|  1.56M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 125k, False: 1.44M]
  |  |  ------------------
  ------------------
  609|   125k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  610|   125k|                                     "Invalid floating-point digit");
  611|   125k|    }
  612|       |
  613|  1.44M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (613:19): [Folded - Ignored]
  ------------------
  614|  1.44M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (614:23): [Folded - Ignored]
  ------------------
  615|       |            // If double == long double (true on Windows),
  616|       |            // use fast_float with double
  617|  1.44M|            double tmp{};
  618|  1.44M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  619|  1.44M|            value = tmp;
  620|  1.44M|            return ret;
  621|  1.44M|        }
  622|  1.44M|        else {
  623|       |            // long doubles aren't supported by fast_float ->
  624|       |            // fall back to from_chars or strtod
  625|  1.44M|            return fast_float_fallback(data, value);
  626|  1.44M|        }
  627|  1.44M|    }
  628|  1.44M|    else {
  629|       |        // Default to fast_float
  630|  1.44M|        return fast_float_impl<CharT, T>{data}(value);
  631|  1.44M|    }
  632|  1.44M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  458|  1.44M|{
  459|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  460|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  461|       |        return from_chars_impl<T>{data}(value);
  462|       |    }
  463|       |    else
  464|       |#endif
  465|  1.44M|    {
  466|  1.44M|#if !SCN_DISABLE_STRTOD
  467|  1.44M|        return strtod_impl<CharT, T>{data}(value);
  468|       |#else
  469|       |        return unexpected_scan_error(
  470|       |            scan_error::invalid_scanned_value,
  471|       |            "fast_float failed, and fallbacks are disabled");
  472|       |#endif
  473|  1.44M|    }
  474|  1.44M|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  311|  1.44M|    {
  312|  1.44M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweEclERe:
  315|  1.44M|    {
  316|  1.44M|        return this->parse(value, this->get_null_terminated_source(m_input),
  317|  1.44M|                           generic_strtod);
  318|  1.44M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  149|  1.44M|    {
  150|  1.44M|        CharT* end{};
  151|  1.44M|        errno = 0;
  152|  1.44M|        value = strtod_cb(src, &end);
  153|  1.44M|        const auto saved_errno = errno;
  154|  1.44M|        auto chars_read = end - src;
  155|       |
  156|  1.44M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  157|  1.44M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.65k, False: 1.43M]
  |  |  ------------------
  ------------------
  158|  2.65k|            return unexpected(e);
  159|  2.65k|        }
  160|       |
  161|  1.43M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (161:13): [True: 315k, False: 1.12M]
  ------------------
  162|  1.43M|            chars_read >= 2) {
  ------------------
  |  Branch (162:13): [True: 315k, False: 0]
  ------------------
  163|   315k|            chars_read -= 2;
  164|   315k|        }
  165|       |
  166|  1.43M|        return chars_read;
  167|  1.44M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  172|  1.44M|    {
  173|  1.44M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (173:13): [True: 1.44M, False: 0]
  ------------------
  174|       |            // TODO: call float_reader::read_source?
  175|  1.44M|            auto first_space = read_until_classic_space(input.view());
  176|  1.44M|            input.assign(
  177|  1.44M|                std::basic_string<CharT>{input.view().begin(), first_space});
  178|  1.44M|        }
  179|       |
  180|  1.44M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (180:13): [True: 315k, False: 1.12M]
  ------------------
  181|   315k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (181:27): [Folded - Ignored]
  ------------------
  182|   315k|                input.get_allocated_string().insert(0, "0x");
  183|   315k|            }
  184|   315k|            else {
  185|   315k|                input.get_allocated_string().insert(0, L"0x");
  186|   315k|            }
  187|   315k|        }
  188|       |
  189|  1.44M|        return input.get_allocated_string().c_str();
  190|  1.44M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  322|  1.44M|    {
  323|  1.44M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (323:23): [Folded - Ignored]
  ------------------
  324|  1.44M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  325|  1.44M|        }
  326|  1.44M|        else {
  327|  1.44M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  328|  1.44M|        }
  329|  1.44M|    }
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  268|  1.44M|    {
  269|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  270|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  271|       |        if constexpr (std::is_same_v<T, float>) {
  272|       |            return ::wcstof_l(str, str_end, cloc);
  273|       |        }
  274|       |        else if constexpr (std::is_same_v<T, double>) {
  275|       |            return ::wcstod_l(str, str_end, cloc);
  276|       |        }
  277|       |        else if constexpr (std::is_same_v<T, long double>) {
  278|       |            return ::wcstold_l(str, str_end, cloc);
  279|       |        }
  280|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  281|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  282|       |        if constexpr (std::is_same_v<T, float>) {
  283|       |            return ::_wcstof_l(str, str_end, cloc);
  284|       |        }
  285|       |        else if constexpr (std::is_same_v<T, double>) {
  286|       |            return ::_wcstod_l(str, str_end, cloc);
  287|       |        }
  288|       |        else if constexpr (std::is_same_v<T, long double>) {
  289|       |            return ::_wcstold_l(str, str_end, cloc);
  290|       |        }
  291|       |#else
  292|  1.44M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  293|  1.44M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (293:23): [Folded - Ignored]
  ------------------
  294|  1.44M|            return std::wcstof(str, str_end);
  295|  1.44M|        }
  296|  1.44M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (296:28): [Folded - Ignored]
  ------------------
  297|  1.44M|            return std::wcstod(str, str_end);
  298|  1.44M|        }
  299|  1.44M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (299:28): [Folded - Ignored]
  ------------------
  300|  1.44M|            return std::wcstold(str, str_end);
  301|  1.44M|        }
  302|  1.44M|#endif
  303|  1.44M|    }

_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   444k|    {
  577|   444k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   444k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   444k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   444k|        float_reader<CharT> rd{};
  581|   444k|        return read_impl<range_nocvref_t>(
  582|   444k|            range, rd,
  583|   444k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   444k|                return r.read_source(SCN_FWD(args)...);
  585|   444k|            },
  586|   444k|            value);
  587|   444k|    }
_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|  1.59M|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|  3.12M|    constexpr float_reader_base() = default;
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.52M|    {
  633|  1.52M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.52M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.2k, False: 1.49M]
  |  |  ------------------
  ------------------
  635|  32.2k|            return unexpected(r.error());
  636|  32.2k|        }
  637|       |
  638|  1.49M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.49M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.49M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.49M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 43.4k, False: 1.44M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  43.4k|    }                                                  \
  |  |  |  |   70|  1.49M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.44M|        return ranges::next(ranges::begin(range), n);
  640|  1.49M|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|  1.50M|    {
   98|  1.50M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.50M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 344k, False: 1.16M]
  ------------------
  102|       |
  103|  1.50M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.50M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.50M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.50M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 56.1k, False: 1.44M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  56.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  56.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  56.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  56.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  56.1k|    }                                                  \
  |  |  |  |   70|  1.50M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.44M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.50M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   444k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   444k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   444k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  4.23M|    {
   73|  4.23M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.23M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  4.23M|        return read_source_impl(range);
   79|  4.23M|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  5.25M|    {
  112|  5.25M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  5.25M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.25M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.25M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.25M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.25M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  5.25M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  5.25M|        auto it = sign_result.first;
  115|  5.25M|        m_sign = sign_result.second;
  116|       |
  117|  5.25M|        auto digits_begin = it;
  118|  5.25M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  5.25M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  5.25M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  5.25M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  10.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.25M]
  |  |  |  Branch (153:45): [True: 0, False: 5.25M]
  |  |  |  Branch (153:45): [True: 0, False: 5.25M]
  |  |  ------------------
  ------------------
  122|  5.25M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  5.25M|            else {
  133|  5.25M|                auto cb = [&](auto&& rr)
  134|  5.25M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  5.25M|                    auto res = read_all(rr);
  136|  5.25M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  5.25M|                        return unexpected_scan_error(
  138|  5.25M|                            scan_error::invalid_scanned_value,
  139|  5.25M|                            "Invalid float value");
  140|  5.25M|                    }
  141|  5.25M|                    return res;
  142|  5.25M|                };
  143|  5.25M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  5.25M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  5.25M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  5.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 103k, False: 5.15M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   103k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   103k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   103k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   103k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   103k|    }                                                  \
  |  |   70|  5.25M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  5.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  5.15M|            }
  145|  5.25M|        }
  146|  5.15M|        else {
  147|  5.15M|            SCN_TRY_ASSIGN(
  148|  5.15M|                it,
  149|  5.15M|                do_read_source_impl(
  150|  5.15M|                    r,
  151|  5.15M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  5.15M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  5.15M|        }
  154|       |
  155|  5.15M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  5.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  5.15M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 5.12M, False: 33.6k]
  |  Branch (157:48): [True: 5.08M, False: 36.7k]
  ------------------
  158|  5.15M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 4.98M, False: 101k]
  ------------------
  159|  5.15M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 4.98M, False: 1.43k]
  ------------------
  160|  4.98M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  4.98M|        }
  162|       |
  163|  5.15M|        handle_separators();
  164|       |
  165|  5.15M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 5.15M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  5.15M|        return it;
  178|  5.15M|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  5.25M|    {
  226|  5.25M|        auto it = ranges::begin(range);
  227|  5.25M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 5.18M, False: 70.3k]
  ------------------
  228|  5.18M|            return unexpected(r.error());
  229|  5.18M|        }
  230|  70.3k|        else {
  231|  70.3k|            it = *r;
  232|  70.3k|        }
  233|       |
  234|  70.3k|        if (auto r = read_matching_string_classic_nocase(
  235|  70.3k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  70.3k|            !r) {
  ------------------
  |  Branch (236:13): [True: 33.6k, False: 36.7k]
  ------------------
  237|  33.6k|            m_kind = float_kind::inf_short;
  238|  33.6k|            return it;
  239|  33.6k|        }
  240|  36.7k|        else {
  241|  36.7k|            m_kind = float_kind::inf_long;
  242|  36.7k|            return *r;
  243|  36.7k|        }
  244|  70.3k|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  5.18M|    {
  249|  5.18M|        auto it = ranges::begin(range);
  250|  5.18M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 5.07M, False: 108k]
  ------------------
  251|  5.07M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  5.07M|                scan_error::invalid_scanned_value,
  253|  5.07M|                "Invalid floating-point NaN value"));
  254|  5.07M|        }
  255|   108k|        else {
  256|   108k|            it = *r;
  257|   108k|        }
  258|       |
  259|   108k|        if (auto r = read_matching_code_unit(
  260|   108k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|   108k|            !r) {
  ------------------
  |  Branch (261:13): [True: 101k, False: 6.58k]
  ------------------
  262|   101k|            m_kind = float_kind::nan_simple;
  263|   101k|            return it;
  264|   101k|        }
  265|  6.58k|        else {
  266|  6.58k|            it = *r;
  267|  6.58k|        }
  268|       |
  269|  6.58k|        auto payload_beg_it = it;
  270|  6.58k|        it = read_while_code_unit(
  271|  6.58k|            ranges::subrange{it, ranges::end(range)},
  272|  6.58k|            [](char_type ch) SCN_NOEXCEPT {
  273|  6.58k|                return is_ascii_char(ch) &&
  274|  6.58k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  6.58k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  6.58k|            });
  277|  6.58k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  6.58k|        m_kind = float_kind::nan_with_payload;
  280|  6.58k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 1.43k, False: 5.14k]
  ------------------
  281|  6.58k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  1.43k|            return *r;
  283|  1.43k|        }
  284|  5.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  5.14k|                                     "Invalid floating-point NaN payload");
  286|  6.58k|    }
_ZZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlcE_clEc:
  272|   513k|            [](char_type ch) SCN_NOEXCEPT {
  273|   513k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 512k, False: 933]
  ------------------
  274|   513k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 508k, False: 3.64k]
  |  Branch (274:39): [True: 489k, False: 18.8k]
  |  Branch (274:54): [True: 15.2k, False: 7.19k]
  |  Branch (274:67): [True: 14.6k, False: 643]
  ------------------
  275|   512k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 3.81k, False: 4.02k]
  |  Branch (275:39): [True: 2.79k, False: 1.01k]
  |  Branch (275:53): [True: 312, False: 4.72k]
  ------------------
  276|   513k|            });
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  3.57M|    {
  220|  3.57M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  3.57M|    }
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   915k|    {
  292|   915k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 110k, False: 804k]
  ------------------
  293|   110k|            auto beg_exp_it = ranges::begin(range);
  294|   110k|            auto it = *r;
  295|       |
  296|   110k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 110k, False: 294]
  ------------------
  297|   110k|                    ranges::subrange{it, ranges::end(range)})) {
  298|   110k|                it = r_sign->first;
  299|   110k|            }
  300|       |
  301|   110k|            if (auto r_exp = read_while1_code_unit(
  302|   110k|                    ranges::subrange{it, ranges::end(range)},
  303|   110k|                    [](char_type ch)
  304|   110k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|   110k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.70k, False: 107k]
  |  |  ------------------
  ------------------
  306|  2.70k|                it = beg_exp_it;
  307|  2.70k|            }
  308|   107k|            else {
  309|   107k|                it = *r_exp;
  310|   107k|            }
  311|       |
  312|   110k|            return it;
  313|   110k|        }
  314|   804k|        else {
  315|   804k|            return ranges::begin(range);
  316|   804k|        }
  317|   915k|    }
_ZZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlcE_clEc:
  304|   526k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|  1.50M|    {
  365|  1.50M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|  1.50M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 944k, False: 556k]
  |  Branch (366:50): [True: 42.6k, False: 902k]
  ------------------
  367|       |
  368|  1.50M|        auto it = ranges::begin(range);
  369|  1.50M|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|  1.50M|        if (auto r =
  372|  1.50M|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|  1.50M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 63.9k, False: 1.43M]
  |  |  ------------------
  ------------------
  374|  63.9k|            return r.transform_error(
  375|  63.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|  63.9k|                                              "Invalid floating-point value"));
  377|  63.9k|        }
  378|  1.43M|        else {
  379|  1.43M|            digits_count += ranges::distance(it, *r);
  380|  1.43M|            it = *r;
  381|  1.43M|        }
  382|       |
  383|  1.43M|        m_integral_part_length = digits_count;
  384|  1.43M|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 156k, False: 1.28M]
  ------------------
  385|  1.43M|                ranges::subrange{it, ranges::end(range)},
  386|  1.43M|                m_locale_options.decimal_point)) {
  387|   156k|            it = *r;
  388|   156k|        }
  389|       |
  390|  1.43M|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 97.2k, False: 1.34M]
  ------------------
  391|  1.43M|                                     false)) {
  392|  97.2k|            digits_count += ranges::distance(it, *r);
  393|  97.2k|            it = *r;
  394|  97.2k|        }
  395|       |
  396|  1.43M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|  1.43M|        auto beg_exp_it = it;
  402|  1.43M|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 915k, False: 522k]
  ------------------
  403|   915k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   915k|        }
  405|  1.43M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 40.5k, False: 1.39M]
  |  Branch (405:29): [True: 33.2k, False: 7.32k]
  ------------------
  406|  33.2k|            return unexpected_scan_error(
  407|  33.2k|                scan_error::invalid_scanned_value,
  408|  33.2k|                "No exponent given to scientific float");
  409|  33.2k|        }
  410|       |
  411|  1.40M|        m_kind =
  412|  1.40M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 1.29M, False: 107k]
  ------------------
  413|       |
  414|  1.40M|        return it;
  415|  1.43M|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  2.93M|    {
  185|  2.93M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.93M]
  |  |  |  Branch (153:45): [True: 0, False: 2.93M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  2.93M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  2.93M|        return read_while1_code_unit(
  195|  2.93M|            SCN_FWD(range),
  ------------------
  |  |  248|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  2.93M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  2.93M|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|  16.8M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  5.25M|    {
  423|  5.25M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  5.25M|        const bool allowed_nonhex =
  425|  5.25M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  5.25M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  5.25M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 5.18M, False: 70.3k]
  |  Branch (428:45): [True: 0, False: 5.18M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  5.25M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 70.3k, False: 5.18M]
  ------------------
  434|  70.3k|            return *r;
  435|  70.3k|        }
  436|       |
  437|  5.18M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 5.08M, False: 102k]
  |  Branch (437:45): [True: 5.14k, False: 5.07M]
  ------------------
  438|  5.14k|            return unexpected(r.error());
  439|  5.14k|        }
  440|  5.18M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 102k, False: 5.07M]
  ------------------
  441|   102k|            return *r;
  442|   102k|        }
  443|       |
  444|  5.07M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 3.57M, False: 1.50M]
  |  Branch (444:28): [True: 1.10M, False: 2.47M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  1.10M|            auto it = ranges::begin(range);
  448|       |
  449|  1.10M|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 18.1k, False: 1.08M]
  ------------------
  450|  18.1k|                m_kind = float_kind::hex_with_prefix;
  451|  18.1k|                it = *r;
  452|  18.1k|            }
  453|  1.08M|            else {
  454|  1.08M|                m_kind = float_kind::hex_without_prefix;
  455|  1.08M|            }
  456|       |
  457|  1.10M|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  1.10M|        }
  459|  3.97M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 1.50M, False: 2.47M]
  |  Branch (459:34): [True: 1.50M, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  1.50M|            m_kind = float_kind::generic;
  463|  1.50M|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  1.50M|        }
  465|  2.47M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  2.47M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.6k, False: 2.42M]
  |  |  ------------------
  ------------------
  471|  44.6k|                m_kind = float_kind::hex_with_prefix;
  472|  44.6k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  44.6k|            }
  474|       |
  475|  2.42M|            m_kind = float_kind::generic;
  476|  2.42M|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  2.47M|        }
  478|  5.07M|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.15M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.15M|                    auto res = read_all(rr);
  136|  1.15M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 592, False: 1.15M]
  |  |  ------------------
  ------------------
  137|    592|                        return unexpected_scan_error(
  138|    592|                            scan_error::invalid_scanned_value,
  139|    592|                            "Invalid float value");
  140|    592|                    }
  141|  1.15M|                    return res;
  142|  1.15M|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  2.42M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.42M|                    auto res = read_all(rr);
  136|  2.42M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  2.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 780, False: 2.42M]
  |  |  ------------------
  ------------------
  137|    780|                        return unexpected_scan_error(
  138|    780|                            scan_error::invalid_scanned_value,
  139|    780|                            "Invalid float value");
  140|    780|                    }
  141|  2.42M|                    return res;
  142|  2.42M|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  5.19M|    {
  482|  5.19M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 5.19M, False: 0]
  ------------------
  483|  5.19M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 5.19M, False: 0]
  ------------------
  484|  5.19M|            return;
  485|  5.19M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   527k|    {
  577|   527k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   527k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   527k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   527k|        float_reader<CharT> rd{};
  581|   527k|        return read_impl<range_nocvref_t>(
  582|   527k|            range, rd,
  583|   527k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   527k|                return r.read_source(SCN_FWD(args)...);
  585|   527k|            },
  586|   527k|            value);
  587|   527k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.82M|    {
  633|  1.82M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.82M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.7k, False: 1.79M]
  |  |  ------------------
  ------------------
  635|  34.7k|            return unexpected(r.error());
  636|  34.7k|        }
  637|       |
  638|  1.79M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.79M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.79M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.79M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.2k, False: 1.75M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.2k|    }                                                  \
  |  |  |  |   70|  1.79M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.75M|        return ranges::next(ranges::begin(range), n);
  640|  1.79M|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|  1.80M|    {
   98|  1.80M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.80M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 414k, False: 1.38M]
  ------------------
  102|       |
  103|  1.80M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.80M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.80M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.80M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 51.9k, False: 1.75M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  51.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  51.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  51.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  51.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  51.9k|    }                                                  \
  |  |  |  |   70|  1.80M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.75M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.80M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   527k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   527k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   527k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   562k|    {
  577|   562k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   562k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   562k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   562k|        float_reader<CharT> rd{};
  581|   562k|        return read_impl<range_nocvref_t>(
  582|   562k|            range, rd,
  583|   562k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   562k|                return r.read_source(SCN_FWD(args)...);
  585|   562k|            },
  586|   562k|            value);
  587|   562k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.90M|    {
  633|  1.90M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.90M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36.6k, False: 1.87M]
  |  |  ------------------
  ------------------
  635|  36.6k|            return unexpected(r.error());
  636|  36.6k|        }
  637|       |
  638|  1.87M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.87M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.87M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.87M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.6k, False: 1.83M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.6k|    }                                                  \
  |  |  |  |   70|  1.87M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.83M|        return ranges::next(ranges::begin(range), n);
  640|  1.87M|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|  1.88M|    {
   98|  1.88M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.88M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 439k, False: 1.44M]
  ------------------
  102|       |
  103|  1.88M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.88M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.88M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.88M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 49.2k, False: 1.83M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  49.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  49.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  49.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  49.2k|    }                                                  \
  |  |  |  |   70|  1.88M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.83M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.88M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   562k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   562k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   562k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  18.9k|    {
  577|  18.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  18.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  18.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  18.9k|        float_reader<CharT> rd{};
  581|  18.9k|        return read_impl<range_nocvref_t>(
  582|  18.9k|            range, rd,
  583|  18.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.9k|                return r.read_source(SCN_FWD(args)...);
  585|  18.9k|            },
  586|  18.9k|            value);
  587|  18.9k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  82.1k|    {
  633|  82.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  82.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  82.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 69.5k, False: 12.6k]
  |  |  ------------------
  ------------------
  635|  69.5k|            return unexpected(r.error());
  636|  69.5k|        }
  637|       |
  638|  12.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.6k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  12.6k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  18.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  18.9k|            },
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   208k|    {
   73|   208k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   208k|        return read_source_impl(range);
   79|   208k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   246k|    {
  112|   246k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   246k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   246k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   246k|        auto it = sign_result.first;
  115|   246k|        m_sign = sign_result.second;
  116|       |
  117|   246k|        auto digits_begin = it;
  118|   246k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   246k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   246k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   246k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   246k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   246k|                SCN_TRY_ASSIGN(
  124|   246k|                    it,
  125|   246k|                    do_read_source_impl(
  126|   246k|                        r,
  127|   246k|                        [&](auto&& rr) {
  128|   246k|                            return read_regular_float(SCN_FWD(rr));
  129|   246k|                        },
  130|   246k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   246k|            }
  132|   246k|            else {
  133|   246k|                auto cb = [&](auto&& rr)
  134|   246k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   246k|                    auto res = read_all(rr);
  136|   246k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   246k|                        return unexpected_scan_error(
  138|   246k|                            scan_error::invalid_scanned_value,
  139|   246k|                            "Invalid float value");
  140|   246k|                    }
  141|   246k|                    return res;
  142|   246k|                };
  143|   246k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   246k|            }
  145|   246k|        }
  146|   246k|        else {
  147|   246k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 208k, False: 37.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   208k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   208k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   208k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   208k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   208k|    }                                                  \
  |  |   70|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|  37.9k|                it,
  149|  37.9k|                do_read_source_impl(
  150|  37.9k|                    r,
  151|  37.9k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  37.9k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  37.9k|        }
  154|       |
  155|  37.9k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  37.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  37.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  37.9k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 37.9k, False: 0]
  |  Branch (157:48): [True: 37.9k, False: 0]
  ------------------
  158|  37.9k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 37.9k, False: 0]
  ------------------
  159|  37.9k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 37.9k, False: 0]
  ------------------
  160|  37.9k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  37.9k|        }
  162|       |
  163|  37.9k|        handle_separators();
  164|       |
  165|  37.9k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 37.9k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  37.9k|        return it;
  178|  37.9k|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   246k|    {
  423|   246k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   246k|        const bool allowed_nonhex =
  425|   246k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   246k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   246k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 246k, False: 0]
  |  Branch (428:45): [True: 0, False: 246k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   246k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 246k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   246k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 246k, False: 0]
  |  Branch (437:45): [True: 0, False: 246k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   246k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 246k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   246k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 132k, False: 113k]
  |  Branch (444:28): [True: 37.9k, False: 94.8k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|  37.9k|            auto it = ranges::begin(range);
  448|       |
  449|  37.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 37.9k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|  37.9k|            else {
  454|  37.9k|                m_kind = float_kind::hex_without_prefix;
  455|  37.9k|            }
  456|       |
  457|  37.9k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|  37.9k|        }
  459|   208k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 113k, False: 94.8k]
  |  Branch (459:34): [True: 113k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   113k|            m_kind = float_kind::generic;
  463|   113k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   113k|        }
  465|  94.8k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  94.8k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  94.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 94.8k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  94.8k|            m_kind = float_kind::generic;
  476|  94.8k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  94.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  94.8k|        }
  478|   246k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   246k|    {
  226|   246k|        auto it = ranges::begin(range);
  227|   246k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 246k, False: 0]
  ------------------
  228|   246k|            return unexpected(r.error());
  229|   246k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   246k|    {
  249|   246k|        auto it = ranges::begin(range);
  250|   246k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 246k, False: 0]
  ------------------
  251|   246k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   246k|                scan_error::invalid_scanned_value,
  253|   246k|                "Invalid floating-point NaN value"));
  254|   246k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|   132k|    {
  220|   132k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|   132k|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|  37.9k|    {
  323|  37.9k|        auto it = ranges::begin(range);
  324|       |
  325|  37.9k|        std::ptrdiff_t digits_count = 0;
  326|  37.9k|        if (auto r =
  327|  37.9k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|  37.9k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  329|      0|            return r.transform_error(map_parse_error_to_scan_error(
  330|      0|                scan_error::invalid_scanned_value,
  331|      0|                "Invalid hexadecimal floating-point value"));
  332|      0|        }
  333|  37.9k|        else {
  334|  37.9k|            digits_count += ranges::distance(it, *r);
  335|  37.9k|            it = *r;
  336|  37.9k|        }
  337|       |
  338|  37.9k|        m_integral_part_length = digits_count;
  339|  37.9k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 37.9k]
  ------------------
  340|  37.9k|                ranges::subrange{it, ranges::end(range)},
  341|  37.9k|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|  37.9k|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 37.9k]
  ------------------
  346|  37.9k|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|  37.9k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|  37.9k|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|  37.9k|        return it;
  359|  37.9k|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|  75.8k|    {
  203|  75.8k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 75.8k]
  |  |  |  Branch (153:45): [True: 0, False: 75.8k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|  75.8k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|  75.8k|        return read_while1_code_unit(
  213|  75.8k|            SCN_FWD(range),
  ------------------
  |  |  248|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|  75.8k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|  75.8k|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  214|   113k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  291|  37.9k|    {
  292|  37.9k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 0, False: 37.9k]
  ------------------
  293|      0|            auto beg_exp_it = ranges::begin(range);
  294|      0|            auto it = *r;
  295|       |
  296|      0|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 0, False: 0]
  ------------------
  297|      0|                    ranges::subrange{it, ranges::end(range)})) {
  298|      0|                it = r_sign->first;
  299|      0|            }
  300|       |
  301|      0|            if (auto r_exp = read_while1_code_unit(
  302|      0|                    ranges::subrange{it, ranges::end(range)},
  303|      0|                    [](char_type ch)
  304|      0|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  306|      0|                it = beg_exp_it;
  307|      0|            }
  308|      0|            else {
  309|      0|                it = *r_exp;
  310|      0|            }
  311|       |
  312|      0|            return it;
  313|      0|        }
  314|  37.9k|        else {
  315|  37.9k|            return ranges::begin(range);
  316|  37.9k|        }
  317|  37.9k|    }
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   208k|    {
  365|   208k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   208k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 170k, False: 37.9k]
  |  Branch (366:50): [True: 37.9k, False: 132k]
  ------------------
  367|       |
  368|   208k|        auto it = ranges::begin(range);
  369|   208k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   208k|        if (auto r =
  372|   208k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   208k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 208k, False: 0]
  |  |  ------------------
  ------------------
  374|   208k|            return r.transform_error(
  375|   208k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   208k|                                              "Invalid floating-point value"));
  377|   208k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   208k|    {
  185|   208k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 208k]
  |  |  |  Branch (153:45): [True: 0, False: 208k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   208k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   208k|        return read_while1_code_unit(
  195|   208k|            SCN_FWD(range),
  ------------------
  |  |  248|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   208k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   208k|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlcE0_clEc:
  196|   208k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  18.9k|    {
  577|  18.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  18.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  18.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  18.9k|        float_reader<CharT> rd{};
  581|  18.9k|        return read_impl<range_nocvref_t>(
  582|  18.9k|            range, rd,
  583|  18.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.9k|                return r.read_source(SCN_FWD(args)...);
  585|  18.9k|            },
  586|  18.9k|            value);
  587|  18.9k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  82.1k|    {
  633|  82.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  82.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  82.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 69.5k, False: 12.6k]
  |  |  ------------------
  ------------------
  635|  69.5k|            return unexpected(r.error());
  636|  69.5k|        }
  637|       |
  638|  12.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.6k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  12.6k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  18.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  18.9k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  18.9k|    {
  577|  18.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  18.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  18.9k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  18.9k|        float_reader<CharT> rd{};
  581|  18.9k|        return read_impl<range_nocvref_t>(
  582|  18.9k|            range, rd,
  583|  18.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.9k|                return r.read_source(SCN_FWD(args)...);
  585|  18.9k|            },
  586|  18.9k|            value);
  587|  18.9k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|  82.1k|    {
  633|  82.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  82.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  82.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 69.5k, False: 12.6k]
  |  |  ------------------
  ------------------
  635|  69.5k|            return unexpected(r.error());
  636|  69.5k|        }
  637|       |
  638|  12.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.6k|    }                                                  \
  |  |  |  |   70|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  12.6k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  18.9k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  18.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  18.9k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  3.93M|    {
  570|  3.93M|        detail::check_float_type_specs(specs, eh);
  571|  3.93M|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|  3.91M|    {
  644|  3.91M|        unsigned options{};
  645|  3.91M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 1.06M, False: 2.85M]
  ------------------
  646|  1.06M|            options |= float_reader_base::allow_thsep;
  647|  1.06M|        }
  648|       |
  649|  3.91M|        SCN_GCC_COMPAT_PUSH
  650|  3.91M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  3.91M|        switch (specs.type) {
  653|   614k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 614k, False: 3.29M]
  ------------------
  654|   614k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|  82.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 82.1k, False: 3.83M]
  ------------------
  657|  82.1k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|  1.18M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 1.18M, False: 2.73M]
  ------------------
  660|  1.18M|                return options | float_reader_base::allow_hex;
  661|       |
  662|   973k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 973k, False: 2.94M]
  ------------------
  663|   973k|                return options | float_reader_base::allow_scientific |
  664|   973k|                       float_reader_base::allow_fixed;
  665|       |
  666|  1.06M|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 1.06M, False: 2.85M]
  ------------------
  667|  1.06M|                return options | float_reader_base::allow_scientific |
  668|  1.06M|                       float_reader_base::allow_fixed |
  669|  1.06M|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 3.91M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  3.91M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  3.91M|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|  3.91M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|  7.90M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.08M|    {
  596|  1.08M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.08M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.08M|#if !SCN_DISABLE_LOCALE
  600|  1.08M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 296k, False: 784k]
  ------------------
  601|   296k|            return read_impl<range_nocvref_t>(
  602|   296k|                range, rd,
  603|   296k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   296k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   296k|                },
  606|   296k|                value, loc);
  607|   296k|        }
  608|   784k|#endif
  609|       |
  610|   784k|        return read_impl<range_nocvref_t>(
  611|   784k|            range, rd,
  612|   784k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   784k|                return r.read_source(SCN_FWD(args)...);
  614|   784k|            },
  615|   784k|            value);
  616|  1.08M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   296k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   296k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   296k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|  1.02M|    {
   86|  1.02M|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  1.02M|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.02M]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  1.02M|        return read_source_impl(range);
   92|  1.02M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   784k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   784k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   784k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   784k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.29M|    {
  596|  1.29M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.29M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.29M|#if !SCN_DISABLE_LOCALE
  600|  1.29M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 351k, False: 946k]
  ------------------
  601|   351k|            return read_impl<range_nocvref_t>(
  602|   351k|                range, rd,
  603|   351k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   351k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   351k|                },
  606|   351k|                value, loc);
  607|   351k|        }
  608|   946k|#endif
  609|       |
  610|   946k|        return read_impl<range_nocvref_t>(
  611|   946k|            range, rd,
  612|   946k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   946k|                return r.read_source(SCN_FWD(args)...);
  614|   946k|            },
  615|   946k|            value);
  616|  1.29M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   351k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   351k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   351k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   946k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   946k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   946k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   946k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.34M|    {
  596|  1.34M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.34M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.34M|#if !SCN_DISABLE_LOCALE
  600|  1.34M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 375k, False: 969k]
  ------------------
  601|   375k|            return read_impl<range_nocvref_t>(
  602|   375k|                range, rd,
  603|   375k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   375k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   375k|                },
  606|   375k|                value, loc);
  607|   375k|        }
  608|   969k|#endif
  609|       |
  610|   969k|        return read_impl<range_nocvref_t>(
  611|   969k|            range, rd,
  612|   969k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   969k|                return r.read_source(SCN_FWD(args)...);
  614|   969k|            },
  615|   969k|            value);
  616|  1.34M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   375k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   375k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   375k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   969k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   969k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   969k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   969k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  63.2k|    {
  596|  63.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  63.2k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  63.2k|#if !SCN_DISABLE_LOCALE
  600|  63.2k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 12.6k, False: 50.5k]
  ------------------
  601|  12.6k|            return read_impl<range_nocvref_t>(
  602|  12.6k|                range, rd,
  603|  12.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  12.6k|                },
  606|  12.6k|                value, loc);
  607|  12.6k|        }
  608|  50.5k|#endif
  609|       |
  610|  50.5k|        return read_impl<range_nocvref_t>(
  611|  50.5k|            range, rd,
  612|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  50.5k|                return r.read_source(SCN_FWD(args)...);
  614|  50.5k|            },
  615|  50.5k|            value);
  616|  63.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  12.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  12.6k|                },
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|  37.9k|    {
   86|  37.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|  37.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|  37.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 37.9k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|  37.9k|        return read_source_impl(range);
   92|  37.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  50.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  50.5k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  63.2k|    {
  596|  63.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  63.2k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  63.2k|#if !SCN_DISABLE_LOCALE
  600|  63.2k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 12.6k, False: 50.5k]
  ------------------
  601|  12.6k|            return read_impl<range_nocvref_t>(
  602|  12.6k|                range, rd,
  603|  12.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  12.6k|                },
  606|  12.6k|                value, loc);
  607|  12.6k|        }
  608|  50.5k|#endif
  609|       |
  610|  50.5k|        return read_impl<range_nocvref_t>(
  611|  50.5k|            range, rd,
  612|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  50.5k|                return r.read_source(SCN_FWD(args)...);
  614|  50.5k|            },
  615|  50.5k|            value);
  616|  63.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  12.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  12.6k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  50.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  50.5k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|  63.2k|    {
  596|  63.2k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  63.2k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  63.2k|#if !SCN_DISABLE_LOCALE
  600|  63.2k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 12.6k, False: 50.5k]
  ------------------
  601|  12.6k|            return read_impl<range_nocvref_t>(
  602|  12.6k|                range, rd,
  603|  12.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  12.6k|                },
  606|  12.6k|                value, loc);
  607|  12.6k|        }
  608|  50.5k|#endif
  609|       |
  610|  50.5k|        return read_impl<range_nocvref_t>(
  611|  50.5k|            range, rd,
  612|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  50.5k|                return r.read_source(SCN_FWD(args)...);
  614|  50.5k|            },
  615|  50.5k|            value);
  616|  63.2k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  12.6k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  12.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  12.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  12.6k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
  613|  50.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|  50.5k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   396k|    {
  577|   396k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   396k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   396k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   396k|        float_reader<CharT> rd{};
  581|   396k|        return read_impl<range_nocvref_t>(
  582|   396k|            range, rd,
  583|   396k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   396k|                return r.read_source(SCN_FWD(args)...);
  585|   396k|            },
  586|   396k|            value);
  587|   396k|    }
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|  1.53M|    constexpr float_reader() = default;
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.39M|    {
  633|  1.39M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.39M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 109k, False: 1.28M]
  |  |  ------------------
  ------------------
  635|   109k|            return unexpected(r.error());
  636|   109k|        }
  637|       |
  638|  1.28M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.28M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.28M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.28M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 130k, False: 1.15M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   130k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   130k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   130k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   130k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   130k|    }                                                  \
  |  |  |  |   70|  1.28M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.15M|        return ranges::next(ranges::begin(range), n);
  640|  1.28M|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
   97|  1.32M|    {
   98|  1.32M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.32M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 291k, False: 1.03M]
  ------------------
  102|       |
  103|  1.32M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 168k, False: 1.15M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   168k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   168k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   168k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   168k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   168k|    }                                                  \
  |  |  |  |   70|  1.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.15M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.32M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   396k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   396k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   396k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  3.87M|    {
   73|  3.87M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  3.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.87M]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  3.87M|        return read_source_impl(range);
   79|  3.87M|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  4.78M|    {
  112|  4.78M|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  4.78M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.78M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.78M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.78M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.78M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  4.78M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  4.78M|        auto it = sign_result.first;
  115|  4.78M|        m_sign = sign_result.second;
  116|       |
  117|  4.78M|        auto digits_begin = it;
  118|  4.78M|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  4.78M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  4.78M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  4.78M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  9.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.78M]
  |  |  |  Branch (153:45): [True: 0, False: 4.78M]
  |  |  |  Branch (153:45): [True: 0, False: 4.78M]
  |  |  ------------------
  ------------------
  122|  4.78M|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  4.78M|            else {
  133|  4.78M|                auto cb = [&](auto&& rr)
  134|  4.78M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  4.78M|                    auto res = read_all(rr);
  136|  4.78M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  4.78M|                        return unexpected_scan_error(
  138|  4.78M|                            scan_error::invalid_scanned_value,
  139|  4.78M|                            "Invalid float value");
  140|  4.78M|                    }
  141|  4.78M|                    return res;
  142|  4.78M|                };
  143|  4.78M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  4.78M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  4.78M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  4.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 332k, False: 4.45M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   332k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   332k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   332k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   332k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   332k|    }                                                  \
  |  |   70|  4.78M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  4.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  4.45M|            }
  145|  4.78M|        }
  146|  4.45M|        else {
  147|  4.45M|            SCN_TRY_ASSIGN(
  148|  4.45M|                it,
  149|  4.45M|                do_read_source_impl(
  150|  4.45M|                    r,
  151|  4.45M|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  4.45M|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  4.45M|        }
  154|       |
  155|  4.45M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  4.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  4.45M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 4.42M, False: 29.5k]
  |  Branch (157:48): [True: 4.39M, False: 33.1k]
  ------------------
  158|  4.45M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 4.31M, False: 82.1k]
  ------------------
  159|  4.45M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 4.31M, False: 1.09k]
  ------------------
  160|  4.31M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  4.31M|        }
  162|       |
  163|  4.45M|        handle_separators();
  164|       |
  165|  4.45M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 4.45M]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  4.45M|        return it;
  178|  4.45M|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  4.78M|    {
  226|  4.78M|        auto it = ranges::begin(range);
  227|  4.78M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 4.72M, False: 62.6k]
  ------------------
  228|  4.72M|            return unexpected(r.error());
  229|  4.72M|        }
  230|  62.6k|        else {
  231|  62.6k|            it = *r;
  232|  62.6k|        }
  233|       |
  234|  62.6k|        if (auto r = read_matching_string_classic_nocase(
  235|  62.6k|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|  62.6k|            !r) {
  ------------------
  |  Branch (236:13): [True: 29.5k, False: 33.1k]
  ------------------
  237|  29.5k|            m_kind = float_kind::inf_short;
  238|  29.5k|            return it;
  239|  29.5k|        }
  240|  33.1k|        else {
  241|  33.1k|            m_kind = float_kind::inf_long;
  242|  33.1k|            return *r;
  243|  33.1k|        }
  244|  62.6k|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  4.72M|    {
  249|  4.72M|        auto it = ranges::begin(range);
  250|  4.72M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 4.63M, False: 87.7k]
  ------------------
  251|  4.63M|            return r.transform_error(map_parse_error_to_scan_error(
  252|  4.63M|                scan_error::invalid_scanned_value,
  253|  4.63M|                "Invalid floating-point NaN value"));
  254|  4.63M|        }
  255|  87.7k|        else {
  256|  87.7k|            it = *r;
  257|  87.7k|        }
  258|       |
  259|  87.7k|        if (auto r = read_matching_code_unit(
  260|  87.7k|                ranges::subrange{it, ranges::end(range)}, '(');
  261|  87.7k|            !r) {
  ------------------
  |  Branch (261:13): [True: 82.1k, False: 5.50k]
  ------------------
  262|  82.1k|            m_kind = float_kind::nan_simple;
  263|  82.1k|            return it;
  264|  82.1k|        }
  265|  5.50k|        else {
  266|  5.50k|            it = *r;
  267|  5.50k|        }
  268|       |
  269|  5.50k|        auto payload_beg_it = it;
  270|  5.50k|        it = read_while_code_unit(
  271|  5.50k|            ranges::subrange{it, ranges::end(range)},
  272|  5.50k|            [](char_type ch) SCN_NOEXCEPT {
  273|  5.50k|                return is_ascii_char(ch) &&
  274|  5.50k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|  5.50k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|  5.50k|            });
  277|  5.50k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|  5.50k|        m_kind = float_kind::nan_with_payload;
  280|  5.50k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 1.09k, False: 4.41k]
  ------------------
  281|  5.50k|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|  1.09k|            return *r;
  283|  1.09k|        }
  284|  4.41k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|  4.41k|                                     "Invalid floating-point NaN payload");
  286|  5.50k|    }
_ZZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlwE_clEw:
  272|   495k|            [](char_type ch) SCN_NOEXCEPT {
  273|   495k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (273:24): [True: 495k, False: 352]
  ------------------
  274|   495k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (274:26): [True: 492k, False: 3.16k]
  |  Branch (274:39): [True: 476k, False: 15.8k]
  |  Branch (274:54): [True: 12.4k, False: 6.62k]
  |  Branch (274:67): [True: 11.8k, False: 633]
  ------------------
  275|   495k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (275:26): [True: 3.71k, False: 3.54k]
  |  Branch (275:39): [True: 2.71k, False: 1.00k]
  |  Branch (275:53): [True: 312, False: 4.23k]
  ------------------
  276|   495k|            });
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  3.18M|    {
  220|  3.18M|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  3.18M|    }
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEE:
  291|   736k|    {
  292|   736k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 93.0k, False: 642k]
  ------------------
  293|  93.0k|            auto beg_exp_it = ranges::begin(range);
  294|  93.0k|            auto it = *r;
  295|       |
  296|  93.0k|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 92.7k, False: 306]
  ------------------
  297|  93.0k|                    ranges::subrange{it, ranges::end(range)})) {
  298|  92.7k|                it = r_sign->first;
  299|  92.7k|            }
  300|       |
  301|  93.0k|            if (auto r_exp = read_while1_code_unit(
  302|  93.0k|                    ranges::subrange{it, ranges::end(range)},
  303|  93.0k|                    [](char_type ch)
  304|  93.0k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|  93.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.22k, False: 90.8k]
  |  |  ------------------
  ------------------
  306|  2.22k|                it = beg_exp_it;
  307|  2.22k|            }
  308|  90.8k|            else {
  309|  90.8k|                it = *r_exp;
  310|  90.8k|            }
  311|       |
  312|  93.0k|            return it;
  313|  93.0k|        }
  314|   642k|        else {
  315|   642k|            return ranges::begin(range);
  316|   642k|        }
  317|   736k|    }
_ZZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NSt3__117basic_string_viewIcNSI_11char_traitsIcEEEEENKUlwE_clEw:
  304|   442k|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|  1.45M|    {
  365|  1.45M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|  1.45M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 926k, False: 526k]
  |  Branch (366:50): [True: 117k, False: 809k]
  ------------------
  367|       |
  368|  1.45M|        auto it = ranges::begin(range);
  369|  1.45M|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|  1.45M|        if (auto r =
  372|  1.45M|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|  1.45M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 300k, False: 1.15M]
  |  |  ------------------
  ------------------
  374|   300k|            return r.transform_error(
  375|   300k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   300k|                                              "Invalid floating-point value"));
  377|   300k|        }
  378|  1.15M|        else {
  379|  1.15M|            digits_count += ranges::distance(it, *r);
  380|  1.15M|            it = *r;
  381|  1.15M|        }
  382|       |
  383|  1.15M|        m_integral_part_length = digits_count;
  384|  1.15M|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 128k, False: 1.02M]
  ------------------
  385|  1.15M|                ranges::subrange{it, ranges::end(range)},
  386|  1.15M|                m_locale_options.decimal_point)) {
  387|   128k|            it = *r;
  388|   128k|        }
  389|       |
  390|  1.15M|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 78.7k, False: 1.07M]
  ------------------
  391|  1.15M|                                     false)) {
  392|  78.7k|            digits_count += ranges::distance(it, *r);
  393|  78.7k|            it = *r;
  394|  78.7k|        }
  395|       |
  396|  1.15M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|  1.15M|        auto beg_exp_it = it;
  402|  1.15M|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 736k, False: 416k]
  ------------------
  403|   736k|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|   736k|        }
  405|  1.15M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 31.6k, False: 1.12M]
  |  Branch (405:29): [True: 26.1k, False: 5.48k]
  ------------------
  406|  26.1k|            return unexpected_scan_error(
  407|  26.1k|                scan_error::invalid_scanned_value,
  408|  26.1k|                "No exponent given to scientific float");
  409|  26.1k|        }
  410|       |
  411|  1.12M|        m_kind =
  412|  1.12M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 1.03M, False: 90.8k]
  ------------------
  413|       |
  414|  1.12M|        return it;
  415|  1.15M|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|  2.60M|    {
  185|  2.60M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.60M]
  |  |  |  Branch (153:45): [True: 0, False: 2.60M]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|  2.60M|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|  2.60M|        return read_while1_code_unit(
  195|  2.60M|            SCN_FWD(range),
  ------------------
  |  |  248|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|  2.60M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|  2.60M|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|  13.6M|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  4.78M|    {
  423|  4.78M|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  4.78M|        const bool allowed_nonhex =
  425|  4.78M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  4.78M|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  4.78M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 4.72M, False: 62.6k]
  |  Branch (428:45): [True: 0, False: 4.72M]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  4.78M|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 62.6k, False: 4.72M]
  ------------------
  434|  62.6k|            return *r;
  435|  62.6k|        }
  436|       |
  437|  4.72M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 4.64M, False: 83.2k]
  |  Branch (437:45): [True: 4.41k, False: 4.63M]
  ------------------
  438|  4.41k|            return unexpected(r.error());
  439|  4.41k|        }
  440|  4.72M|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 83.2k, False: 4.63M]
  ------------------
  441|  83.2k|            return *r;
  442|  83.2k|        }
  443|       |
  444|  4.63M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 3.18M, False: 1.45M]
  |  Branch (444:28): [True: 985k, False: 2.20M]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   985k|            auto it = ranges::begin(range);
  448|       |
  449|   985k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 15.6k, False: 969k]
  ------------------
  450|  15.6k|                m_kind = float_kind::hex_with_prefix;
  451|  15.6k|                it = *r;
  452|  15.6k|            }
  453|   969k|            else {
  454|   969k|                m_kind = float_kind::hex_without_prefix;
  455|   969k|            }
  456|       |
  457|   985k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   985k|        }
  459|  3.65M|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 1.45M, False: 2.20M]
  |  Branch (459:34): [True: 1.45M, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|  1.45M|            m_kind = float_kind::generic;
  463|  1.45M|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|  1.45M|        }
  465|  2.20M|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  2.20M|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 38.6k, False: 2.16M]
  |  |  ------------------
  ------------------
  471|  38.6k|                m_kind = float_kind::hex_with_prefix;
  472|  38.6k|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|  38.6k|            }
  474|       |
  475|  2.16M|            m_kind = float_kind::generic;
  476|  2.16M|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  2.20M|        }
  478|  4.63M|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.02M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.02M|                    auto res = read_all(rr);
  136|  1.02M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 622, False: 1.02M]
  |  |  ------------------
  ------------------
  137|    622|                        return unexpected_scan_error(
  138|    622|                            scan_error::invalid_scanned_value,
  139|    622|                            "Invalid float value");
  140|    622|                    }
  141|  1.02M|                    return res;
  142|  1.02M|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  2.16M|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  2.16M|                    auto res = read_all(rr);
  136|  2.16M|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 855, False: 2.16M]
  |  |  ------------------
  ------------------
  137|    855|                        return unexpected_scan_error(
  138|    855|                            scan_error::invalid_scanned_value,
  139|    855|                            "Invalid float value");
  140|    855|                    }
  141|  2.16M|                    return res;
  142|  2.16M|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  4.57M|    {
  482|  4.57M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 4.57M, False: 0]
  ------------------
  483|  4.57M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 4.57M, False: 0]
  ------------------
  484|  4.57M|            return;
  485|  4.57M|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   470k|    {
  577|   470k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   470k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   470k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   470k|        float_reader<CharT> rd{};
  581|   470k|        return read_impl<range_nocvref_t>(
  582|   470k|            range, rd,
  583|   470k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   470k|                return r.read_source(SCN_FWD(args)...);
  585|   470k|            },
  586|   470k|            value);
  587|   470k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.66M|    {
  633|  1.66M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.66M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 110k, False: 1.55M]
  |  |  ------------------
  ------------------
  635|   110k|            return unexpected(r.error());
  636|   110k|        }
  637|       |
  638|  1.55M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.55M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.55M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.55M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 126k, False: 1.42M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   126k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   126k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   126k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   126k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   126k|    }                                                  \
  |  |  |  |   70|  1.55M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.42M|        return ranges::next(ranges::begin(range), n);
  640|  1.55M|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|  1.59M|    {
   98|  1.59M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.59M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 352k, False: 1.23M]
  ------------------
  102|       |
  103|  1.59M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.59M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.59M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.59M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 164k, False: 1.42M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   164k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   164k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   164k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   164k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   164k|    }                                                  \
  |  |  |  |   70|  1.59M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.42M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.59M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   470k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   470k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   470k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|   497k|    {
  577|   497k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   497k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|   497k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|   497k|        float_reader<CharT> rd{};
  581|   497k|        return read_impl<range_nocvref_t>(
  582|   497k|            range, rd,
  583|   497k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   497k|                return r.read_source(SCN_FWD(args)...);
  585|   497k|            },
  586|   497k|            value);
  587|   497k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.72M|    {
  633|  1.72M|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.72M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 112k, False: 1.61M]
  |  |  ------------------
  ------------------
  635|   112k|            return unexpected(r.error());
  636|   112k|        }
  637|       |
  638|  1.61M|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.61M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.61M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.61M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 124k, False: 1.49M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   124k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   124k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   124k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   124k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   124k|    }                                                  \
  |  |  |  |   70|  1.61M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|  1.49M|        return ranges::next(ranges::begin(range), n);
  640|  1.61M|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
   97|  1.65M|    {
   98|  1.65M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|      0|        const std::ptrdiff_t sign_len =
  101|  1.65M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 373k, False: 1.28M]
  ------------------
  102|       |
  103|  1.65M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.65M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.65M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.65M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 162k, False: 1.49M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   162k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   162k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   162k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   162k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   162k|    }                                                  \
  |  |  |  |   70|  1.65M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|  1.49M|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.65M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|   497k|            [](float_reader<CharT>& r, auto&&... args) {
  584|   497k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|   497k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  4.01M|    {
  570|  4.01M|        detail::check_float_type_specs(specs, eh);
  571|  4.01M|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|  3.99M|    {
  644|  3.99M|        unsigned options{};
  645|  3.99M|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 1.02M, False: 2.97M]
  ------------------
  646|  1.02M|            options |= float_reader_base::allow_thsep;
  647|  1.02M|        }
  648|       |
  649|  3.99M|        SCN_GCC_COMPAT_PUSH
  650|  3.99M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|  3.99M|        switch (specs.type) {
  653|   657k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 657k, False: 3.33M]
  ------------------
  654|   657k|                return options | float_reader_base::allow_fixed;
  655|       |
  656|   232k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 232k, False: 3.76M]
  ------------------
  657|   232k|                return options | float_reader_base::allow_scientific;
  658|       |
  659|  1.13M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 1.13M, False: 2.86M]
  ------------------
  660|  1.13M|                return options | float_reader_base::allow_hex;
  661|       |
  662|   950k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 950k, False: 3.04M]
  ------------------
  663|   950k|                return options | float_reader_base::allow_scientific |
  664|   950k|                       float_reader_base::allow_fixed;
  665|       |
  666|  1.02M|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 1.02M, False: 2.97M]
  ------------------
  667|  1.02M|                return options | float_reader_base::allow_scientific |
  668|  1.02M|                       float_reader_base::allow_fixed |
  669|  1.02M|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 3.99M]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|  3.99M|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|  3.99M|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|  3.99M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|   999k|    {
  596|   999k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   999k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   999k|#if !SCN_DISABLE_LOCALE
  600|   999k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 264k, False: 735k]
  ------------------
  601|   264k|            return read_impl<range_nocvref_t>(
  602|   264k|                range, rd,
  603|   264k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   264k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   264k|                },
  606|   264k|                value, loc);
  607|   264k|        }
  608|   735k|#endif
  609|       |
  610|   735k|        return read_impl<range_nocvref_t>(
  611|   735k|            range, rd,
  612|   735k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   735k|                return r.read_source(SCN_FWD(args)...);
  614|   735k|            },
  615|   735k|            value);
  616|   999k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   264k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   264k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   264k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|   909k|    {
   86|   909k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   909k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   909k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 909k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   909k|        return read_source_impl(range);
   92|   909k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   735k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   735k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   735k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.19M|    {
  596|  1.19M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.19M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.19M|#if !SCN_DISABLE_LOCALE
  600|  1.19M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 313k, False: 880k]
  ------------------
  601|   313k|            return read_impl<range_nocvref_t>(
  602|   313k|                range, rd,
  603|   313k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   313k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   313k|                },
  606|   313k|                value, loc);
  607|   313k|        }
  608|   880k|#endif
  609|       |
  610|   880k|        return read_impl<range_nocvref_t>(
  611|   880k|            range, rd,
  612|   880k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   880k|                return r.read_source(SCN_FWD(args)...);
  614|   880k|            },
  615|   880k|            value);
  616|  1.19M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   313k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   313k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   313k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   880k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   880k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   880k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   880k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|  1.23M|    {
  596|  1.23M|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|  1.23M|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|  1.23M|#if !SCN_DISABLE_LOCALE
  600|  1.23M|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 331k, False: 898k]
  ------------------
  601|   331k|            return read_impl<range_nocvref_t>(
  602|   331k|                range, rd,
  603|   331k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   331k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|   331k|                },
  606|   331k|                value, loc);
  607|   331k|        }
  608|   898k|#endif
  609|       |
  610|   898k|        return read_impl<range_nocvref_t>(
  611|   898k|            range, rd,
  612|   898k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   898k|                return r.read_source(SCN_FWD(args)...);
  614|   898k|            },
  615|   898k|            value);
  616|  1.23M|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|   331k|                [](float_reader<CharT>& r, auto&&... args) {
  604|   331k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|   331k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|   898k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   898k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   898k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   898k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  56.8k|    {
  577|  56.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  56.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  56.8k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  56.8k|        float_reader<CharT> rd{};
  581|  56.8k|        return read_impl<range_nocvref_t>(
  582|  56.8k|            range, rd,
  583|  56.8k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  56.8k|                return r.read_source(SCN_FWD(args)...);
  585|  56.8k|            },
  586|  56.8k|            value);
  587|  56.8k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   246k|    {
  633|   246k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   246k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 208k, False: 37.9k]
  |  |  ------------------
  ------------------
  635|   208k|            return unexpected(r.error());
  636|   208k|        }
  637|       |
  638|  37.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  37.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.9k|    }                                                  \
  |  |  |  |   70|  37.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  37.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  56.8k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  56.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  56.8k|            },
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   72|   625k|    {
   73|   625k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|   625k|        return read_source_impl(range);
   79|   625k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  111|   739k|    {
  112|   739k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|   739k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   739k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   739k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 739k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   739k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   739k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|   739k|        auto it = sign_result.first;
  115|   739k|        m_sign = sign_result.second;
  116|       |
  117|   739k|        auto digits_begin = it;
  118|   739k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|   739k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|   739k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   739k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|   739k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|   739k|                SCN_TRY_ASSIGN(
  124|   739k|                    it,
  125|   739k|                    do_read_source_impl(
  126|   739k|                        r,
  127|   739k|                        [&](auto&& rr) {
  128|   739k|                            return read_regular_float(SCN_FWD(rr));
  129|   739k|                        },
  130|   739k|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|   739k|            }
  132|   739k|            else {
  133|   739k|                auto cb = [&](auto&& rr)
  134|   739k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|   739k|                    auto res = read_all(rr);
  136|   739k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|   739k|                        return unexpected_scan_error(
  138|   739k|                            scan_error::invalid_scanned_value,
  139|   739k|                            "Invalid float value");
  140|   739k|                    }
  141|   739k|                    return res;
  142|   739k|                };
  143|   739k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|   739k|            }
  145|   739k|        }
  146|   739k|        else {
  147|   739k|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|   739k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|   739k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 625k, False: 113k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   625k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|   625k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   625k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|   625k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|   625k|    }                                                  \
  |  |   70|   739k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|   113k|                it,
  149|   113k|                do_read_source_impl(
  150|   113k|                    r,
  151|   113k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|   113k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|   113k|        }
  154|       |
  155|   113k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|   113k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 113k, False: 0]
  |  Branch (157:48): [True: 113k, False: 0]
  ------------------
  158|   113k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 113k, False: 0]
  ------------------
  159|   113k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 113k, False: 0]
  ------------------
  160|   113k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|   113k|        }
  162|       |
  163|   113k|        handle_separators();
  164|       |
  165|   113k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 113k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|   113k|        return it;
  178|   113k|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEZNS3_16read_source_implISG_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlSO_E_ZNSH_ISG_EESN_SO_EUlSO_E0_EESN_SO_OT0_OT1_:
  422|   739k|    {
  423|   739k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|   739k|        const bool allowed_nonhex =
  425|   739k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|   739k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|   739k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 739k, False: 0]
  |  Branch (428:45): [True: 0, False: 739k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|   739k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 739k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|   739k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 739k, False: 0]
  |  Branch (437:45): [True: 0, False: 739k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|   739k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 739k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|   739k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 398k, False: 341k]
  |  Branch (444:28): [True: 113k, False: 284k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|   113k|            auto it = ranges::begin(range);
  448|       |
  449|   113k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 113k]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|   113k|            else {
  454|   113k|                m_kind = float_kind::hex_without_prefix;
  455|   113k|            }
  456|       |
  457|   113k|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|   113k|        }
  459|   625k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 341k, False: 284k]
  |  Branch (459:34): [True: 341k, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|   341k|            m_kind = float_kind::generic;
  463|   341k|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|   341k|        }
  465|   284k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|   284k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 284k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|   284k|            m_kind = float_kind::generic;
  476|   284k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|   284k|        }
  478|   739k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  225|   739k|    {
  226|   739k|        auto it = ranges::begin(range);
  227|   739k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 739k, False: 0]
  ------------------
  228|   739k|            return unexpected(r.error());
  229|   739k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  248|   739k|    {
  249|   739k|        auto it = ranges::begin(range);
  250|   739k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 739k, False: 0]
  ------------------
  251|   739k|            return r.transform_error(map_parse_error_to_scan_error(
  252|   739k|                scan_error::invalid_scanned_value,
  253|   739k|                "Invalid floating-point NaN value"));
  254|   739k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  219|   398k|    {
  220|   398k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|   398k|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  322|   113k|    {
  323|   113k|        auto it = ranges::begin(range);
  324|       |
  325|   113k|        std::ptrdiff_t digits_count = 0;
  326|   113k|        if (auto r =
  327|   113k|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|   113k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  329|      0|            return r.transform_error(map_parse_error_to_scan_error(
  330|      0|                scan_error::invalid_scanned_value,
  331|      0|                "Invalid hexadecimal floating-point value"));
  332|      0|        }
  333|   113k|        else {
  334|   113k|            digits_count += ranges::distance(it, *r);
  335|   113k|            it = *r;
  336|   113k|        }
  337|       |
  338|   113k|        m_integral_part_length = digits_count;
  339|   113k|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 113k]
  ------------------
  340|   113k|                ranges::subrange{it, ranges::end(range)},
  341|   113k|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|   113k|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 113k]
  ------------------
  346|   113k|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|   113k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|   113k|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|   113k|        return it;
  359|   113k|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  202|   227k|    {
  203|   227k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 227k]
  |  |  |  Branch (153:45): [True: 0, False: 227k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|   227k|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|   227k|        return read_while1_code_unit(
  213|   227k|            SCN_FWD(range),
  ------------------
  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|   227k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|   227k|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  214|   568k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  291|   113k|    {
  292|   113k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (292:18): [True: 0, False: 113k]
  ------------------
  293|      0|            auto beg_exp_it = ranges::begin(range);
  294|      0|            auto it = *r;
  295|       |
  296|      0|            if (auto r_sign = parse_numeric_sign(
  ------------------
  |  Branch (296:22): [True: 0, False: 0]
  ------------------
  297|      0|                    ranges::subrange{it, ranges::end(range)})) {
  298|      0|                it = r_sign->first;
  299|      0|            }
  300|       |
  301|      0|            if (auto r_exp = read_while1_code_unit(
  302|      0|                    ranges::subrange{it, ranges::end(range)},
  303|      0|                    [](char_type ch)
  304|      0|                        SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  305|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  306|      0|                it = beg_exp_it;
  307|      0|            }
  308|      0|            else {
  309|      0|                it = *r_exp;
  310|      0|            }
  311|       |
  312|      0|            return it;
  313|      0|        }
  314|   113k|        else {
  315|   113k|            return ranges::begin(range);
  316|   113k|        }
  317|   113k|    }
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_:
  364|   625k|    {
  365|   625k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|   625k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 512k, False: 113k]
  |  Branch (366:50): [True: 113k, False: 398k]
  ------------------
  367|       |
  368|   625k|        auto it = ranges::begin(range);
  369|   625k|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|   625k|        if (auto r =
  372|   625k|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|   625k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 625k, False: 0]
  |  |  ------------------
  ------------------
  374|   625k|            return r.transform_error(
  375|   625k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|   625k|                                              "Invalid floating-point value"));
  377|   625k|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
  184|   625k|    {
  185|   625k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 625k]
  |  |  |  Branch (153:45): [True: 0, False: 625k]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|   625k|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|   625k|        return read_while1_code_unit(
  195|   625k|            SCN_FWD(range),
  ------------------
  |  |  248|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|   625k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|   625k|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bENKUlwE0_clEw:
  196|   625k|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  56.8k|    {
  577|  56.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  56.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  56.8k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  56.8k|        float_reader<CharT> rd{};
  581|  56.8k|        return read_impl<range_nocvref_t>(
  582|  56.8k|            range, rd,
  583|  56.8k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  56.8k|                return r.read_source(SCN_FWD(args)...);
  585|  56.8k|            },
  586|  56.8k|            value);
  587|  56.8k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   246k|    {
  633|   246k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   246k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 208k, False: 37.9k]
  |  |  ------------------
  ------------------
  635|   208k|            return unexpected(r.error());
  636|   208k|        }
  637|       |
  638|  37.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  37.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.9k|    }                                                  \
  |  |  |  |   70|  37.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  37.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  56.8k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  56.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  56.8k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  576|  56.8k|    {
  577|  56.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  56.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  56.8k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  56.8k|        float_reader<CharT> rd{};
  581|  56.8k|        return read_impl<range_nocvref_t>(
  582|  56.8k|            range, rd,
  583|  56.8k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  56.8k|                return r.read_source(SCN_FWD(args)...);
  585|  56.8k|            },
  586|  56.8k|            value);
  587|  56.8k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSL_SO_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|   246k|    {
  633|   246k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|   246k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 208k, False: 37.9k]
  |  |  ------------------
  ------------------
  635|   208k|            return unexpected(r.error());
  636|   208k|        }
  637|       |
  638|  37.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  37.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.9k|    }                                                  \
  |  |  |  |   70|  37.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  37.9k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_SP_EEEDaSS_SV_:
  583|  56.8k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  56.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  56.8k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   189k|    {
  596|   189k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   189k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   189k|#if !SCN_DISABLE_LOCALE
  600|   189k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 37.9k, False: 151k]
  ------------------
  601|  37.9k|            return read_impl<range_nocvref_t>(
  602|  37.9k|                range, rd,
  603|  37.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  37.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  37.9k|                },
  606|  37.9k|                value, loc);
  607|  37.9k|        }
  608|   151k|#endif
  609|       |
  610|   151k|        return read_impl<range_nocvref_t>(
  611|   151k|            range, rd,
  612|   151k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   151k|                return r.read_source(SCN_FWD(args)...);
  614|   151k|            },
  615|   151k|            value);
  616|   189k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  37.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  37.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  37.9k|                },
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESI_NS9_10locale_refE:
   85|   113k|    {
   86|   113k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|   113k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|   113k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|   113k|        return read_source_impl(range);
   92|   113k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|   151k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   151k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   151k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   189k|    {
  596|   189k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   189k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   189k|#if !SCN_DISABLE_LOCALE
  600|   189k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 37.9k, False: 151k]
  ------------------
  601|  37.9k|            return read_impl<range_nocvref_t>(
  602|  37.9k|                range, rd,
  603|  37.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  37.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  37.9k|                },
  606|  37.9k|                value, loc);
  607|  37.9k|        }
  608|   151k|#endif
  609|       |
  610|   151k|        return read_impl<range_nocvref_t>(
  611|   151k|            range, rd,
  612|   151k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   151k|                return r.read_source(SCN_FWD(args)...);
  614|   151k|            },
  615|   151k|            value);
  616|   189k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  37.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  37.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  37.9k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|   151k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   151k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   151k|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  595|   189k|    {
  596|   189k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|   189k|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|   189k|#if !SCN_DISABLE_LOCALE
  600|   189k|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 37.9k, False: 151k]
  ------------------
  601|  37.9k|            return read_impl<range_nocvref_t>(
  602|  37.9k|                range, rd,
  603|  37.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  37.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  605|  37.9k|                },
  606|  37.9k|                value, loc);
  607|  37.9k|        }
  608|   151k|#endif
  609|       |
  610|   151k|        return read_impl<range_nocvref_t>(
  611|   151k|            range, rd,
  612|   151k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   151k|                return r.read_source(SCN_FWD(args)...);
  614|   151k|            },
  615|   151k|            value);
  616|   189k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSF_ST_EEEDaSW_SZ_:
  603|  37.9k|                [](float_reader<CharT>& r, auto&&... args) {
  604|  37.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|  37.9k|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSF_ST_EEEDaSW_SZ_:
  612|   151k|            [](float_reader<CharT>& r, auto&&... args) {
  613|   151k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|   151k|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIfEET_S5_:
  523|  1.50M|    {
  524|  1.50M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.50M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 153k, False: 1.35M]
  ------------------
  526|   153k|            return -value;
  527|   153k|        }
  528|  1.35M|        return value;
  529|  1.50M|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIfEET_S5_:
  523|  1.32M|    {
  524|  1.32M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.32M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 129k, False: 1.19M]
  ------------------
  526|   129k|            return -value;
  527|   129k|        }
  528|  1.19M|        return value;
  529|  1.32M|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|  1.80M|    {
  524|  1.80M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.80M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 181k, False: 1.62M]
  ------------------
  526|   181k|            return -value;
  527|   181k|        }
  528|  1.62M|        return value;
  529|  1.80M|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|  1.59M|    {
  524|  1.59M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.59M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 154k, False: 1.43M]
  ------------------
  526|   154k|            return -value;
  527|   154k|        }
  528|  1.43M|        return value;
  529|  1.59M|    }
_ZNK3scn2v24impl12float_readerIcE7setsignIeEET_S5_:
  523|  1.88M|    {
  524|  1.88M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.88M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 193k, False: 1.68M]
  ------------------
  526|   193k|            return -value;
  527|   193k|        }
  528|  1.68M|        return value;
  529|  1.88M|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIeEET_S5_:
  523|  1.65M|    {
  524|  1.65M|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.65M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 164k, False: 1.48M]
  ------------------
  526|   164k|            return -value;
  527|   164k|        }
  528|  1.48M|        return value;
  529|  1.65M|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.25M|{
   69|  5.25M|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.25M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.05M, False: 1.20M]
  ------------------
   71|  4.05M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.05M, False: 0]
  ------------------
   72|  4.05M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.05M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.05M|    }
   76|       |
   77|  1.20M|    auto& it = *r;
   78|  1.20M|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 529k, False: 672k]
  ------------------
   79|   529k|        return std::pair{it, sign_type::minus_sign};
   80|   529k|    }
   81|   672k|    return std::pair{it, sign_type::plus_sign};
   82|  1.20M|}
_ZN3scn2v24impl11char_to_intEc:
   50|  44.0M|{
   51|  44.0M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  44.0M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|   110k|{
   69|   110k|    auto r = read_one_of_code_unit(range, "+-");
   70|   110k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 106k, False: 4.15k]
  ------------------
   71|   106k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 106k, False: 294]
  ------------------
   72|   106k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   106k|        }
   74|    294|        return unexpected(eof_error::eof);
   75|   106k|    }
   76|       |
   77|  4.15k|    auto& it = *r;
   78|  4.15k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 3.96k, False: 188]
  ------------------
   79|  3.96k|        return std::pair{it, sign_type::minus_sign};
   80|  3.96k|    }
   81|    188|    return std::pair{it, sign_type::plus_sign};
   82|  4.15k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   246k|{
   69|   246k|    auto r = read_one_of_code_unit(range, "+-");
   70|   246k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 246k, False: 0]
  ------------------
   71|   246k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 246k, False: 0]
  ------------------
   72|   246k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   246k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   246k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  4.78M|{
   69|  4.78M|    auto r = read_one_of_code_unit(range, "+-");
   70|  4.78M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 3.76M, False: 1.02M]
  ------------------
   71|  3.76M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 3.76M, False: 0]
  ------------------
   72|  3.76M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  3.76M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  3.76M|    }
   76|       |
   77|  1.02M|    auto& it = *r;
   78|  1.02M|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 449k, False: 571k]
  ------------------
   79|   449k|        return std::pair{it, sign_type::minus_sign};
   80|   449k|    }
   81|   571k|    return std::pair{it, sign_type::plus_sign};
   82|  1.02M|}
_ZN3scn2v24impl11char_to_intEw:
   54|  20.7M|{
   55|  20.7M|#if WCHAR_MIN < 0
   56|  20.7M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 20.7M, False: 23.3k]
  |  Branch (56:20): [True: 20.1M, False: 532k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  20.1M|        return char_to_int(static_cast<char>(ch));
   61|  20.1M|    }
   62|   555k|    return 255;
   63|  20.7M|}
_ZN3scn2v24impl18parse_numeric_signIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeENS1_9sign_typeEEEEEOSF_:
   68|  93.0k|{
   69|  93.0k|    auto r = read_one_of_code_unit(range, "+-");
   70|  93.0k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 90.0k, False: 2.97k]
  ------------------
   71|  90.0k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 89.7k, False: 306]
  ------------------
   72|  89.7k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  89.7k|        }
   74|    306|        return unexpected(eof_error::eof);
   75|  90.0k|    }
   76|       |
   77|  2.97k|    auto& it = *r;
   78|  2.97k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 2.81k, False: 158]
  ------------------
   79|  2.81k|        return std::pair{it, sign_type::minus_sign};
   80|  2.81k|    }
   81|    158|    return std::pair{it, sign_type::plus_sign};
   82|  2.97k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   739k|{
   69|   739k|    auto r = read_one_of_code_unit(range, "+-");
   70|   739k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 739k, False: 0]
  ------------------
   71|   739k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 739k, False: 0]
  ------------------
   72|   739k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   739k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   739k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  5.28M|{
   43|  5.28M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.5k, False: 5.26M]
  |  |  ------------------
  ------------------
   44|  16.5k|        return unexpected(e);
   45|  16.5k|    }
   46|       |
   47|  5.26M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 5.26M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  5.26M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  5.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  5.26M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  121|   445k|    {
  122|   445k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   445k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   445k|                          basic_contiguous_scan_context<char_type>>) {
  126|   445k|            auto rd = make_reader<T, char_type>();
  127|   445k|            return impl(rd, range, value);
  128|   445k|        }
  129|   445k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   445k|            auto rd = make_reader<T, char_type>();
  131|   445k|            if (!is_segment_contiguous(range)) {
  132|   445k|                return impl(rd, range, value);
  133|   445k|            }
  134|   445k|            auto crange = get_as_contiguous(range);
  135|   445k|            SCN_TRY(it, impl(rd, crange, value));
  136|   445k|            return ranges_polyfill::batch_next(
  137|   445k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   445k|        }
  139|   445k|        else {
  140|   445k|            SCN_EXPECT(false);
  141|   445k|            SCN_UNREACHABLE;
  142|   445k|        }
  143|   445k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   445k|    {
  112|   445k|        SCN_TRY(it,
  ------------------
  |  |   71|   445k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   445k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   445k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.62k, False: 444k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.62k|    }                                                  \
  |  |  |  |   70|   445k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   444k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   444k|                    .transform_error(make_eof_scan_error));
  115|   444k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   444k|                               loc);
  117|   445k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|   529k|    {
  122|   529k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   529k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   529k|                          basic_contiguous_scan_context<char_type>>) {
  126|   529k|            auto rd = make_reader<T, char_type>();
  127|   529k|            return impl(rd, range, value);
  128|   529k|        }
  129|   529k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   529k|            auto rd = make_reader<T, char_type>();
  131|   529k|            if (!is_segment_contiguous(range)) {
  132|   529k|                return impl(rd, range, value);
  133|   529k|            }
  134|   529k|            auto crange = get_as_contiguous(range);
  135|   529k|            SCN_TRY(it, impl(rd, crange, value));
  136|   529k|            return ranges_polyfill::batch_next(
  137|   529k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   529k|        }
  139|   529k|        else {
  140|   529k|            SCN_EXPECT(false);
  141|   529k|            SCN_UNREACHABLE;
  142|   529k|        }
  143|   529k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   529k|    {
  112|   529k|        SCN_TRY(it,
  ------------------
  |  |   71|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.08k, False: 527k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.08k|    }                                                  \
  |  |  |  |   70|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   527k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   527k|                    .transform_error(make_eof_scan_error));
  115|   527k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   527k|                               loc);
  117|   529k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  121|   564k|    {
  122|   564k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   564k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   564k|                          basic_contiguous_scan_context<char_type>>) {
  126|   564k|            auto rd = make_reader<T, char_type>();
  127|   564k|            return impl(rd, range, value);
  128|   564k|        }
  129|   564k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   564k|            auto rd = make_reader<T, char_type>();
  131|   564k|            if (!is_segment_contiguous(range)) {
  132|   564k|                return impl(rd, range, value);
  133|   564k|            }
  134|   564k|            auto crange = get_as_contiguous(range);
  135|   564k|            SCN_TRY(it, impl(rd, crange, value));
  136|   564k|            return ranges_polyfill::batch_next(
  137|   564k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   564k|        }
  139|   564k|        else {
  140|   564k|            SCN_EXPECT(false);
  141|   564k|            SCN_UNREACHABLE;
  142|   564k|        }
  143|   564k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   564k|    {
  112|   564k|        SCN_TRY(it,
  ------------------
  |  |   71|   564k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   564k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   564k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.37k, False: 562k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.37k|    }                                                  \
  |  |  |  |   70|   564k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   562k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   562k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   562k|                    .transform_error(make_eof_scan_error));
  115|   562k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   562k|                               loc);
  117|   564k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   246k|{
   43|   246k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 246k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   246k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 246k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   246k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   246k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  18.9k|    {
  122|  18.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  18.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  18.9k|            auto rd = make_reader<T, char_type>();
  127|  18.9k|            return impl(rd, range, value);
  128|  18.9k|        }
  129|  18.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.9k|            auto rd = make_reader<T, char_type>();
  131|  18.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 18.9k, False: 0]
  ------------------
  132|  18.9k|                return impl(rd, range, value);
  133|  18.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  18.9k|        else {
  140|  18.9k|            SCN_EXPECT(false);
  141|  18.9k|            SCN_UNREACHABLE;
  142|  18.9k|        }
  143|  18.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  18.9k|    {
  112|  18.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 18.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  18.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  18.9k|                    .transform_error(make_eof_scan_error));
  115|  18.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  18.9k|                               loc);
  117|  18.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  18.9k|    {
  122|  18.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  18.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  18.9k|            auto rd = make_reader<T, char_type>();
  127|  18.9k|            return impl(rd, range, value);
  128|  18.9k|        }
  129|  18.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.9k|            auto rd = make_reader<T, char_type>();
  131|  18.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 18.9k, False: 0]
  ------------------
  132|  18.9k|                return impl(rd, range, value);
  133|  18.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  18.9k|        else {
  140|  18.9k|            SCN_EXPECT(false);
  141|  18.9k|            SCN_UNREACHABLE;
  142|  18.9k|        }
  143|  18.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  18.9k|    {
  112|  18.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 18.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  18.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  18.9k|                    .transform_error(make_eof_scan_error));
  115|  18.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  18.9k|                               loc);
  117|  18.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  18.9k|    {
  122|  18.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  18.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  18.9k|            auto rd = make_reader<T, char_type>();
  127|  18.9k|            return impl(rd, range, value);
  128|  18.9k|        }
  129|  18.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.9k|            auto rd = make_reader<T, char_type>();
  131|  18.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 18.9k, False: 0]
  ------------------
  132|  18.9k|                return impl(rd, range, value);
  133|  18.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  18.9k|        else {
  140|  18.9k|            SCN_EXPECT(false);
  141|  18.9k|            SCN_UNREACHABLE;
  142|  18.9k|        }
  143|  18.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  18.9k|    {
  112|  18.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  18.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  18.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  18.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 18.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  18.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  18.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  18.9k|                    .transform_error(make_eof_scan_error));
  115|  18.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  18.9k|                               loc);
  117|  18.9k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
  222|  1.08M|    {
  223|  1.08M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.08M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.08M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.08M|            auto rd = make_reader<T, char_type>();
  228|  1.08M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.08M|            return impl(rd, range, value);
  233|  1.08M|        }
  234|  1.08M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.08M|            auto rd = make_reader<T, char_type>();
  236|  1.08M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.08M|                return unexpected(e);
  238|  1.08M|            }
  239|       |
  240|  1.08M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.08M|                return impl(rd, range, value);
  242|  1.08M|            }
  243|       |
  244|  1.08M|            auto crange = get_as_contiguous(range);
  245|  1.08M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.08M|            return ranges_polyfill::batch_next(
  247|  1.08M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.08M|        }
  249|  1.08M|        else {
  250|  1.08M|            SCN_EXPECT(false);
  251|  1.08M|            SCN_UNREACHABLE;
  252|  1.08M|        }
  253|  1.08M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.08M|    {
  205|  1.08M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.79k, False: 1.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.79k|    }                                                  \
  |  |  |  |   70|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.08M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.08M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.08M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.08M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.08M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.08M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.08M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|  1.30M|    {
  223|  1.30M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.30M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.30M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.30M|            auto rd = make_reader<T, char_type>();
  228|  1.30M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.30M|            return impl(rd, range, value);
  233|  1.30M|        }
  234|  1.30M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.30M|            auto rd = make_reader<T, char_type>();
  236|  1.30M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.30M|                return unexpected(e);
  238|  1.30M|            }
  239|       |
  240|  1.30M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.30M|                return impl(rd, range, value);
  242|  1.30M|            }
  243|       |
  244|  1.30M|            auto crange = get_as_contiguous(range);
  245|  1.30M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.30M|            return ranges_polyfill::batch_next(
  247|  1.30M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.30M|        }
  249|  1.30M|        else {
  250|  1.30M|            SCN_EXPECT(false);
  251|  1.30M|            SCN_UNREACHABLE;
  252|  1.30M|        }
  253|  1.30M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.30M|    {
  205|  1.30M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.30M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.02k, False: 1.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.02k|    }                                                  \
  |  |  |  |   70|  1.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.29M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.29M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.29M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.29M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.29M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.29M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.29M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
  222|  1.35M|    {
  223|  1.35M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.35M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.35M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.35M|            auto rd = make_reader<T, char_type>();
  228|  1.35M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.35M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.35M|            return impl(rd, range, value);
  233|  1.35M|        }
  234|  1.35M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.35M|            auto rd = make_reader<T, char_type>();
  236|  1.35M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.35M|                return unexpected(e);
  238|  1.35M|            }
  239|       |
  240|  1.35M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.35M|                return impl(rd, range, value);
  242|  1.35M|            }
  243|       |
  244|  1.35M|            auto crange = get_as_contiguous(range);
  245|  1.35M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.35M|            return ranges_polyfill::batch_next(
  247|  1.35M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.35M|        }
  249|  1.35M|        else {
  250|  1.35M|            SCN_EXPECT(false);
  251|  1.35M|            SCN_UNREACHABLE;
  252|  1.35M|        }
  253|  1.35M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.35M|    {
  205|  1.35M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.35M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.35M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.35M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.54k, False: 1.34M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.54k|    }                                                  \
  |  |  |  |   70|  1.35M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.34M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.34M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.34M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.34M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.34M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.34M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.34M|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  63.2k|    {
  223|  63.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  63.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  63.2k|            auto rd = make_reader<T, char_type>();
  228|  63.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  63.2k|                return unexpected(e);
  230|  63.2k|            }
  231|       |
  232|  63.2k|            return impl(rd, range, value);
  233|  63.2k|        }
  234|  63.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  63.2k|            auto rd = make_reader<T, char_type>();
  236|  63.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  63.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 63.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  63.2k|                return impl(rd, range, value);
  242|  63.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  63.2k|        else {
  250|  63.2k|            SCN_EXPECT(false);
  251|  63.2k|            SCN_UNREACHABLE;
  252|  63.2k|        }
  253|  63.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  63.2k|    {
  205|  63.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 63.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  63.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  63.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  63.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  63.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 63.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  63.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  63.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  63.2k|    {
  223|  63.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  63.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  63.2k|            auto rd = make_reader<T, char_type>();
  228|  63.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  63.2k|                return unexpected(e);
  230|  63.2k|            }
  231|       |
  232|  63.2k|            return impl(rd, range, value);
  233|  63.2k|        }
  234|  63.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  63.2k|            auto rd = make_reader<T, char_type>();
  236|  63.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  63.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 63.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  63.2k|                return impl(rd, range, value);
  242|  63.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  63.2k|        else {
  250|  63.2k|            SCN_EXPECT(false);
  251|  63.2k|            SCN_UNREACHABLE;
  252|  63.2k|        }
  253|  63.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  63.2k|    {
  205|  63.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 63.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  63.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  63.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  63.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  63.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 63.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  63.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  63.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  63.2k|    {
  223|  63.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  63.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  63.2k|            auto rd = make_reader<T, char_type>();
  228|  63.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  63.2k|                return unexpected(e);
  230|  63.2k|            }
  231|       |
  232|  63.2k|            return impl(rd, range, value);
  233|  63.2k|        }
  234|  63.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  63.2k|            auto rd = make_reader<T, char_type>();
  236|  63.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  63.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 63.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  63.2k|                return impl(rd, range, value);
  242|  63.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  63.2k|        else {
  250|  63.2k|            SCN_EXPECT(false);
  251|  63.2k|            SCN_UNREACHABLE;
  252|  63.2k|        }
  253|  63.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  63.2k|    {
  205|  63.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  63.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  63.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  63.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 63.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|  63.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  63.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  63.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  63.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  63.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 63.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  63.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  63.2k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  4.81M|{
   43|  4.81M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 17.4k, False: 4.79M]
  |  |  ------------------
  ------------------
   44|  17.4k|        return unexpected(e);
   45|  17.4k|    }
   46|       |
   47|  4.79M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 4.79M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  4.79M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  4.79M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  121|   397k|    {
  122|   397k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   397k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   397k|                          basic_contiguous_scan_context<char_type>>) {
  126|   397k|            auto rd = make_reader<T, char_type>();
  127|   397k|            return impl(rd, range, value);
  128|   397k|        }
  129|   397k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   397k|            auto rd = make_reader<T, char_type>();
  131|   397k|            if (!is_segment_contiguous(range)) {
  132|   397k|                return impl(rd, range, value);
  133|   397k|            }
  134|   397k|            auto crange = get_as_contiguous(range);
  135|   397k|            SCN_TRY(it, impl(rd, crange, value));
  136|   397k|            return ranges_polyfill::batch_next(
  137|   397k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   397k|        }
  139|   397k|        else {
  140|   397k|            SCN_EXPECT(false);
  141|   397k|            SCN_UNREACHABLE;
  142|   397k|        }
  143|   397k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   397k|    {
  112|   397k|        SCN_TRY(it,
  ------------------
  |  |   71|   397k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   397k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   397k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.80k, False: 396k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.80k|    }                                                  \
  |  |  |  |   70|   397k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   396k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   396k|                    .transform_error(make_eof_scan_error));
  115|   396k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   396k|                               loc);
  117|   397k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|   472k|    {
  122|   472k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   472k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   472k|                          basic_contiguous_scan_context<char_type>>) {
  126|   472k|            auto rd = make_reader<T, char_type>();
  127|   472k|            return impl(rd, range, value);
  128|   472k|        }
  129|   472k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   472k|            auto rd = make_reader<T, char_type>();
  131|   472k|            if (!is_segment_contiguous(range)) {
  132|   472k|                return impl(rd, range, value);
  133|   472k|            }
  134|   472k|            auto crange = get_as_contiguous(range);
  135|   472k|            SCN_TRY(it, impl(rd, crange, value));
  136|   472k|            return ranges_polyfill::batch_next(
  137|   472k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   472k|        }
  139|   472k|        else {
  140|   472k|            SCN_EXPECT(false);
  141|   472k|            SCN_UNREACHABLE;
  142|   472k|        }
  143|   472k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   472k|    {
  112|   472k|        SCN_TRY(it,
  ------------------
  |  |   71|   472k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   472k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   472k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   472k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.26k, False: 470k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.26k|    }                                                  \
  |  |  |  |   70|   472k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   470k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   470k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   470k|                    .transform_error(make_eof_scan_error));
  115|   470k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   470k|                               loc);
  117|   472k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  121|   500k|    {
  122|   500k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   500k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   500k|                          basic_contiguous_scan_context<char_type>>) {
  126|   500k|            auto rd = make_reader<T, char_type>();
  127|   500k|            return impl(rd, range, value);
  128|   500k|        }
  129|   500k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   500k|            auto rd = make_reader<T, char_type>();
  131|   500k|            if (!is_segment_contiguous(range)) {
  132|   500k|                return impl(rd, range, value);
  133|   500k|            }
  134|   500k|            auto crange = get_as_contiguous(range);
  135|   500k|            SCN_TRY(it, impl(rd, crange, value));
  136|   500k|            return ranges_polyfill::batch_next(
  137|   500k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   500k|        }
  139|   500k|        else {
  140|   500k|            SCN_EXPECT(false);
  141|   500k|            SCN_UNREACHABLE;
  142|   500k|        }
  143|   500k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   500k|    {
  112|   500k|        SCN_TRY(it,
  ------------------
  |  |   71|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 497k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   497k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   497k|                    .transform_error(make_eof_scan_error));
  115|   497k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   497k|                               loc);
  117|   500k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
  222|  1.00M|    {
  223|  1.00M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.00M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.00M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.00M|            auto rd = make_reader<T, char_type>();
  228|  1.00M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.00M|            return impl(rd, range, value);
  233|  1.00M|        }
  234|  1.00M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.00M|            auto rd = make_reader<T, char_type>();
  236|  1.00M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.00M|                return unexpected(e);
  238|  1.00M|            }
  239|       |
  240|  1.00M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.00M|                return impl(rd, range, value);
  242|  1.00M|            }
  243|       |
  244|  1.00M|            auto crange = get_as_contiguous(range);
  245|  1.00M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.00M|            return ranges_polyfill::batch_next(
  247|  1.00M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.00M|        }
  249|  1.00M|        else {
  250|  1.00M|            SCN_EXPECT(false);
  251|  1.00M|            SCN_UNREACHABLE;
  252|  1.00M|        }
  253|  1.00M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.00M|    {
  205|  1.00M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.00M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.00M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.00M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.32k, False: 999k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.32k|    }                                                  \
  |  |  |  |   70|  1.00M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   999k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   999k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   999k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   999k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   999k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 999k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   999k|        return rd.read_specs(subr, specs, value, loc);
  218|   999k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|  1.20M|    {
  223|  1.20M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.20M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.20M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.20M|            auto rd = make_reader<T, char_type>();
  228|  1.20M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.20M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.20M|            return impl(rd, range, value);
  233|  1.20M|        }
  234|  1.20M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.20M|            auto rd = make_reader<T, char_type>();
  236|  1.20M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.20M|                return unexpected(e);
  238|  1.20M|            }
  239|       |
  240|  1.20M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.20M|                return impl(rd, range, value);
  242|  1.20M|            }
  243|       |
  244|  1.20M|            auto crange = get_as_contiguous(range);
  245|  1.20M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.20M|            return ranges_polyfill::batch_next(
  247|  1.20M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.20M|        }
  249|  1.20M|        else {
  250|  1.20M|            SCN_EXPECT(false);
  251|  1.20M|            SCN_UNREACHABLE;
  252|  1.20M|        }
  253|  1.20M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.20M|    {
  205|  1.20M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.20M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.20M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.20M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.56k, False: 1.19M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.56k|    }                                                  \
  |  |  |  |   70|  1.20M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.19M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.19M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.19M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.19M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.19M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.19M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.19M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
  222|  1.23M|    {
  223|  1.23M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.23M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.23M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.23M|            auto rd = make_reader<T, char_type>();
  228|  1.23M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.23M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.23M|            return impl(rd, range, value);
  233|  1.23M|        }
  234|  1.23M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.23M|            auto rd = make_reader<T, char_type>();
  236|  1.23M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.23M|                return unexpected(e);
  238|  1.23M|            }
  239|       |
  240|  1.23M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.23M|                return impl(rd, range, value);
  242|  1.23M|            }
  243|       |
  244|  1.23M|            auto crange = get_as_contiguous(range);
  245|  1.23M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.23M|            return ranges_polyfill::batch_next(
  247|  1.23M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.23M|        }
  249|  1.23M|        else {
  250|  1.23M|            SCN_EXPECT(false);
  251|  1.23M|            SCN_UNREACHABLE;
  252|  1.23M|        }
  253|  1.23M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.23M|    {
  205|  1.23M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.07k, False: 1.23M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.07k|    }                                                  \
  |  |  |  |   70|  1.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.23M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.23M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.23M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.23M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.23M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.23M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.23M|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   739k|{
   43|   739k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 739k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|   739k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 739k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   739k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   739k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  56.8k|    {
  122|  56.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  56.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  56.8k|            auto rd = make_reader<T, char_type>();
  127|  56.8k|            return impl(rd, range, value);
  128|  56.8k|        }
  129|  56.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  56.8k|            auto rd = make_reader<T, char_type>();
  131|  56.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 56.8k, False: 0]
  ------------------
  132|  56.8k|                return impl(rd, range, value);
  133|  56.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  56.8k|        else {
  140|  56.8k|            SCN_EXPECT(false);
  141|  56.8k|            SCN_UNREACHABLE;
  142|  56.8k|        }
  143|  56.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  56.8k|    {
  112|  56.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  56.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 56.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  56.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  56.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  56.8k|                    .transform_error(make_eof_scan_error));
  115|  56.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  56.8k|                               loc);
  117|  56.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  56.8k|    {
  122|  56.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  56.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  56.8k|            auto rd = make_reader<T, char_type>();
  127|  56.8k|            return impl(rd, range, value);
  128|  56.8k|        }
  129|  56.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  56.8k|            auto rd = make_reader<T, char_type>();
  131|  56.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 56.8k, False: 0]
  ------------------
  132|  56.8k|                return impl(rd, range, value);
  133|  56.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  56.8k|        else {
  140|  56.8k|            SCN_EXPECT(false);
  141|  56.8k|            SCN_UNREACHABLE;
  142|  56.8k|        }
  143|  56.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  56.8k|    {
  112|  56.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  56.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 56.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  56.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  56.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  56.8k|                    .transform_error(make_eof_scan_error));
  115|  56.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  56.8k|                               loc);
  117|  56.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  56.8k|    {
  122|  56.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  56.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  56.8k|            auto rd = make_reader<T, char_type>();
  127|  56.8k|            return impl(rd, range, value);
  128|  56.8k|        }
  129|  56.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  56.8k|            auto rd = make_reader<T, char_type>();
  131|  56.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 56.8k, False: 0]
  ------------------
  132|  56.8k|                return impl(rd, range, value);
  133|  56.8k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  56.8k|        else {
  140|  56.8k|            SCN_EXPECT(false);
  141|  56.8k|            SCN_UNREACHABLE;
  142|  56.8k|        }
  143|  56.8k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  56.8k|    {
  112|  56.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  56.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 56.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  56.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  56.8k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  56.8k|                    .transform_error(make_eof_scan_error));
  115|  56.8k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  56.8k|                               loc);
  117|  56.8k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   189k|    {
  223|   189k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   189k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   189k|            auto rd = make_reader<T, char_type>();
  228|   189k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   189k|                return unexpected(e);
  230|   189k|            }
  231|       |
  232|   189k|            return impl(rd, range, value);
  233|   189k|        }
  234|   189k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   189k|            auto rd = make_reader<T, char_type>();
  236|   189k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   189k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 189k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   189k|                return impl(rd, range, value);
  242|   189k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   189k|        else {
  250|   189k|            SCN_EXPECT(false);
  251|   189k|            SCN_UNREACHABLE;
  252|   189k|        }
  253|   189k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   189k|    {
  205|   189k|        SCN_TRY(it,
  ------------------
  |  |   71|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 189k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   189k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   189k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   189k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   189k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 189k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   189k|        return rd.read_specs(subr, specs, value, loc);
  218|   189k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   189k|    {
  223|   189k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   189k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   189k|            auto rd = make_reader<T, char_type>();
  228|   189k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   189k|                return unexpected(e);
  230|   189k|            }
  231|       |
  232|   189k|            return impl(rd, range, value);
  233|   189k|        }
  234|   189k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   189k|            auto rd = make_reader<T, char_type>();
  236|   189k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   189k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 189k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   189k|                return impl(rd, range, value);
  242|   189k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   189k|        else {
  250|   189k|            SCN_EXPECT(false);
  251|   189k|            SCN_UNREACHABLE;
  252|   189k|        }
  253|   189k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   189k|    {
  205|   189k|        SCN_TRY(it,
  ------------------
  |  |   71|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 189k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   189k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   189k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   189k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   189k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 189k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   189k|        return rd.read_specs(subr, specs, value, loc);
  218|   189k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   189k|    {
  223|   189k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   189k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   189k|            auto rd = make_reader<T, char_type>();
  228|   189k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   189k|                return unexpected(e);
  230|   189k|            }
  231|       |
  232|   189k|            return impl(rd, range, value);
  233|   189k|        }
  234|   189k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   189k|            auto rd = make_reader<T, char_type>();
  236|   189k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   189k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 189k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   189k|                return impl(rd, range, value);
  242|   189k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   189k|        else {
  250|   189k|            SCN_EXPECT(false);
  251|   189k|            SCN_UNREACHABLE;
  252|   189k|        }
  253|   189k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   189k|    {
  205|   189k|        SCN_TRY(it,
  ------------------
  |  |   71|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 189k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   189k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   189k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   189k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   189k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 189k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   189k|        return rd.read_specs(subr, specs, value, loc);
  218|   189k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  2.56M|{
  110|  2.56M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  2.56M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   493k|{
   89|   493k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 0, False: 493k]
  ------------------
   90|      0|        return true;
   91|      0|    }
   92|       |
   93|   493k|    constexpr auto enc = get_encoding<CharT>();
   94|   493k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   493k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   493k|    }
   97|   493k|    else if constexpr (enc == encoding::utf16) {
   98|   493k|        return simdutf::validate_utf16(
   99|   493k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   493k|    }
  101|   493k|    else if constexpr (enc == encoding::utf32) {
  102|   493k|        return simdutf::validate_utf32(
  103|   493k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   493k|    }
  105|   493k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   246k|{
  449|   246k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 246k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   246k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   246k|        SCN_EXPECT(output.size() >= input.size());
  455|   246k|        std::memcpy(output.data(), input.data(),
  456|   246k|                    input.size() * sizeof(SourceCharT));
  457|   246k|        return input.size();
  458|   246k|    }
  459|       |
  460|   246k|    const auto result = [&]() {
  461|   246k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   246k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   246k|        if constexpr (src_enc == encoding::utf8) {
  465|   246k|            if constexpr (dest_enc == encoding::utf16) {
  466|   246k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   246k|                    input.data(), input.size(),
  468|   246k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   246k|            }
  470|   246k|            else {
  471|   246k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   246k|                    input.data(), input.size(),
  473|   246k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   246k|            }
  475|   246k|        }
  476|   246k|        else if constexpr (src_enc == encoding::utf16) {
  477|   246k|            if constexpr (dest_enc == encoding::utf8) {
  478|   246k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   246k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   246k|                    input.size(), output.data());
  481|   246k|            }
  482|   246k|            else {
  483|   246k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   246k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   246k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   246k|            }
  487|   246k|        }
  488|   246k|        else if constexpr (src_enc == encoding::utf32) {
  489|   246k|            if constexpr (dest_enc == encoding::utf8) {
  490|   246k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   246k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   246k|                    input.size(), output.data());
  493|   246k|            }
  494|   246k|            else {
  495|   246k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   246k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   246k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   246k|            }
  499|   246k|        }
  500|   246k|    }();
  501|       |
  502|   246k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 246k]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|   246k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|   246k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|   246k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|   246k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|   246k|    const auto result = [&]() {
  461|   246k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|   246k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|   246k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|   246k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|   246k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|   246k|                    input.data(), input.size(),
  468|   246k|                    reinterpret_cast<char16_t*>(output.data()));
  469|   246k|            }
  470|   246k|            else {
  471|   246k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|   246k|                    input.data(), input.size(),
  473|   246k|                    reinterpret_cast<char32_t*>(output.data()));
  474|   246k|            }
  475|   246k|        }
  476|   246k|        else if constexpr (src_enc == encoding::utf16) {
  477|   246k|            if constexpr (dest_enc == encoding::utf8) {
  478|   246k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|   246k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|   246k|                    input.size(), output.data());
  481|   246k|            }
  482|   246k|            else {
  483|   246k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|   246k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|   246k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|   246k|            }
  487|   246k|        }
  488|   246k|        else if constexpr (src_enc == encoding::utf32) {
  489|   246k|            if constexpr (dest_enc == encoding::utf8) {
  490|   246k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|   246k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|   246k|                    input.size(), output.data());
  493|   246k|            }
  494|   246k|            else {
  495|   246k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|   246k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|   246k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|   246k|            }
  499|   246k|        }
  500|   246k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   493k|{
  116|   493k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   493k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   493k|    constexpr auto enc = get_encoding<CharT>();
  124|   493k|    char32_t output{};
  125|   493k|    size_t ret{};
  126|   493k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   493k|#ifndef NDEBUG
  128|   493k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 493k, False: 0]
  ------------------
  129|   493k|            auto len =
  130|   493k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   493k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   493k|        }
  133|      0|#endif
  134|      0|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   493k|    }
  136|      0|    else if constexpr (enc == encoding::utf16) {
  137|      0|#ifndef NDEBUG
  138|      0|        if (validate_unicode(input)) {
  139|      0|            auto len = simdutf::utf32_length_from_utf16(
  140|      0|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|      0|            SCN_EXPECT(len == 1);
  142|      0|        }
  143|      0|#endif
  144|      0|        ret = simdutf::convert_utf16_to_utf32(
  145|      0|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|      0|    }
  147|      0|    else if constexpr (enc == encoding::utf32) {
  148|      0|        output = static_cast<char32_t>(input[0]);
  149|      0|        ret = output < detail::invalid_code_point;
  150|      0|    }
  151|       |
  152|   493k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   493k|    return static_cast<char32_t>(output);
  156|   493k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   878k|{
  263|   878k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   878k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 43.3k, False: 835k]
  |  |  ------------------
  ------------------
  267|  43.3k|        return {get_start_of_next_code_point(input),
  268|  43.3k|                detail::invalid_code_point};
  269|  43.3k|    }
  270|   835k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   835k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.73k, False: 830k]
  |  |  ------------------
  ------------------
  271|  4.73k|        return {input.end(), detail::invalid_code_point};
  272|  4.73k|    }
  273|       |
  274|   830k|    constexpr auto enc = get_encoding<CharT>();
  275|   830k|    std::size_t result{1};
  276|   830k|    char32_t output{};
  277|   830k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   830k|        result = simdutf::convert_utf8_to_utf32(
  279|   830k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   830k|    }
  281|   830k|    else if constexpr (enc == encoding::utf16) {
  282|   830k|        result = simdutf::convert_utf16_to_utf32(
  283|   830k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   830k|    }
  285|   830k|    else if constexpr (enc == encoding::utf32) {
  286|   830k|        SCN_EXPECT(len == 1);
  287|   830k|        output = static_cast<char32_t>(input[0]);
  288|   830k|    }
  289|       |
  290|   830k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   830k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 147k, False: 683k]
  |  |  ------------------
  ------------------
  291|   147k|        return {get_start_of_next_code_point(input.substr(1)),
  292|   147k|                detail::invalid_code_point};
  293|   147k|    }
  294|       |
  295|   683k|    return {input.begin() + len, output};
  296|   830k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|   191k|{
  248|   191k|    auto it = input.begin();
  249|   466k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 457k, False: 9.18k]
  ------------------
  250|   457k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 181k, False: 275k]
  ------------------
  251|   181k|            break;
  252|   181k|        }
  253|   457k|    }
  254|       |
  255|   191k|    return it;
  256|   191k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|   159M|{
  110|   159M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   159M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  10.8M|{
  449|  10.8M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 10.8M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  10.8M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  10.8M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  10.8M|                    input.size() * sizeof(SourceCharT));
  457|  10.8M|        return input.size();
  458|  10.8M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  2.95M|{
  116|  2.95M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  2.95M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  2.95M|    constexpr auto enc = get_encoding<CharT>();
  124|  2.95M|    char32_t output{};
  125|  2.95M|    size_t ret{};
  126|  2.95M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.95M|#ifndef NDEBUG
  128|  2.95M|        if (validate_unicode(input)) {
  129|  2.95M|            auto len =
  130|  2.95M|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  2.95M|            SCN_EXPECT(len == 1);
  132|  2.95M|        }
  133|  2.95M|#endif
  134|  2.95M|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  2.95M|    }
  136|  2.95M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  2.95M|#ifndef NDEBUG
  138|  2.95M|        if (validate_unicode(input)) {
  139|  2.95M|            auto len = simdutf::utf32_length_from_utf16(
  140|  2.95M|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  2.95M|            SCN_EXPECT(len == 1);
  142|  2.95M|        }
  143|  2.95M|#endif
  144|  2.95M|        ret = simdutf::convert_utf16_to_utf32(
  145|  2.95M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  2.95M|    }
  147|  2.95M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  2.95M|        output = static_cast<char32_t>(input[0]);
  149|  2.95M|        ret = output < detail::invalid_code_point;
  150|  2.95M|    }
  151|       |
  152|  2.95M|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.95M]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|  2.95M|    return static_cast<char32_t>(output);
  156|  2.95M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  77.5M|{
   29|       |    // Pattern_White_Space property
   30|  77.5M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 77.0M, False: 491k]
  |  Branch (30:27): [True: 5.94M, False: 71.1M]
  ------------------
   31|  77.5M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 4.80M, False: 66.8M]
  ------------------
   32|  77.5M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 122k, False: 66.6M]
  ------------------
   33|  77.5M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.55k, False: 66.6M]
  ------------------
   34|  77.5M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 631, False: 66.6M]
  ------------------
   35|  77.5M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 1.44k, False: 66.6M]
  ------------------
   36|  77.5M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 78, False: 66.6M]
  ------------------
   37|  77.5M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|   513k|{
   69|   513k|    return static_cast<unsigned char>(ch) <= 127;
   70|   513k|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|   495k|{
   74|   495k|#if WCHAR_MIN < 0
   75|   495k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 495k, False: 0]
  |  Branch (75:23): [True: 495k, False: 352]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|   495k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  85.2M|{
   58|  85.2M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  85.2M|        static_cast<unsigned char>(ch))];
   60|  85.2M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  16.4M|{
   92|  16.4M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  16.4M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  3.74M|    {
   57|  3.74M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  11.0M|    {
   61|  11.0M|        return m_current;
   62|  11.0M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  7.29M|    {
   66|  7.29M|        return m_range.end();
   67|  7.29M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  3.55M|    {
   81|  3.55M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.55M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.55M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.55M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.55M|        }
   87|  3.55M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.55M|    static_cast<    \
  |  |  247|  3.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.55M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  3.74M|    {
   71|  3.74M|        return ranges::subrange{begin(), end()};
   72|  3.74M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  3.44M|    {
   57|  3.44M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  9.76M|    {
   61|  9.76M|        return m_current;
   62|  9.76M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  6.31M|    {
   66|  6.31M|        return m_range.end();
   67|  6.31M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  2.87M|    {
   81|  2.87M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.87M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.87M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.87M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.87M|        }
   87|  2.87M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.87M|    static_cast<    \
  |  |  247|  2.87M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.87M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  3.44M|    {
   71|  3.44M|        return ranges::subrange{begin(), end()};
   72|  3.44M|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  5.25M|    {
  205|  5.25M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  5.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  5.25M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   444k|    {
  196|   444k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   444k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   444k|              cvref<T> obj = *get<T>(fn);
  187|   444k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   444k|                  obj(static_cast<decltype(args)>(args)...);
  189|   444k|              }
  190|   444k|              else {
  191|   444k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   444k|              }
  193|   444k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   444k|    {
  126|   444k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   444k|            return static_cast<T*>(s.m_cp);
  128|   444k|        }
  129|   444k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   444k|            return static_cast<T*>(s.m_p);
  131|   444k|        }
  132|   444k|        else {
  133|   444k|            return reinterpret_cast<T*>(s.m_fp);
  134|   444k|        }
  135|   444k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  36.4M|    {
  205|  36.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  36.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  36.4M|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  3.34M|    {
  196|  3.34M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  18.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.2M|              cvref<T> obj = *get<T>(fn);
  187|  18.2M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.2M|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.2M|              }
  190|  18.2M|              else {
  191|  18.2M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.2M|              }
  193|  18.2M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  18.2M|    {
  126|  18.2M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.2M|            return static_cast<T*>(s.m_cp);
  128|  18.2M|        }
  129|  18.2M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.2M|            return static_cast<T*>(s.m_p);
  131|  18.2M|        }
  132|  18.2M|        else {
  133|  18.2M|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.2M|        }
  135|  18.2M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  3.34M|        {
  104|  3.34M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_:
  195|  6.58k|    {
  196|  6.58k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   513k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   513k|              cvref<T> obj = *get<T>(fn);
  187|   513k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   513k|                  obj(static_cast<decltype(args)>(args)...);
  189|   513k|              }
  190|   513k|              else {
  191|   513k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   513k|              }
  193|   513k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlcE_EEDaNS3_7storageE:
  125|   513k|    {
  126|   513k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   513k|            return static_cast<T*>(s.m_cp);
  128|   513k|        }
  129|   513k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   513k|            return static_cast<T*>(s.m_p);
  131|   513k|        }
  132|   513k|        else {
  133|   513k|            return reinterpret_cast<T*>(s.m_fp);
  134|   513k|        }
  135|   513k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlcE_LPv0EEEPSK_:
  103|  6.58k|        {
  104|  6.58k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_:
  195|   110k|    {
  196|   110k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   526k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   526k|              cvref<T> obj = *get<T>(fn);
  187|   526k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   526k|                  obj(static_cast<decltype(args)>(args)...);
  189|   526k|              }
  190|   526k|              else {
  191|   526k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   526k|              }
  193|   526k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  125|   526k|    {
  126|   526k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   526k|            return static_cast<T*>(s.m_cp);
  128|   526k|        }
  129|   526k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   526k|            return static_cast<T*>(s.m_p);
  131|   526k|        }
  132|   526k|        else {
  133|   526k|            return reinterpret_cast<T*>(s.m_fp);
  134|   526k|        }
  135|   526k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  103|   110k|        {
  104|   110k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|  2.93M|    {
  196|  2.93M|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|  16.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  16.8M|              cvref<T> obj = *get<T>(fn);
  187|  16.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  16.8M|                  obj(static_cast<decltype(args)>(args)...);
  189|  16.8M|              }
  190|  16.8M|              else {
  191|  16.8M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  16.8M|              }
  193|  16.8M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|  16.8M|    {
  126|  16.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  16.8M|            return static_cast<T*>(s.m_cp);
  128|  16.8M|        }
  129|  16.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  16.8M|            return static_cast<T*>(s.m_p);
  131|  16.8M|        }
  132|  16.8M|        else {
  133|  16.8M|            return reinterpret_cast<T*>(s.m_fp);
  134|  16.8M|        }
  135|  16.8M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|  2.93M|        {
  104|  2.93M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   444k|        {
  104|   444k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   527k|    {
  196|   527k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   527k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   527k|              cvref<T> obj = *get<T>(fn);
  187|   527k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   527k|                  obj(static_cast<decltype(args)>(args)...);
  189|   527k|              }
  190|   527k|              else {
  191|   527k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   527k|              }
  193|   527k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   527k|    {
  126|   527k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   527k|            return static_cast<T*>(s.m_cp);
  128|   527k|        }
  129|   527k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   527k|            return static_cast<T*>(s.m_p);
  131|   527k|        }
  132|   527k|        else {
  133|   527k|            return reinterpret_cast<T*>(s.m_fp);
  134|   527k|        }
  135|   527k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   527k|        {
  104|   527k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   562k|    {
  196|   562k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   562k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   562k|              cvref<T> obj = *get<T>(fn);
  187|   562k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   562k|                  obj(static_cast<decltype(args)>(args)...);
  189|   562k|              }
  190|   562k|              else {
  191|   562k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   562k|              }
  193|   562k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   562k|    {
  126|   562k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   562k|            return static_cast<T*>(s.m_cp);
  128|   562k|        }
  129|   562k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   562k|            return static_cast<T*>(s.m_p);
  131|   562k|        }
  132|   562k|        else {
  133|   562k|            return reinterpret_cast<T*>(s.m_fp);
  134|   562k|        }
  135|   562k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|   562k|        {
  104|   562k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  91.6M|    {
  205|  91.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  91.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  91.6M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  5.78M|    {
  196|  5.78M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  14.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  14.9M|              cvref<T> obj = *get<T>(fn);
  187|  14.9M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  14.9M|                  obj(static_cast<decltype(args)>(args)...);
  189|  14.9M|              }
  190|  14.9M|              else {
  191|  14.9M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  14.9M|              }
  193|  14.9M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  14.9M|    {
  126|  14.9M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  14.9M|            return static_cast<T*>(s.m_cp);
  128|  14.9M|        }
  129|  14.9M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.9M|            return static_cast<T*>(s.m_p);
  131|  14.9M|        }
  132|  14.9M|        else {
  133|  14.9M|            return reinterpret_cast<T*>(s.m_fp);
  134|  14.9M|        }
  135|  14.9M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  5.78M|        {
  104|  5.78M|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   246k|    {
  196|   246k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   739k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   739k|              cvref<T> obj = *get<T>(fn);
  187|   739k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   739k|                  obj(static_cast<decltype(args)>(args)...);
  189|   739k|              }
  190|   739k|              else {
  191|   739k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   739k|              }
  193|   739k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   739k|    {
  126|   739k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   739k|            return static_cast<T*>(s.m_cp);
  128|   739k|        }
  129|   739k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   739k|            return static_cast<T*>(s.m_p);
  131|   739k|        }
  132|   739k|        else {
  133|   739k|            return reinterpret_cast<T*>(s.m_fp);
  134|   739k|        }
  135|   739k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   246k|        {
  104|   246k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   246k|    {
  205|   246k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   246k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  18.9k|    {
  196|  18.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  18.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.9k|              cvref<T> obj = *get<T>(fn);
  187|  18.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.9k|              }
  190|  18.9k|              else {
  191|  18.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.9k|              }
  193|  18.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  18.9k|    {
  126|  18.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.9k|            return static_cast<T*>(s.m_cp);
  128|  18.9k|        }
  129|  18.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.9k|            return static_cast<T*>(s.m_p);
  131|  18.9k|        }
  132|  18.9k|        else {
  133|  18.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.9k|        }
  135|  18.9k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|  75.8k|    {
  196|  75.8k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   113k|              cvref<T> obj = *get<T>(fn);
  187|   113k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   113k|                  obj(static_cast<decltype(args)>(args)...);
  189|   113k|              }
  190|   113k|              else {
  191|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   113k|              }
  193|   113k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|   113k|    {
  126|   113k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   113k|            return static_cast<T*>(s.m_cp);
  128|   113k|        }
  129|   113k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   113k|            return static_cast<T*>(s.m_p);
  131|   113k|        }
  132|   113k|        else {
  133|   113k|            return reinterpret_cast<T*>(s.m_fp);
  134|   113k|        }
  135|   113k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|  75.8k|        {
  104|  75.8k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_:
  195|   208k|    {
  196|   208k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESV_c:
  185|   208k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   208k|              cvref<T> obj = *get<T>(fn);
  187|   208k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   208k|                  obj(static_cast<decltype(args)>(args)...);
  189|   208k|              }
  190|   208k|              else {
  191|   208k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   208k|              }
  193|   208k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlcE0_EEDaNS3_7storageE:
  125|   208k|    {
  126|   208k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   208k|            return static_cast<T*>(s.m_cp);
  128|   208k|        }
  129|   208k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   208k|            return static_cast<T*>(s.m_p);
  131|   208k|        }
  132|   208k|        else {
  133|   208k|            return reinterpret_cast<T*>(s.m_fp);
  134|   208k|        }
  135|   208k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlcE0_LPv0EEEPSM_:
  103|   208k|        {
  104|   208k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  18.9k|        {
  104|  18.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  18.9k|    {
  196|  18.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  18.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.9k|              cvref<T> obj = *get<T>(fn);
  187|  18.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.9k|              }
  190|  18.9k|              else {
  191|  18.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.9k|              }
  193|  18.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  18.9k|    {
  126|  18.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.9k|            return static_cast<T*>(s.m_cp);
  128|  18.9k|        }
  129|  18.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.9k|            return static_cast<T*>(s.m_p);
  131|  18.9k|        }
  132|  18.9k|        else {
  133|  18.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.9k|        }
  135|  18.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  18.9k|        {
  104|  18.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  18.9k|    {
  196|  18.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  18.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  18.9k|              cvref<T> obj = *get<T>(fn);
  187|  18.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  18.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  18.9k|              }
  190|  18.9k|              else {
  191|  18.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  18.9k|              }
  193|  18.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  18.9k|    {
  126|  18.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  18.9k|            return static_cast<T*>(s.m_cp);
  128|  18.9k|        }
  129|  18.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  18.9k|            return static_cast<T*>(s.m_p);
  131|  18.9k|        }
  132|  18.9k|        else {
  133|  18.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  18.9k|        }
  135|  18.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  103|  18.9k|        {
  104|  18.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   296k|    {
  196|   296k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   296k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   296k|              cvref<T> obj = *get<T>(fn);
  187|   296k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   296k|                  obj(static_cast<decltype(args)>(args)...);
  189|   296k|              }
  190|   296k|              else {
  191|   296k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   296k|              }
  193|   296k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   296k|    {
  126|   296k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   296k|            return static_cast<T*>(s.m_cp);
  128|   296k|        }
  129|   296k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   296k|            return static_cast<T*>(s.m_p);
  131|   296k|        }
  132|   296k|        else {
  133|   296k|            return reinterpret_cast<T*>(s.m_fp);
  134|   296k|        }
  135|   296k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   296k|        {
  104|   296k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   784k|    {
  196|   784k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   784k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   784k|              cvref<T> obj = *get<T>(fn);
  187|   784k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   784k|                  obj(static_cast<decltype(args)>(args)...);
  189|   784k|              }
  190|   784k|              else {
  191|   784k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   784k|              }
  193|   784k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   784k|    {
  126|   784k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   784k|            return static_cast<T*>(s.m_cp);
  128|   784k|        }
  129|   784k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   784k|            return static_cast<T*>(s.m_p);
  131|   784k|        }
  132|   784k|        else {
  133|   784k|            return reinterpret_cast<T*>(s.m_fp);
  134|   784k|        }
  135|   784k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   784k|        {
  104|   784k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   351k|    {
  196|   351k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   351k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   351k|              cvref<T> obj = *get<T>(fn);
  187|   351k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   351k|                  obj(static_cast<decltype(args)>(args)...);
  189|   351k|              }
  190|   351k|              else {
  191|   351k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   351k|              }
  193|   351k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   351k|    {
  126|   351k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   351k|            return static_cast<T*>(s.m_cp);
  128|   351k|        }
  129|   351k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   351k|            return static_cast<T*>(s.m_p);
  131|   351k|        }
  132|   351k|        else {
  133|   351k|            return reinterpret_cast<T*>(s.m_fp);
  134|   351k|        }
  135|   351k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   351k|        {
  104|   351k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   946k|    {
  196|   946k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   946k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   946k|              cvref<T> obj = *get<T>(fn);
  187|   946k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   946k|                  obj(static_cast<decltype(args)>(args)...);
  189|   946k|              }
  190|   946k|              else {
  191|   946k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   946k|              }
  193|   946k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   946k|    {
  126|   946k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   946k|            return static_cast<T*>(s.m_cp);
  128|   946k|        }
  129|   946k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   946k|            return static_cast<T*>(s.m_p);
  131|   946k|        }
  132|   946k|        else {
  133|   946k|            return reinterpret_cast<T*>(s.m_fp);
  134|   946k|        }
  135|   946k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   946k|        {
  104|   946k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   375k|    {
  196|   375k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   375k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   375k|              cvref<T> obj = *get<T>(fn);
  187|   375k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   375k|                  obj(static_cast<decltype(args)>(args)...);
  189|   375k|              }
  190|   375k|              else {
  191|   375k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   375k|              }
  193|   375k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|   375k|    {
  126|   375k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   375k|            return static_cast<T*>(s.m_cp);
  128|   375k|        }
  129|   375k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   375k|            return static_cast<T*>(s.m_p);
  131|   375k|        }
  132|   375k|        else {
  133|   375k|            return reinterpret_cast<T*>(s.m_fp);
  134|   375k|        }
  135|   375k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|   375k|        {
  104|   375k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   969k|    {
  196|   969k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   969k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   969k|              cvref<T> obj = *get<T>(fn);
  187|   969k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   969k|                  obj(static_cast<decltype(args)>(args)...);
  189|   969k|              }
  190|   969k|              else {
  191|   969k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   969k|              }
  193|   969k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|   969k|    {
  126|   969k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   969k|            return static_cast<T*>(s.m_cp);
  128|   969k|        }
  129|   969k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   969k|            return static_cast<T*>(s.m_p);
  131|   969k|        }
  132|   969k|        else {
  133|   969k|            return reinterpret_cast<T*>(s.m_fp);
  134|   969k|        }
  135|   969k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|   969k|        {
  104|   969k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  12.6k|    {
  196|  12.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  12.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.6k|              cvref<T> obj = *get<T>(fn);
  187|  12.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.6k|              }
  190|  12.6k|              else {
  191|  12.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.6k|              }
  193|  12.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  12.6k|    {
  126|  12.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.6k|            return static_cast<T*>(s.m_cp);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            return static_cast<T*>(s.m_p);
  131|  12.6k|        }
  132|  12.6k|        else {
  133|  12.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.6k|        }
  135|  12.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  12.6k|        {
  104|  12.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  50.5k|    {
  196|  50.5k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  50.5k|              cvref<T> obj = *get<T>(fn);
  187|  50.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  50.5k|                  obj(static_cast<decltype(args)>(args)...);
  189|  50.5k|              }
  190|  50.5k|              else {
  191|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  50.5k|              }
  193|  50.5k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  50.5k|    {
  126|  50.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  50.5k|            return static_cast<T*>(s.m_cp);
  128|  50.5k|        }
  129|  50.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  50.5k|            return static_cast<T*>(s.m_p);
  131|  50.5k|        }
  132|  50.5k|        else {
  133|  50.5k|            return reinterpret_cast<T*>(s.m_fp);
  134|  50.5k|        }
  135|  50.5k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  50.5k|        {
  104|  50.5k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  12.6k|    {
  196|  12.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  12.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.6k|              cvref<T> obj = *get<T>(fn);
  187|  12.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.6k|              }
  190|  12.6k|              else {
  191|  12.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.6k|              }
  193|  12.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  12.6k|    {
  126|  12.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.6k|            return static_cast<T*>(s.m_cp);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            return static_cast<T*>(s.m_p);
  131|  12.6k|        }
  132|  12.6k|        else {
  133|  12.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.6k|        }
  135|  12.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  12.6k|        {
  104|  12.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  50.5k|    {
  196|  50.5k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  50.5k|              cvref<T> obj = *get<T>(fn);
  187|  50.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  50.5k|                  obj(static_cast<decltype(args)>(args)...);
  189|  50.5k|              }
  190|  50.5k|              else {
  191|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  50.5k|              }
  193|  50.5k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  50.5k|    {
  126|  50.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  50.5k|            return static_cast<T*>(s.m_cp);
  128|  50.5k|        }
  129|  50.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  50.5k|            return static_cast<T*>(s.m_p);
  131|  50.5k|        }
  132|  50.5k|        else {
  133|  50.5k|            return reinterpret_cast<T*>(s.m_fp);
  134|  50.5k|        }
  135|  50.5k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  50.5k|        {
  104|  50.5k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  12.6k|    {
  196|  12.6k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  12.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.6k|              cvref<T> obj = *get<T>(fn);
  187|  12.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.6k|              }
  190|  12.6k|              else {
  191|  12.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.6k|              }
  193|  12.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  12.6k|    {
  126|  12.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.6k|            return static_cast<T*>(s.m_cp);
  128|  12.6k|        }
  129|  12.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.6k|            return static_cast<T*>(s.m_p);
  131|  12.6k|        }
  132|  12.6k|        else {
  133|  12.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.6k|        }
  135|  12.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSN_:
  103|  12.6k|        {
  104|  12.6k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|  50.5k|    {
  196|  50.5k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  50.5k|              cvref<T> obj = *get<T>(fn);
  187|  50.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  50.5k|                  obj(static_cast<decltype(args)>(args)...);
  189|  50.5k|              }
  190|  50.5k|              else {
  191|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  50.5k|              }
  193|  50.5k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|  50.5k|    {
  126|  50.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  50.5k|            return static_cast<T*>(s.m_cp);
  128|  50.5k|        }
  129|  50.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  50.5k|            return static_cast<T*>(s.m_p);
  131|  50.5k|        }
  132|  50.5k|        else {
  133|  50.5k|            return reinterpret_cast<T*>(s.m_fp);
  134|  50.5k|        }
  135|  50.5k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSN_:
  103|  50.5k|        {
  104|  50.5k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  4.79M|    {
  196|  4.79M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  10.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  10.4M|              cvref<T> obj = *get<T>(fn);
  187|  10.4M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  10.4M|                  obj(static_cast<decltype(args)>(args)...);
  189|  10.4M|              }
  190|  10.4M|              else {
  191|  10.4M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  10.4M|              }
  193|  10.4M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  10.4M|    {
  126|  10.4M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  10.4M|            return static_cast<T*>(s.m_cp);
  128|  10.4M|        }
  129|  10.4M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  10.4M|            return static_cast<T*>(s.m_p);
  131|  10.4M|        }
  132|  10.4M|        else {
  133|  10.4M|            return reinterpret_cast<T*>(s.m_fp);
  134|  10.4M|        }
  135|  10.4M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  4.79M|        {
  104|  4.79M|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  4.78M|    {
  205|  4.78M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  4.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  4.78M|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   396k|    {
  196|   396k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   396k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   396k|              cvref<T> obj = *get<T>(fn);
  187|   396k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   396k|                  obj(static_cast<decltype(args)>(args)...);
  189|   396k|              }
  190|   396k|              else {
  191|   396k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   396k|              }
  193|   396k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   396k|    {
  126|   396k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   396k|            return static_cast<T*>(s.m_cp);
  128|   396k|        }
  129|   396k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   396k|            return static_cast<T*>(s.m_p);
  131|   396k|        }
  132|   396k|        else {
  133|   396k|            return reinterpret_cast<T*>(s.m_fp);
  134|   396k|        }
  135|   396k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  31.6M|    {
  205|  31.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  31.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  31.6M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  3.55M|    {
  196|  3.55M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  15.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.8M|              cvref<T> obj = *get<T>(fn);
  187|  15.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.8M|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.8M|              }
  190|  15.8M|              else {
  191|  15.8M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.8M|              }
  193|  15.8M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  15.8M|    {
  126|  15.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.8M|            return static_cast<T*>(s.m_cp);
  128|  15.8M|        }
  129|  15.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  15.8M|            return static_cast<T*>(s.m_p);
  131|  15.8M|        }
  132|  15.8M|        else {
  133|  15.8M|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.8M|        }
  135|  15.8M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  3.55M|        {
  104|  3.55M|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_:
  195|  5.50k|    {
  196|  5.50k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   495k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   495k|              cvref<T> obj = *get<T>(fn);
  187|   495k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   495k|                  obj(static_cast<decltype(args)>(args)...);
  189|   495k|              }
  190|   495k|              else {
  191|   495k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   495k|              }
  193|   495k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_EUlwE_EEDaNS3_7storageE:
  125|   495k|    {
  126|   495k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   495k|            return static_cast<T*>(s.m_cp);
  128|   495k|        }
  129|   495k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   495k|            return static_cast<T*>(s.m_p);
  131|   495k|        }
  132|   495k|        else {
  133|   495k|            return reinterpret_cast<T*>(s.m_fp);
  134|   495k|        }
  135|   495k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_EUlwE_LPv0EEEPSK_:
  103|  5.50k|        {
  104|  5.50k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_:
  195|  93.0k|    {
  196|  93.0k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_SR_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   442k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   442k|              cvref<T> obj = *get<T>(fn);
  187|   442k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   442k|                  obj(static_cast<decltype(args)>(args)...);
  189|   442k|              }
  190|   442k|              else {
  191|   442k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   442k|              }
  193|   442k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  125|   442k|    {
  126|   442k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   442k|            return static_cast<T*>(s.m_cp);
  128|   442k|        }
  129|   442k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   442k|            return static_cast<T*>(s.m_p);
  131|   442k|        }
  132|   442k|        else {
  133|   442k|            return reinterpret_cast<T*>(s.m_fp);
  134|   442k|        }
  135|   442k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  103|  93.0k|        {
  104|  93.0k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|  2.60M|    {
  196|  2.60M|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|  13.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  13.6M|              cvref<T> obj = *get<T>(fn);
  187|  13.6M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  13.6M|                  obj(static_cast<decltype(args)>(args)...);
  189|  13.6M|              }
  190|  13.6M|              else {
  191|  13.6M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  13.6M|              }
  193|  13.6M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|  13.6M|    {
  126|  13.6M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  13.6M|            return static_cast<T*>(s.m_cp);
  128|  13.6M|        }
  129|  13.6M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  13.6M|            return static_cast<T*>(s.m_p);
  131|  13.6M|        }
  132|  13.6M|        else {
  133|  13.6M|            return reinterpret_cast<T*>(s.m_fp);
  134|  13.6M|        }
  135|  13.6M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|  2.60M|        {
  104|  2.60M|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   396k|        {
  104|   396k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   470k|    {
  196|   470k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   470k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   470k|              cvref<T> obj = *get<T>(fn);
  187|   470k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   470k|                  obj(static_cast<decltype(args)>(args)...);
  189|   470k|              }
  190|   470k|              else {
  191|   470k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   470k|              }
  193|   470k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   470k|    {
  126|   470k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   470k|            return static_cast<T*>(s.m_cp);
  128|   470k|        }
  129|   470k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   470k|            return static_cast<T*>(s.m_p);
  131|   470k|        }
  132|   470k|        else {
  133|   470k|            return reinterpret_cast<T*>(s.m_fp);
  134|   470k|        }
  135|   470k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   470k|        {
  104|   470k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|   497k|    {
  196|   497k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|   497k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   497k|              cvref<T> obj = *get<T>(fn);
  187|   497k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   497k|                  obj(static_cast<decltype(args)>(args)...);
  189|   497k|              }
  190|   497k|              else {
  191|   497k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   497k|              }
  193|   497k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   497k|    {
  126|   497k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   497k|            return static_cast<T*>(s.m_cp);
  128|   497k|        }
  129|   497k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   497k|            return static_cast<T*>(s.m_p);
  131|   497k|        }
  132|   497k|        else {
  133|   497k|            return reinterpret_cast<T*>(s.m_fp);
  134|   497k|        }
  135|   497k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|   497k|        {
  104|   497k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   264k|    {
  196|   264k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   264k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   264k|              cvref<T> obj = *get<T>(fn);
  187|   264k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   264k|                  obj(static_cast<decltype(args)>(args)...);
  189|   264k|              }
  190|   264k|              else {
  191|   264k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   264k|              }
  193|   264k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   264k|    {
  126|   264k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   264k|            return static_cast<T*>(s.m_cp);
  128|   264k|        }
  129|   264k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   264k|            return static_cast<T*>(s.m_p);
  131|   264k|        }
  132|   264k|        else {
  133|   264k|            return reinterpret_cast<T*>(s.m_fp);
  134|   264k|        }
  135|   264k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   264k|        {
  104|   264k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   735k|    {
  196|   735k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   735k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   735k|              cvref<T> obj = *get<T>(fn);
  187|   735k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   735k|                  obj(static_cast<decltype(args)>(args)...);
  189|   735k|              }
  190|   735k|              else {
  191|   735k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   735k|              }
  193|   735k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   735k|    {
  126|   735k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   735k|            return static_cast<T*>(s.m_cp);
  128|   735k|        }
  129|   735k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   735k|            return static_cast<T*>(s.m_p);
  131|   735k|        }
  132|   735k|        else {
  133|   735k|            return reinterpret_cast<T*>(s.m_fp);
  134|   735k|        }
  135|   735k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   735k|        {
  104|   735k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   313k|    {
  196|   313k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   313k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   313k|              cvref<T> obj = *get<T>(fn);
  187|   313k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   313k|                  obj(static_cast<decltype(args)>(args)...);
  189|   313k|              }
  190|   313k|              else {
  191|   313k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   313k|              }
  193|   313k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   313k|    {
  126|   313k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   313k|            return static_cast<T*>(s.m_cp);
  128|   313k|        }
  129|   313k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   313k|            return static_cast<T*>(s.m_p);
  131|   313k|        }
  132|   313k|        else {
  133|   313k|            return reinterpret_cast<T*>(s.m_fp);
  134|   313k|        }
  135|   313k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   313k|        {
  104|   313k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   880k|    {
  196|   880k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   880k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   880k|              cvref<T> obj = *get<T>(fn);
  187|   880k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   880k|                  obj(static_cast<decltype(args)>(args)...);
  189|   880k|              }
  190|   880k|              else {
  191|   880k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   880k|              }
  193|   880k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   880k|    {
  126|   880k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   880k|            return static_cast<T*>(s.m_cp);
  128|   880k|        }
  129|   880k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   880k|            return static_cast<T*>(s.m_p);
  131|   880k|        }
  132|   880k|        else {
  133|   880k|            return reinterpret_cast<T*>(s.m_fp);
  134|   880k|        }
  135|   880k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   880k|        {
  104|   880k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|   331k|    {
  196|   331k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   331k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   331k|              cvref<T> obj = *get<T>(fn);
  187|   331k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   331k|                  obj(static_cast<decltype(args)>(args)...);
  189|   331k|              }
  190|   331k|              else {
  191|   331k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   331k|              }
  193|   331k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|   331k|    {
  126|   331k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   331k|            return static_cast<T*>(s.m_cp);
  128|   331k|        }
  129|   331k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   331k|            return static_cast<T*>(s.m_p);
  131|   331k|        }
  132|   331k|        else {
  133|   331k|            return reinterpret_cast<T*>(s.m_fp);
  134|   331k|        }
  135|   331k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|   331k|        {
  104|   331k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|   898k|    {
  196|   898k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|   898k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   898k|              cvref<T> obj = *get<T>(fn);
  187|   898k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   898k|                  obj(static_cast<decltype(args)>(args)...);
  189|   898k|              }
  190|   898k|              else {
  191|   898k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   898k|              }
  193|   898k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   898k|    {
  126|   898k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   898k|            return static_cast<T*>(s.m_cp);
  128|   898k|        }
  129|   898k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   898k|            return static_cast<T*>(s.m_p);
  131|   898k|        }
  132|   898k|        else {
  133|   898k|            return reinterpret_cast<T*>(s.m_fp);
  134|   898k|        }
  135|   898k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|   898k|        {
  104|   898k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   739k|    {
  196|   739k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|  3.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  3.69M|              cvref<T> obj = *get<T>(fn);
  187|  3.69M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  3.69M|                  obj(static_cast<decltype(args)>(args)...);
  189|  3.69M|              }
  190|  3.69M|              else {
  191|  3.69M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  3.69M|              }
  193|  3.69M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|  3.69M|    {
  126|  3.69M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  3.69M|            return static_cast<T*>(s.m_cp);
  128|  3.69M|        }
  129|  3.69M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  3.69M|            return static_cast<T*>(s.m_p);
  131|  3.69M|        }
  132|  3.69M|        else {
  133|  3.69M|            return reinterpret_cast<T*>(s.m_fp);
  134|  3.69M|        }
  135|  3.69M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   739k|        {
  104|   739k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EclESB_SI_SJ_:
  204|   739k|    {
  205|   739k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   739k|    }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  56.8k|    {
  196|  56.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  56.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  56.8k|              cvref<T> obj = *get<T>(fn);
  187|  56.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  56.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  56.8k|              }
  190|  56.8k|              else {
  191|  56.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  56.8k|              }
  193|  56.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  56.8k|    {
  126|  56.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  56.8k|            return static_cast<T*>(s.m_cp);
  128|  56.8k|        }
  129|  56.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  56.8k|            return static_cast<T*>(s.m_p);
  131|  56.8k|        }
  132|  56.8k|        else {
  133|  56.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  56.8k|        }
  135|  56.8k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   227k|    {
  196|   227k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   568k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   568k|              cvref<T> obj = *get<T>(fn);
  187|   568k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   568k|                  obj(static_cast<decltype(args)>(args)...);
  189|   568k|              }
  190|   568k|              else {
  191|   568k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   568k|              }
  193|   568k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   568k|    {
  126|   568k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   568k|            return static_cast<T*>(s.m_cp);
  128|   568k|        }
  129|   568k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   568k|            return static_cast<T*>(s.m_p);
  131|   568k|        }
  132|   568k|        else {
  133|   568k|            return reinterpret_cast<T*>(s.m_fp);
  134|   568k|        }
  135|   568k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   227k|        {
  104|   227k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_:
  195|   625k|    {
  196|   625k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_SR_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESV_w:
  185|   625k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   625k|              cvref<T> obj = *get<T>(fn);
  187|   625k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   625k|                  obj(static_cast<decltype(args)>(args)...);
  189|   625k|              }
  190|   625k|              else {
  191|   625k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   625k|              }
  193|   625k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_bEUlwE0_EEDaNS3_7storageE:
  125|   625k|    {
  126|   625k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   625k|            return static_cast<T*>(s.m_cp);
  128|   625k|        }
  129|   625k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   625k|            return static_cast<T*>(s.m_p);
  131|   625k|        }
  132|   625k|        else {
  133|   625k|            return reinterpret_cast<T*>(s.m_fp);
  134|   625k|        }
  135|   625k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_bEUlwE0_LPv0EEEPSM_:
  103|   625k|        {
  104|   625k|        }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  56.8k|        {
  104|  56.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  56.8k|    {
  196|  56.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  56.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  56.8k|              cvref<T> obj = *get<T>(fn);
  187|  56.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  56.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  56.8k|              }
  190|  56.8k|              else {
  191|  56.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  56.8k|              }
  193|  56.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  56.8k|    {
  126|  56.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  56.8k|            return static_cast<T*>(s.m_cp);
  128|  56.8k|        }
  129|  56.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  56.8k|            return static_cast<T*>(s.m_p);
  131|  56.8k|        }
  132|  56.8k|        else {
  133|  56.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  56.8k|        }
  135|  56.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  56.8k|        {
  104|  56.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_:
  195|  56.8k|    {
  196|  56.8k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_RT0_SJ_EUlSB_DpOT_E_S11_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES15_SB_SI_SJ_:
  185|  56.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  56.8k|              cvref<T> obj = *get<T>(fn);
  187|  56.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  56.8k|                  obj(static_cast<decltype(args)>(args)...);
  189|  56.8k|              }
  190|  56.8k|              else {
  191|  56.8k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  56.8k|              }
  193|  56.8k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  56.8k|    {
  126|  56.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  56.8k|            return static_cast<T*>(s.m_cp);
  128|  56.8k|        }
  129|  56.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  56.8k|            return static_cast<T*>(s.m_p);
  131|  56.8k|        }
  132|  56.8k|        else {
  133|  56.8k|            return reinterpret_cast<T*>(s.m_fp);
  134|  56.8k|        }
  135|  56.8k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  103|  56.8k|        {
  104|  56.8k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  37.9k|    {
  196|  37.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  37.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  37.9k|              cvref<T> obj = *get<T>(fn);
  187|  37.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  37.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  37.9k|              }
  190|  37.9k|              else {
  191|  37.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  37.9k|              }
  193|  37.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  37.9k|    {
  126|  37.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  37.9k|            return static_cast<T*>(s.m_cp);
  128|  37.9k|        }
  129|  37.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  37.9k|            return static_cast<T*>(s.m_p);
  131|  37.9k|        }
  132|  37.9k|        else {
  133|  37.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  37.9k|        }
  135|  37.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  37.9k|        {
  104|  37.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|   151k|    {
  196|   151k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_fEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   151k|              cvref<T> obj = *get<T>(fn);
  187|   151k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   151k|                  obj(static_cast<decltype(args)>(args)...);
  189|   151k|              }
  190|   151k|              else {
  191|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   151k|              }
  193|   151k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   151k|    {
  126|   151k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   151k|            return static_cast<T*>(s.m_cp);
  128|   151k|        }
  129|   151k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   151k|            return static_cast<T*>(s.m_p);
  131|   151k|        }
  132|   151k|        else {
  133|   151k|            return reinterpret_cast<T*>(s.m_fp);
  134|   151k|        }
  135|   151k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEfEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|   151k|        {
  104|   151k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  37.9k|    {
  196|  37.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  37.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  37.9k|              cvref<T> obj = *get<T>(fn);
  187|  37.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  37.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  37.9k|              }
  190|  37.9k|              else {
  191|  37.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  37.9k|              }
  193|  37.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  37.9k|    {
  126|  37.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  37.9k|            return static_cast<T*>(s.m_cp);
  128|  37.9k|        }
  129|  37.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  37.9k|            return static_cast<T*>(s.m_p);
  131|  37.9k|        }
  132|  37.9k|        else {
  133|  37.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  37.9k|        }
  135|  37.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  37.9k|        {
  104|  37.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|   151k|    {
  196|   151k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   151k|              cvref<T> obj = *get<T>(fn);
  187|   151k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   151k|                  obj(static_cast<decltype(args)>(args)...);
  189|   151k|              }
  190|   151k|              else {
  191|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   151k|              }
  193|   151k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   151k|    {
  126|   151k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   151k|            return static_cast<T*>(s.m_cp);
  128|   151k|        }
  129|   151k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   151k|            return static_cast<T*>(s.m_p);
  131|   151k|        }
  132|   151k|        else {
  133|   151k|            return reinterpret_cast<T*>(s.m_fp);
  134|   151k|        }
  135|   151k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|   151k|        {
  104|   151k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_:
  195|  37.9k|    {
  196|  37.9k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|  37.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  37.9k|              cvref<T> obj = *get<T>(fn);
  187|  37.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  37.9k|                  obj(static_cast<decltype(args)>(args)...);
  189|  37.9k|              }
  190|  37.9k|              else {
  191|  37.9k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  37.9k|              }
  193|  37.9k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|  37.9k|    {
  126|  37.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  37.9k|            return static_cast<T*>(s.m_cp);
  128|  37.9k|        }
  129|  37.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  37.9k|            return static_cast<T*>(s.m_p);
  131|  37.9k|        }
  132|  37.9k|        else {
  133|  37.9k|            return reinterpret_cast<T*>(s.m_fp);
  134|  37.9k|        }
  135|  37.9k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSN_:
  103|  37.9k|        {
  104|  37.9k|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_:
  195|   151k|    {
  196|   151k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS7_NSD_18default_sentinel_tELNSD_13subrange_kindE0EEENS4_10locale_refEESK_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSI_eEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISS_EEE4typeEEEOSS_RKNS4_12format_specsERT0_SJ_EUlSB_DpOT_E0_S15_LPv0EEESW_ENKUlNS1_12fnref_detail4base7storageESB_SI_SJ_E_clES19_SB_SI_SJ_:
  185|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   151k|              cvref<T> obj = *get<T>(fn);
  187|   151k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   151k|                  obj(static_cast<decltype(args)>(args)...);
  189|   151k|              }
  190|   151k|              else {
  191|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   151k|              }
  193|   151k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tELNS9_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|   151k|    {
  126|   151k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   151k|            return static_cast<T*>(s.m_cp);
  128|   151k|        }
  129|   151k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   151k|            return static_cast<T*>(s.m_p);
  131|   151k|        }
  132|   151k|        else {
  133|   151k|            return reinterpret_cast<T*>(s.m_fp);
  134|   151k|        }
  135|   151k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEeEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSN_:
  103|   151k|        {
  104|   151k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_:
  195|  2.04M|    {
  196|  2.04M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_SH_LPv0EEESG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESL_Di:
  185|  61.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  61.7M|              cvref<T> obj = *get<T>(fn);
  187|  61.7M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  61.7M|                  obj(static_cast<decltype(args)>(args)...);
  189|  61.7M|              }
  190|  61.7M|              else {
  191|  61.7M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  61.7M|              }
  193|  61.7M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_EUlDiE_EEDaNS3_7storageE:
  125|  61.7M|    {
  126|  61.7M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  61.7M|            return static_cast<T*>(s.m_cp);
  128|  61.7M|        }
  129|  61.7M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  61.7M|            return static_cast<T*>(s.m_p);
  131|  61.7M|        }
  132|  61.7M|        else {
  133|  61.7M|            return reinterpret_cast<T*>(s.m_fp);
  134|  61.7M|        }
  135|  61.7M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_EUlDiE_LPv0EEEPSD_:
  103|  2.04M|        {
  104|  2.04M|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  49.1k|{
   44|  49.1k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  49.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  49.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  49.1k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  38.1M|{
   30|  38.1M|    return e != eof_error::good;
   31|  38.1M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   204k|{
   91|   204k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   204k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   204k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   204k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  32.8M|    {
   69|  32.8M|        return a.m_code == b.m_code;
   70|  32.8M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  78.6M|    {
   55|  78.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  78.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  78.6M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  11.9M|    return [code, msg](parse_error err) {
  115|  11.9M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  11.9M|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  11.9M|{
  100|  11.9M|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 11.9M]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  11.9M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 81.8k, False: 11.8M]
  ------------------
  105|  81.8k|        return scan_error{scan_error::end_of_range, "EOF"};
  106|  81.8k|    }
  107|       |
  108|  11.8M|    return scan_error{code, msg};
  109|  11.9M|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  11.9M|{
  114|  11.9M|    return [code, msg](parse_error err) {
  115|  11.9M|        return make_scan_error_from_parse_error(err, code, msg);
  116|  11.9M|    };
  117|  11.9M|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  2.38M|{
  587|  2.38M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  2.38M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   113k|{
  595|   113k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   113k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   113k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  597|      0|        source.sync(*n);
  598|      0|    }
  599|   113k|    else {
  600|   113k|        source.sync_all();
  601|   113k|    }
  602|   113k|    return n;
  603|   113k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  2.17M|{
  611|  2.17M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  2.17M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   341k|{
  619|   341k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   341k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   341k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  621|      0|        source.sync(*n);
  622|      0|    }
  623|   341k|    else {
  624|   341k|        source.sync_all();
  625|   341k|    }
  626|   341k|    return n;
  627|   341k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  2.38M|{
  544|  2.38M|    return vscan_internal(source, format, args);
  545|  2.38M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   113k|{
  550|   113k|    auto n = vscan_internal(source, format, args);
  551|   113k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   113k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  552|      0|        source.sync(*n);
  553|      0|    }
  554|   113k|    else {
  555|   113k|        source.sync_all();
  556|   113k|    }
  557|   113k|    return n;
  558|   113k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  2.17M|{
  564|  2.17M|    return vscan_internal(source, format, args);
  565|  2.17M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   341k|{
  570|   341k|    auto n = vscan_internal(source, format, args);
  571|   341k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   341k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
  572|      0|        source.sync(*n);
  573|      0|    }
  574|   341k|    else {
  575|   341k|        source.sync_all();
  576|   341k|    }
  577|   341k|    return n;
  578|   341k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   513k|{
  654|   513k|    return vscan_value_internal(source, arg);
  655|   513k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  18.9k|{
  659|  18.9k|    auto n = vscan_value_internal(source, arg);
  660|  18.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  18.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 18.9k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  18.9k|    else {
  664|  18.9k|        source.sync_all();
  665|  18.9k|    }
  666|  18.9k|    return n;
  667|  18.9k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   456k|{
  673|   456k|    return vscan_value_internal(source, arg);
  674|   456k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  56.8k|{
  679|  56.8k|    auto n = vscan_value_internal(source, arg);
  680|  56.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  56.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  56.8k|    else {
  684|  56.8k|        source.sync_all();
  685|  56.8k|    }
  686|  56.8k|    return n;
  687|  56.8k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   227k|{
  476|   227k|    const auto argcount = args.size();
  477|   227k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 37.9k, False: 189k]
  |  Branch (477:60): [True: 37.9k, False: 0]
  ------------------
  478|  37.9k|        auto arg = args.get(0);
  479|  37.9k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  37.9k|    static_cast<    \
  |  |  247|  37.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  37.9k|    }
  481|       |
  482|   189k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 189k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   189k|    SCN_UNLIKELY_ATTR
  490|   189k|    {
  491|   189k|        auto handler = format_handler<false, CharT>{
  492|   189k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   189k|    static_cast<    \
  |  |  247|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   189k|    static_cast<    \
  |  |  247|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   189k|        return vscan_parse_format_string(format, handler);
  494|   189k|    }
  495|   189k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  4.99M|{
   36|  4.99M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 3.93M, False: 1.06M]
  ------------------
   37|  3.93M|        return false;
   38|  3.93M|    }
   39|  1.06M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.06M, False: 0]
  |  Branch (39:39): [True: 1.06M, False: 0]
  ------------------
   40|  4.99M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  56.8k|{
   69|  56.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  56.8k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  56.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  56.8k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  56.8k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  56.8k|    static_cast<    \
  |  |  247|  56.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  56.8k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  56.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 56.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  56.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  56.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  56.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  56.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  56.8k|    }                                                  \
  |  |  |  |   70|  56.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  56.8k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  3.74M|    {
  314|  3.74M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  7.94M|    {
  133|  7.94M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  7.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.94M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  7.94M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  3.74M|    {
  264|  3.74M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  3.74M|{
  441|  3.74M|    const auto beg = handler.get_ctx().begin();
  442|  3.74M|    detail::parse_format_string<false>(format, handler);
  443|  3.74M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 3.55M]
  |  |  ------------------
  ------------------
  444|   189k|        return unexpected(handler.error);
  445|   189k|    }
  446|  3.55M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  3.74M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  25.8M|    {
  425|  25.8M|        return ctx.get();
  426|  25.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  25.8M|    {
  268|  25.8M|        return contiguous_ctx;
  269|  25.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  7.29M|    {
  318|  7.29M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 7.29M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  7.29M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  3.74M|{
   92|  3.74M|    auto arg = ctx.arg(id);
   93|  3.74M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  3.74M|    return arg;
   97|  3.74M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  7.94M|    {
  208|  7.94M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.94M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  7.94M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  7.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.94M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  7.94M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.94M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.94M, False: 0]
  |  |  ------------------
  ------------------
  218|  7.94M|            visited_args_lower64 |= (1ull << id);
  219|  7.94M|            return;
  220|  7.94M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  7.94M|    {
  193|  7.94M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.94M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  7.94M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.94M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.94M, False: 0]
  |  |  ------------------
  ------------------
  199|  7.94M|            return (visited_args_lower64 >> id) & 1ull;
  200|  7.94M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  7.94M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  1.51M|    {
  177|  1.51M|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.51M, False: 0]
  |  |  ------------------
  ------------------
  178|  1.51M|            error = err;
  179|  1.51M|        }
  180|  1.51M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  3.74M|    {
  347|  3.74M|        return parse_ctx.next_arg_id();
  348|  3.74M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  3.74M|    {
  388|  3.74M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  3.74M|        set_arg_as_visited(arg_id);
  390|       |
  391|  3.74M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 3.74M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  3.74M|        auto specs = detail::format_specs{};
  401|  3.74M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  3.74M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  3.74M|            arg.type()};
  404|       |
  405|  3.74M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  3.74M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 3.74M]
  |  Branch (406:29): [True: 0, False: 3.74M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  3.74M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.74M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  3.74M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.74M|        on_visit_scan_arg(
  417|  3.74M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.74M|                                           get_ctx().locale()},
  419|  3.74M|            arg);
  420|  3.74M|        return parse_ctx.begin();
  421|  3.74M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  3.74M|    {
  112|  3.74M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  3.74M|    {
  359|  3.74M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.74M]
  |  Branch (359:23): [True: 0, False: 3.74M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.74M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.74M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 3.55M]
  |  |  ------------------
  ------------------
  366|   189k|            on_error(r.error());
  367|   189k|        }
  368|  3.55M|        else {
  369|  3.55M|            get_ctx().advance_to(*r);
  370|  3.55M|        }
  371|  3.74M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  7.94M|    {
  140|  7.94M|        {
  141|  7.94M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 7.94M]
  ------------------
  142|  7.94M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 7.94M]
  ------------------
  143|  7.94M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  7.94M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  7.94M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 7.94M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  7.94M|        }
  150|       |
  151|  7.94M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 7.94M, False: 0]
  ------------------
  152|  7.94M|            return;
  153|  7.94M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  7.94M|    {
  188|  7.94M|        return error;
  189|  7.94M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  23.8M|    {
  184|  23.8M|        return static_cast<bool>(error);
  185|  23.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   189k|    {
  314|   189k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   189k|    {
  241|   189k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   189k|{
  441|   189k|    const auto beg = handler.get_ctx().begin();
  442|   189k|    detail::parse_format_string<false>(format, handler);
  443|   189k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 0]
  |  |  ------------------
  ------------------
  444|   189k|        return unexpected(handler.error);
  445|   189k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   189k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   948k|    {
  425|   948k|        return ctx.get();
  426|   948k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   948k|    {
  245|   948k|        return ctx;
  246|   948k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   189k|    {
  318|   189k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 189k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   189k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   189k|{
   92|   189k|    auto arg = ctx.arg(id);
   93|   189k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   189k|    return arg;
   97|   189k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   189k|    {
  347|   189k|        return parse_ctx.next_arg_id();
  348|   189k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   189k|    {
  388|   189k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   189k|        set_arg_as_visited(arg_id);
  390|       |
  391|   189k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 189k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   189k|        auto specs = detail::format_specs{};
  401|   189k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   189k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   189k|            arg.type()};
  404|       |
  405|   189k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   189k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 189k]
  |  Branch (406:29): [True: 0, False: 189k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   189k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   189k|        parse_ctx.advance_to(begin);
  415|       |
  416|   189k|        on_visit_scan_arg(
  417|   189k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   189k|                                           get_ctx().locale()},
  419|   189k|            arg);
  420|   189k|        return parse_ctx.begin();
  421|   189k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   189k|    {
  112|   189k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   189k|    {
  359|   189k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 189k]
  |  Branch (359:23): [True: 0, False: 189k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   189k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   189k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 0]
  |  |  ------------------
  ------------------
  366|   189k|            on_error(r.error());
  367|   189k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   189k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  4.76M|{
  456|  4.76M|    const auto argcount = args.size();
  457|  4.76M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.02M, False: 3.74M]
  |  Branch (457:60): [True: 1.02M, False: 0]
  ------------------
  458|  1.02M|        auto arg = args.get(0);
  459|  1.02M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.02M|    static_cast<    \
  |  |  247|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.02M|    }
  461|       |
  462|  3.74M|    auto handler = format_handler<true, CharT>{
  463|  3.74M|        ranges::subrange<const CharT*>{source.data(),
  464|  3.74M|                                       source.data() + source.size()},
  465|  3.74M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.74M|    static_cast<    \
  |  |  247|  3.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.74M|    static_cast<    \
  |  |  247|  3.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  3.74M|    return vscan_parse_format_string(format, handler);
  467|  4.76M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.54M|{
   49|  1.54M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.54M|    auto reader =
   55|  1.54M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.54M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.54M|                                           source.data() + source.size()},
   58|  1.54M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.54M|    static_cast<    \
  |  |  247|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.54M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 56.8k, False: 1.48M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  56.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  56.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  56.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  56.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  56.8k|    }                                                  \
  |  |  |  |   70|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.48M|    return ranges::distance(source.data(), it);
   61|  1.54M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  4.35M|{
  456|  4.35M|    const auto argcount = args.size();
  457|  4.35M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 913k, False: 3.44M]
  |  Branch (457:60): [True: 913k, False: 0]
  ------------------
  458|   913k|        auto arg = args.get(0);
  459|   913k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   913k|    static_cast<    \
  |  |  247|   913k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   913k|    }
  461|       |
  462|  3.44M|    auto handler = format_handler<true, CharT>{
  463|  3.44M|        ranges::subrange<const CharT*>{source.data(),
  464|  3.44M|                                       source.data() + source.size()},
  465|  3.44M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.44M|    static_cast<    \
  |  |  247|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.44M|    static_cast<    \
  |  |  247|  3.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  3.44M|    return vscan_parse_format_string(format, handler);
  467|  4.35M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  5.04M|{
   36|  5.04M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 4.01M, False: 1.02M]
  ------------------
   37|  4.01M|        return false;
   38|  4.01M|    }
   39|  1.02M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.02M, False: 0]
  |  Branch (39:39): [True: 1.02M, False: 0]
  ------------------
   40|  5.04M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.37M|{
   49|  1.37M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.37M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.37M|    auto reader =
   55|  1.37M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.37M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.37M|                                           source.data() + source.size()},
   58|  1.37M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.37M|    static_cast<    \
  |  |  247|  1.37M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.37M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.37M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 170k, False: 1.20M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   170k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   170k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   170k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   170k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   170k|    }                                                  \
  |  |  |  |   70|  1.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.20M|    return ranges::distance(source.data(), it);
   61|  1.37M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  3.44M|    {
  314|  3.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  3.44M|    {
  264|  3.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  3.44M|{
  441|  3.44M|    const auto beg = handler.get_ctx().begin();
  442|  3.44M|    detail::parse_format_string<false>(format, handler);
  443|  3.44M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 568k, False: 2.87M]
  |  |  ------------------
  ------------------
  444|   568k|        return unexpected(handler.error);
  445|   568k|    }
  446|  2.87M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  3.44M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  22.9M|    {
  425|  22.9M|        return ctx.get();
  426|  22.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  22.9M|    {
  268|  22.9M|        return contiguous_ctx;
  269|  22.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  6.31M|    {
  318|  6.31M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 6.31M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  6.31M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  3.44M|{
   92|  3.44M|    auto arg = ctx.arg(id);
   93|  3.44M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  3.44M|    return arg;
   97|  3.44M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  3.44M|    {
  347|  3.44M|        return parse_ctx.next_arg_id();
  348|  3.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  3.44M|    {
  388|  3.44M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  3.44M|        set_arg_as_visited(arg_id);
  390|       |
  391|  3.44M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 3.44M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  3.44M|        auto specs = detail::format_specs{};
  401|  3.44M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  3.44M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  3.44M|            arg.type()};
  404|       |
  405|  3.44M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  3.44M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 3.44M]
  |  Branch (406:29): [True: 0, False: 3.44M]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|  3.44M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|  3.44M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.44M|        on_visit_scan_arg(
  417|  3.44M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.44M|                                           get_ctx().locale()},
  419|  3.44M|            arg);
  420|  3.44M|        return parse_ctx.begin();
  421|  3.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  3.44M|    {
  112|  3.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  3.44M|    {
  359|  3.44M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.44M]
  |  Branch (359:23): [True: 0, False: 3.44M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.44M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.44M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 568k, False: 2.87M]
  |  |  ------------------
  ------------------
  366|   568k|            on_error(r.error());
  367|   568k|        }
  368|  2.87M|        else {
  369|  2.87M|            get_ctx().advance_to(*r);
  370|  2.87M|        }
  371|  3.44M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   682k|{
  476|   682k|    const auto argcount = args.size();
  477|   682k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 113k, False: 568k]
  |  Branch (477:60): [True: 113k, False: 0]
  ------------------
  478|   113k|        auto arg = args.get(0);
  479|   113k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|   113k|    }
  481|       |
  482|   568k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 568k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   568k|    SCN_UNLIKELY_ATTR
  490|   568k|    {
  491|   568k|        auto handler = format_handler<false, CharT>{
  492|   568k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   568k|    static_cast<    \
  |  |  247|   568k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   568k|    static_cast<    \
  |  |  247|   568k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   568k|        return vscan_parse_format_string(format, handler);
  494|   568k|    }
  495|   568k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   170k|{
   69|   170k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   170k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   170k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   170k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   170k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   170k|    static_cast<    \
  |  |  247|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   170k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   170k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   170k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   170k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 170k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   170k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   170k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   170k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   170k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   170k|    }                                                  \
  |  |  |  |   70|   170k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|   170k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   568k|    {
  314|   568k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   568k|    {
  241|   568k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   568k|{
  441|   568k|    const auto beg = handler.get_ctx().begin();
  442|   568k|    detail::parse_format_string<false>(format, handler);
  443|   568k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 568k, False: 0]
  |  |  ------------------
  ------------------
  444|   568k|        return unexpected(handler.error);
  445|   568k|    }
  446|      0|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   568k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  2.84M|    {
  425|  2.84M|        return ctx.get();
  426|  2.84M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  2.84M|    {
  245|  2.84M|        return ctx;
  246|  2.84M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   568k|    {
  318|   568k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 568k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   568k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   568k|{
   92|   568k|    auto arg = ctx.arg(id);
   93|   568k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   568k|    return arg;
   97|   568k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   568k|    {
  347|   568k|        return parse_ctx.next_arg_id();
  348|   568k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   568k|    {
  388|   568k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   568k|        set_arg_as_visited(arg_id);
  390|       |
  391|   568k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 568k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   568k|        auto specs = detail::format_specs{};
  401|   568k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   568k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   568k|            arg.type()};
  404|       |
  405|   568k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   568k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 568k]
  |  Branch (406:29): [True: 0, False: 568k]
  ------------------
  407|      0|            SCN_UNLIKELY_ATTR
  408|      0|            on_error("Missing '}' in format string");
  409|      0|            return parse_ctx.begin();
  410|      0|        }
  411|   568k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
  412|      0|            return parse_ctx.begin();
  413|      0|        }
  414|   568k|        parse_ctx.advance_to(begin);
  415|       |
  416|   568k|        on_visit_scan_arg(
  417|   568k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   568k|                                           get_ctx().locale()},
  419|   568k|            arg);
  420|   568k|        return parse_ctx.begin();
  421|   568k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   568k|    {
  112|   568k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   568k|    {
  359|   568k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 568k]
  |  Branch (359:23): [True: 0, False: 568k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   568k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   568k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   568k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 568k, False: 0]
  |  |  ------------------
  ------------------
  366|   568k|            on_error(r.error());
  367|   568k|        }
  368|      0|        else {
  369|      0|            get_ctx().advance_to(*r);
  370|      0|        }
  371|   568k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   513k|{
  502|   513k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   513k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  18.9k|{
  502|  18.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  18.9k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   456k|{
  502|   456k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   456k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  56.8k|{
  502|  56.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  56.8k|}

LLVMFuzzerTestOneInput:
   54|  6.32k|{
   55|  6.32k|    scn::fuzz::run({data, size});
   56|  6.32k|    return 0;
   57|  6.32k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   32|  6.32k|{
   33|  6.32k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 6.32k]
  |  Branch (33:42): [True: 0, False: 6.32k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  6.32k|    auto [sv, wsv_direct, wsv_reinterpret, wsv_transcode] =
   38|  6.32k|        make_input_views(data);
   39|       |
   40|  6.32k|    auto f =
   41|  6.32k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   42|  6.32k|    do_basic_run(sv, f);
   43|       |
   44|  6.32k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}", L"{:f}",
   45|  6.32k|                                          L"{:g}", L"{:L}");
   46|  6.32k|    do_basic_run(wsv_direct, wf);
   47|  6.32k|    do_basic_run(wsv_reinterpret, wf);
   48|  6.32k|    do_basic_run(wsv_transcode, wf);
   49|  6.32k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  6.32k|{
   25|  6.32k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.32k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.32k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.32k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  6.32k|{
   25|  6.32k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.32k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.32k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.32k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  18.9k|{
   25|  18.9k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  18.9k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  18.9k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  18.9k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  18.9k|{
   25|  18.9k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  18.9k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  18.9k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  18.9k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   53|  6.32k|{
   54|  6.32k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  6.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   55|       |
   56|       |    // narrow
   57|      0|    string_buffer.resize(data.size());
   58|  6.32k|    std::copy(data.begin(), data.end(),
   59|  6.32k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   60|  6.32k|    auto sv = std::string_view{string_buffer};
   61|       |
   62|       |    // wide, direct copy
   63|  6.32k|    wstring_buffer_direct.resize(data.size());
   64|  6.32k|    std::copy(data.begin(), data.end(),
   65|  6.32k|              reinterpret_cast<uint8_t*>(&wstring_buffer_direct[0]));
   66|  6.32k|    auto wsv_direct = std::wstring_view{wstring_buffer_direct};
   67|       |
   68|       |    // wide, bitwise reinterpret
   69|  6.32k|    const auto wsv_reinterpret_size =
   70|  6.32k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (70:9): [True: 77, False: 6.24k]
  ------------------
   71|  6.32k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   72|  6.32k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   73|  6.32k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   74|       |
   75|       |    // wide, transcode to correct encoding (utf16 or utf32)
   76|  6.32k|    std::wstring_view wsv_transcoded;
   77|  6.32k|    if (!simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (77:9): [True: 1.74k, False: 4.57k]
  ------------------
   78|  1.74k|        wsv_transcoded = {wstring_buffer_direct};
   79|  1.74k|    }
   80|  4.57k|    else {
   81|  4.57k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (81:23): [Folded - Ignored]
  ------------------
   82|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   83|      0|            wstring_buffer_transcoded_wide.resize(size);
   84|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   85|      0|                sv.data(), sv.size(),
   86|      0|                reinterpret_cast<char16_t*>(
   87|      0|                    wstring_buffer_transcoded_wide.data()));
   88|      0|        }
   89|  4.57k|        else {
   90|  4.57k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   91|  4.57k|            wstring_buffer_transcoded_wide.resize(size);
   92|  4.57k|            (void)simdutf::convert_valid_utf8_to_utf32(
   93|  4.57k|                sv.data(), sv.size(),
   94|  4.57k|                reinterpret_cast<char32_t*>(
   95|  4.57k|                    wstring_buffer_transcoded_wide.data()));
   96|  4.57k|        }
   97|  4.57k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   98|  4.57k|    }
   99|       |
  100|  6.32k|    return std::make_tuple(sv, wsv_direct, wsv_reintepreted, wsv_transcoded);
  101|  6.32k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  6.32k|{
  151|  6.32k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  6.32k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  6.32k|    buf.resize(sizeof...(Args));
  154|  6.32k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  6.32k|    return {buf.data(), buf.size()};
  156|  6.32k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  136|  6.32k|{
  137|  6.32k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  6.32k|        return format_string_view_buffer;
  139|  6.32k|    }
  140|  6.32k|    else {
  141|  6.32k|        return wformat_string_view_buffer;
  142|  6.32k|    }
  143|  6.32k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  6.32k|{
  211|  6.32k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  6.32k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  6.32k|                                   format_strings);
  214|  6.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.32k|{
  162|       |    // Regular scan
  163|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 37.9k, False: 6.32k]
  ------------------
  164|  37.9k|        auto it = scn::ranges::begin(source);
  165|   691k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   691k|            auto result = scn::scan<T>(
  167|   691k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   691k|                scn::runtime_format(f));
  169|   691k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 37.9k, False: 653k]
  ------------------
  170|  37.9k|                break;
  171|  37.9k|            }
  172|   653k|            it = result->begin();
  173|   653k|        }
  174|  37.9k|    }
  175|       |
  176|       |    // scan localized
  177|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 37.9k, False: 6.32k]
  ------------------
  178|  37.9k|        auto it = scn::ranges::begin(source);
  179|   691k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   691k|            auto result = scn::scan<T>(
  181|   691k|                global_locale,
  182|   691k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   691k|                scn::runtime_format(f));
  184|   691k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 37.9k, False: 653k]
  ------------------
  185|  37.9k|                break;
  186|  37.9k|            }
  187|   653k|            it = result->begin();
  188|   653k|        }
  189|  37.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.32k|    {
  193|  6.32k|        auto it = scn::ranges::begin(source);
  194|   148k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   148k|            auto result = scn::scan_value<T>(
  196|   148k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   148k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.32k, False: 142k]
  ------------------
  198|  6.32k|                break;
  199|  6.32k|            }
  200|   142k|            it = result->begin();
  201|   142k|        }
  202|  6.32k|    }
  203|  6.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.32k|{
  162|       |    // Regular scan
  163|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 37.9k, False: 6.32k]
  ------------------
  164|  37.9k|        auto it = scn::ranges::begin(source);
  165|   828k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   828k|            auto result = scn::scan<T>(
  167|   828k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   828k|                scn::runtime_format(f));
  169|   828k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 37.9k, False: 790k]
  ------------------
  170|  37.9k|                break;
  171|  37.9k|            }
  172|   790k|            it = result->begin();
  173|   790k|        }
  174|  37.9k|    }
  175|       |
  176|       |    // scan localized
  177|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 37.9k, False: 6.32k]
  ------------------
  178|  37.9k|        auto it = scn::ranges::begin(source);
  179|   828k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   828k|            auto result = scn::scan<T>(
  181|   828k|                global_locale,
  182|   828k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   828k|                scn::runtime_format(f));
  184|   828k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 37.9k, False: 790k]
  ------------------
  185|  37.9k|                break;
  186|  37.9k|            }
  187|   790k|            it = result->begin();
  188|   790k|        }
  189|  37.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.32k|    {
  193|  6.32k|        auto it = scn::ranges::begin(source);
  194|   176k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   176k|            auto result = scn::scan_value<T>(
  196|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   176k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.32k, False: 170k]
  ------------------
  198|  6.32k|                break;
  199|  6.32k|            }
  200|   170k|            it = result->begin();
  201|   170k|        }
  202|  6.32k|    }
  203|  6.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  6.32k|{
  162|       |    // Regular scan
  163|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 37.9k, False: 6.32k]
  ------------------
  164|  37.9k|        auto it = scn::ranges::begin(source);
  165|   864k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   864k|            auto result = scn::scan<T>(
  167|   864k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   864k|                scn::runtime_format(f));
  169|   864k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 37.9k, False: 826k]
  ------------------
  170|  37.9k|                break;
  171|  37.9k|            }
  172|   826k|            it = result->begin();
  173|   826k|        }
  174|  37.9k|    }
  175|       |
  176|       |    // scan localized
  177|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 37.9k, False: 6.32k]
  ------------------
  178|  37.9k|        auto it = scn::ranges::begin(source);
  179|   864k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   864k|            auto result = scn::scan<T>(
  181|   864k|                global_locale,
  182|   864k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   864k|                scn::runtime_format(f));
  184|   864k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 37.9k, False: 826k]
  ------------------
  185|  37.9k|                break;
  186|  37.9k|            }
  187|   826k|            it = result->begin();
  188|   826k|        }
  189|  37.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.32k|    {
  193|  6.32k|        auto it = scn::ranges::begin(source);
  194|   188k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   188k|            auto result = scn::scan_value<T>(
  196|   188k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   188k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.32k, False: 181k]
  ------------------
  198|  6.32k|                break;
  199|  6.32k|            }
  200|   181k|            it = result->begin();
  201|   181k|        }
  202|  6.32k|    }
  203|  6.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.32k|{
  162|       |    // Regular scan
  163|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 37.9k, False: 6.32k]
  ------------------
  164|  37.9k|        auto it = scn::ranges::begin(source);
  165|  37.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  37.9k|            auto result = scn::scan<T>(
  167|  37.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  37.9k|                scn::runtime_format(f));
  169|  37.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 37.9k, False: 0]
  ------------------
  170|  37.9k|                break;
  171|  37.9k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  37.9k|    }
  175|       |
  176|       |    // scan localized
  177|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 37.9k, False: 6.32k]
  ------------------
  178|  37.9k|        auto it = scn::ranges::begin(source);
  179|  37.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  37.9k|            auto result = scn::scan<T>(
  181|  37.9k|                global_locale,
  182|  37.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  37.9k|                scn::runtime_format(f));
  184|  37.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 37.9k, False: 0]
  ------------------
  185|  37.9k|                break;
  186|  37.9k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  37.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.32k|    {
  193|  6.32k|        auto it = scn::ranges::begin(source);
  194|  6.32k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.32k|            auto result = scn::scan_value<T>(
  196|  6.32k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.32k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.32k, False: 0]
  ------------------
  198|  6.32k|                break;
  199|  6.32k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.32k|    }
  203|  6.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.32k|{
  162|       |    // Regular scan
  163|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 37.9k, False: 6.32k]
  ------------------
  164|  37.9k|        auto it = scn::ranges::begin(source);
  165|  37.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  37.9k|            auto result = scn::scan<T>(
  167|  37.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  37.9k|                scn::runtime_format(f));
  169|  37.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 37.9k, False: 0]
  ------------------
  170|  37.9k|                break;
  171|  37.9k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  37.9k|    }
  175|       |
  176|       |    // scan localized
  177|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 37.9k, False: 6.32k]
  ------------------
  178|  37.9k|        auto it = scn::ranges::begin(source);
  179|  37.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  37.9k|            auto result = scn::scan<T>(
  181|  37.9k|                global_locale,
  182|  37.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  37.9k|                scn::runtime_format(f));
  184|  37.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 37.9k, False: 0]
  ------------------
  185|  37.9k|                break;
  186|  37.9k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  37.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.32k|    {
  193|  6.32k|        auto it = scn::ranges::begin(source);
  194|  6.32k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.32k|            auto result = scn::scan_value<T>(
  196|  6.32k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.32k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.32k, False: 0]
  ------------------
  198|  6.32k|                break;
  199|  6.32k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.32k|    }
  203|  6.32k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  6.32k|{
  162|       |    // Regular scan
  163|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 37.9k, False: 6.32k]
  ------------------
  164|  37.9k|        auto it = scn::ranges::begin(source);
  165|  37.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  37.9k|            auto result = scn::scan<T>(
  167|  37.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  37.9k|                scn::runtime_format(f));
  169|  37.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 37.9k, False: 0]
  ------------------
  170|  37.9k|                break;
  171|  37.9k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|  37.9k|    }
  175|       |
  176|       |    // scan localized
  177|  37.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 37.9k, False: 6.32k]
  ------------------
  178|  37.9k|        auto it = scn::ranges::begin(source);
  179|  37.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  37.9k|            auto result = scn::scan<T>(
  181|  37.9k|                global_locale,
  182|  37.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  37.9k|                scn::runtime_format(f));
  184|  37.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 37.9k, False: 0]
  ------------------
  185|  37.9k|                break;
  186|  37.9k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|  37.9k|    }
  190|       |
  191|       |    // scan_value
  192|  6.32k|    {
  193|  6.32k|        auto it = scn::ranges::begin(source);
  194|  6.32k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  6.32k|            auto result = scn::scan_value<T>(
  196|  6.32k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  6.32k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 6.32k, False: 0]
  ------------------
  198|  6.32k|                break;
  199|  6.32k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  6.32k|    }
  203|  6.32k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  119|  6.32k|{
  120|  6.32k|    using char_type = ranges::range_value_t<Source>;
  121|  6.32k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  6.32k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  6.32k|              std::back_inserter(deque));
  124|  6.32k|    return deque;
  125|  6.32k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
  108|  6.32k|{
  109|  6.32k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  6.32k|        return noncontiguous_buffer;
  111|  6.32k|    }
  112|  6.32k|    else {
  113|  6.32k|        return wnoncontiguous_buffer;
  114|  6.32k|    }
  115|  6.32k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  6.32k|{
  151|  6.32k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  6.32k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  6.32k|    buf.resize(sizeof...(Args));
  154|  6.32k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  6.32k|    return {buf.data(), buf.size()};
  156|  6.32k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  136|  6.32k|{
  137|  6.32k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  6.32k|        return format_string_view_buffer;
  139|  6.32k|    }
  140|  6.32k|    else {
  141|  6.32k|        return wformat_string_view_buffer;
  142|  6.32k|    }
  143|  6.32k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  18.9k|{
  211|  18.9k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  18.9k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  18.9k|                                   format_strings);
  214|  18.9k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  18.9k|{
  162|       |    // Regular scan
  163|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 113k, False: 18.9k]
  ------------------
  164|   113k|        auto it = scn::ranges::begin(source);
  165|   635k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   635k|            auto result = scn::scan<T>(
  167|   635k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   635k|                scn::runtime_format(f));
  169|   635k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 113k, False: 521k]
  ------------------
  170|   113k|                break;
  171|   113k|            }
  172|   521k|            it = result->begin();
  173|   521k|        }
  174|   113k|    }
  175|       |
  176|       |    // scan localized
  177|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 113k, False: 18.9k]
  ------------------
  178|   113k|        auto it = scn::ranges::begin(source);
  179|   635k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   635k|            auto result = scn::scan<T>(
  181|   635k|                global_locale,
  182|   635k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   635k|                scn::runtime_format(f));
  184|   635k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 113k, False: 521k]
  ------------------
  185|   113k|                break;
  186|   113k|            }
  187|   521k|            it = result->begin();
  188|   521k|        }
  189|   113k|    }
  190|       |
  191|       |    // scan_value
  192|  18.9k|    {
  193|  18.9k|        auto it = scn::ranges::begin(source);
  194|   132k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   132k|            auto result = scn::scan_value<T>(
  196|   132k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   132k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 18.9k, False: 113k]
  ------------------
  198|  18.9k|                break;
  199|  18.9k|            }
  200|   113k|            it = result->begin();
  201|   113k|        }
  202|  18.9k|    }
  203|  18.9k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  18.9k|{
  162|       |    // Regular scan
  163|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 113k, False: 18.9k]
  ------------------
  164|   113k|        auto it = scn::ranges::begin(source);
  165|   758k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   758k|            auto result = scn::scan<T>(
  167|   758k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   758k|                scn::runtime_format(f));
  169|   758k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 113k, False: 644k]
  ------------------
  170|   113k|                break;
  171|   113k|            }
  172|   644k|            it = result->begin();
  173|   644k|        }
  174|   113k|    }
  175|       |
  176|       |    // scan localized
  177|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 113k, False: 18.9k]
  ------------------
  178|   113k|        auto it = scn::ranges::begin(source);
  179|   758k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   758k|            auto result = scn::scan<T>(
  181|   758k|                global_locale,
  182|   758k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   758k|                scn::runtime_format(f));
  184|   758k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 113k, False: 644k]
  ------------------
  185|   113k|                break;
  186|   113k|            }
  187|   644k|            it = result->begin();
  188|   644k|        }
  189|   113k|    }
  190|       |
  191|       |    // scan_value
  192|  18.9k|    {
  193|  18.9k|        auto it = scn::ranges::begin(source);
  194|   157k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   157k|            auto result = scn::scan_value<T>(
  196|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   157k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 18.9k, False: 138k]
  ------------------
  198|  18.9k|                break;
  199|  18.9k|            }
  200|   138k|            it = result->begin();
  201|   138k|        }
  202|  18.9k|    }
  203|  18.9k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  18.9k|{
  162|       |    // Regular scan
  163|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 113k, False: 18.9k]
  ------------------
  164|   113k|        auto it = scn::ranges::begin(source);
  165|   785k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   785k|            auto result = scn::scan<T>(
  167|   785k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   785k|                scn::runtime_format(f));
  169|   785k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 113k, False: 671k]
  ------------------
  170|   113k|                break;
  171|   113k|            }
  172|   671k|            it = result->begin();
  173|   671k|        }
  174|   113k|    }
  175|       |
  176|       |    // scan localized
  177|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 113k, False: 18.9k]
  ------------------
  178|   113k|        auto it = scn::ranges::begin(source);
  179|   785k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   785k|            auto result = scn::scan<T>(
  181|   785k|                global_locale,
  182|   785k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   785k|                scn::runtime_format(f));
  184|   785k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 113k, False: 671k]
  ------------------
  185|   113k|                break;
  186|   113k|            }
  187|   671k|            it = result->begin();
  188|   671k|        }
  189|   113k|    }
  190|       |
  191|       |    // scan_value
  192|  18.9k|    {
  193|  18.9k|        auto it = scn::ranges::begin(source);
  194|   166k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   166k|            auto result = scn::scan_value<T>(
  196|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   166k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 18.9k, False: 147k]
  ------------------
  198|  18.9k|                break;
  199|  18.9k|            }
  200|   147k|            it = result->begin();
  201|   147k|        }
  202|  18.9k|    }
  203|  18.9k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  18.9k|{
  162|       |    // Regular scan
  163|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 113k, False: 18.9k]
  ------------------
  164|   113k|        auto it = scn::ranges::begin(source);
  165|   113k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   113k|            auto result = scn::scan<T>(
  167|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   113k|                scn::runtime_format(f));
  169|   113k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 113k, False: 0]
  ------------------
  170|   113k|                break;
  171|   113k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|   113k|    }
  175|       |
  176|       |    // scan localized
  177|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 113k, False: 18.9k]
  ------------------
  178|   113k|        auto it = scn::ranges::begin(source);
  179|   113k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   113k|            auto result = scn::scan<T>(
  181|   113k|                global_locale,
  182|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   113k|                scn::runtime_format(f));
  184|   113k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 113k, False: 0]
  ------------------
  185|   113k|                break;
  186|   113k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|   113k|    }
  190|       |
  191|       |    // scan_value
  192|  18.9k|    {
  193|  18.9k|        auto it = scn::ranges::begin(source);
  194|  18.9k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  18.9k|            auto result = scn::scan_value<T>(
  196|  18.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  18.9k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 18.9k, False: 0]
  ------------------
  198|  18.9k|                break;
  199|  18.9k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  18.9k|    }
  203|  18.9k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  18.9k|{
  162|       |    // Regular scan
  163|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 113k, False: 18.9k]
  ------------------
  164|   113k|        auto it = scn::ranges::begin(source);
  165|   113k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   113k|            auto result = scn::scan<T>(
  167|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   113k|                scn::runtime_format(f));
  169|   113k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 113k, False: 0]
  ------------------
  170|   113k|                break;
  171|   113k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|   113k|    }
  175|       |
  176|       |    // scan localized
  177|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 113k, False: 18.9k]
  ------------------
  178|   113k|        auto it = scn::ranges::begin(source);
  179|   113k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   113k|            auto result = scn::scan<T>(
  181|   113k|                global_locale,
  182|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   113k|                scn::runtime_format(f));
  184|   113k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 113k, False: 0]
  ------------------
  185|   113k|                break;
  186|   113k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|   113k|    }
  190|       |
  191|       |    // scan_value
  192|  18.9k|    {
  193|  18.9k|        auto it = scn::ranges::begin(source);
  194|  18.9k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  18.9k|            auto result = scn::scan_value<T>(
  196|  18.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  18.9k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 18.9k, False: 0]
  ------------------
  198|  18.9k|                break;
  199|  18.9k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  18.9k|    }
  203|  18.9k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  18.9k|{
  162|       |    // Regular scan
  163|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 113k, False: 18.9k]
  ------------------
  164|   113k|        auto it = scn::ranges::begin(source);
  165|   113k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   113k|            auto result = scn::scan<T>(
  167|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   113k|                scn::runtime_format(f));
  169|   113k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 113k, False: 0]
  ------------------
  170|   113k|                break;
  171|   113k|            }
  172|      0|            it = result->begin();
  173|      0|        }
  174|   113k|    }
  175|       |
  176|       |    // scan localized
  177|   113k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 113k, False: 18.9k]
  ------------------
  178|   113k|        auto it = scn::ranges::begin(source);
  179|   113k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   113k|            auto result = scn::scan<T>(
  181|   113k|                global_locale,
  182|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   113k|                scn::runtime_format(f));
  184|   113k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 113k, False: 0]
  ------------------
  185|   113k|                break;
  186|   113k|            }
  187|      0|            it = result->begin();
  188|      0|        }
  189|   113k|    }
  190|       |
  191|       |    // scan_value
  192|  18.9k|    {
  193|  18.9k|        auto it = scn::ranges::begin(source);
  194|  18.9k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  18.9k|            auto result = scn::scan_value<T>(
  196|  18.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  18.9k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 18.9k, False: 0]
  ------------------
  198|  18.9k|                break;
  199|  18.9k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  18.9k|    }
  203|  18.9k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  119|  18.9k|{
  120|  18.9k|    using char_type = ranges::range_value_t<Source>;
  121|  18.9k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  18.9k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  18.9k|              std::back_inserter(deque));
  124|  18.9k|    return deque;
  125|  18.9k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
  108|  18.9k|{
  109|  18.9k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  18.9k|        return noncontiguous_buffer;
  111|  18.9k|    }
  112|  18.9k|    else {
  113|  18.9k|        return wnoncontiguous_buffer;
  114|  18.9k|    }
  115|  18.9k|}

