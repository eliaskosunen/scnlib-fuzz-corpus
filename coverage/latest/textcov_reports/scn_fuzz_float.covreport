_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.89M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.89M|  chars_format const fmt = options.format;
  277|  1.89M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.89M|  parsed_number_string_t<UC> answer;
  280|  1.89M|  answer.valid = false;
  281|  1.89M|  answer.too_many_digits = false;
  282|  1.89M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.89M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.89M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.89M|  UC const * const start_digits = p;
  303|       |
  304|  1.89M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  11.3M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 10.4M, False: 910k]
  |  Branch (306:25): [True: 9.45M, False: 987k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  9.45M|    i = 10 * i +
  310|  9.45M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  9.45M|    ++p;
  312|  9.45M|  }
  313|  1.89M|  UC const * const end_of_integer_part = p;
  314|  1.89M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.89M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.89M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.89M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.89M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.89M|  int64_t exponent = 0;
  324|  1.89M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 987k, False: 910k]
  |  Branch (324:49): [True: 320k, False: 666k]
  ------------------
  325|  1.89M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 320k, False: 1.57M]
  ------------------
  326|   320k|    ++p;
  327|   320k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   320k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.28M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.09M, False: 187k]
  |  Branch (332:27): [True: 964k, False: 132k]
  ------------------
  333|   964k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   964k|      ++p;
  335|   964k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   964k|    }
  337|   320k|    exponent = before - p;
  338|   320k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   320k|    digit_count -= exponent;
  340|   320k|  }
  341|  1.89M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.89M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.89M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.89M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.89M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.89M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.89M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.66M, False: 230k]
  ------------------
  352|  1.89M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 799k, False: 867k]
  ------------------
  353|  1.89M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 212k, False: 586k]
  |  Branch (353:29): [True: 68.9k, False: 517k]
  ------------------
  354|  1.89M|       ||
  355|  1.89M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.61M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.61M]
  ------------------
  356|  1.61M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.61M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   281k|    UC const * location_of_e = p;
  359|   281k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 212k, False: 68.9k]
  |  Branch (359:28): [True: 68.9k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   281k|      ++p;
  361|   281k|    }
  362|   281k|    bool neg_exp = false;
  363|   281k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 281k, False: 205]
  |  Branch (363:24): [True: 18.3k, False: 263k]
  ------------------
  364|  18.3k|      neg_exp = true;
  365|  18.3k|      ++p;
  366|   263k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 263k, False: 205]
  |  Branch (366:31): [True: 50.6k, False: 212k]
  ------------------
  367|  50.6k|      ++p;
  368|  50.6k|    }
  369|   281k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 245, False: 281k]
  |  Branch (369:24): [True: 765, False: 280k]
  ------------------
  370|  1.01k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.01k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.01k|      p = location_of_e;
  376|   280k|    } else {
  377|   896k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 708k, False: 187k]
  |  Branch (377:29): [True: 615k, False: 92.8k]
  ------------------
  378|   615k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   615k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 579k, False: 36.0k]
  ------------------
  380|   579k|          exp_number = 10 * exp_number + digit;
  381|   579k|        }
  382|   615k|        ++p;
  383|   615k|      }
  384|   280k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 18.2k, False: 262k]
  ------------------
  385|   280k|      exponent += exp_number;
  386|   280k|    }
  387|  1.61M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.61M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.38M, False: 230k]
  |  Branch (389:44): [True: 0, False: 1.38M]
  ------------------
  390|  1.61M|  }
  391|  1.89M|  answer.lastmatch = p;
  392|  1.89M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.89M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 300k, False: 1.59M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   300k|    UC const * start = start_digits;
  405|  2.94M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 2.93M, False: 13.6k]
  |  Branch (405:32): [True: 2.58M, False: 348k]
  |  Branch (405:53): [True: 61.4k, False: 287k]
  ------------------
  406|  2.64M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.58M, False: 61.4k]
  ------------------
  407|  2.64M|      start++;
  408|  2.64M|    }
  409|       |
  410|   300k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 252k, False: 48.0k]
  ------------------
  411|   252k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   252k|      i = 0;
  416|   252k|      p = answer.integer.ptr;
  417|   252k|      UC const* int_end = p + answer.integer.len();
  418|   252k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.48M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.39M, False: 85.1k]
  |  Branch (419:54): [True: 3.23M, False: 167k]
  ------------------
  420|  3.23M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.23M|        ++p;
  422|  3.23M|      }
  423|   252k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 85.1k, False: 167k]
  ------------------
  424|  85.1k|        exponent = end_of_integer_part - p + exp_number;
  425|  85.1k|      }
  426|   167k|      else { // We have a value with a fractional component.
  427|   167k|        p = answer.fraction.ptr;
  428|   167k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.32M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.15M, False: 167k]
  |  Branch (429:56): [True: 3.15M, False: 0]
  ------------------
  430|  3.15M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.15M|          ++p;
  432|  3.15M|        }
  433|   167k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   167k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   252k|    }
  437|   300k|  }
  438|  1.89M|  answer.exponent = exponent;
  439|  1.89M|  answer.mantissa = i;
  440|  1.89M|  return answer;
  441|  1.89M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  12.5M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  12.5M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 320k, False: 12.2M]
  |  Branch (36:27): [True: 893k, False: 11.3M]
  ------------------
   37|  12.5M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   320k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.33M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.13M, False: 205k]
  |  Branch (249:43): [True: 1.01M, False: 114k]
  ------------------
  250|  1.01M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.01M|    p += 8;
  252|  1.01M|  }
  253|   320k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.13M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.13M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.13M|     0x8080808080808080));
  172|  1.13M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.53M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.53M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.53M|  uint64_t val;
   63|  2.53M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.53M|  return val;
   69|  2.53M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.40M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.40M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.40M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.40M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.40M|  val -= 0x3030303030303030;
  151|  1.40M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.40M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.40M|  return uint32_t(val);
  154|  1.40M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   392k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   392k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   392k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   392k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   392k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  27.6k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  27.6k|  chars_format const fmt = options.format;
  277|  27.6k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  27.6k|  parsed_number_string_t<UC> answer;
  280|  27.6k|  answer.valid = false;
  281|  27.6k|  answer.too_many_digits = false;
  282|  27.6k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  27.6k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 27.6k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  27.6k|  UC const * const start_digits = p;
  303|       |
  304|  27.6k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  56.2k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 36.8k, False: 19.4k]
  |  Branch (306:25): [True: 28.6k, False: 8.25k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  28.6k|    i = 10 * i +
  310|  28.6k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  28.6k|    ++p;
  312|  28.6k|  }
  313|  27.6k|  UC const * const end_of_integer_part = p;
  314|  27.6k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  27.6k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  27.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  27.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 27.6k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  27.6k|  int64_t exponent = 0;
  324|  27.6k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 8.25k, False: 19.4k]
  |  Branch (324:49): [True: 0, False: 8.25k]
  ------------------
  325|  27.6k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 0, False: 27.6k]
  ------------------
  326|      0|    ++p;
  327|      0|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|      0|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|      0|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 0, False: 0]
  |  Branch (332:27): [True: 0, False: 0]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|      0|    exponent = before - p;
  338|      0|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|      0|    digit_count -= exponent;
  340|      0|  }
  341|  27.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  27.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 27.6k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  27.6k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 27.6k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  27.6k|  int64_t exp_number = 0;            // explicit exponential part
  351|  27.6k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 21.5k, False: 6.11k]
  ------------------
  352|  27.6k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 8.25k, False: 13.3k]
  ------------------
  353|  27.6k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 10, False: 8.24k]
  |  Branch (353:29): [True: 1.31k, False: 6.93k]
  ------------------
  354|  27.6k|       ||
  355|  27.6k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  26.3k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 26.3k]
  ------------------
  356|  26.3k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  26.3k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  1.32k|    UC const * location_of_e = p;
  359|  1.32k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 10, False: 1.31k]
  |  Branch (359:28): [True: 1.31k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  1.32k|      ++p;
  361|  1.32k|    }
  362|  1.32k|    bool neg_exp = false;
  363|  1.32k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 1.32k, False: 0]
  |  Branch (363:24): [True: 118, False: 1.20k]
  ------------------
  364|    118|      neg_exp = true;
  365|    118|      ++p;
  366|  1.20k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 1.20k, False: 0]
  |  Branch (366:31): [True: 0, False: 1.20k]
  ------------------
  367|      0|      ++p;
  368|      0|    }
  369|  1.32k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 0, False: 1.32k]
  |  Branch (369:24): [True: 300, False: 1.02k]
  ------------------
  370|    300|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 300]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    300|      p = location_of_e;
  376|  1.02k|    } else {
  377|  3.24k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 2.49k, False: 754]
  |  Branch (377:29): [True: 2.22k, False: 270]
  ------------------
  378|  2.22k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  2.22k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 2.22k, False: 0]
  ------------------
  380|  2.22k|          exp_number = 10 * exp_number + digit;
  381|  2.22k|        }
  382|  2.22k|        ++p;
  383|  2.22k|      }
  384|  1.02k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 108, False: 916]
  ------------------
  385|  1.02k|      exponent += exp_number;
  386|  1.02k|    }
  387|  26.3k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  26.3k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 20.2k, False: 6.11k]
  |  Branch (389:44): [True: 0, False: 20.2k]
  ------------------
  390|  26.3k|  }
  391|  27.6k|  answer.lastmatch = p;
  392|  27.6k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  27.6k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 27.6k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|  27.6k|  answer.exponent = exponent;
  439|  27.6k|  answer.mantissa = i;
  440|  27.6k|  return answer;
  441|  27.6k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  40.6k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  40.6k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 8.70k, False: 31.9k]
  |  Branch (36:27): [True: 120, False: 31.8k]
  ------------------
   37|  40.6k|}

_ZN10fast_float6bigintC2Ev:
  412|  84.0k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   185k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   302k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   302k|    return small_mul(vec, y);
  565|   302k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   465k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   465k|  limb carry = 0;
  284|  2.32M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.86M, False: 465k]
  ------------------
  285|  1.86M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.86M|  }
  287|   465k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 305k, False: 159k]
  ------------------
  288|   305k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   305k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 305k]
  |  |  ------------------
  ------------------
  289|   305k|  }
  290|   465k|  return true;
  291|   465k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.07M|  constexpr size_t len() const noexcept {
   77|  4.07M|    return length;
   78|  4.07M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.86M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.86M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.86M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.86M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.86M|  carry = limb(z >> limb_bits);
  235|  1.86M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.86M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  4.92M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  4.92M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  4.92M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  4.92M|    return data[index];
   60|  4.92M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   408k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   408k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 408k, False: 0]
  ------------------
   93|   408k|      push_unchecked(value);
   94|   408k|      return true;
   95|   408k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   408k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   500k|  constexpr size_t capacity() const noexcept {
   83|   500k|    return size;
   84|   500k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   478k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   478k|    data[length] = value;
   88|   478k|    length++;
   89|   478k|  }
_ZN10fast_float6bigint3addEm:
  567|   302k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   302k|    return small_add(vec, y);
  569|   302k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   302k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   302k|  return small_add_from(vec, y, 0);
  277|   302k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   302k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   302k|  size_t index = start;
  259|   302k|  limb carry = y;
  260|   302k|  bool overflow;
  261|   444k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 225k, False: 218k]
  |  Branch (261:24): [True: 141k, False: 84.0k]
  ------------------
  262|   141k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   141k|    carry = limb(overflow);
  264|   141k|    index += 1;
  265|   141k|  }
  266|   302k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 84.0k, False: 218k]
  ------------------
  267|  84.0k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  84.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 84.0k]
  |  |  ------------------
  ------------------
  268|  84.0k|  }
  269|   302k|  return true;
  270|   302k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   511k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   511k|  limb z;
  211|       |// gcc and clang
  212|   511k|#if defined(__has_builtin)
  213|   511k|  #if __has_builtin(__builtin_add_overflow)
  214|   511k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   511k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   511k|      return z;
  217|   511k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   511k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  14.2k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  14.2k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  14.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
  611|  14.2k|    return pow2(exp);
  612|  14.2k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  84.0k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  84.0k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  84.0k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  92.0k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.00k, False: 84.0k]
  ------------------
  582|  8.00k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.00k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.00k]
  |  |  ------------------
  ------------------
  583|  8.00k|      exp -= large_step;
  584|  8.00k|    }
  585|  84.0k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  84.0k|    uint32_t small_step = 27;
  587|  84.0k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   140k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 56.8k, False: 84.0k]
  ------------------
  593|  56.8k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  56.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 56.8k]
  |  |  ------------------
  ------------------
  594|  56.8k|      exp -= small_step;
  595|  56.8k|    }
  596|  84.0k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 65.5k, False: 18.5k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  65.5k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  65.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 65.5k]
  |  |  ------------------
  ------------------
  601|  65.5k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  65.5k|      );
  603|  65.5k|    }
  604|       |
  605|  84.0k|    return true;
  606|  84.0k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.00k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.00k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.00k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.00k|  } else {
  368|  8.00k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.00k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.00k]
  |  |  ------------------
  ------------------
  369|  8.00k|  }
  370|  8.00k|  return true;
  371|  8.00k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.00k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.00k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.00k|  stackvec<size> z(xs);
  338|  8.00k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.00k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.00k, False: 0]
  ------------------
  341|  8.00k|    limb y0 = y[0];
  342|  8.00k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.00k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.00k]
  |  |  ------------------
  ------------------
  343|  40.0k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 32.0k, False: 8.00k]
  ------------------
  344|  32.0k|      limb yi = y[index];
  345|  32.0k|      stackvec<size> zi;
  346|  32.0k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 32.0k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  32.0k|        zi.set_len(0);
  349|  32.0k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  32.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 32.0k]
  |  |  ------------------
  ------------------
  350|  32.0k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  32.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 32.0k]
  |  |  ------------------
  ------------------
  351|  32.0k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  32.0k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  32.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 32.0k]
  |  |  ------------------
  ------------------
  353|  32.0k|      }
  354|  32.0k|    }
  355|  8.00k|  }
  356|       |
  357|  8.00k|  x.normalize();
  358|  8.00k|  return true;
  359|  8.00k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.00k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.00k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.00k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.00k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   124k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   124k|    length = uint16_t(len);
   75|   124k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  40.0k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  40.0k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 40.0k, False: 0]
  ------------------
  108|  40.0k|      extend_unchecked(s);
  109|  40.0k|      return true;
  110|  40.0k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  40.0k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  40.0k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  40.0k|    limb* ptr = data + length;
  102|  40.0k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  40.0k|    set_len(len() + s.len());
  104|  40.0k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  32.0k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  32.0k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 32.0k]
  |  Branch (300:26): [True: 31.6k, False: 312]
  ------------------
  301|  31.6k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  31.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 31.6k]
  |  |  ------------------
  ------------------
  302|  31.6k|  }
  303|       |
  304|  32.0k|  bool carry = false;
  305|   300k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 268k, False: 32.0k]
  ------------------
  306|   268k|    limb xi = x[index + start];
  307|   268k|    limb yi = y[index];
  308|   268k|    bool c1 = false;
  309|   268k|    bool c2 = false;
  310|   268k|    xi = scalar_add(xi, yi, c1);
  311|   268k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 101k, False: 166k]
  ------------------
  312|   101k|      xi = scalar_add(xi, 1, c2);
  313|   101k|    }
  314|   268k|    x[index + start] = xi;
  315|   268k|    carry = c1 | c2;
  316|   268k|  }
  317|       |
  318|       |  // handle overflow
  319|  32.0k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 32.0k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  32.0k|  return true;
  323|  32.0k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  31.6k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  31.6k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 31.6k]
  ------------------
  132|      0|      return false;
  133|  31.6k|    } else {
  134|  31.6k|      resize_unchecked(new_len, value);
  135|  31.6k|      return true;
  136|  31.6k|    }
  137|  31.6k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  31.6k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  31.6k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 31.6k, False: 0]
  ------------------
  120|  31.6k|      size_t count = new_len - len();
  121|  31.6k|      limb* first = data + len();
  122|  31.6k|      limb* last = first + count;
  123|  31.6k|      ::std::fill(first, last, value);
  124|  31.6k|      set_len(new_len);
  125|  31.6k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  31.6k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  77.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  77.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 77.7k, False: 0]
  |  Branch (152:25): [True: 0, False: 77.7k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  77.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   119k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   119k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   119k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   119k|    size_t rindex = length - index - 1;
   69|   119k|    return data[rindex];
   70|   119k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  83.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  83.9k|    return shl(exp);
  574|  83.9k|  }
_ZN10fast_float6bigint3shlEm:
  530|  83.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  83.9k|    size_t rem = n % limb_bits;
  532|  83.9k|    size_t div = n / limb_bits;
  533|  83.9k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 69.3k, False: 14.5k]
  ------------------
  534|  69.3k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  69.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 69.3k]
  |  |  ------------------
  ------------------
  535|  69.3k|    }
  536|  83.9k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 20.7k, False: 63.2k]
  ------------------
  537|  20.7k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  20.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 20.7k]
  |  |  ------------------
  ------------------
  538|  20.7k|    }
  539|  83.9k|    return true;
  540|  83.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  69.3k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  69.3k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  69.3k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  69.3k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  69.3k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  69.3k|    size_t shl = n;
  493|  69.3k|    size_t shr = limb_bits - shl;
  494|  69.3k|    limb prev = 0;
  495|   256k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 187k, False: 69.3k]
  ------------------
  496|   187k|      limb xi = vec[index];
  497|   187k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   187k|      prev = xi;
  499|   187k|    }
  500|       |
  501|  69.3k|    limb carry = prev >> shr;
  502|  69.3k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 18.8k, False: 50.5k]
  ------------------
  503|  18.8k|      return vec.try_push(carry);
  504|  18.8k|    }
  505|  50.5k|    return true;
  506|  69.3k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  20.7k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  20.7k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  20.7k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  20.7k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 20.7k]
  ------------------
  512|      0|      return false;
  513|  20.7k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 20.7k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  20.7k|      limb* dst = vec.data + n;
  516|  20.7k|      const limb* src = vec.data;
  517|  20.7k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  20.7k|      limb* first = vec.data;
  520|  20.7k|      limb* last = first + n;
  521|  20.7k|      ::std::fill(first, last, 0);
  522|  20.7k|      vec.set_len(n + vec.len());
  523|  20.7k|      return true;
  524|  20.7k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  20.7k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  35.0k|  constexpr bool is_empty() const noexcept {
   80|  35.0k|    return length == 0;
   81|  35.0k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  14.2k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  14.2k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  14.2k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 14.2k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  14.2k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.90k, False: 12.3k]
  ------------------
  435|  1.90k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  12.3k|    } else {
  437|  12.3k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  12.3k|      truncated |= vec.nonzero(2);
  439|  12.3k|      return result;
  440|  12.3k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  14.2k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.90k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.90k|  truncated = false;
  167|  1.90k|  int shl = leading_zeroes(r0);
  168|  1.90k|  return r0 << shl;
  169|  1.90k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  12.3k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  12.3k|  int shl = leading_zeroes(r0);
  174|  12.3k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 12.3k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  12.3k|  } else {
  178|  12.3k|    int shr = 64 - shl;
  179|  12.3k|    truncated = (r1 << shl) != 0;
  180|  12.3k|    return (r0 << shl) | (r1 >> shr);
  181|  12.3k|  }
  182|  12.3k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  12.3k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  12.4k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 746, False: 11.7k]
  ------------------
  143|    746|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 692, False: 54]
  ------------------
  144|    692|        return true;
  145|    692|      }
  146|     54|      index++;
  147|     54|    }
  148|  11.7k|    return false;
  149|  12.3k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  14.2k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  14.2k|    int lz = ctlz();
  560|  14.2k|    return int(limb_bits * vec.len()) - lz;
  561|  14.2k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  14.2k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  14.2k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 14.2k]
  ------------------
  545|      0|      return 0;
  546|  14.2k|    } else {
  547|  14.2k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  14.2k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  14.2k|    }
  555|  14.2k|  }
_ZN10fast_float6bigintC2Em:
  418|  69.7k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  69.7k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  69.7k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  69.7k|    vec.normalize();
  426|  69.7k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  69.7k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  69.7k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 69.7k]
  ------------------
  464|      0|      return 1;
  465|  69.7k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 69.7k]
  ------------------
  466|      0|      return -1;
  467|  69.7k|    } else {
  468|   138k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 130k, False: 7.96k]
  ------------------
  469|   130k|        limb xi = vec[index - 1];
  470|   130k|        limb yi = other.vec[index - 1];
  471|   130k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 10.7k, False: 119k]
  ------------------
  472|  10.7k|          return 1;
  473|   119k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 51.0k, False: 68.4k]
  ------------------
  474|  51.0k|          return -1;
  475|  51.0k|        }
  476|   130k|      }
  477|  7.96k|      return 0;
  478|  69.7k|    }
  479|  69.7k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   260k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   260k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   260k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   260k|    return data[index];
   64|   260k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   383k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   383k|  adjusted_mantissa answer;
   96|   383k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 10.5k, False: 372k]
  |  Branch (96:19): [True: 1.61k, False: 371k]
  ------------------
   97|  12.1k|    answer.power2 = 0;
   98|  12.1k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  12.1k|    return answer;
  101|  12.1k|  }
  102|   371k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 7.87k, False: 363k]
  ------------------
  103|       |    // we want to get infinity:
  104|  7.87k|    answer.power2 = binary::infinite_power();
  105|  7.87k|    answer.mantissa = 0;
  106|  7.87k|    return answer;
  107|  7.87k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   363k|  int lz = leading_zeroes(w);
  112|   363k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   363k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   363k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   363k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   363k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   363k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 784, False: 362k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    784|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 748]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    748|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    748|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    748|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    748|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 748, False: 0]
  ------------------
  156|    748|    return answer;
  157|    784|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   362k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 132k, False: 229k]
  |  Branch (162:30): [True: 131k, False: 956]
  |  Branch (162:77): [True: 116k, False: 15.6k]
  ------------------
  163|   362k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 22.3k, False: 93.9k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  22.3k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 10.0k, False: 12.3k]
  ------------------
  168|  10.0k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  10.0k|    }
  170|  22.3k|  }
  171|       |
  172|   362k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   362k|  answer.mantissa >>= 1;
  174|   362k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 13.9k, False: 348k]
  ------------------
  175|  13.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  13.9k|    answer.power2++; // undo previous addition
  177|  13.9k|  }
  178|       |
  179|   362k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   362k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.61k, False: 359k]
  ------------------
  181|  2.61k|    answer.power2 = binary::infinite_power();
  182|  2.61k|    answer.mantissa = 0;
  183|  2.61k|  }
  184|   362k|  return answer;
  185|   363k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   397k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   397k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   397k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   397k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   397k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   397k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   397k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 59.5k, False: 337k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  59.5k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  59.5k|    firstproduct.low += secondproduct.high;
   35|  59.5k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 48.3k, False: 11.1k]
  ------------------
   36|  48.3k|      firstproduct.high++;
   37|  48.3k|    }
   38|  59.5k|  }
   39|   397k|  return firstproduct;
   40|   397k|}
_ZN10fast_float6detail5powerEi:
   58|   794k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   794k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   794k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  33.9k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  33.9k|  int lz = leading_zeroes(w);
   82|  33.9k|  w <<= lz;
   83|  33.9k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  33.9k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  33.9k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  33.9k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  33.9k|  int hilz = int(w >> 63) ^ 1;
   69|  33.9k|  adjusted_mantissa answer;
   70|  33.9k|  answer.mantissa = w << hilz;
   71|  33.9k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  33.9k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  33.9k|  return answer;
   74|  33.9k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   357k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   357k|  adjusted_mantissa answer;
   96|   357k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.68k, False: 351k]
  |  Branch (96:19): [True: 316, False: 351k]
  ------------------
   97|  6.00k|    answer.power2 = 0;
   98|  6.00k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  6.00k|    return answer;
  101|  6.00k|  }
  102|   351k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.97k, False: 347k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.97k|    answer.power2 = binary::infinite_power();
  105|  3.97k|    answer.mantissa = 0;
  106|  3.97k|    return answer;
  107|  3.97k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   347k|  int lz = leading_zeroes(w);
  112|   347k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   347k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   347k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   347k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   347k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   347k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 11.2k, False: 336k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  11.2k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 11.1k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  11.1k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  11.1k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  11.1k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  11.1k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 11.1k, False: 0]
  ------------------
  156|  11.1k|    return answer;
  157|  11.2k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   336k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 101k, False: 235k]
  |  Branch (162:30): [True: 61.9k, False: 39.3k]
  |  Branch (162:77): [True: 54.6k, False: 7.33k]
  ------------------
  163|   336k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 19.4k, False: 35.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  19.4k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 13.5k, False: 5.89k]
  ------------------
  168|  13.5k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  13.5k|    }
  170|  19.4k|  }
  171|       |
  172|   336k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   336k|  answer.mantissa >>= 1;
  174|   336k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 11.4k, False: 324k]
  ------------------
  175|  11.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  11.4k|    answer.power2++; // undo previous addition
  177|  11.4k|  }
  178|       |
  179|   336k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   336k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 256, False: 336k]
  ------------------
  181|    256|    answer.power2 = binary::infinite_power();
  182|    256|    answer.mantissa = 0;
  183|    256|  }
  184|   336k|  return answer;
  185|   347k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   397k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   397k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   397k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   397k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   397k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   397k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   397k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 99.2k, False: 298k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  99.2k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  99.2k|    firstproduct.low += secondproduct.high;
   35|  99.2k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 45.3k, False: 53.8k]
  ------------------
   36|  45.3k|      firstproduct.high++;
   37|  45.3k|    }
   38|  99.2k|  }
   39|   397k|  return firstproduct;
   40|   397k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  50.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  50.0k|  int lz = leading_zeroes(w);
   82|  50.0k|  w <<= lz;
   83|  50.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  50.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  50.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  50.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  50.0k|  int hilz = int(w >> 63) ^ 1;
   69|  50.0k|  adjusted_mantissa answer;
   70|  50.0k|  answer.mantissa = w << hilz;
   71|  50.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  50.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  50.0k|  return answer;
   74|  50.0k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  33.9k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  33.9k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  33.9k|  int32_t sci_exp = scientific_exponent(num);
  411|  33.9k|  size_t max_digits = binary_format<T>::max_digits();
  412|  33.9k|  size_t digits = 0;
  413|  33.9k|  bigint bigmant;
  414|  33.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  33.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  33.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 878, False: 33.0k]
  ------------------
  418|    878|    return positive_digit_comp<T>(bigmant, exponent);
  419|  33.0k|  } else {
  420|  33.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  33.0k|  }
  422|  33.9k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  84.0k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  84.0k|  uint64_t mantissa = num.mantissa;
   30|  84.0k|  int32_t exponent = int32_t(num.exponent);
   31|   420k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 336k, False: 84.0k]
  ------------------
   32|   336k|    mantissa /= 10000;
   33|   336k|    exponent += 4;
   34|   336k|  }
   35|   168k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 84.0k, False: 84.0k]
  ------------------
   36|  84.0k|    mantissa /= 100;
   37|  84.0k|    exponent += 2;
   38|  84.0k|  }
   39|  84.0k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 84.0k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  84.0k|  return exponent;
   44|  84.0k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  84.0k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  84.0k|  size_t counter = 0;
  245|  84.0k|  digits = 0;
  246|  84.0k|  limb value = 0;
  247|  84.0k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  84.0k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  84.0k|  UC const * p = num.integer.ptr;
  255|  84.0k|  UC const * pend = p + num.integer.len();
  256|  84.0k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   184k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 101k, False: 83.6k]
  ------------------
  259|   191k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 116k, False: 74.6k]
  |  Branch (259:45): [True: 90.8k, False: 25.9k]
  |  Branch (259:70): [True: 90.4k, False: 408]
  ------------------
  260|  90.4k|      parse_eight_digits(p, value, counter, digits);
  261|  90.4k|    }
  262|   373k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 341k, False: 32.2k]
  |  Branch (262:30): [True: 272k, False: 68.4k]
  |  Branch (262:43): [True: 272k, False: 408]
  ------------------
  263|   272k|      parse_one_digit(p, value, counter, digits);
  264|   272k|    }
  265|   101k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 408, False: 100k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    408|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    408|      bool truncated = is_truncated(p, pend);
  269|    408|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 376, False: 32]
  ------------------
  270|    376|        truncated |= is_truncated(num.fraction);
  271|    376|      }
  272|    408|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 220, False: 188]
  ------------------
  273|    220|        round_up_bigint(result, digits);
  274|    220|      }
  275|    408|      return;
  276|   100k|    } else {
  277|   100k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   100k|      counter = 0;
  279|   100k|      value = 0;
  280|   100k|    }
  281|   101k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  83.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 70.3k, False: 13.3k]
  ------------------
  285|  70.3k|    p = num.fraction.ptr;
  286|  70.3k|    pend = p + num.fraction.len();
  287|  70.3k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.2k, False: 55.0k]
  ------------------
  288|  15.2k|      skip_zeros(p, pend);
  289|  15.2k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   262k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 198k, False: 64.4k]
  ------------------
  292|   500k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 416k, False: 83.9k]
  |  Branch (292:47): [True: 304k, False: 112k]
  |  Branch (292:72): [True: 302k, False: 1.75k]
  ------------------
  293|   302k|        parse_eight_digits(p, value, counter, digits);
  294|   302k|      }
  295|   821k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 690k, False: 130k]
  |  Branch (295:32): [True: 627k, False: 63.6k]
  |  Branch (295:45): [True: 623k, False: 3.98k]
  ------------------
  296|   623k|        parse_one_digit(p, value, counter, digits);
  297|   623k|      }
  298|   198k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 5.88k, False: 192k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  5.88k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  5.88k|        bool truncated = is_truncated(p, pend);
  302|  5.88k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.19k, False: 2.68k]
  ------------------
  303|  3.19k|          round_up_bigint(result, digits);
  304|  3.19k|        }
  305|  5.88k|        return;
  306|   192k|      } else {
  307|   192k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   192k|        counter = 0;
  309|   192k|        value = 0;
  310|   192k|      }
  311|   198k|    }
  312|  70.3k|  }
  313|       |
  314|  77.7k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 77.7k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  77.7k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  99.3k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  99.3k|  uint64_t val;
  161|   167k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 121k, False: 46.0k]
  ------------------
  162|   121k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   121k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 53.2k, False: 67.9k]
  ------------------
  164|  53.2k|      break;
  165|  53.2k|    }
  166|  67.9k|    first += int_cmp_len<UC>();
  167|  67.9k|  }
  168|   244k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 228k, False: 15.2k]
  ------------------
  169|   228k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 84.0k, False: 144k]
  ------------------
  170|  84.0k|      break;
  171|  84.0k|    }
  172|   144k|    first++;
  173|   144k|  }
  174|  99.3k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   392k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   392k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   392k|  p += 8;
  210|   392k|  counter += 8;
  211|   392k|  count += 8;
  212|   392k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   895k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   895k|  value = value * 10 + limb(*p - UC('0'));
  218|   895k|  p++;
  219|   895k|  counter++;
  220|   895k|  count++;
  221|   895k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   302k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   302k|  big.mul(power);
  226|   302k|  big.add(value);
  227|   302k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  6.66k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  6.66k|  uint64_t val;
  183|  17.2k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 12.0k, False: 5.23k]
  ------------------
  184|  12.0k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  12.0k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.43k, False: 10.5k]
  ------------------
  186|  1.43k|      return true;
  187|  1.43k|    }
  188|  10.5k|    first += int_cmp_len<UC>();
  189|  10.5k|  }
  190|  8.74k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 5.56k, False: 3.17k]
  ------------------
  191|  5.56k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.05k, False: 3.51k]
  ------------------
  192|  2.05k|      return true;
  193|  2.05k|    }
  194|  3.51k|    ++first;
  195|  3.51k|  }
  196|  3.17k|  return false;
  197|  5.23k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    376|bool is_truncated(span<const UC> s) noexcept {
  201|    376|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    376|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.41k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.41k|  add_native(big, 10, 1);
  234|  3.41k|  count++;
  235|  3.41k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    878|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    878|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    878|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    878|  adjusted_mantissa answer;
  324|    878|  bool truncated;
  325|    878|  answer.mantissa = bigmant.hi64(truncated);
  326|    878|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    878|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
  334|       |
  335|    878|  return answer;
  336|    878|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    878|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    878|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    878|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 878]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    878|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    878|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 878]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    878|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    878|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 878]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    878|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    878|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    878|  const uint64_t mask
  125|    878|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 878]
  ------------------
  126|    878|    ? UINT64_MAX
  127|    878|    : (uint64_t(1) << shift) - 1;
  128|    878|  const uint64_t halfway
  129|    878|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 878]
  ------------------
  130|    878|    ? 0
  131|    878|    : uint64_t(1) << (shift - 1);
  132|    878|  uint64_t truncated_bits = am.mantissa & mask;
  133|    878|  bool is_above = truncated_bits > halfway;
  134|    878|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    878|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 878]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    878|  } else {
  140|    878|    am.mantissa >>= shift;
  141|    878|  }
  142|    878|  am.power2 += shift;
  143|       |
  144|    878|  bool is_odd = (am.mantissa & 1) == 1;
  145|    878|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    878|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 792]
  |  Branch (331:27): [True: 644, False: 148]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 94, False: 630]
  |  Branch (331:66): [True: 32, False: 62]
  ------------------
  332|    878|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  33.0k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  33.0k|  bigint& real_digits = bigmant;
  347|  33.0k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  33.0k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  33.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  33.0k|  T b;
  354|  33.0k|  to_float(false, am_b, b);
  355|  33.0k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  33.0k|  bigint theor_digits(theor.mantissa);
  357|  33.0k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  33.0k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  33.0k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  33.0k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 33.0k, False: 0]
  ------------------
  363|  33.0k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  33.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  33.0k|  }
  365|  33.0k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 33.0k, False: 0]
  ------------------
  366|  33.0k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  33.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  33.0k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  33.0k|  int ord = real_digits.compare(theor_digits);
  373|  33.0k|  adjusted_mantissa answer = am;
  374|  33.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  33.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  33.0k|      (void)_;  // not needed, since we've done our comparison
  377|  33.0k|      (void)__; // not needed, since we've done our comparison
  378|  33.0k|      if (ord > 0) {
  379|  33.0k|        return true;
  380|  33.0k|      } else if (ord < 0) {
  381|  33.0k|        return false;
  382|  33.0k|      } else {
  383|  33.0k|        return is_odd;
  384|  33.0k|      }
  385|  33.0k|    });
  386|  33.0k|  });
  387|       |
  388|  33.0k|  return answer;
  389|  33.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  33.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  33.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  33.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 33.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  33.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  33.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 33.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  33.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  33.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 33.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  33.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  33.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  69.7k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  69.7k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 69.7k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  69.7k|  } else {
  153|  69.7k|    am.mantissa >>= shift;
  154|  69.7k|  }
  155|  69.7k|  am.power2 += shift;
  156|  69.7k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  33.0k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  33.0k|  adjusted_mantissa am = to_extended(value);
   84|  33.0k|  am.mantissa <<= 1;
   85|  33.0k|  am.mantissa += 1;
   86|  33.0k|  am.power2 -= 1;
   87|  33.0k|  return am;
   88|  33.0k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  33.0k|adjusted_mantissa to_extended(T value) noexcept {
   50|  33.0k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  33.0k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  33.0k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  33.0k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  33.0k|  adjusted_mantissa am;
   56|  33.0k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  33.0k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  33.0k|  ::memcpy(&bits, &value, sizeof(T));
   62|  33.0k|#endif
   63|  33.0k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 33.0k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  33.0k|  } else {
   68|       |    // normal
   69|  33.0k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  33.0k|    am.power2 -= bias;
   71|  33.0k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  33.0k|  }
   73|       |
   74|  33.0k|  return am;
   75|  33.0k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  33.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  33.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  33.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 33.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  33.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  33.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 33.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  33.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  33.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 33.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  33.0k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  33.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  33.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  33.0k|      (void)_;  // not needed, since we've done our comparison
  377|  33.0k|      (void)__; // not needed, since we've done our comparison
  378|  33.0k|      if (ord > 0) {
  379|  33.0k|        return true;
  380|  33.0k|      } else if (ord < 0) {
  381|  33.0k|        return false;
  382|  33.0k|      } else {
  383|  33.0k|        return is_odd;
  384|  33.0k|      }
  385|  33.0k|    });
  386|  33.0k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  33.0k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  33.0k|  const uint64_t mask
  125|  33.0k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 33.0k]
  ------------------
  126|  33.0k|    ? UINT64_MAX
  127|  33.0k|    : (uint64_t(1) << shift) - 1;
  128|  33.0k|  const uint64_t halfway
  129|  33.0k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 33.0k]
  ------------------
  130|  33.0k|    ? 0
  131|  33.0k|    : uint64_t(1) << (shift - 1);
  132|  33.0k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  33.0k|  bool is_above = truncated_bits > halfway;
  134|  33.0k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  33.0k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 33.0k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  33.0k|  } else {
  140|  33.0k|    am.mantissa >>= shift;
  141|  33.0k|  }
  142|  33.0k|  am.power2 += shift;
  143|       |
  144|  33.0k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  33.0k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  33.0k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  33.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  33.0k|      (void)_;  // not needed, since we've done our comparison
  377|  33.0k|      (void)__; // not needed, since we've done our comparison
  378|  33.0k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 518, False: 32.5k]
  ------------------
  379|    518|        return true;
  380|  32.5k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 25.5k, False: 6.98k]
  ------------------
  381|  25.5k|        return false;
  382|  25.5k|      } else {
  383|  6.98k|        return is_odd;
  384|  6.98k|      }
  385|  33.0k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  50.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  50.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  50.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  50.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  50.0k|  size_t digits = 0;
  413|  50.0k|  bigint bigmant;
  414|  50.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  50.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  50.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 13.4k, False: 36.6k]
  ------------------
  418|  13.4k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  36.6k|  } else {
  420|  36.6k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  36.6k|  }
  422|  50.0k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  13.4k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  13.4k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  13.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  13.4k|  adjusted_mantissa answer;
  324|  13.4k|  bool truncated;
  325|  13.4k|  answer.mantissa = bigmant.hi64(truncated);
  326|  13.4k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  13.4k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  13.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.4k|    });
  333|  13.4k|  });
  334|       |
  335|  13.4k|  return answer;
  336|  13.4k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  13.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  13.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  13.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 13.4k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  13.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  13.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.01k, False: 12.4k]
  ------------------
  109|  1.01k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.01k|    am.power2++;
  111|  1.01k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  13.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  13.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 13.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  13.4k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  13.4k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  13.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  13.4k|    });
  333|  13.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  13.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  13.4k|  const uint64_t mask
  125|  13.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 13.4k]
  ------------------
  126|  13.4k|    ? UINT64_MAX
  127|  13.4k|    : (uint64_t(1) << shift) - 1;
  128|  13.4k|  const uint64_t halfway
  129|  13.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 13.4k]
  ------------------
  130|  13.4k|    ? 0
  131|  13.4k|    : uint64_t(1) << (shift - 1);
  132|  13.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  13.4k|  bool is_above = truncated_bits > halfway;
  134|  13.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  13.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 13.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  13.4k|  } else {
  140|  13.4k|    am.mantissa >>= shift;
  141|  13.4k|  }
  142|  13.4k|  am.power2 += shift;
  143|       |
  144|  13.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  13.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  13.4k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  13.4k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  13.4k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.14k, False: 12.2k]
  |  Branch (331:27): [True: 11.3k, False: 876]
  |  Branch (331:41): [True: 3.79k, False: 7.60k]
  |  Branch (331:56): [True: 354, False: 8.12k]
  |  Branch (331:66): [True: 80, False: 274]
  ------------------
  332|  13.4k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  36.6k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  36.6k|  bigint& real_digits = bigmant;
  347|  36.6k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  36.6k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  36.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  36.6k|  T b;
  354|  36.6k|  to_float(false, am_b, b);
  355|  36.6k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  36.6k|  bigint theor_digits(theor.mantissa);
  357|  36.6k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  36.6k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  36.6k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  36.6k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 36.6k, False: 0]
  ------------------
  363|  36.6k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  36.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  36.6k|  }
  365|  36.6k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 4.63k, False: 32.0k]
  ------------------
  366|  4.63k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  4.63k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  32.0k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 31.9k, False: 116]
  ------------------
  368|  31.9k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  31.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  31.9k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  36.6k|  int ord = real_digits.compare(theor_digits);
  373|  36.6k|  adjusted_mantissa answer = am;
  374|  36.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.6k|      (void)_;  // not needed, since we've done our comparison
  377|  36.6k|      (void)__; // not needed, since we've done our comparison
  378|  36.6k|      if (ord > 0) {
  379|  36.6k|        return true;
  380|  36.6k|      } else if (ord < 0) {
  381|  36.6k|        return false;
  382|  36.6k|      } else {
  383|  36.6k|        return is_odd;
  384|  36.6k|      }
  385|  36.6k|    });
  386|  36.6k|  });
  387|       |
  388|  36.6k|  return answer;
  389|  36.6k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  36.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 138, False: 36.5k]
  ------------------
   96|       |    // have a denormal float
   97|    138|    int32_t shift = -am.power2 + 1;
   98|    138|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    138|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 138, False: 0]
  ------------------
  101|    138|    return;
  102|    138|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 36.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  36.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  36.6k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  36.6k|  adjusted_mantissa am = to_extended(value);
   84|  36.6k|  am.mantissa <<= 1;
   85|  36.6k|  am.mantissa += 1;
   86|  36.6k|  am.power2 -= 1;
   87|  36.6k|  return am;
   88|  36.6k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  36.6k|adjusted_mantissa to_extended(T value) noexcept {
   50|  36.6k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  36.6k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  36.6k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  36.6k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  36.6k|  adjusted_mantissa am;
   56|  36.6k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  36.6k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  36.6k|  ::memcpy(&bits, &value, sizeof(T));
   62|  36.6k|#endif
   63|  36.6k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 138, False: 36.5k]
  ------------------
   64|       |    // denormal
   65|    138|    am.power2 = 1 - bias;
   66|    138|    am.mantissa = bits & mantissa_mask;
   67|  36.5k|  } else {
   68|       |    // normal
   69|  36.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  36.5k|    am.power2 -= bias;
   71|  36.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  36.5k|  }
   73|       |
   74|  36.6k|  return am;
   75|  36.6k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  36.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 138, False: 36.5k]
  ------------------
   96|       |    // have a denormal float
   97|    138|    int32_t shift = -am.power2 + 1;
   98|    138|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    138|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 138, False: 0]
  ------------------
  101|    138|    return;
  102|    138|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 36.4k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  36.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.6k|      (void)_;  // not needed, since we've done our comparison
  377|  36.6k|      (void)__; // not needed, since we've done our comparison
  378|  36.6k|      if (ord > 0) {
  379|  36.6k|        return true;
  380|  36.6k|      } else if (ord < 0) {
  381|  36.6k|        return false;
  382|  36.6k|      } else {
  383|  36.6k|        return is_odd;
  384|  36.6k|      }
  385|  36.6k|    });
  386|  36.6k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  36.6k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  36.6k|  const uint64_t mask
  125|  36.6k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 36.6k]
  ------------------
  126|  36.6k|    ? UINT64_MAX
  127|  36.6k|    : (uint64_t(1) << shift) - 1;
  128|  36.6k|  const uint64_t halfway
  129|  36.6k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 36.6k]
  ------------------
  130|  36.6k|    ? 0
  131|  36.6k|    : uint64_t(1) << (shift - 1);
  132|  36.6k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  36.6k|  bool is_above = truncated_bits > halfway;
  134|  36.6k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  36.6k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 36.6k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  36.6k|  } else {
  140|  36.6k|    am.mantissa >>= shift;
  141|  36.6k|  }
  142|  36.6k|  am.power2 += shift;
  143|       |
  144|  36.6k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  36.6k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  36.6k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  36.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.6k|      (void)_;  // not needed, since we've done our comparison
  377|  36.6k|      (void)__; // not needed, since we've done our comparison
  378|  36.6k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 10.2k, False: 26.4k]
  ------------------
  379|  10.2k|        return true;
  380|  26.4k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 25.4k, False: 980]
  ------------------
  381|  25.4k|        return false;
  382|  25.4k|      } else {
  383|    980|        return is_odd;
  384|    980|      }
  385|  36.6k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  3.79M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.21M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   574k|  constexpr size_t len() const noexcept {
  238|   574k|    return length;
  239|   574k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   920k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   920k|  return -10;
  469|   920k|#endif
  470|   920k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   860k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   860k|  return 10;
  517|   860k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   719k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   719k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   719k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.44M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.44M|  return 23;
  477|  2.44M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   658k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   658k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   658k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   909k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   372k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   372k|  return -65;
  568|   372k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   371k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   371k|  return 38;
  559|   371k|}
_ZN10fast_float14leading_zeroesEm:
  268|   823k|int leading_zeroes(uint64_t input_num) {
  269|   823k|  assert(input_num > 0);
  270|   823k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   823k|  return __builtin_clzll(input_num);
  285|   823k|#endif
  286|   823k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   953k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   953k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   953k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   953k|  answer.low = uint64_t(r);
  337|   953k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   953k|  return answer;
  342|   953k|}
_ZN10fast_float8value128C2Ev:
  251|   953k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   431k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   431k|  return -127;
  500|   431k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   132k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   132k|  return -17;
  493|   132k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   131k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   131k|  return 10;
  485|   131k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   252k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   252k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 84.0k, False: 168k]
  |  Branch (352:38): [True: 0, False: 168k]
  ------------------
  353|   252k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  33.9k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  33.9k|  return 114;
  575|  33.9k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   262k|{
  650|   262k|    return sizeof(uint64_t) / sizeof(UC);
  651|   262k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   133k|{
  644|   133k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   133k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   133k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   132k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   540k|  constexpr size_t len() const noexcept {
  238|   540k|    return length;
  239|   540k|  }
_ZNK10fast_float4spanImEixEm:
  241|   308k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   308k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   308k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   308k|    return ptr[index];
  244|   308k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   295k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   295k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   295k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   295k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   295k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   295k|  ::memcpy(&value, &word, sizeof(T));
  615|   295k|#endif
  616|   295k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   295k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   700k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   700k|  return 0xFF;
  507|   700k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.89M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  55.3k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  27.6k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  27.6k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.00M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.00M|  return -22;
  461|  1.00M|#endif
  462|  1.00M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   972k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   972k|  return 22;
  514|   972k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   797k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   797k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   797k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.52M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.52M|  return 52;
  474|  2.52M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   779k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   779k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   779k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   351k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   351k|  return -342;
  564|   351k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   351k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   351k|  return 308;
  555|   351k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   447k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   447k|  return -1023;
  497|   447k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   101k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   101k|  return -4;
  489|   101k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  61.9k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  61.9k|  return 23;
  481|  61.9k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  50.0k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  50.0k|  return 769;
  572|  50.0k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   262k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   262k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   262k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   262k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   262k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   262k|  ::memcpy(&value, &word, sizeof(T));
  615|   262k|#endif
  616|   262k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   262k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   652k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   652k|  return 0x7FF;
  504|   652k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   906k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   906k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   906k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   906k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   906k|    return from_chars_advanced(first, last, value, options);
  143|   906k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   906k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   906k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   906k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   906k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   906k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 906k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   906k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   906k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 906k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   906k|  answer.ec = std::errc(); // be optimistic
  221|   906k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   906k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 847k, False: 59.4k]
  |  Branch (227:69): [True: 783k, False: 63.1k]
  |  Branch (227:131): [True: 706k, False: 77.4k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   706k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 706k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   706k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 644k, False: 61.7k]
  ------------------
  239|   644k|        value = T(pns.mantissa);
  240|   644k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 9.32k, False: 635k]
  ------------------
  241|   635k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   644k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 644k]
  ------------------
  243|   644k|        return answer;
  244|   644k|      }
  245|   706k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   706k|  }
  262|   261k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   261k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 121k, False: 140k]
  |  Branch (263:29): [True: 121k, False: 0]
  ------------------
  264|   121k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 33.9k, False: 87.0k]
  ------------------
  265|  33.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  33.9k|    }
  267|   121k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   261k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 33.9k, False: 227k]
  ------------------
  271|   261k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   261k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 251k, False: 10.5k]
  |  Branch (273:29): [True: 18.0k, False: 233k]
  |  Branch (273:49): [True: 1.35k, False: 16.7k]
  |  Branch (273:68): [True: 7.48k, False: 253k]
  ------------------
  274|  8.84k|    answer.ec = std::errc::result_out_of_range;
  275|  8.84k|  }
  276|   261k|  return answer;
  277|   906k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.51M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.51M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.51M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.51M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.51M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.51M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  13.8k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  13.8k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  13.8k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  13.8k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  13.8k|    return from_chars_advanced(first, last, value, options);
  143|  13.8k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  13.8k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  13.8k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  13.8k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  13.8k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  13.8k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 13.8k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  13.8k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  13.8k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 13.8k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  13.8k|  answer.ec = std::errc(); // be optimistic
  221|  13.8k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  13.8k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 13.7k, False: 36]
  |  Branch (227:69): [True: 13.4k, False: 318]
  |  Branch (227:131): [True: 13.4k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  13.4k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 13.4k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  13.4k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 13.4k, False: 0]
  ------------------
  239|  13.4k|        value = T(pns.mantissa);
  240|  13.4k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18, False: 13.4k]
  ------------------
  241|  13.4k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  13.4k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 13.4k]
  ------------------
  243|  13.4k|        return answer;
  244|  13.4k|      }
  245|  13.4k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  13.4k|  }
  262|    354|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    354|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 354]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    354|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 354]
  ------------------
  271|    354|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    354|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 354, False: 0]
  |  Branch (273:29): [True: 354, False: 0]
  |  Branch (273:49): [True: 36, False: 318]
  |  Branch (273:68): [True: 318, False: 0]
  ------------------
  274|    354|    answer.ec = std::errc::result_out_of_range;
  275|    354|  }
  276|    354|  return answer;
  277|  13.8k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   991k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   991k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   991k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   991k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   991k|    return from_chars_advanced(first, last, value, options);
  143|   991k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   991k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   991k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   991k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   991k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   991k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 991k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   991k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   991k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 991k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   991k|  answer.ec = std::errc(); // be optimistic
  221|   991k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   991k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 958k, False: 32.8k]
  |  Branch (227:69): [True: 892k, False: 66.2k]
  |  Branch (227:131): [True: 783k, False: 108k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   783k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 783k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   783k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 765k, False: 17.9k]
  ------------------
  239|   765k|        value = T(pns.mantissa);
  240|   765k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 39.2k, False: 726k]
  ------------------
  241|   726k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   765k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 765k]
  ------------------
  243|   765k|        return answer;
  244|   765k|      }
  245|   783k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   783k|  }
  262|   225k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   225k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 131k, False: 93.9k]
  |  Branch (263:29): [True: 131k, False: 0]
  ------------------
  264|   131k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 50.0k, False: 81.5k]
  ------------------
  265|  50.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  50.0k|    }
  267|   131k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   225k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 50.0k, False: 175k]
  ------------------
  271|   225k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   225k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 219k, False: 5.68k]
  |  Branch (273:29): [True: 10.3k, False: 209k]
  |  Branch (273:49): [True: 376, False: 9.97k]
  |  Branch (273:68): [True: 3.56k, False: 221k]
  ------------------
  274|  3.94k|    answer.ec = std::errc::result_out_of_range;
  275|  3.94k|  }
  276|   225k|  return answer;
  277|   991k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  13.8k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  13.8k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  13.8k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  13.8k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  13.8k|    return from_chars_advanced(first, last, value, options);
  143|  13.8k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  13.8k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  13.8k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  13.8k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  13.8k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  13.8k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 13.8k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  13.8k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  13.8k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 13.8k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  13.8k|  answer.ec = std::errc(); // be optimistic
  221|  13.8k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  13.8k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 13.7k, False: 36]
  |  Branch (227:69): [True: 13.4k, False: 318]
  |  Branch (227:131): [True: 13.4k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  13.4k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 13.4k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  13.4k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 13.4k, False: 0]
  ------------------
  239|  13.4k|        value = T(pns.mantissa);
  240|  13.4k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18, False: 13.4k]
  ------------------
  241|  13.4k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  13.4k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 13.4k]
  ------------------
  243|  13.4k|        return answer;
  244|  13.4k|      }
  245|  13.4k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  13.4k|  }
  262|    354|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    354|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 354]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    354|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 354]
  ------------------
  271|    354|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    354|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 354, False: 0]
  |  Branch (273:29): [True: 214, False: 140]
  |  Branch (273:49): [True: 0, False: 214]
  |  Branch (273:68): [True: 214, False: 140]
  ------------------
  274|    214|    answer.ec = std::errc::result_out_of_range;
  275|    214|  }
  276|    354|  return answer;
  277|  13.8k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  6.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.37M|{
 3778|  5.37M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.37M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.37M|    }
 3781|  5.37M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.37M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.37M|    }
 3784|  5.37M|    else {
 3785|       |        // utf-32
 3786|  5.37M|        static_assert(sizeof(U) == 4);
 3787|  5.37M|        SCN_UNUSED(ch);
 3788|  5.37M|        return 1;
 3789|  5.37M|    }
 3790|  5.37M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.37M|{
 3742|  5.37M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.37M|    SCN_GCC_COMPAT_PUSH
 3745|  5.37M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.37M|    constexpr char lengths[] =
 3747|  5.37M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.37M|        "\1\1\1\1\1\1\1\1"
 3749|  5.37M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.37M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.37M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.37M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.37M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.37M|    SCN_GCC_COMPAT_POP
 3756|  5.37M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.15M|{
 3984|  5.15M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.15M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.15M|    }
 3987|  5.15M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.15M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.15M|    }
 3990|  5.15M|    else {
 3991|  5.15M|        SCN_EXPECT(input.size() == 1);
 3992|  5.15M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.15M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.15M|            return invalid_code_point;
 3995|  5.15M|        }
 3996|  5.15M|        return cp;
 3997|  5.15M|    }
 3998|  5.15M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.15M|{
 3797|  5.15M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.15M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.15M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.15M|    };
 3802|       |
 3803|  5.15M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 4.92M, False: 226k]
  ------------------
 3804|  4.92M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 821, False: 4.92M]
  ------------------
 3805|    821|            SCN_UNLIKELY_ATTR
 3806|    821|            return invalid_code_point;
 3807|    821|        }
 3808|  4.92M|        return static_cast<char32_t>(input[0]);
 3809|  4.92M|    }
 3810|       |
 3811|   226k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 201k, False: 24.9k]
  ------------------
 3812|   201k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 92, False: 201k]
  ------------------
 3813|     92|            SCN_UNLIKELY_ATTR
 3814|     92|            return invalid_code_point;
 3815|     92|        }
 3816|   201k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 49.9k, False: 151k]
  ------------------
 3817|  49.9k|            SCN_UNLIKELY_ATTR
 3818|  49.9k|            return invalid_code_point;
 3819|  49.9k|        }
 3820|       |
 3821|   151k|        char32_t cp{};
 3822|   151k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   151k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   151k|        return cp;
 3825|   201k|    }
 3826|       |
 3827|  24.9k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 10.8k, False: 14.1k]
  ------------------
 3828|  10.8k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 89, False: 10.7k]
  ------------------
 3829|     89|            SCN_UNLIKELY_ATTR
 3830|     89|            return invalid_code_point;
 3831|     89|        }
 3832|  10.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 3.71k, False: 7.06k]
  ------------------
 3833|  10.7k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 964, False: 6.09k]
  ------------------
 3834|  4.67k|            SCN_UNLIKELY_ATTR
 3835|  4.67k|            return invalid_code_point;
 3836|  4.67k|        }
 3837|       |
 3838|  6.09k|        char32_t cp{};
 3839|  6.09k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|  6.09k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|  6.09k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|  6.09k|        return cp;
 3843|  10.7k|    }
 3844|       |
 3845|  14.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 14.1k, False: 0]
  ------------------
 3846|  14.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 14.1k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  14.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 1.57k, False: 12.5k]
  ------------------
 3851|  1.57k|            SCN_UNLIKELY_ATTR
 3852|  1.57k|            return invalid_code_point;
 3853|  1.57k|        }
 3854|  12.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 1.76k, False: 10.7k]
  ------------------
 3855|  12.5k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 706, False: 10.0k]
  ------------------
 3856|  12.5k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 1.71k, False: 8.37k]
  ------------------
 3857|  4.18k|            SCN_UNLIKELY_ATTR
 3858|  4.18k|            return invalid_code_point;
 3859|  4.18k|        }
 3860|       |
 3861|  8.37k|        char32_t cp{};
 3862|  8.37k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  8.37k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  8.37k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  8.37k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  8.37k|        return cp;
 3867|  12.5k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   252k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   252k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   252k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  11.2M|{
 3670|  11.2M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  11.2M|                                          decltype(first), decltype(last)> &&
 3672|  11.2M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  11.2M|        return {first, last};
 3674|  11.2M|    }
 3675|  11.2M|    else {
 3676|  11.2M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  11.2M|                                       to_address(first), to_address(last)))};
 3678|  11.2M|    }
 3679|  11.2M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  34.1M|{
  322|  34.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  34.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  34.1M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  38.0M|{
  302|  38.0M|    return p;
  303|  38.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  16.7M|{
 3701|  16.7M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  16.7M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  16.7M|                      decltype(it)> &&
 3704|  16.7M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  16.7M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  16.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  16.7M|        return it;
 3707|  16.7M|    }
 3708|  16.7M|    else {
 3709|  16.7M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  16.7M|    }
 3711|  16.7M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   108k|    {
 2695|   108k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   108k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   108k|    {
 2676|   108k|        return decay_copy(t.begin());
 2677|   108k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|  21.2M|{
 1920|  21.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  21.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  21.2M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   310k|{
 8828|   310k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   310k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   310k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   310k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5356|  1.23M|{
 5357|  1.23M|    detail::check_scan_arg_types<Args...>();
 5358|  1.23M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.23M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5095|  1.52M|{
 5096|  1.52M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.52M|                  "Scan argument types must be default constructible");
 5098|  1.52M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.52M|                  "Scan argument types must be Destructible");
 5100|  1.52M|    static_assert(
 5101|  1.52M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.52M|        "Scan argument types must not be references");
 5103|  1.52M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5309|  1.23M|    {
 5310|  1.23M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.23M|    {
 5321|  1.23M|        return {detail::make_arg<
 5322|  1.23M|            kind, Context,
 5323|  1.23M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.23M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.23M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|  1.23M|{
 5131|  1.23M|    return make_value<Context>(value).ref_value;
 5132|  1.23M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5080|  1.36M|{
 5081|  1.36M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.36M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.36M|                                  needs_context_tag>) {
 5085|  1.36M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.36M|    }
 5087|  1.36M|    else {
 5088|  1.36M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.36M|            value, context_tag<Context>{}));
 5090|  1.36M|    }
 5091|  1.36M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4919|  1.36M|    {                                                                        \
 4920|  1.36M|        return val;                                                          \
 4921|  1.36M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5049|  1.52M|{
 5050|  1.52M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.52M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.52M|    constexpr bool scannable_char =
 5054|  1.52M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.52M|    static_assert(scannable_char,
 5056|  1.52M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.52M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.52M|    constexpr bool scannable_const =
 5060|  1.52M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.52M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.52M|    constexpr bool scannable_disabled =
 5064|  1.52M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.52M|    static_assert(scannable_disabled,
 5066|  1.52M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.52M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.52M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.52M|    static_assert(
 5071|  1.52M|        scannable,
 5072|  1.52M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.52M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.52M|    return arg_value{arg};
 5076|  1.52M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4862|  1.52M|    {
 4863|  1.52M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|   986k|{
 8615|   986k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   986k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|   986k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|   986k|{
 8552|   986k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   986k|    auto result = vscan_impl(buffer, format, args);
 8555|   986k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.8k, False: 937k]
  |  |  ------------------
  ------------------
 8556|  48.8k|        return unexpected(result.error());
 8557|  48.8k|    }
 8558|   937k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   986k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4680|  2.19M|{
 4681|  2.19M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.19M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.19M|                  "\n"
 4685|  2.19M|                  "Unsupported range type given as input to a scanning "
 4686|  2.19M|                  "function.\n"
 4687|  2.19M|                  "A range needs to have a character type (value type) "
 4688|  2.19M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.19M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.19M|                  "to be included.\n"
 4691|  2.19M|                  "See the scnlib documentation for more details.");
 4692|  2.19M|    static_assert(
 4693|  2.19M|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.19M|        "\n"
 4695|  2.19M|        "Unsupported range type given as input to a scanning "
 4696|  2.19M|        "function.\n"
 4697|  2.19M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.19M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.19M|        "not supported.");
 4700|  2.19M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.19M|                  "\n"
 4702|  2.19M|                  "Unsupported range type given as input to a scanning "
 4703|  2.19M|                  "function.\n"
 4704|  2.19M|                  "file_marker_found cannot be used as an "
 4705|  2.19M|                  "source range type to scn::scan.\n"
 4706|  2.19M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.19M|                  "and do not provide an explicit source range, "
 4708|  2.19M|                  "or use scn::scan with a FILE* directly.");
 4709|  2.19M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.19M|                  "\n"
 4711|  2.19M|                  "Unsupported range type given as input to a scanning "
 4712|  2.19M|                  "function.\n"
 4713|  2.19M|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.19M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.19M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.19M|                  "\n"
 4717|  2.19M|                  "Unsupported range type given as input to a scanning "
 4718|  2.19M|                  "function.\n"
 4719|  2.19M|                  "A range needs to model forward_range and have a valid "
 4720|  2.19M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.19M|                  "Examples of scannable ranges are std::string, "
 4722|  2.19M|                  "std::string_view, "
 4723|  2.19M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.19M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.19M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.19M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|  2.19M|{
 4620|  2.19M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|  2.19M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|  2.19M|    }
 4623|  2.19M|    else {
 4624|  2.19M|        return invalid_char_type{};
 4625|  2.19M|    }
 4626|  2.19M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  2.19M|    {
 2826|  2.19M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  2.19M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  2.19M|    {
 2807|  2.19M|        return t.data();
 2808|  2.19M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3201|  2.19M|    {
 3202|  2.19M|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 21.0k, False: 2.17M]
  ------------------
 3203|  2.19M|                   ? nullptr
 3204|  2.19M|                   : std::addressof(*ranges::begin(derived()));
 3205|  2.19M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  2.19M|    {
 2976|  2.19M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  2.19M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  2.19M|    {
 2949|  2.19M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  2.19M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|  12.1M|    {
 3310|  12.1M|        return m_iterator == m_sentinel;
 3311|  12.1M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3155|  4.36M|    {
 3156|  4.36M|        return static_cast<const D&>(*this);
 3157|  4.36M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  4.26M|    {
 2695|  4.26M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  4.26M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  4.26M|    {
 2676|  4.26M|        return decay_copy(t.begin());
 2677|  4.26M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  51.6M|    {
 3301|  51.6M|        return m_iterator;
 3302|  51.6M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|  2.19M|    {
 2901|  2.19M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  2.19M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  2.19M|    {
 2867|  2.19M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  2.19M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|  6.62M|{
 1920|  6.62M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  6.62M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|  12.2M|    {
 3317|  12.2M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  12.2M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|  15.9M|    {
 1569|  15.9M|        return has_value();
 1570|  15.9M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  31.5M|    {
  481|  31.5M|        return m_has_value;
  482|  31.5M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|   957k|    {
 1575|   957k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   957k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   957k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   957k|        return this->get_unexpected().error();
 1577|   957k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   957k|    {
  464|   957k|        return m_unexpected;
  465|   957k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  7.41M|    {
  357|  7.41M|        return m_unexpected;
  358|  7.41M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  3.62M|    {
  343|  3.62M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.62M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  3.62M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   105k|    {
 1447|   105k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   105k|    {
  443|   105k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  8.77M|    {
  352|  8.77M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  8.77M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  8.77M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.19M|    {
 1148|  2.19M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  2.08M|{
 5884|  2.08M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.08M|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.08M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.08M|    }
 5888|  2.08M|    else {
 5889|  2.08M|        auto it = ranges::begin(source);
 5890|  2.08M|        while (n > 0) {
 5891|  2.08M|            --n;
 5892|  2.08M|            ++it;
 5893|  2.08M|        }
 5894|  2.08M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.08M|    }
 5896|  2.08M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  12.5M|    {
 2695|  12.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  12.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  12.5M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  12.5M|    {
 2676|  12.5M|        return decay_copy(t.begin());
 2677|  12.5M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5870|  2.08M|{
 5871|  2.08M|    return ranges::end(source);
 5872|  2.08M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.08M|    {
 2752|  2.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.08M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.08M|    {
 2734|  2.08M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  25.9M|    {
 3305|  25.9M|        return m_sentinel;
 3306|  25.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  6.27M|    {
 1624|  6.27M|        return value();
 1625|  6.27M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  14.6M|    {
 1598|  14.6M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.6M|        return this->get_value();
 1600|  14.6M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  14.6M|    {
  447|  14.6M|        return m_value;
  448|  14.6M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.08M|    {
 1401|  2.08M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.08M|    {
  433|  2.08M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   621k|    {
 7936|   621k|        return m_str;
 7937|   621k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.23M|    {
 5387|  1.23M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5339|  1.23M|    {
 5340|  1.23M|        return m_argptrs;
 5341|  1.23M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|  3.92M|    {
 5439|  3.92M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   621k|{
 8781|   621k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 588k]
  |  |  ------------------
  ------------------
 8782|  32.5k|        return unexpected(result.error());
 8783|  32.5k|    }
 8784|   588k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   588k|    static_cast<    \
  |  |  929|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   621k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|  2.19M|    {
 1569|  2.19M|        return has_value();
 1570|  2.19M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.38M|    {
  481|  4.38M|        return m_has_value;
  482|  4.38M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|   105k|    {
 1575|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   105k|        return this->get_unexpected().error();
 1577|   105k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   105k|    {
  464|   105k|        return m_unexpected;
  465|   105k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  35.2k|    {
 1447|  35.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  35.2k|    {
  443|  35.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   689k|    {
 1148|   689k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  1.87M|    {
 1624|  1.87M|        return value();
 1625|  1.87M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.08M|    {
 1598|  2.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.08M|        return this->get_value();
 1600|  2.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.08M|    {
  447|  2.08M|        return m_value;
  448|  2.08M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5790|   654k|    {
 5791|   654k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|  2.08M|    {
 5642|  2.08M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5576|  1.31M|    {
 5577|  1.31M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   654k|    {
 1401|   654k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   654k|    {
  433|   654k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5334|  1.23M|    {
 5335|  1.23M|        return m_args;
 5336|  1.23M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.19M|    {
 2752|  2.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.19M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.19M|    {
 2734|  2.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.19M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|  20.7M|    {
 3287|  20.7M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|  3.92M|{
 7652|  3.92M|    return s;
 7653|  3.92M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|  3.92M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   621k|    {
 7932|   621k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|   689k|    {
 1569|   689k|        return has_value();
 1570|   689k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.34M|    {
  481|  1.34M|        return m_has_value;
  482|  1.34M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1643|   654k|    {
 1644|   654k|        return &value();
 1645|   654k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   654k|    {
 1598|   654k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   654k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   654k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   654k|        return this->get_value();
 1600|   654k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   654k|    {
  447|   654k|        return m_value;
  448|   654k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5658|  2.08M|    {
 5659|  2.08M|        return ranges::begin(m_range);
 5660|  2.08M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   310k|{
 8895|   310k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   310k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   310k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   310k|    static_cast<    \
  |  |  929|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   310k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|   986k|{
 8633|   986k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   986k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   986k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|   986k|{
 8568|   986k|#if !SCN_DISABLE_LOCALE
 8569|   986k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   986k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   986k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   986k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   986k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.8k, False: 937k]
  |  |  ------------------
  ------------------
 8576|  48.8k|        return unexpected(result.error());
 8577|  48.8k|    }
 8578|   937k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   986k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  68.0k|{
 8934|  68.0k|    T value;
 8935|  68.0k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  68.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  68.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  68.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  68.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 65.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.71k|    }                                                  \
  |  |  |  | 3642|  68.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  65.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  65.3k|    static_cast<    \
  |  |  929|  65.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  65.3k|    static_cast<    \
  |  |  929|  65.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  68.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|   130k|{
 5116|   130k|    check_scan_arg_types<T>();
 5117|       |
 5118|   130k|    basic_scan_arg<Context> arg;
 5119|   130k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   130k|    arg.m_value = make_value<Context>(value);
 5121|   130k|    return arg;
 5122|   130k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|  4.35M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|  4.82M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|   220k|{
 8646|   220k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|   220k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|   220k|{
 8592|   220k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|   220k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|   220k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.14k, False: 212k]
  |  |  ------------------
  ------------------
 8596|  8.14k|        return unexpected(result.error());
 8597|  8.14k|    }
 8598|   212k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|   220k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   212k|    {
 1634|   212k|        return std::move(value());
 1635|   212k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   335k|{
 8828|   335k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   335k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   335k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   335k|    static_cast<    \
  |  |  929|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   335k|    static_cast<    \
  |  |  929|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   335k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  1.33M|{
 5357|  1.33M|    detail::check_scan_arg_types<Args...>();
 5358|  1.33M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.33M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  1.64M|{
 5096|  1.64M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.64M|                  "Scan argument types must be default constructible");
 5098|  1.64M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.64M|                  "Scan argument types must be Destructible");
 5100|  1.64M|    static_assert(
 5101|  1.64M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.64M|        "Scan argument types must not be references");
 5103|  1.64M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  1.33M|    {
 5310|  1.33M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.33M|    {
 5321|  1.33M|        return {detail::make_arg<
 5322|  1.33M|            kind, Context,
 5323|  1.33M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.33M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.33M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  1.33M|{
 5131|  1.33M|    return make_value<Context>(value).ref_value;
 5132|  1.33M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  1.48M|{
 5081|  1.48M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.48M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.48M|                                  needs_context_tag>) {
 5085|  1.48M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.48M|    }
 5087|  1.48M|    else {
 5088|  1.48M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.48M|            value, context_tag<Context>{}));
 5090|  1.48M|    }
 5091|  1.48M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  1.48M|    {                                                                        \
 4920|  1.48M|        return val;                                                          \
 4921|  1.48M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  1.64M|{
 5050|  1.64M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.64M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.64M|    constexpr bool scannable_char =
 5054|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.64M|    static_assert(scannable_char,
 5056|  1.64M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.64M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.64M|    constexpr bool scannable_const =
 5060|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.64M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.64M|    constexpr bool scannable_disabled =
 5064|  1.64M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.64M|    static_assert(scannable_disabled,
 5066|  1.64M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.64M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.64M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.64M|    static_assert(
 5071|  1.64M|        scannable,
 5072|  1.64M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.64M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.64M|    return arg_value{arg};
 5076|  1.64M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  1.64M|    {
 4863|  1.64M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   671k|    {
 7936|   671k|        return m_str;
 7937|   671k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.33M|    {
 5387|  1.33M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  1.33M|    {
 5340|  1.33M|        return m_argptrs;
 5341|  1.33M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   671k|{
 8781|   671k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 638k]
  |  |  ------------------
  ------------------
 8782|  32.5k|        return unexpected(result.error());
 8783|  32.5k|    }
 8784|   638k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   638k|    static_cast<    \
  |  |  929|   638k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   638k|    static_cast<    \
  |  |  929|   638k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   671k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  35.2k|    {
 1447|  35.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  35.2k|    {
  443|  35.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   746k|    {
 1148|   746k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5790|   711k|    {
 5791|   711k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5576|  1.42M|    {
 5577|  1.42M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   711k|    {
 1401|   711k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   711k|    {
  433|   711k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  1.33M|    {
 5335|  1.33M|        return m_args;
 5336|  1.33M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   671k|    {
 7932|   671k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|   746k|    {
 1569|   746k|        return has_value();
 1570|   746k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.45M|    {
  481|  1.45M|        return m_has_value;
  482|  1.45M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1643|   711k|    {
 1644|   711k|        return &value();
 1645|   711k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   711k|    {
 1598|   711k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   711k|        return this->get_value();
 1600|   711k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   711k|    {
  447|   711k|        return m_value;
  448|   711k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   335k|{
 8895|   335k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   335k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   335k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   335k|    static_cast<    \
  |  |  929|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   335k|    static_cast<    \
  |  |  929|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   335k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  75.3k|{
 8934|  75.3k|    T value;
 8935|  75.3k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  75.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  75.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  75.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  75.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 72.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.71k|    }                                                  \
  |  |  |  | 3642|  75.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  72.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  72.6k|    static_cast<    \
  |  |  929|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  72.6k|    static_cast<    \
  |  |  929|  72.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  75.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|   145k|{
 5116|   145k|    check_scan_arg_types<T>();
 5117|       |
 5118|   145k|    basic_scan_arg<Context> arg;
 5119|   145k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   145k|    arg.m_value = make_value<Context>(value);
 5121|   145k|    return arg;
 5122|   145k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|   340k|{
 8828|   340k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   340k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   340k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5356|  1.35M|{
 5357|  1.35M|    detail::check_scan_arg_types<Args...>();
 5358|  1.35M|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.35M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5095|  1.66M|{
 5096|  1.66M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  1.66M|                  "Scan argument types must be default constructible");
 5098|  1.66M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  1.66M|                  "Scan argument types must be Destructible");
 5100|  1.66M|    static_assert(
 5101|  1.66M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  1.66M|        "Scan argument types must not be references");
 5103|  1.66M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5309|  1.35M|    {
 5310|  1.35M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.35M|    {
 5321|  1.35M|        return {detail::make_arg<
 5322|  1.35M|            kind, Context,
 5323|  1.35M|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.35M|                                 typename Context::char_type>::value>(args)...};
 5325|  1.35M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|  1.35M|{
 5131|  1.35M|    return make_value<Context>(value).ref_value;
 5132|  1.35M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5080|  1.50M|{
 5081|  1.50M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.50M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.50M|                                  needs_context_tag>) {
 5085|  1.50M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.50M|    }
 5087|  1.50M|    else {
 5088|  1.50M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.50M|            value, context_tag<Context>{}));
 5090|  1.50M|    }
 5091|  1.50M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4919|  1.50M|    {                                                                        \
 4920|  1.50M|        return val;                                                          \
 4921|  1.50M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5049|  1.66M|{
 5050|  1.66M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  1.66M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  1.66M|    constexpr bool scannable_char =
 5054|  1.66M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  1.66M|    static_assert(scannable_char,
 5056|  1.66M|                  "Cannot scan an argument of an unsupported character "
 5057|  1.66M|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  1.66M|    constexpr bool scannable_const =
 5060|  1.66M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  1.66M|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  1.66M|    constexpr bool scannable_disabled =
 5064|  1.66M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  1.66M|    static_assert(scannable_disabled,
 5066|  1.66M|                  "Cannot scan an argument that has been disabled by "
 5067|  1.66M|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  1.66M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  1.66M|    static_assert(
 5071|  1.66M|        scannable,
 5072|  1.66M|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  1.66M|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  1.66M|    return arg_value{arg};
 5076|  1.66M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4862|  1.66M|    {
 4863|  1.66M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|   680k|    {
 7936|   680k|        return m_str;
 7937|   680k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.35M|    {
 5387|  1.35M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5339|  1.35M|    {
 5340|  1.35M|        return m_argptrs;
 5341|  1.35M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|   680k|{
 8781|   680k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   680k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 647k]
  |  |  ------------------
  ------------------
 8782|  32.5k|        return unexpected(result.error());
 8783|  32.5k|    }
 8784|   647k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   647k|    static_cast<    \
  |  |  929|   647k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   647k|    static_cast<    \
  |  |  929|   647k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   680k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  35.2k|    {
 1447|  35.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  35.2k|    {
  443|  35.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   757k|    {
 1148|   757k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5790|   722k|    {
 5791|   722k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5576|  1.44M|    {
 5577|  1.44M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   722k|    {
 1401|   722k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   722k|    {
  433|   722k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5334|  1.35M|    {
 5335|  1.35M|        return m_args;
 5336|  1.35M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   680k|    {
 7932|   680k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|   757k|    {
 1569|   757k|        return has_value();
 1570|   757k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.47M|    {
  481|  1.47M|        return m_has_value;
  482|  1.47M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1643|   722k|    {
 1644|   722k|        return &value();
 1645|   722k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   722k|    {
 1598|   722k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   722k|        return this->get_value();
 1600|   722k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   722k|    {
  447|   722k|        return m_value;
  448|   722k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|   340k|{
 8895|   340k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   340k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   340k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  76.8k|{
 8934|  76.8k|    T value;
 8935|  76.8k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  76.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  76.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  76.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  76.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 74.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.71k|    }                                                  \
  |  |  |  | 3642|  76.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  74.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.1k|    static_cast<    \
  |  |  929|  74.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.1k|    static_cast<    \
  |  |  929|  74.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  76.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|   147k|{
 5116|   147k|    check_scan_arg_types<T>();
 5117|       |
 5118|   147k|    basic_scan_arg<Context> arg;
 5119|   147k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|   147k|    arg.m_value = make_value<Context>(value);
 5121|   147k|    return arg;
 5122|   147k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   105k|    {
 2695|   105k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   105k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   105k|    {
 2676|   105k|        return decay_copy(t.begin());
 2677|   105k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1919|  38.4M|{
 1920|  38.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  38.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  38.4M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   307k|{
 8828|   307k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   307k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   307k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   307k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|   978k|{
 8615|   978k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   978k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|   978k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|   978k|{
 8552|   978k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   978k|    auto result = vscan_impl(buffer, format, args);
 8555|   978k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.8k, False: 929k]
  |  |  ------------------
  ------------------
 8556|  48.8k|        return unexpected(result.error());
 8557|  48.8k|    }
 8558|   929k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   929k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   978k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4680|  2.16M|{
 4681|  2.16M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.16M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.16M|                  "\n"
 4685|  2.16M|                  "Unsupported range type given as input to a scanning "
 4686|  2.16M|                  "function.\n"
 4687|  2.16M|                  "A range needs to have a character type (value type) "
 4688|  2.16M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.16M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.16M|                  "to be included.\n"
 4691|  2.16M|                  "See the scnlib documentation for more details.");
 4692|  2.16M|    static_assert(
 4693|  2.16M|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.16M|        "\n"
 4695|  2.16M|        "Unsupported range type given as input to a scanning "
 4696|  2.16M|        "function.\n"
 4697|  2.16M|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.16M|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.16M|        "not supported.");
 4700|  2.16M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.16M|                  "\n"
 4702|  2.16M|                  "Unsupported range type given as input to a scanning "
 4703|  2.16M|                  "function.\n"
 4704|  2.16M|                  "file_marker_found cannot be used as an "
 4705|  2.16M|                  "source range type to scn::scan.\n"
 4706|  2.16M|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.16M|                  "and do not provide an explicit source range, "
 4708|  2.16M|                  "or use scn::scan with a FILE* directly.");
 4709|  2.16M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.16M|                  "\n"
 4711|  2.16M|                  "Unsupported range type given as input to a scanning "
 4712|  2.16M|                  "function.\n"
 4713|  2.16M|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.16M|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.16M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.16M|                  "\n"
 4717|  2.16M|                  "Unsupported range type given as input to a scanning "
 4718|  2.16M|                  "function.\n"
 4719|  2.16M|                  "A range needs to model forward_range and have a valid "
 4720|  2.16M|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.16M|                  "Examples of scannable ranges are std::string, "
 4722|  2.16M|                  "std::string_view, "
 4723|  2.16M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.16M|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.16M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.16M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|  2.16M|{
 4651|  2.16M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|  2.16M|        return file_marker_found{};
 4653|  2.16M|    }
 4654|  2.16M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|  2.16M|        if constexpr (ranges::range<Range>) {
 4656|  2.16M|            return insufficient_range{};
 4657|  2.16M|        }
 4658|  2.16M|        else {
 4659|  2.16M|            return invalid_input_range{};
 4660|  2.16M|        }
 4661|  2.16M|    }
 4662|  2.16M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|  2.16M|        return invalid_char_type{};
 4664|  2.16M|    }
 4665|  2.16M|    else {
 4666|  2.16M|        return make_forward_scan_buffer(r);
 4667|  2.16M|    }
 4668|  2.16M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4484|  2.16M|{
 4485|  2.16M|    return basic_scan_forward_buffer_impl(range);
 4486|  2.16M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|  2.16M|    {
 4378|  2.16M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4352|  2.16M|    {
 4353|  2.16M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4121|  2.16M|    {
 4122|  2.16M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4036|  2.16M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  4.21M|    {
 2695|  4.21M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  4.21M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  4.21M|    {
 2676|  4.21M|        return decay_copy(t.begin());
 2677|  4.21M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3300|  6.26M|    {
 3301|  6.26M|        return m_iterator;
 3302|  6.26M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4381|  27.9M|    {
 4382|  27.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 399k, False: 27.5M]
  ------------------
 4383|   399k|            return false;
 4384|   399k|        }
 4385|  27.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 25.3M, False: 2.13M]
  ------------------
 4386|  25.3M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|  25.3M|                                          this->m_current_view.begin(),
 4388|  25.3M|                                          this->m_current_view.end());
 4389|  25.3M|        }
 4390|  27.5M|        m_latest = *m_cursor;
 4391|  27.5M|        ++m_cursor;
 4392|  27.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  27.5M|        return true;
 4394|  27.9M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  27.9M|    {
 2752|  27.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  27.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  27.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  27.9M|    {
 2734|  27.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  27.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  27.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3304|  29.9M|    {
 3305|  29.9M|        return m_sentinel;
 3306|  29.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4041|  2.16M|    {
 4042|  2.16M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|  2.16M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|   105k|    {
 1447|   105k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   105k|    {
  443|   105k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.16M|    {
 1148|  2.16M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  2.05M|{
 5884|  2.05M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.05M|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.05M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.05M|    }
 5888|  2.05M|    else {
 5889|  2.05M|        auto it = ranges::begin(source);
 5890|  2.05M|        while (n > 0) {
 5891|  2.05M|            --n;
 5892|  2.05M|            ++it;
 5893|  2.05M|        }
 5894|  2.05M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.05M|    }
 5896|  2.05M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.05M|    {
 2695|  2.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.05M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.05M|    {
 2676|  2.05M|        return decay_copy(t.begin());
 2677|  2.05M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5870|  2.05M|{
 5871|  2.05M|    return ranges::end(source);
 5872|  2.05M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.05M|    {
 2752|  2.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.05M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.05M|    {
 2734|  2.05M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.05M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  2.05M|    {
 1401|  2.05M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.05M|    {
  433|  2.05M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   615k|    {
 7936|   615k|        return m_str;
 7937|   615k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   615k|{
 8781|   615k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 583k]
  |  |  ------------------
  ------------------
 8782|  32.5k|        return unexpected(result.error());
 8783|  32.5k|    }
 8784|   583k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   583k|    static_cast<    \
  |  |  929|   583k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   583k|    static_cast<    \
  |  |  929|   583k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   615k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1568|  2.16M|    {
 1569|  2.16M|        return has_value();
 1570|  2.16M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.32M|    {
  481|  4.32M|        return m_has_value;
  482|  4.32M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1574|   105k|    {
 1575|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   105k|        return this->get_unexpected().error();
 1577|   105k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   105k|    {
  464|   105k|        return m_unexpected;
  465|   105k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  35.2k|    {
 1447|  35.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  35.2k|    {
  443|  35.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   678k|    {
 1148|   678k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  1.85M|    {
 1624|  1.85M|        return value();
 1625|  1.85M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  2.05M|    {
 1598|  2.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.05M|        return this->get_value();
 1600|  2.05M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.05M|    {
  447|  2.05M|        return m_value;
  448|  2.05M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5790|   643k|    {
 5791|   643k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5641|  2.05M|    {
 5642|  2.05M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   643k|    {
 1401|   643k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   643k|    {
  433|   643k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.16M|    {
 2752|  2.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.16M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.16M|    {
 2734|  2.16M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.16M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3286|  4.21M|    {
 3287|  4.21M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   615k|    {
 7932|   615k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|   678k|    {
 1569|   678k|        return has_value();
 1570|   678k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.32M|    {
  481|  1.32M|        return m_has_value;
  482|  1.32M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1643|   643k|    {
 1644|   643k|        return &value();
 1645|   643k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   643k|    {
 1598|   643k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   643k|        return this->get_value();
 1600|   643k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   643k|    {
  447|   643k|        return m_value;
  448|   643k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5658|  2.05M|    {
 5659|  2.05M|        return ranges::begin(m_range);
 5660|  2.05M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   307k|{
 8895|   307k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   307k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   307k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   307k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|   978k|{
 8633|   978k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   978k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   978k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|   978k|{
 8568|   978k|#if !SCN_DISABLE_LOCALE
 8569|   978k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   978k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   978k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   978k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   978k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.8k, False: 929k]
  |  |  ------------------
  ------------------
 8576|  48.8k|        return unexpected(result.error());
 8577|  48.8k|    }
 8578|   929k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   929k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   978k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  62.9k|{
 8934|  62.9k|    T value;
 8935|  62.9k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  62.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  62.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  62.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  62.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 60.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.71k|    }                                                  \
  |  |  |  | 3642|  62.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  60.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  60.2k|    static_cast<    \
  |  |  929|  60.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  60.2k|    static_cast<    \
  |  |  929|  60.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  62.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|   203k|{
 8646|   203k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|   203k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|   203k|{
 8592|   203k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|   203k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|   203k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.14k, False: 195k]
  |  |  ------------------
  ------------------
 8596|  8.14k|        return unexpected(result.error());
 8597|  8.14k|    }
 8598|   195k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|   203k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|   195k|    {
 1634|   195k|        return std::move(value());
 1635|   195k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   332k|{
 8828|   332k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   332k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   332k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   332k|    static_cast<    \
  |  |  929|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   332k|    static_cast<    \
  |  |  929|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   332k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   665k|    {
 7936|   665k|        return m_str;
 7937|   665k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   665k|{
 8781|   665k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 633k]
  |  |  ------------------
  ------------------
 8782|  32.5k|        return unexpected(result.error());
 8783|  32.5k|    }
 8784|   633k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   633k|    static_cast<    \
  |  |  929|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   633k|    static_cast<    \
  |  |  929|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   665k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  35.2k|    {
 1447|  35.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  35.2k|    {
  443|  35.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   735k|    {
 1148|   735k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5790|   700k|    {
 5791|   700k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   700k|    {
 1401|   700k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   700k|    {
  433|   700k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   665k|    {
 7932|   665k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|   735k|    {
 1569|   735k|        return has_value();
 1570|   735k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.43M|    {
  481|  1.43M|        return m_has_value;
  482|  1.43M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1643|   700k|    {
 1644|   700k|        return &value();
 1645|   700k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   700k|    {
 1598|   700k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   700k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   700k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   700k|        return this->get_value();
 1600|   700k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   700k|    {
  447|   700k|        return m_value;
  448|   700k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   332k|{
 8895|   332k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   332k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   332k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   332k|    static_cast<    \
  |  |  929|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   332k|    static_cast<    \
  |  |  929|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   332k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  70.0k|{
 8934|  70.0k|    T value;
 8935|  70.0k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  70.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  70.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  70.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  70.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 67.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.71k|    }                                                  \
  |  |  |  | 3642|  70.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  67.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  67.2k|    static_cast<    \
  |  |  929|  67.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  67.2k|    static_cast<    \
  |  |  929|  67.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  70.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|   337k|{
 8828|   337k|    auto args = make_scan_args<scan_context, Args...>();
 8829|   337k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|   337k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|   337k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|   674k|    {
 7936|   674k|        return m_str;
 7937|   674k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|   674k|{
 8781|   674k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 641k]
  |  |  ------------------
  ------------------
 8782|  32.5k|        return unexpected(result.error());
 8783|  32.5k|    }
 8784|   641k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   641k|    static_cast<    \
  |  |  929|   641k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   641k|    static_cast<    \
  |  |  929|   641k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|   674k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  35.2k|    {
 1447|  35.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  35.2k|    {
  443|  35.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   745k|    {
 1148|   745k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5790|   709k|    {
 5791|   709k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|   709k|    {
 1401|   709k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   709k|    {
  433|   709k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|   674k|    {
 7932|   674k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|   745k|    {
 1569|   745k|        return has_value();
 1570|   745k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.45M|    {
  481|  1.45M|        return m_has_value;
  482|  1.45M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1643|   709k|    {
 1644|   709k|        return &value();
 1645|   709k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|   709k|    {
 1598|   709k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   709k|        return this->get_value();
 1600|   709k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   709k|    {
  447|   709k|        return m_value;
  448|   709k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|   337k|{
 8895|   337k|    auto args = make_scan_args<scan_context, Args...>();
 8896|   337k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|   337k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|   337k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  71.0k|{
 8934|  71.0k|    T value;
 8935|  71.0k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  71.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  71.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  71.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  71.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.71k|    }                                                  \
  |  |  |  | 3642|  71.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  68.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  71.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   217k|    {
 2695|   217k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   217k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   217k|    {
 2676|   217k|        return decay_copy(t.begin());
 2677|   217k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|  1.01M|{
 1920|  1.01M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.01M|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5356|   145k|{
 5357|   145k|    detail::check_scan_arg_types<Args...>();
 5358|   145k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   145k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5309|   145k|    {
 5310|   145k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   145k|    {
 5321|   145k|        return {detail::make_arg<
 5322|   145k|            kind, Context,
 5323|   145k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   145k|                                 typename Context::char_type>::value>(args)...};
 5325|   145k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|   145k|{
 5131|   145k|    return make_value<Context>(value).ref_value;
 5132|   145k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5080|   157k|{
 5081|   157k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   157k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   157k|                                  needs_context_tag>) {
 5085|   157k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   157k|    }
 5087|   157k|    else {
 5088|   157k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   157k|            value, context_tag<Context>{}));
 5090|   157k|    }
 5091|   157k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4919|   157k|    {                                                                        \
 4920|   157k|        return val;                                                          \
 4921|   157k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|   109k|{
 8552|   109k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   109k|    auto result = vscan_impl(buffer, format, args);
 8555|   109k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.7k, False: 11.5k]
  |  |  ------------------
  ------------------
 8556|  97.7k|        return unexpected(result.error());
 8557|  97.7k|    }
 8558|  11.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   109k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4680|   237k|{
 4681|   237k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   237k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   237k|                  "\n"
 4685|   237k|                  "Unsupported range type given as input to a scanning "
 4686|   237k|                  "function.\n"
 4687|   237k|                  "A range needs to have a character type (value type) "
 4688|   237k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   237k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   237k|                  "to be included.\n"
 4691|   237k|                  "See the scnlib documentation for more details.");
 4692|   237k|    static_assert(
 4693|   237k|        !std::is_same_v<T, custom_char_traits>,
 4694|   237k|        "\n"
 4695|   237k|        "Unsupported range type given as input to a scanning "
 4696|   237k|        "function.\n"
 4697|   237k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   237k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   237k|        "not supported.");
 4700|   237k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   237k|                  "\n"
 4702|   237k|                  "Unsupported range type given as input to a scanning "
 4703|   237k|                  "function.\n"
 4704|   237k|                  "file_marker_found cannot be used as an "
 4705|   237k|                  "source range type to scn::scan.\n"
 4706|   237k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   237k|                  "and do not provide an explicit source range, "
 4708|   237k|                  "or use scn::scan with a FILE* directly.");
 4709|   237k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   237k|                  "\n"
 4711|   237k|                  "Unsupported range type given as input to a scanning "
 4712|   237k|                  "function.\n"
 4713|   237k|                  "In order to be scannable, a range needs to satisfy "
 4714|   237k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   237k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   237k|                  "\n"
 4717|   237k|                  "Unsupported range type given as input to a scanning "
 4718|   237k|                  "function.\n"
 4719|   237k|                  "A range needs to model forward_range and have a valid "
 4720|   237k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   237k|                  "Examples of scannable ranges are std::string, "
 4722|   237k|                  "std::string_view, "
 4723|   237k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   237k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   237k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   237k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|   237k|{
 4620|   237k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|   237k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|   237k|    }
 4623|   237k|    else {
 4624|   237k|        return invalid_char_type{};
 4625|   237k|    }
 4626|   237k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   237k|    {
 2826|   237k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   237k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   237k|    {
 2807|   237k|        return t.data();
 2808|   237k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3201|   237k|    {
 3202|   237k|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 360, False: 236k]
  ------------------
 3203|   237k|                   ? nullptr
 3204|   237k|                   : std::addressof(*ranges::begin(derived()));
 3205|   237k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   237k|    {
 2976|   237k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   237k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   237k|    {
 2949|   237k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   237k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|   375k|    {
 3310|   375k|        return m_iterator == m_sentinel;
 3311|   375k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3155|   473k|    {
 3156|   473k|        return static_cast<const D&>(*this);
 3157|   473k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   262k|    {
 2695|   262k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   262k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   262k|    {
 2676|   262k|        return decay_copy(t.begin());
 2677|   262k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|  5.80M|    {
 3301|  5.80M|        return m_iterator;
 3302|  5.80M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|   237k|    {
 2901|   237k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|   237k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|   237k|    {
 2867|   237k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|   237k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|   974k|    {
 3317|   974k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|   974k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   211k|    {
 1447|   211k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   211k|    {
  443|   211k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   237k|    {
 1148|   237k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|  25.3k|{
 5884|  25.3k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  25.3k|                      ranges::iterator_t<SourceRange>>) {
 5886|  25.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  25.3k|    }
 5888|  25.3k|    else {
 5889|  25.3k|        auto it = ranges::begin(source);
 5890|  25.3k|        while (n > 0) {
 5891|  25.3k|            --n;
 5892|  25.3k|            ++it;
 5893|  25.3k|        }
 5894|  25.3k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  25.3k|    }
 5896|  25.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   269k|    {
 2695|   269k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   269k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   269k|    {
 2676|   269k|        return decay_copy(t.begin());
 2677|   269k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5870|  25.3k|{
 5871|  25.3k|    return ranges::end(source);
 5872|  25.3k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  25.3k|    {
 2752|  25.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  25.3k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  25.3k|    {
 2734|  25.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  25.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  25.3k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|  2.86M|    {
 3305|  2.86M|        return m_sentinel;
 3306|  2.86M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  25.3k|    {
 1401|  25.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  25.3k|    {
  433|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  72.7k|    {
 7936|  72.7k|        return m_str;
 7937|  72.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   145k|    {
 5387|   145k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5339|   145k|    {
 5340|   145k|        return m_argptrs;
 5341|   145k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|   436k|    {
 5439|   436k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  72.7k|{
 8781|  72.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.1k, False: 7.61k]
  |  |  ------------------
  ------------------
 8782|  65.1k|        return unexpected(result.error());
 8783|  65.1k|    }
 8784|  7.61k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.61k|    static_cast<    \
  |  |  929|  7.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.61k|    static_cast<    \
  |  |  929|  7.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  72.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|   237k|    {
 1569|   237k|        return has_value();
 1570|   237k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   474k|    {
  481|   474k|        return m_has_value;
  482|   474k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|   211k|    {
 1575|   211k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   211k|        return this->get_unexpected().error();
 1577|   211k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   211k|    {
  464|   211k|        return m_unexpected;
  465|   211k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  70.5k|    {
 1447|  70.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  70.5k|    {
  443|  70.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  78.9k|    {
 1148|  78.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  23.0k|    {
 1624|  23.0k|        return value();
 1625|  23.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  25.3k|    {
 1598|  25.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  25.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  25.3k|        return this->get_value();
 1600|  25.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  25.3k|    {
  447|  25.3k|        return m_value;
  448|  25.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5790|  8.36k|    {
 5791|  8.36k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|  25.3k|    {
 5642|  25.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  8.36k|    {
 1401|  8.36k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  8.36k|    {
  433|  8.36k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5334|   145k|    {
 5335|   145k|        return m_args;
 5336|   145k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   242k|    {
 2752|   242k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   242k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   242k|    {
 2734|   242k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   242k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|  2.04M|    {
 3287|  2.04M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|   436k|{
 7657|   436k|    return s;
 7658|   436k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|   436k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  72.7k|    {
 7932|  72.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  78.9k|    {
 1569|  78.9k|        return has_value();
 1570|  78.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.2k|    {
  481|  87.2k|        return m_has_value;
  482|  87.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1643|  8.36k|    {
 1644|  8.36k|        return &value();
 1645|  8.36k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  8.36k|    {
 1598|  8.36k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.36k|        return this->get_value();
 1600|  8.36k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.36k|    {
  447|  8.36k|        return m_value;
  448|  8.36k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5658|  25.3k|    {
 5659|  25.3k|        return ranges::begin(m_range);
 5660|  25.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|   109k|{
 8568|   109k|#if !SCN_DISABLE_LOCALE
 8569|   109k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   109k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   109k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   109k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   109k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.7k, False: 11.5k]
  |  |  ------------------
  ------------------
 8576|  97.7k|        return unexpected(result.error());
 8577|  97.7k|    }
 8578|  11.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   109k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|  12.3k|{
 5116|  12.3k|    check_scan_arg_types<T>();
 5117|       |
 5118|  12.3k|    basic_scan_arg<Context> arg;
 5119|  12.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  12.3k|    arg.m_value = make_value<Context>(value);
 5121|  12.3k|    return arg;
 5122|  12.3k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|   473k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  18.5k|{
 8592|  18.5k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  18.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  18.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.2k, False: 2.27k]
  |  |  ------------------
  ------------------
 8596|  16.2k|        return unexpected(result.error());
 8597|  16.2k|    }
 8598|  2.27k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  18.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.27k|    {
 1634|  2.27k|        return std::move(value());
 1635|  2.27k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|   145k|{
 5357|   145k|    detail::check_scan_arg_types<Args...>();
 5358|   145k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   145k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|   145k|    {
 5310|   145k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   145k|    {
 5321|   145k|        return {detail::make_arg<
 5322|   145k|            kind, Context,
 5323|   145k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   145k|                                 typename Context::char_type>::value>(args)...};
 5325|   145k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|   145k|{
 5131|   145k|    return make_value<Context>(value).ref_value;
 5132|   145k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|   157k|{
 5081|   157k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   157k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   157k|                                  needs_context_tag>) {
 5085|   157k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   157k|    }
 5087|   157k|    else {
 5088|   157k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   157k|            value, context_tag<Context>{}));
 5090|   157k|    }
 5091|   157k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|   157k|    {                                                                        \
 4920|   157k|        return val;                                                          \
 4921|   157k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  72.8k|    {
 7936|  72.8k|        return m_str;
 7937|  72.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   145k|    {
 5387|   145k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|   145k|    {
 5340|   145k|        return m_argptrs;
 5341|   145k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  72.8k|{
 8781|  72.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.1k, False: 7.67k]
  |  |  ------------------
  ------------------
 8782|  65.1k|        return unexpected(result.error());
 8783|  65.1k|    }
 8784|  7.67k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.67k|    static_cast<    \
  |  |  929|  7.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.67k|    static_cast<    \
  |  |  929|  7.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  72.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  70.5k|    {
 1447|  70.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  70.5k|    {
  443|  70.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  78.9k|    {
 1148|  78.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5790|  8.43k|    {
 5791|  8.43k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  8.43k|    {
 1401|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  8.43k|    {
  433|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|   145k|    {
 5335|   145k|        return m_args;
 5336|   145k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  72.8k|    {
 7932|  72.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  78.9k|    {
 1569|  78.9k|        return has_value();
 1570|  78.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.4k|    {
  481|  87.4k|        return m_has_value;
  482|  87.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1643|  8.43k|    {
 1644|  8.43k|        return &value();
 1645|  8.43k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  8.43k|    {
 1598|  8.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.43k|        return this->get_value();
 1600|  8.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.43k|    {
  447|  8.43k|        return m_value;
  448|  8.43k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|  12.3k|{
 5116|  12.3k|    check_scan_arg_types<T>();
 5117|       |
 5118|  12.3k|    basic_scan_arg<Context> arg;
 5119|  12.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  12.3k|    arg.m_value = make_value<Context>(value);
 5121|  12.3k|    return arg;
 5122|  12.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5356|   145k|{
 5357|   145k|    detail::check_scan_arg_types<Args...>();
 5358|   145k|    return detail::scan_arg_store<Context, Args...>{};
 5359|   145k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5309|   145k|    {
 5310|   145k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|   145k|    {
 5321|   145k|        return {detail::make_arg<
 5322|   145k|            kind, Context,
 5323|   145k|            mapped_type_constant<remove_cvref_t<A>,
 5324|   145k|                                 typename Context::char_type>::value>(args)...};
 5325|   145k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|   145k|{
 5131|   145k|    return make_value<Context>(value).ref_value;
 5132|   145k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5080|   158k|{
 5081|   158k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|   158k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|   158k|                                  needs_context_tag>) {
 5085|   158k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|   158k|    }
 5087|   158k|    else {
 5088|   158k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|   158k|            value, context_tag<Context>{}));
 5090|   158k|    }
 5091|   158k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4919|   158k|    {                                                                        \
 4920|   158k|        return val;                                                          \
 4921|   158k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|  72.9k|    {
 7936|  72.9k|        return m_str;
 7937|  72.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|   145k|    {
 5387|   145k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5339|   145k|    {
 5340|   145k|        return m_argptrs;
 5341|   145k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  72.9k|{
 8781|  72.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.1k, False: 7.77k]
  |  |  ------------------
  ------------------
 8782|  65.1k|        return unexpected(result.error());
 8783|  65.1k|    }
 8784|  7.77k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.77k|    static_cast<    \
  |  |  929|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.77k|    static_cast<    \
  |  |  929|  7.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  72.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  70.5k|    {
 1447|  70.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  70.5k|    {
  443|  70.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  79.1k|    {
 1148|  79.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5790|  8.54k|    {
 5791|  8.54k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  8.54k|    {
 1401|  8.54k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  8.54k|    {
  433|  8.54k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5334|   145k|    {
 5335|   145k|        return m_args;
 5336|   145k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  72.9k|    {
 7932|  72.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  79.1k|    {
 1569|  79.1k|        return has_value();
 1570|  79.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.6k|    {
  481|  87.6k|        return m_has_value;
  482|  87.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1643|  8.54k|    {
 1644|  8.54k|        return &value();
 1645|  8.54k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  8.54k|    {
 1598|  8.54k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.54k|        return this->get_value();
 1600|  8.54k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.54k|    {
  447|  8.54k|        return m_value;
  448|  8.54k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|  12.3k|{
 5116|  12.3k|    check_scan_arg_types<T>();
 5117|       |
 5118|  12.3k|    basic_scan_arg<Context> arg;
 5119|  12.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  12.3k|    arg.m_value = make_value<Context>(value);
 5121|  12.3k|    return arg;
 5122|  12.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   211k|    {
 2695|   211k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   211k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   211k|    {
 2676|   211k|        return decay_copy(t.begin());
 2677|   211k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1919|  1.81M|{
 1920|  1.81M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.81M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|   109k|{
 8552|   109k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|   109k|    auto result = vscan_impl(buffer, format, args);
 8555|   109k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.7k, False: 11.5k]
  |  |  ------------------
  ------------------
 8556|  97.7k|        return unexpected(result.error());
 8557|  97.7k|    }
 8558|  11.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|   109k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4680|   236k|{
 4681|   236k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   236k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   236k|                  "\n"
 4685|   236k|                  "Unsupported range type given as input to a scanning "
 4686|   236k|                  "function.\n"
 4687|   236k|                  "A range needs to have a character type (value type) "
 4688|   236k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   236k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   236k|                  "to be included.\n"
 4691|   236k|                  "See the scnlib documentation for more details.");
 4692|   236k|    static_assert(
 4693|   236k|        !std::is_same_v<T, custom_char_traits>,
 4694|   236k|        "\n"
 4695|   236k|        "Unsupported range type given as input to a scanning "
 4696|   236k|        "function.\n"
 4697|   236k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   236k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   236k|        "not supported.");
 4700|   236k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   236k|                  "\n"
 4702|   236k|                  "Unsupported range type given as input to a scanning "
 4703|   236k|                  "function.\n"
 4704|   236k|                  "file_marker_found cannot be used as an "
 4705|   236k|                  "source range type to scn::scan.\n"
 4706|   236k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   236k|                  "and do not provide an explicit source range, "
 4708|   236k|                  "or use scn::scan with a FILE* directly.");
 4709|   236k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   236k|                  "\n"
 4711|   236k|                  "Unsupported range type given as input to a scanning "
 4712|   236k|                  "function.\n"
 4713|   236k|                  "In order to be scannable, a range needs to satisfy "
 4714|   236k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   236k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   236k|                  "\n"
 4717|   236k|                  "Unsupported range type given as input to a scanning "
 4718|   236k|                  "function.\n"
 4719|   236k|                  "A range needs to model forward_range and have a valid "
 4720|   236k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   236k|                  "Examples of scannable ranges are std::string, "
 4722|   236k|                  "std::string_view, "
 4723|   236k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   236k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   236k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   236k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|   236k|{
 4651|   236k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|   236k|        return file_marker_found{};
 4653|   236k|    }
 4654|   236k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|   236k|        if constexpr (ranges::range<Range>) {
 4656|   236k|            return insufficient_range{};
 4657|   236k|        }
 4658|   236k|        else {
 4659|   236k|            return invalid_input_range{};
 4660|   236k|        }
 4661|   236k|    }
 4662|   236k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|   236k|        return invalid_char_type{};
 4664|   236k|    }
 4665|   236k|    else {
 4666|   236k|        return make_forward_scan_buffer(r);
 4667|   236k|    }
 4668|   236k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4484|   236k|{
 4485|   236k|    return basic_scan_forward_buffer_impl(range);
 4486|   236k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|   236k|    {
 4378|   236k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4352|   236k|    {
 4353|   236k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4121|   236k|    {
 4122|   236k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4036|   236k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   262k|    {
 2695|   262k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   262k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   262k|    {
 2676|   262k|        return decay_copy(t.begin());
 2677|   262k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3300|   287k|    {
 3301|   287k|        return m_iterator;
 3302|   287k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4381|  1.04M|    {
 4382|  1.04M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 138k, False: 909k]
  ------------------
 4383|   138k|            return false;
 4384|   138k|        }
 4385|   909k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 673k, False: 236k]
  ------------------
 4386|   673k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|   673k|                                          this->m_current_view.begin(),
 4388|   673k|                                          this->m_current_view.end());
 4389|   673k|        }
 4390|   909k|        m_latest = *m_cursor;
 4391|   909k|        ++m_cursor;
 4392|   909k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|   909k|        return true;
 4394|  1.04M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  1.04M|    {
 2752|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  1.04M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  1.04M|    {
 2734|  1.04M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  1.04M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3304|  1.07M|    {
 3305|  1.07M|        return m_sentinel;
 3306|  1.07M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4041|   236k|    {
 4042|   236k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   236k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|   236k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|   211k|    {
 1447|   211k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   211k|    {
  443|   211k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   236k|    {
 1148|   236k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|  25.2k|{
 5884|  25.2k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  25.2k|                      ranges::iterator_t<SourceRange>>) {
 5886|  25.2k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  25.2k|    }
 5888|  25.2k|    else {
 5889|  25.2k|        auto it = ranges::begin(source);
 5890|  25.2k|        while (n > 0) {
 5891|  25.2k|            --n;
 5892|  25.2k|            ++it;
 5893|  25.2k|        }
 5894|  25.2k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  25.2k|    }
 5896|  25.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  25.2k|    {
 2695|  25.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  25.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  25.2k|    {
 2676|  25.2k|        return decay_copy(t.begin());
 2677|  25.2k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5870|  25.2k|{
 5871|  25.2k|    return ranges::end(source);
 5872|  25.2k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  25.2k|    {
 2752|  25.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  25.2k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  25.2k|    {
 2734|  25.2k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  25.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  25.2k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|  25.2k|    {
 1401|  25.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  25.2k|    {
  433|  25.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  72.7k|    {
 7936|  72.7k|        return m_str;
 7937|  72.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  72.7k|{
 8781|  72.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.1k, False: 7.59k]
  |  |  ------------------
  ------------------
 8782|  65.1k|        return unexpected(result.error());
 8783|  65.1k|    }
 8784|  7.59k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.59k|    static_cast<    \
  |  |  929|  7.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.59k|    static_cast<    \
  |  |  929|  7.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  72.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1568|   236k|    {
 1569|   236k|        return has_value();
 1570|   236k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   473k|    {
  481|   473k|        return m_has_value;
  482|   473k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1574|   211k|    {
 1575|   211k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   211k|        return this->get_unexpected().error();
 1577|   211k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   211k|    {
  464|   211k|        return m_unexpected;
  465|   211k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  70.5k|    {
 1447|  70.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  70.5k|    {
  443|  70.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  78.9k|    {
 1148|  78.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|  23.0k|    {
 1624|  23.0k|        return value();
 1625|  23.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|  25.2k|    {
 1598|  25.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  25.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  25.2k|        return this->get_value();
 1600|  25.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  25.2k|    {
  447|  25.2k|        return m_value;
  448|  25.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5790|  8.33k|    {
 5791|  8.33k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5641|  25.2k|    {
 5642|  25.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  8.33k|    {
 1401|  8.33k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  8.33k|    {
  433|  8.33k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   236k|    {
 2752|   236k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   236k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   236k|    {
 2734|   236k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   236k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3286|   262k|    {
 3287|   262k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  72.7k|    {
 7932|  72.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  78.9k|    {
 1569|  78.9k|        return has_value();
 1570|  78.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.2k|    {
  481|  87.2k|        return m_has_value;
  482|  87.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1643|  8.33k|    {
 1644|  8.33k|        return &value();
 1645|  8.33k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  8.33k|    {
 1598|  8.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.33k|        return this->get_value();
 1600|  8.33k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.33k|    {
  447|  8.33k|        return m_value;
  448|  8.33k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5658|  25.2k|    {
 5659|  25.2k|        return ranges::begin(m_range);
 5660|  25.2k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|   109k|{
 8568|   109k|#if !SCN_DISABLE_LOCALE
 8569|   109k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|   109k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|   109k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|   109k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|   109k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.7k, False: 11.5k]
  |  |  ------------------
  ------------------
 8576|  97.7k|        return unexpected(result.error());
 8577|  97.7k|    }
 8578|  11.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|   109k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  18.5k|{
 8592|  18.5k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  18.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  18.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.2k, False: 2.26k]
  |  |  ------------------
  ------------------
 8596|  16.2k|        return unexpected(result.error());
 8597|  16.2k|    }
 8598|  2.26k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  18.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  2.26k|    {
 1634|  2.26k|        return std::move(value());
 1635|  2.26k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  72.7k|    {
 7936|  72.7k|        return m_str;
 7937|  72.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  72.7k|{
 8781|  72.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.1k, False: 7.65k]
  |  |  ------------------
  ------------------
 8782|  65.1k|        return unexpected(result.error());
 8783|  65.1k|    }
 8784|  7.65k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.65k|    static_cast<    \
  |  |  929|  7.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.65k|    static_cast<    \
  |  |  929|  7.65k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  72.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  70.5k|    {
 1447|  70.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  70.5k|    {
  443|  70.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  78.9k|    {
 1148|  78.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5790|  8.40k|    {
 5791|  8.40k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  8.40k|    {
 1401|  8.40k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  8.40k|    {
  433|  8.40k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  72.7k|    {
 7932|  72.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  78.9k|    {
 1569|  78.9k|        return has_value();
 1570|  78.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.3k|    {
  481|  87.3k|        return m_has_value;
  482|  87.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1643|  8.40k|    {
 1644|  8.40k|        return &value();
 1645|  8.40k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  8.40k|    {
 1598|  8.40k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.40k|        return this->get_value();
 1600|  8.40k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.40k|    {
  447|  8.40k|        return m_value;
  448|  8.40k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|  72.8k|    {
 7936|  72.8k|        return m_str;
 7937|  72.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  72.8k|{
 8781|  72.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.1k, False: 7.75k]
  |  |  ------------------
  ------------------
 8782|  65.1k|        return unexpected(result.error());
 8783|  65.1k|    }
 8784|  7.75k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.75k|    static_cast<    \
  |  |  929|  7.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  7.75k|    static_cast<    \
  |  |  929|  7.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  72.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|  70.5k|    {
 1447|  70.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  70.5k|    {
  443|  70.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  79.0k|    {
 1148|  79.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5790|  8.52k|    {
 5791|  8.52k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  8.52k|    {
 1401|  8.52k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  8.52k|    {
  433|  8.52k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  72.8k|    {
 7932|  72.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  79.0k|    {
 1569|  79.0k|        return has_value();
 1570|  79.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.6k|    {
  481|  87.6k|        return m_has_value;
  482|  87.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1643|  8.52k|    {
 1644|  8.52k|        return &value();
 1645|  8.52k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  8.52k|    {
 1598|  8.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.52k|        return this->get_value();
 1600|  8.52k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.52k|    {
  447|  8.52k|        return m_value;
  448|  8.52k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|  5.16M|    {
 3539|  5.16M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|  5.16M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  22.2M|    {
 3545|  22.2M|        return m_code == good;
 3546|  22.2M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|   488k|    {
 3556|   488k|        return m_code;
 3557|   488k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  96.5M|    {
 3301|  96.5M|        return m_iterator;
 3302|  96.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  7.58M|    {
 3301|  7.58M|        return m_iterator;
 3302|  7.58M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  3.44M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|   959k|    {
 6233|   959k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   959k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|   959k|            m_specs.localized = true;
 6235|   959k|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|   959k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  2.48M|    {
 6264|  2.48M|        m_specs.type = type;
 6265|  2.48M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  3.44M|    {
 6337|  3.44M|        return static_cast<bool>(m_error);
 6338|  3.44M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|   488k|{
 3580|   488k|    return a.code() == b;
 3581|   488k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|   488k|{
 3584|   488k|    return !(a == b);
 3585|   488k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|   959k|{
 7024|   959k|    switch (type) {
 7025|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 0, False: 959k]
  ------------------
 7026|      0|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 959k]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 959k]
  ------------------
 7030|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 0, False: 959k]
  ------------------
 7031|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 959k]
  ------------------
 7032|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 959k]
  ------------------
 7033|      0|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 959k]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 959k]
  ------------------
 7037|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 0, False: 959k]
  ------------------
 7038|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 959k]
  ------------------
 7039|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 959k]
  ------------------
 7040|      0|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 0, False: 959k]
  ------------------
 7043|      0|            return arg_type_category::pointer;
 7044|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 0, False: 959k]
  ------------------
 7045|      0|            return arg_type_category::boolean;
 7046|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 0, False: 959k]
  ------------------
 7047|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 0, False: 959k]
  ------------------
 7048|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 959k]
  ------------------
 7049|      0|            return arg_type_category::character;
 7050|       |
 7051|   298k|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 298k, False: 661k]
  ------------------
 7052|   625k|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 327k, False: 631k]
  ------------------
 7053|   959k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 333k, False: 625k]
  ------------------
 7054|   959k|            return arg_type_category::floating;
 7055|       |
 7056|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 0, False: 959k]
  ------------------
 7057|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 0, False: 959k]
  ------------------
 7058|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 0, False: 959k]
  ------------------
 7059|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 0, False: 959k]
  ------------------
 7060|      0|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 959k]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 959k]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|   959k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|   959k|            SCN_CLANG_POP
 7071|   959k|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|   959k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  4.19M|    {
 2867|  4.19M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  4.19M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2900|  4.19M|    {
 2901|  4.19M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  4.19M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2923|  4.19M|    {
 2924|  4.19M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|  4.19M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2932|  4.19M|    {
 2933|  4.19M|        return fn::impl(std::forward<T>(t));
 2934|  4.19M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3624|  1.28k|{
 3625|  1.28k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.28k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  2.22k|{
 3625|  2.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.22k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3624|  29.3k|{
 3625|  29.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  29.3k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|  3.44M|{
 7154|  3.44M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 2.48M, False: 959k]
  ------------------
 7155|  3.44M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 0, False: 2.48M]
  ------------------
 7156|  2.48M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 0, False: 2.48M]
  ------------------
 7157|      0|        SCN_UNLIKELY_ATTR
 7158|      0|        return handler.on_error("Invalid type specifier for float type");
 7159|      0|    }
 7160|  3.44M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4165|   628M|    {
 4166|   628M|        return m_end == nullptr;
 4167|   628M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  1.67M|{
 3686|  1.67M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  1.67M|                                          const CharT*, const CharT*>) {
 3688|  1.67M|        return {first, last};
 3689|  1.67M|    }
 3690|  1.67M|    else {
 3691|  1.67M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  1.67M|    }
 3693|  1.67M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4181|  8.20M|    {
 4182|  8.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 8.20M]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|  8.20M|        return parent()->get_segment_starting_at(position());
 4188|  8.20M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4175|   350M|    {
 4176|   350M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   350M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   350M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|   350M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|   350M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4071|  8.20M|    {
 4072|  8.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  8.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60M, False: 4.59M]
  |  |  ------------------
  ------------------
 4073|  8.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  3.60M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  3.60M|        }
 4076|  4.59M|        const auto start = pos - m_putback_buffer.size();
 4077|  4.59M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  4.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|  4.59M|        return m_current_view.substr(start);
 4079|  4.59M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4170|  5.71M|    {
 4171|  5.71M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  5.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|  5.71M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|  5.71M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4160|  15.0M|    {
 4161|  15.0M|        return m_position;
 4162|  15.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4093|  6.48M|    {
 4094|  6.48M|        return m_is_contiguous;
 4095|  6.48M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4165|  21.3M|    {
 4166|  21.3M|        return m_end == nullptr;
 4167|  21.3M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|  23.6k|{
 3686|  23.6k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|  23.6k|                                          const CharT*, const CharT*>) {
 3688|  23.6k|        return {first, last};
 3689|  23.6k|    }
 3690|  23.6k|    else {
 3691|  23.6k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|  23.6k|    }
 3693|  23.6k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4181|   288k|    {
 4182|   288k|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 288k]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|   288k|        return parent()->get_segment_starting_at(position());
 4188|   288k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4175|  11.5M|    {
 4176|  11.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  11.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  11.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  11.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4071|   288k|    {
 4072|   288k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.6k, False: 239k]
  |  |  ------------------
  ------------------
 4073|   288k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|  48.6k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|  48.6k|        }
 4076|   239k|        const auto start = pos - m_putback_buffer.size();
 4077|   239k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|   239k|        return m_current_view.substr(start);
 4079|   239k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4170|   598k|    {
 4171|   598k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   598k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   598k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|   598k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|   598k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4160|   897k|    {
 4161|   897k|        return m_position;
 4162|   897k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4093|   710k|    {
 4094|   710k|        return m_is_contiguous;
 4095|   710k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|  19.9M|    {
 3151|  19.9M|        return static_cast<D&>(*this);
 3152|  19.9M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  9.97M|    {
 2949|  9.97M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  9.97M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  9.97M|    {
 2976|  9.97M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  9.97M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|  9.97M|    {
 3192|  9.97M|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 18.1k, False: 9.95M]
  ------------------
 3193|  9.97M|                   ? nullptr
 3194|  9.97M|                   : std::addressof(*ranges::begin(derived()));
 3195|  9.97M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|   276k|    {
 3151|   276k|        return static_cast<D&>(*this);
 3152|   276k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   138k|    {
 2949|   138k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   138k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   138k|    {
 2976|   138k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   138k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|   138k|    {
 3192|   138k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 0, False: 138k]
  ------------------
 3193|   138k|                   ? nullptr
 3194|   138k|                   : std::addressof(*ranges::begin(derived()));
 3195|   138k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8129|  1.54M|    {
 8130|  1.54M|        return ranges::subrange{begin(), end()};
 8131|  1.54M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8113|  4.56M|    {
 8114|  4.56M|        return m_current;
 8115|  4.56M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8121|  1.54M|    {
 8122|  1.54M|        return ranges::default_sentinel;
 8123|  1.54M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  23.9M|    {
 3287|  23.9M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|  7.38M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.16M|    {
 1808|  2.16M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.16M|                                            std::forward<F>(f));
 1810|  2.16M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  2.16M|{
 1294|  2.16M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.16M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.16M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.16M|            return result(*std::forward<Exp>(exp));
 1298|  2.16M|        }
 1299|       |
 1300|  2.16M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.16M|        return result(unexpect, monostate{});
 1302|  2.16M|    }
 1303|  2.16M|    else {
 1304|  2.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.13M, False: 27.2k]
  |  |  ------------------
  ------------------
 1306|  2.16M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.16M|                   : result(unexpect,
 1308|  27.2k|                            trivial_invoke(std::forward<F>(f),
 1309|  27.2k|                                           std::forward<Exp>(exp).error()));
 1310|  2.16M|    }
 1311|  2.16M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  23.1M|    {
  481|  23.1M|        return m_has_value;
  482|  23.1M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|  7.79M|    {
 1634|  7.79M|        return std::move(value());
 1635|  7.79M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|  9.01M|    {
 1598|  9.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  9.01M|        return this->get_value();
 1600|  9.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  9.01M|    {
  447|  9.01M|        return m_value;
  448|  9.01M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|  8.27M|    {
 1401|  8.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  8.27M|    {
  433|  8.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  12.2M|    {
 1148|  12.2M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|  56.2k|{
 1182|  56.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  56.2k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  77.1k|    {
 1585|  77.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  77.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  77.1k|        return std::move(this->get_unexpected().error());
 1587|  77.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|   104k|    {
  464|   104k|        return m_unexpected;
  465|   104k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   468k|    {
  357|   468k|        return m_unexpected;
  358|   468k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.09M|    {
 1457|  2.09M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.34M|    {
  443|  2.34M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8129|   181k|    {
 8130|   181k|        return ranges::subrange{begin(), end()};
 8131|   181k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8113|   381k|    {
 8114|   381k|        return m_current;
 8115|   381k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8121|   181k|    {
 8122|   181k|        return ranges::default_sentinel;
 8123|   181k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  1.75M|    {
 3287|  1.75M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   236k|    {
 1808|   236k|        return detail::transform_error_impl(std::move(*this),
 1809|   236k|                                            std::forward<F>(f));
 1810|   236k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   236k|{
 1294|   236k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   236k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   236k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   236k|            return result(*std::forward<Exp>(exp));
 1298|   236k|        }
 1299|       |
 1300|   236k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   236k|        return result(unexpect, monostate{});
 1302|   236k|    }
 1303|   236k|    else {
 1304|   236k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   236k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   236k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 234k, False: 1.96k]
  |  |  ------------------
  ------------------
 1306|   236k|                   ? result(*std::forward<Exp>(exp))
 1307|   236k|                   : result(unexpect,
 1308|  1.96k|                            trivial_invoke(std::forward<F>(f),
 1309|  1.96k|                                           std::forward<Exp>(exp).error()));
 1310|   236k|    }
 1311|   236k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  1.95M|    {
  481|  1.95M|        return m_has_value;
  482|  1.95M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|   787k|    {
 1634|   787k|        return std::move(value());
 1635|   787k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|   789k|    {
 1598|   789k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   789k|        return this->get_value();
 1600|   789k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   789k|    {
  447|   789k|        return m_value;
  448|   789k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|   311k|    {
 1401|   311k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   311k|    {
  433|   311k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.35M|    {
 1148|  1.35M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|  48.0k|    {
 1585|  48.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  48.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  48.0k|        return std::move(this->get_unexpected().error());
 1587|  48.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  48.7k|    {
  464|  48.7k|        return m_unexpected;
  465|  48.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|   445k|    {
 1457|   445k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.02M|    {
  443|  1.02M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   177k|    {
  343|   177k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   177k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   177k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   227k|    {
 1447|   227k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  2.32M|    {
  443|  2.32M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  12.3M|    {
 1148|  12.3M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  8.47M|    {
 1401|  8.47M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  8.47M|    {
  433|  8.47M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|  14.5M|    {
 1569|  14.5M|        return has_value();
 1570|  14.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  22.7M|    {
  481|  22.7M|        return m_has_value;
  482|  22.7M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|   278k|    {
 1575|   278k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   278k|        return this->get_unexpected().error();
 1577|   278k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   278k|    {
  464|   278k|        return m_unexpected;
  465|   278k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  6.38M|    {
 1634|  6.38M|        return std::move(value());
 1635|  6.38M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  7.92M|    {
 1598|  7.92M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  7.92M|        return this->get_value();
 1600|  7.92M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  7.92M|    {
  447|  7.92M|        return m_value;
  448|  7.92M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   470k|    {
 1447|   470k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   803k|    {
  443|   803k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.35M|    {
 1148|  1.35M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|   536k|    {
 1401|   536k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   536k|    {
  433|   536k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  1.59M|    {
 1569|  1.59M|        return has_value();
 1570|  1.59M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  2.58M|    {
  481|  2.58M|        return m_has_value;
  482|  2.58M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|   568k|    {
 1575|   568k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   568k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   568k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   568k|        return this->get_unexpected().error();
 1577|   568k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   568k|    {
  464|   568k|        return m_unexpected;
  465|   568k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|   398k|    {
 1634|   398k|        return std::move(value());
 1635|   398k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|   417k|    {
 1598|   417k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   417k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   417k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   417k|        return this->get_value();
 1600|   417k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   417k|    {
  447|   417k|        return m_value;
  448|   417k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  2.19M|    {
 1808|  2.19M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.19M|                                            std::forward<F>(f));
 1810|  2.19M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  2.19M|{
 1294|  2.19M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.19M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.19M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.19M|            return result(*std::forward<Exp>(exp));
 1298|  2.19M|        }
 1299|       |
 1300|  2.19M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.19M|        return result(unexpect, monostate{});
 1302|  2.19M|    }
 1303|  2.19M|    else {
 1304|  2.19M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.19M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.16M, False: 25.0k]
  |  |  ------------------
  ------------------
 1306|  2.19M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.19M|                   : result(unexpect,
 1308|  25.0k|                            trivial_invoke(std::forward<F>(f),
 1309|  25.0k|                                           std::forward<Exp>(exp).error()));
 1310|  2.19M|    }
 1311|  2.19M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  8.44M|    {
  481|  8.44M|        return m_has_value;
  482|  8.44M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  2.16M|    {
 1634|  2.16M|        return std::move(value());
 1635|  2.16M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  2.99M|    {
 1598|  2.99M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.99M|        return this->get_value();
 1600|  2.99M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  2.99M|    {
  447|  2.99M|        return m_value;
  448|  2.99M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|  25.0k|    {
 1585|  25.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  25.0k|        return std::move(this->get_unexpected().error());
 1587|  25.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  31.8k|    {
  464|  31.8k|        return m_unexpected;
  465|  31.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  2.09M|    {
 1457|  2.09M|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|  15.3M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   253k|    {
 1447|   253k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4209|  52.7M|    {
 4210|  52.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  52.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  52.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 52.7M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  52.7M|        auto res = read_at_position();
 4219|  52.7M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  52.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  52.7M|        return parent()->get_character_at(m_position);
 4221|  52.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4274|   206M|    {
 4275|   206M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   206M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|   206M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 206M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|   206M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   206M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 178M, False: 27.9M]
  |  |  ------------------
  ------------------
 4282|   178M|            return true;
 4283|   178M|        }
 4284|       |
 4285|  55.4M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 27.9M, False: 27.5M]
  ------------------
 4286|  27.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 399k, False: 27.5M]
  ------------------
 4287|   399k|                return false;
 4288|   399k|            }
 4289|  27.9M|        }
 4290|  27.5M|        return true;
 4291|  27.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4051|   267M|    {
 4052|   267M|        return m_putback_buffer.size() + m_current_view.size();
 4053|   267M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4082|  52.7M|    {
 4083|  52.7M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  52.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.9M, False: 19.8M]
  |  |  ------------------
  ------------------
 4084|  52.7M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  32.9M|            return m_putback_buffer[pos];
 4086|  32.9M|        }
 4087|  19.8M|        const auto start = pos - m_putback_buffer.size();
 4088|  19.8M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  19.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|  19.8M|        return m_current_view[start];
 4090|  19.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4195|   105M|    {
 4196|   105M|        ++m_position;
 4197|   105M|        (void)read_at_position();
 4198|   105M|        return *this;
 4199|   105M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4244|  50.4M|    {
 4245|  50.4M|        return !(lhs == rhs);
 4246|  50.4M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4239|  56.0M|    {
 4240|  56.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 56.0M, False: 0]
  |  Branch (4240:46): [True: 7.24M, False: 48.8M]
  ------------------
 4241|  56.0M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  19.1M|    {
 4251|  19.1M|        return x.is_at_end();
 4252|  19.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4294|  47.5M|    {
 4295|  47.5M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 47.5M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  47.5M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 47.5M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  47.5M|        return !read_at_position();
 4302|  47.5M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  13.9M|    {
 1401|  13.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  13.9M|    {
  433|  13.9M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.0M|    {
 1148|  14.0M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|   142k|    {
  343|   142k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   142k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   142k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|   104k|    {
 1447|   104k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   104k|    {
  443|   104k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   234k|    {
  352|   234k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   234k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   234k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|  6.18M|    {
 1569|  6.18M|        return has_value();
 1570|  6.18M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1623|  1.22M|    {
 1624|  1.22M|        return value();
 1625|  1.22M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  91.7k|    {
  343|  91.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  91.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  91.7k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  20.2k|    {
 1447|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  20.2k|    {
  443|  20.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.99M|    {
 1148|  2.99M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.97M|    {
 1401|  2.97M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  2.97M|    {
  433|  2.97M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|  2.99M|    {
 1569|  2.99M|        return has_value();
 1570|  2.99M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.99M|    {
  481|  5.99M|        return m_has_value;
  482|  5.99M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  20.2k|    {
 1575|  20.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  20.2k|        return this->get_unexpected().error();
 1577|  20.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  20.2k|    {
  464|  20.2k|        return m_unexpected;
  465|  20.2k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.97M|    {
 1634|  2.97M|        return std::move(value());
 1635|  2.97M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.97M|    {
 1598|  2.97M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.97M|        return this->get_value();
 1600|  2.97M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.97M|    {
  447|  2.97M|        return m_value;
  448|  2.97M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  67.7M|    {
 3305|  67.7M|        return m_sentinel;
 3306|  67.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  89.8k|    {
  343|  89.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  89.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  89.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  18.4M|    {
  357|  18.4M|        return m_unexpected;
  358|  18.4M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  5.07M|    {
  352|  5.07M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  5.07M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  22.5M|    {
  343|  22.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  22.5M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  22.5M|    {
  357|  22.5M|        return m_unexpected;
  358|  22.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  22.5M|    {
  352|  22.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  22.5M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|   142k|{
 1182|   142k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|   142k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  4.84M|    {
  343|  4.84M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.84M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  4.84M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1574|  27.7k|    {
 1575|  27.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  27.7k|        return this->get_unexpected().error();
 1577|  27.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  2.17M|    {
 1447|  2.17M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.22M|    {
  443|  2.22M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  23.9M|    {
 1148|  23.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1400|  1.23M|    {
 1401|  1.23M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.23M|    {
  433|  1.23M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  12.1M|    {
 1447|  12.1M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  12.1M|    {
  443|  12.1M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  26.0M|    {
 1569|  26.0M|        return has_value();
 1570|  26.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  45.7M|    {
  481|  45.7M|        return m_has_value;
  482|  45.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|  5.88M|    {
 1575|  5.88M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  5.88M|        return this->get_unexpected().error();
 1577|  5.88M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.88M|    {
  464|  5.88M|        return m_unexpected;
  465|  5.88M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|  2.35M|    {
 1401|  2.35M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.35M|    {
  433|  2.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.35M|    {
 1148|  2.35M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    491|    {
 1447|    491|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|    491|    {
  443|    491|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1623|  6.12M|    {
 1624|  6.12M|        return value();
 1625|  6.12M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|  11.7M|    {
 1598|  11.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  11.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  11.7M|        return this->get_value();
 1600|  11.7M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  11.7M|    {
  447|  11.7M|        return m_value;
  448|  11.7M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1568|   220k|    {
 1569|   220k|        return has_value();
 1570|   220k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  4.70M|    {
  481|  4.70M|        return m_has_value;
  482|  4.70M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.13M|    {
 1634|  2.13M|        return std::move(value());
 1635|  2.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.35M|    {
 1598|  2.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.35M|        return this->get_value();
 1600|  2.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.35M|    {
  447|  2.35M|        return m_value;
  448|  2.35M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  5.71M|    {
 1808|  5.71M|        return detail::transform_error_impl(std::move(*this),
 1809|  5.71M|                                            std::forward<F>(f));
 1810|  5.71M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  5.71M|{
 1294|  5.71M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  5.71M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  5.71M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  5.71M|            return result(*std::forward<Exp>(exp));
 1298|  5.71M|        }
 1299|       |
 1300|  5.71M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  5.71M|        return result(unexpect, monostate{});
 1302|  5.71M|    }
 1303|  5.71M|    else {
 1304|  5.71M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  5.71M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.71M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.66M, False: 49.9k]
  |  |  ------------------
  ------------------
 1306|  5.71M|                   ? result(*std::forward<Exp>(exp))
 1307|  5.71M|                   : result(unexpect,
 1308|  49.9k|                            trivial_invoke(std::forward<F>(f),
 1309|  49.9k|                                           std::forward<Exp>(exp).error()));
 1310|  5.71M|    }
 1311|  5.71M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|  8.33M|    {
 1401|  8.33M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  8.33M|    {
  433|  8.33M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1456|  49.9k|    {
 1457|  49.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|  5.66M|    {
 1634|  5.66M|        return std::move(value());
 1635|  5.66M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3300|  2.48M|    {
 3301|  2.48M|        return m_iterator;
 3302|  2.48M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3304|  2.48M|    {
 3305|  2.48M|        return m_sentinel;
 3306|  2.48M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  14.3M|    {
 1569|  14.3M|        return has_value();
 1570|  14.3M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  22.4M|    {
  481|  22.4M|        return m_has_value;
  482|  22.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|   335k|    {
 1575|   335k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   335k|        return this->get_unexpected().error();
 1577|   335k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   335k|    {
  464|   335k|        return m_unexpected;
  465|   335k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|  6.24M|    {
 1634|  6.24M|        return std::move(value());
 1635|  6.24M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|  7.80M|    {
 1598|  7.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  7.80M|        return this->get_value();
 1600|  7.80M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  7.80M|    {
  447|  7.80M|        return m_value;
  448|  7.80M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  3.89M|{
  322|  3.89M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  3.89M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  1.94M|    {
 3287|  1.94M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|  28.4M|    {
 4262|  28.4M|        return !x.is_at_end();
 4263|  28.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  1.58M|    {
 1401|  1.58M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.58M|    {
  433|  1.58M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  31.8k|    {
 1447|  31.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  31.8k|    {
  443|  31.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  5.41M|    {
 1148|  5.41M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  5.38M|    {
 1401|  5.38M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.38M|    {
  433|  5.38M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|  3.22M|    {
 1569|  3.22M|        return has_value();
 1570|  3.22M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|   827k|    {
 1624|   827k|        return value();
 1625|   827k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.96M|    {
 1148|  2.96M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  2.95M|    {
 1401|  2.95M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  2.95M|    {
  433|  2.95M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|  2.96M|    {
 1569|  2.96M|        return has_value();
 1570|  2.96M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.93M|    {
  481|  5.93M|        return m_has_value;
  482|  5.93M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|  18.0k|    {
 1575|  18.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  18.0k|        return this->get_unexpected().error();
 1577|  18.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.0k|    {
  464|  18.0k|        return m_unexpected;
  465|  18.0k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.95M|    {
 1634|  2.95M|        return std::move(value());
 1635|  2.95M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.95M|    {
 1598|  2.95M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.95M|        return this->get_value();
 1600|  2.95M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.95M|    {
  447|  2.95M|        return m_value;
  448|  2.95M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1574|  6.80k|    {
 1575|  6.80k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.80k|        return this->get_unexpected().error();
 1577|  6.80k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  2.19M|    {
 1447|  2.19M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.19M|    {
  443|  2.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  12.3M|    {
 1148|  12.3M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1400|   842k|    {
 1401|   842k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   842k|    {
  433|   842k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  8.42M|    {
 1447|  8.42M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  8.42M|    {
  443|  8.42M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|  14.5M|    {
 1569|  14.5M|        return has_value();
 1570|  14.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  24.8M|    {
  481|  24.8M|        return m_has_value;
  482|  24.8M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|  5.79M|    {
 1575|  5.79M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  5.79M|        return this->get_unexpected().error();
 1577|  5.79M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.79M|    {
  464|  5.79M|        return m_unexpected;
  465|  5.79M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  2.24M|    {
 1401|  2.24M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.24M|    {
  433|  2.24M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.24M|    {
 1148|  2.24M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|    156|    {
 1447|    156|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|    156|    {
  443|    156|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1623|  2.38M|    {
 1624|  2.38M|        return value();
 1625|  2.38M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  2.38M|    {
 1598|  2.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.38M|        return this->get_value();
 1600|  2.38M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  2.38M|    {
  447|  2.38M|        return m_value;
  448|  2.38M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  71.5k|    {
 1569|  71.5k|        return has_value();
 1570|  71.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  4.48M|    {
  481|  4.48M|        return m_has_value;
  482|  4.48M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.16M|    {
 1634|  2.16M|        return std::move(value());
 1635|  2.16M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.24M|    {
 1598|  2.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.24M|        return this->get_value();
 1600|  2.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.24M|    {
  447|  2.24M|        return m_value;
  448|  2.24M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|   923k|    {
 1401|   923k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   923k|    {
  433|   923k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  4.19M|    {
 2826|  4.19M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  4.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  4.19M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  4.19M|    {
 2807|  4.19M|        return t.data();
 2808|  4.19M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  1.57M|    {
 1401|  1.57M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.57M|    {
  433|  1.57M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|   957k|    {
 1447|   957k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   957k|    {
  443|   957k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  13.5M|    {
 1148|  13.5M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  12.3M|    {
 1401|  12.3M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  12.3M|    {
  433|  12.3M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1633|  8.38M|    {
 1634|  8.38M|        return std::move(value());
 1635|  8.38M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|  4.91M|{
 1182|  4.91M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  4.91M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|  2.13M|    {
 1808|  2.13M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.13M|                                            std::forward<F>(f));
 1810|  2.13M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|  2.13M|{
 1294|  2.13M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.13M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.13M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.13M|            return result(*std::forward<Exp>(exp));
 1298|  2.13M|        }
 1299|       |
 1300|  2.13M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.13M|        return result(unexpect, monostate{});
 1302|  2.13M|    }
 1303|  2.13M|    else {
 1304|  2.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.13M, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.13M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.13M|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.13M|    }
 1311|  2.13M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  2.13M|    {
 1401|  2.13M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.13M|    {
  433|  2.13M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.13M|    {
 1148|  2.13M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.13M|    {
 1569|  2.13M|        return has_value();
 1570|  2.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.26M|    {
  481|  4.26M|        return m_has_value;
  482|  4.26M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.13M|    {
 1634|  2.13M|        return std::move(value());
 1635|  2.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.13M|    {
 1598|  2.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.13M|        return this->get_value();
 1600|  2.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.13M|    {
  447|  2.13M|        return m_value;
  448|  2.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|  2.06M|    {
 1794|  2.06M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  2.06M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|  2.06M|{
 1294|  2.06M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.06M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.06M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.06M|            return result(*std::forward<Exp>(exp));
 1298|  2.06M|        }
 1299|       |
 1300|  2.06M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.06M|        return result(unexpect, monostate{});
 1302|  2.06M|    }
 1303|  2.06M|    else {
 1304|  2.06M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.06M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.06M]
  |  |  ------------------
  ------------------
 1306|  2.06M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.06M|                   : result(unexpect,
 1308|  2.06M|                            trivial_invoke(std::forward<F>(f),
 1309|  2.06M|                                           std::forward<Exp>(exp).error()));
 1310|  2.06M|    }
 1311|  2.06M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  1.55M|    {
 1624|  1.55M|        return value();
 1625|  1.55M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|   515k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1643|   219k|    {
 1644|   219k|        return &value();
 1645|   219k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|  1.49M|    {
 2695|  1.49M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.49M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|  1.49M|    {
 2676|  1.49M|        return decay_copy(t.begin());
 2677|  1.49M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|  1.49M|{
 1920|  1.49M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.49M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|   931k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|  2.16M|    {
 1808|  2.16M|        return detail::transform_error_impl(std::move(*this),
 1809|  2.16M|                                            std::forward<F>(f));
 1810|  2.16M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|  2.16M|{
 1294|  2.16M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.16M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.16M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.16M|            return result(*std::forward<Exp>(exp));
 1298|  2.16M|        }
 1299|       |
 1300|  2.16M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.16M|        return result(unexpect, monostate{});
 1302|  2.16M|    }
 1303|  2.16M|    else {
 1304|  2.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.16M, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.16M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.16M|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.16M|    }
 1311|  2.16M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.16M|    {
 1401|  2.16M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.16M|    {
  433|  2.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.16M|    {
 1148|  2.16M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.16M|    {
 1569|  2.16M|        return has_value();
 1570|  2.16M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.33M|    {
  481|  4.33M|        return m_has_value;
  482|  4.33M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.16M|    {
 1634|  2.16M|        return std::move(value());
 1635|  2.16M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.16M|    {
 1598|  2.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.16M|        return this->get_value();
 1600|  2.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.16M|    {
  447|  2.16M|        return m_value;
  448|  2.16M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|  2.07M|    {
 1794|  2.07M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  2.07M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|  2.07M|{
 1294|  2.07M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.07M|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.07M|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.07M|            return result(*std::forward<Exp>(exp));
 1298|  2.07M|        }
 1299|       |
 1300|  2.07M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.07M|        return result(unexpect, monostate{});
 1302|  2.07M|    }
 1303|  2.07M|    else {
 1304|  2.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 1306|  2.07M|                   ? result(*std::forward<Exp>(exp))
 1307|  2.07M|                   : result(unexpect,
 1308|  2.07M|                            trivial_invoke(std::forward<F>(f),
 1309|  2.07M|                                           std::forward<Exp>(exp).error()));
 1310|  2.07M|    }
 1311|  2.07M|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|  2.07M|    {
 3619|  2.07M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  1.53M|    {
 1624|  1.53M|        return value();
 1625|  1.53M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1643|  71.4k|    {
 1644|  71.4k|        return &value();
 1645|  71.4k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|  2.06M|    {
 3619|  2.06M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   583k|    {
 1447|   583k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4209|  1.92M|    {
 4210|  1.92M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  1.92M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 1.92M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  1.92M|        auto res = read_at_position();
 4219|  1.92M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  1.92M|        return parent()->get_character_at(m_position);
 4221|  1.92M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4274|  6.36M|    {
 4275|  6.36M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  6.36M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 6.36M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  6.36M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  6.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.32M, False: 1.04M]
  |  |  ------------------
  ------------------
 4282|  5.32M|            return true;
 4283|  5.32M|        }
 4284|       |
 4285|  1.95M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 1.04M, False: 909k]
  ------------------
 4286|  1.04M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 138k, False: 909k]
  ------------------
 4287|   138k|                return false;
 4288|   138k|            }
 4289|  1.04M|        }
 4290|   909k|        return true;
 4291|  1.04M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4051|  8.92M|    {
 4052|  8.92M|        return m_putback_buffer.size() + m_current_view.size();
 4053|  8.92M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4082|  1.92M|    {
 4083|  1.92M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60M, False: 315k]
  |  |  ------------------
  ------------------
 4084|  1.92M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  1.60M|            return m_putback_buffer[pos];
 4086|  1.60M|        }
 4087|   315k|        const auto start = pos - m_putback_buffer.size();
 4088|   315k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|   315k|        return m_current_view[start];
 4090|   315k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4195|  2.28M|    {
 4196|  2.28M|        ++m_position;
 4197|  2.28M|        (void)read_at_position();
 4198|  2.28M|        return *this;
 4199|  2.28M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4244|   683k|    {
 4245|   683k|        return !(lhs == rhs);
 4246|   683k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4239|   967k|    {
 4240|   967k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 967k, False: 0]
  |  Branch (4240:46): [True: 303k, False: 664k]
  ------------------
 4241|   967k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  1.59M|    {
 4251|  1.59M|        return x.is_at_end();
 4252|  1.59M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4294|  2.16M|    {
 4295|  2.16M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 2.16M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  2.16M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 2.16M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  2.16M|        return !read_at_position();
 4302|  2.16M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   565k|{
 3778|   565k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   565k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   565k|    }
 3781|   565k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   565k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   565k|    }
 3784|   565k|    else {
 3785|       |        // utf-32
 3786|   565k|        static_assert(sizeof(U) == 4);
 3787|   565k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   565k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   565k|        return 1;
 3789|   565k|    }
 3790|   565k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  1.07M|    {
 1401|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.07M|    {
  433|  1.07M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.12M|    {
 1148|  1.12M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  48.7k|    {
 1447|  48.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  48.7k|    {
  443|  48.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|   284k|    {
 1569|   284k|        return has_value();
 1570|   284k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1623|  1.83k|    {
 1624|  1.83k|        return value();
 1625|  1.83k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   565k|{
 3984|   565k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   565k|        return decode_utf8_code_point_exhaustive(input);
 3986|   565k|    }
 3987|   565k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   565k|        return decode_utf16_code_point_exhaustive(input);
 3989|   565k|    }
 3990|   565k|    else {
 3991|   565k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   565k|        auto cp = static_cast<char32_t>(input.front());
 3993|   565k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 206k, False: 359k]
  |  |  ------------------
  ------------------
 3994|   206k|            return invalid_code_point;
 3995|   206k|        }
 3996|   359k|        return cp;
 3997|   565k|    }
 3998|   565k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  1.47k|    {
 1447|  1.47k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.47k|    {
  443|  1.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   199k|    {
 1148|   199k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   198k|    {
 1401|   198k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   198k|    {
  433|   198k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|   199k|    {
 1569|   199k|        return has_value();
 1570|   199k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   399k|    {
  481|   399k|        return m_has_value;
  482|   399k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|  1.47k|    {
 1575|  1.47k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.47k|        return this->get_unexpected().error();
 1577|  1.47k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.47k|    {
  464|  1.47k|        return m_unexpected;
  465|  1.47k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   198k|    {
 1634|   198k|        return std::move(value());
 1635|   198k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   198k|    {
 1598|   198k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   198k|        return this->get_value();
 1600|   198k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   198k|    {
  447|   198k|        return m_value;
  448|   198k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  3.49M|    {
 3305|  3.49M|        return m_sentinel;
 3306|  3.49M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1574|    660|    {
 1575|    660|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    660|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    660|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    660|        return this->get_unexpected().error();
 1577|    660|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|   281k|    {
 1447|   281k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   327k|    {
  443|   327k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.98M|    {
 1148|  1.98M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1400|  1.83k|    {
 1401|  1.83k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.83k|    {
  433|  1.83k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  1.07M|    {
 1447|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.07M|    {
  443|  1.07M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  2.21M|    {
 1569|  2.21M|        return has_value();
 1570|  2.21M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  4.22M|    {
  481|  4.22M|        return m_has_value;
  482|  4.22M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|   960k|    {
 1575|   960k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   960k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   960k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   960k|        return this->get_unexpected().error();
 1577|   960k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   960k|    {
  464|   960k|        return m_unexpected;
  465|   960k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|   236k|    {
 1401|   236k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   236k|    {
  433|   236k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   236k|    {
 1148|   236k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1623|  55.6k|    {
 1624|  55.6k|        return value();
 1625|  55.6k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|   608k|    {
 1598|   608k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   608k|        return this->get_value();
 1600|   608k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   608k|    {
  447|   608k|        return m_value;
  448|   608k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1568|  1.58k|    {
 1569|  1.58k|        return has_value();
 1570|  1.58k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   473k|    {
  481|   473k|        return m_has_value;
  482|   473k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|   234k|    {
 1634|   234k|        return std::move(value());
 1635|   234k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|   236k|    {
 1598|   236k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   236k|        return this->get_value();
 1600|   236k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   236k|    {
  447|   236k|        return m_value;
  448|   236k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   598k|    {
 1808|   598k|        return detail::transform_error_impl(std::move(*this),
 1809|   598k|                                            std::forward<F>(f));
 1810|   598k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   598k|{
 1294|   598k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   598k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   598k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   598k|            return result(*std::forward<Exp>(exp));
 1298|   598k|        }
 1299|       |
 1300|   598k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   598k|        return result(unexpect, monostate{});
 1302|   598k|    }
 1303|   598k|    else {
 1304|   598k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   598k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   598k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 552k, False: 46.0k]
  |  |  ------------------
  ------------------
 1306|   598k|                   ? result(*std::forward<Exp>(exp))
 1307|   598k|                   : result(unexpect,
 1308|  46.0k|                            trivial_invoke(std::forward<F>(f),
 1309|  46.0k|                                           std::forward<Exp>(exp).error()));
 1310|   598k|    }
 1311|   598k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|   580k|    {
 1401|   580k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   580k|    {
  433|   580k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1456|  46.0k|    {
 1457|  46.0k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|   552k|    {
 1634|   552k|        return std::move(value());
 1635|   552k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3300|  29.5k|    {
 3301|  29.5k|        return m_iterator;
 3302|  29.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3304|  29.5k|    {
 3305|  29.5k|        return m_sentinel;
 3306|  29.5k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  1.59M|    {
 1569|  1.59M|        return has_value();
 1570|  1.59M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  2.69M|    {
  481|  2.69M|        return m_has_value;
  482|  2.69M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|   793k|    {
 1575|   793k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   793k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   793k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   793k|        return this->get_unexpected().error();
 1577|   793k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   793k|    {
  464|   793k|        return m_unexpected;
  465|   793k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|   285k|    {
 1634|   285k|        return std::move(value());
 1635|   285k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|   304k|    {
 1598|   304k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   304k|        return this->get_value();
 1600|   304k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   304k|    {
  447|   304k|        return m_value;
  448|   304k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  51.2k|{
  302|  51.2k|    return p;
  303|  51.2k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  51.2k|{
  322|  51.2k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  51.2k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|  25.6k|    {
 3287|  25.6k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|   571k|    {
 4262|   571k|        return !x.is_at_end();
 4263|   571k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  18.4k|    {
 1401|  18.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  18.4k|    {
  433|  18.4k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  48.2k|    {
 1447|  48.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  48.2k|    {
  443|  48.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.08M|    {
 1148|  1.08M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  1.03M|    {
 1401|  1.03M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.03M|    {
  433|  1.03M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|   251k|    {
 1569|   251k|        return has_value();
 1570|   251k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  1.92M|    {
  481|  1.92M|        return m_has_value;
  482|  1.92M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|    863|    {
 1624|    863|        return value();
 1625|    863|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|   788k|    {
 1598|   788k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   788k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   788k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   788k|        return this->get_value();
 1600|   788k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   788k|    {
  447|   788k|        return m_value;
  448|   788k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  1.47k|    {
 1447|  1.47k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.47k|    {
  443|  1.47k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   199k|    {
 1148|   199k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|   198k|    {
 1401|   198k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   198k|    {
  433|   198k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   237k|    {
 1808|   237k|        return detail::transform_error_impl(std::move(*this),
 1809|   237k|                                            std::forward<F>(f));
 1810|   237k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   237k|{
 1294|   237k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   237k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   237k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   237k|            return result(*std::forward<Exp>(exp));
 1298|   237k|        }
 1299|       |
 1300|   237k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   237k|        return result(unexpect, monostate{});
 1302|   237k|    }
 1303|   237k|    else {
 1304|   237k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   237k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   237k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 235k, False: 1.96k]
  |  |  ------------------
  ------------------
 1306|   237k|                   ? result(*std::forward<Exp>(exp))
 1307|   237k|                   : result(unexpect,
 1308|  1.96k|                            trivial_invoke(std::forward<F>(f),
 1309|  1.96k|                                           std::forward<Exp>(exp).error()));
 1310|   237k|    }
 1311|   237k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|   787k|    {
 1634|   787k|        return std::move(value());
 1635|   787k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|  48.0k|    {
 1585|  48.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  48.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|  48.0k|        return std::move(this->get_unexpected().error());
 1587|  48.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  48.2k|    {
  464|  48.2k|        return m_unexpected;
  465|  48.2k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|   333k|    {
 1457|   333k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|   199k|    {
 1569|   199k|        return has_value();
 1570|   199k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   399k|    {
  481|   399k|        return m_has_value;
  482|   399k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1574|  1.47k|    {
 1575|  1.47k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.47k|        return this->get_unexpected().error();
 1577|  1.47k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.47k|    {
  464|  1.47k|        return m_unexpected;
  465|  1.47k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|   198k|    {
 1634|   198k|        return std::move(value());
 1635|   198k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|   198k|    {
 1598|   198k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   198k|        return this->get_value();
 1600|   198k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   198k|    {
  447|   198k|        return m_value;
  448|   198k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1574|    228|    {
 1575|    228|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    228|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    228|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    228|        return this->get_unexpected().error();
 1577|    228|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|   281k|    {
 1447|   281k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   327k|    {
  443|   327k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.80M|    {
 1148|  1.80M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1400|    863|    {
 1401|    863|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|    863|    {
  433|    863|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   909k|    {
 1447|   909k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|   909k|    {
  443|   909k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|  2.03M|    {
 1569|  2.03M|        return has_value();
 1570|  2.03M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  3.79M|    {
  481|  3.79M|        return m_has_value;
  482|  3.79M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|   847k|    {
 1575|   847k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   847k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   847k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   847k|        return this->get_unexpected().error();
 1577|   847k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   847k|    {
  464|   847k|        return m_unexpected;
  465|   847k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|   235k|    {
 1401|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   235k|    {
  433|   235k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   235k|    {
 1148|   235k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1623|  21.6k|    {
 1624|  21.6k|        return value();
 1625|  21.6k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|   574k|    {
 1598|   574k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   574k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   574k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   574k|        return this->get_value();
 1600|   574k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   574k|    {
  447|   574k|        return m_value;
  448|   574k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|    674|    {
 1569|    674|        return has_value();
 1570|    674|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   471k|    {
  481|   471k|        return m_has_value;
  482|   471k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|   235k|    {
 1634|   235k|        return std::move(value());
 1635|   235k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|   235k|    {
 1598|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   235k|        return this->get_value();
 1600|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   235k|    {
  447|   235k|        return m_value;
  448|   235k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   598k|    {
 1808|   598k|        return detail::transform_error_impl(std::move(*this),
 1809|   598k|                                            std::forward<F>(f));
 1810|   598k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   598k|{
 1294|   598k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   598k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   598k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   598k|            return result(*std::forward<Exp>(exp));
 1298|   598k|        }
 1299|       |
 1300|   598k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   598k|        return result(unexpect, monostate{});
 1302|   598k|    }
 1303|   598k|    else {
 1304|   598k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   598k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   598k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 552k, False: 46.0k]
  |  |  ------------------
  ------------------
 1306|   598k|                   ? result(*std::forward<Exp>(exp))
 1307|   598k|                   : result(unexpect,
 1308|  46.0k|                            trivial_invoke(std::forward<F>(f),
 1309|  46.0k|                                           std::forward<Exp>(exp).error()));
 1310|   598k|    }
 1311|   598k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|   563k|    {
 1401|   563k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   563k|    {
  433|   563k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|  46.0k|    {
 1457|  46.0k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|   552k|    {
 1634|   552k|        return std::move(value());
 1635|   552k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   138k|    {
 2826|   138k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   138k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   138k|    {
 2807|   138k|        return t.data();
 2808|   138k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  18.5k|    {
 1401|  18.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  18.5k|    {
  433|  18.5k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|   234k|    {
 1808|   234k|        return detail::transform_error_impl(std::move(*this),
 1809|   234k|                                            std::forward<F>(f));
 1810|   234k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|   234k|{
 1294|   234k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   234k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   234k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   234k|            return result(*std::forward<Exp>(exp));
 1298|   234k|        }
 1299|       |
 1300|   234k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   234k|        return result(unexpect, monostate{});
 1302|   234k|    }
 1303|   234k|    else {
 1304|   234k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   234k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   234k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 234k, False: 0]
  |  |  ------------------
  ------------------
 1306|   234k|                   ? result(*std::forward<Exp>(exp))
 1307|   234k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   234k|    }
 1311|   234k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   234k|    {
 1401|   234k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   234k|    {
  433|   234k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   234k|    {
 1148|   234k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   234k|    {
 1569|   234k|        return has_value();
 1570|   234k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   469k|    {
  481|   469k|        return m_has_value;
  482|   469k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|   234k|    {
 1634|   234k|        return std::move(value());
 1635|   234k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   234k|    {
 1598|   234k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   234k|        return this->get_value();
 1600|   234k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   234k|    {
  447|   234k|        return m_value;
  448|   234k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|   443k|    {
 1794|   443k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   443k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|   443k|{
 1294|   443k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   443k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   443k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   443k|            return result(*std::forward<Exp>(exp));
 1298|   443k|        }
 1299|       |
 1300|   443k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   443k|        return result(unexpect, monostate{});
 1302|   443k|    }
 1303|   443k|    else {
 1304|   443k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   443k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   443k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 443k]
  |  |  ------------------
  ------------------
 1306|   443k|                   ? result(*std::forward<Exp>(exp))
 1307|   443k|                   : result(unexpect,
 1308|   443k|                            trivial_invoke(std::forward<F>(f),
 1309|   443k|                                           std::forward<Exp>(exp).error()));
 1310|   443k|    }
 1311|   443k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  18.4k|    {
 1624|  18.4k|        return value();
 1625|  18.4k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|  36.9k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1643|  1.58k|    {
 1644|  1.58k|        return &value();
 1645|  1.58k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|   198k|    {
 2695|   198k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   198k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|   198k|    {
 2676|   198k|        return decay_copy(t.begin());
 2677|   198k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|   198k|{
 1920|   198k|    return SCN_FWD(t);
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   198k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|   235k|    {
 1808|   235k|        return detail::transform_error_impl(std::move(*this),
 1809|   235k|                                            std::forward<F>(f));
 1810|   235k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|   235k|{
 1294|   235k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   235k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   235k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   235k|            return result(*std::forward<Exp>(exp));
 1298|   235k|        }
 1299|       |
 1300|   235k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   235k|        return result(unexpect, monostate{});
 1302|   235k|    }
 1303|   235k|    else {
 1304|   235k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   235k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   235k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 235k, False: 0]
  |  |  ------------------
  ------------------
 1306|   235k|                   ? result(*std::forward<Exp>(exp))
 1307|   235k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   235k|    }
 1311|   235k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   235k|    {
 1401|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   235k|    {
  433|   235k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   235k|    {
 1148|   235k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   235k|    {
 1569|   235k|        return has_value();
 1570|   235k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   470k|    {
  481|   470k|        return m_has_value;
  482|   470k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   235k|    {
 1634|   235k|        return std::move(value());
 1635|   235k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   235k|    {
 1598|   235k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   235k|        return this->get_value();
 1600|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   235k|    {
  447|   235k|        return m_value;
  448|   235k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|   331k|    {
 1794|   331k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   331k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|   331k|{
 1294|   331k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   331k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   331k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   331k|            return result(*std::forward<Exp>(exp));
 1298|   331k|        }
 1299|       |
 1300|   331k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   331k|        return result(unexpect, monostate{});
 1302|   331k|    }
 1303|   331k|    else {
 1304|   331k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   331k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   331k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
 1306|   331k|                   ? result(*std::forward<Exp>(exp))
 1307|   331k|                   : result(unexpect,
 1308|   331k|                            trivial_invoke(std::forward<F>(f),
 1309|   331k|                                           std::forward<Exp>(exp).error()));
 1310|   331k|    }
 1311|   331k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|   331k|    {
 3619|   331k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  18.5k|    {
 1624|  18.5k|        return value();
 1625|  18.5k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1643|    674|    {
 1644|    674|        return &value();
 1645|    674|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|   443k|    {
 3619|   443k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1400|   235k|    {
 1401|   235k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|   235k|    {
  433|   235k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|   144k|{
 3625|   144k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|   144k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  1.92M|    {
 2826|  1.92M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  1.92M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  1.92M|    {
 2807|  1.92M|        return t.data();
 2808|  1.92M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|  3.92M|    {
 5427|  3.92M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.92M]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  3.92M|        return static_cast<std::size_t>(m_desc &
 5432|  3.92M|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  3.92M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|  7.85M|    {
 5452|  7.85M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|  7.85M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|  3.92M|    {
 5395|  3.92M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.92M]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  3.92M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  3.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.92M]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|  3.92M|        const auto t = type(id);
 5407|  3.92M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  3.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.92M]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|  3.92M|        basic_scan_arg<Context> arg;
 5412|  3.92M|        arg.m_type = t;
 5413|  3.92M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 3.92M, False: 0]
  ------------------
 5414|  3.92M|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  3.92M|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  3.92M|        return arg;
 5420|  3.92M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|  3.92M|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  3.92M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  3.92M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  3.92M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  3.92M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|  3.92M|    {
 5456|  3.92M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  3.92M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|  7.43M|    {
 5208|  7.43M|        return m_type != detail::arg_type::none_type;
 5209|  7.43M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   660k|{
 8378|   660k|#define SCN_VISIT(Type)                                         \
 8379|   660k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   660k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   660k|    }                                                           \
 8382|   660k|    else {                                                      \
 8383|   660k|        return vis(monostate_val);                              \
 8384|   660k|    }
 8385|       |
 8386|   660k|    monostate monostate_val{};
 8387|       |
 8388|   660k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 660k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 660k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 660k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 660k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 660k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 660k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 660k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 660k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 660k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 660k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 660k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 660k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 660k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 660k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 660k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   204k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 204k, False: 456k]
  ------------------
 8420|   204k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   204k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   204k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   204k|    }                                                           \
  |  | 8382|   204k|    else {                                                      \
  |  | 8383|   204k|        return vis(monostate_val);                              \
  |  | 8384|   204k|    }
  ------------------
 8421|   226k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 226k, False: 434k]
  ------------------
 8422|   226k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   226k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   226k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   226k|    }                                                           \
  |  | 8382|   226k|    else {                                                      \
  |  | 8383|   226k|        return vis(monostate_val);                              \
  |  | 8384|   226k|    }
  ------------------
 8423|   230k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 230k, False: 430k]
  ------------------
 8424|   230k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   230k|    }                                                           \
  |  | 8382|   230k|    else {                                                      \
  |  | 8383|   230k|        return vis(monostate_val);                              \
  |  | 8384|   230k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 660k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 660k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 660k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 660k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 660k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 660k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 660k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 660k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 660k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   660k|            SCN_CLANG_POP
 8456|   660k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|  3.08M|    {
 5506|  3.08M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  1.54M|    {
 8099|  1.54M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|  3.08M|    {
 8017|  3.08M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4314|  2.16M|{
 4315|  2.16M|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 2.16M]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|  2.16M|    return ranges::subrange{forward_iterator{this, 0},
 4320|  2.16M|                            ranges::default_sentinel};
 4321|  2.16M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4147|  2.16M|    {
 4148|  2.16M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|  2.16M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|  2.16M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   611k|{
 8378|   611k|#define SCN_VISIT(Type)                                         \
 8379|   611k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   611k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   611k|    }                                                           \
 8382|   611k|    else {                                                      \
 8383|   611k|        return vis(monostate_val);                              \
 8384|   611k|    }
 8385|       |
 8386|   611k|    monostate monostate_val{};
 8387|       |
 8388|   611k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 611k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 611k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 611k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 611k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 611k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 611k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 611k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 611k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 611k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 611k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 611k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 611k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 611k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 611k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 611k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   188k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 188k, False: 423k]
  ------------------
 8420|   188k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   188k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   188k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   188k|    }                                                           \
  |  | 8382|   188k|    else {                                                      \
  |  | 8383|   188k|        return vis(monostate_val);                              \
  |  | 8384|   188k|    }
  ------------------
 8421|   210k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 210k, False: 401k]
  ------------------
 8422|   210k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   210k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   210k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   210k|    }                                                           \
  |  | 8382|   210k|    else {                                                      \
  |  | 8383|   210k|        return vis(monostate_val);                              \
  |  | 8384|   210k|    }
  ------------------
 8423|   213k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 213k, False: 398k]
  ------------------
 8424|   213k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   213k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   213k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   213k|    }                                                           \
  |  | 8382|   213k|    else {                                                      \
  |  | 8383|   213k|        return vis(monostate_val);                              \
  |  | 8384|   213k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 611k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 611k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 611k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 611k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 611k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 611k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 611k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 611k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 611k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   611k|            SCN_CLANG_POP
 8456|   611k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.53M|{
 7005|  1.53M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.53M|    handler.check_args_exhausted();
 7007|  1.53M|    return handler.get_error();
 7008|  1.53M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.53M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.53M|    auto begin = format.data();
 6974|  1.53M|    auto it = begin;
 6975|  1.53M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  2.98M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.53M, False: 1.45M]
  ------------------
 6978|  1.53M|        const auto ch = *it++;
 6979|  1.53M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.53M, False: 0]
  ------------------
 6980|  1.53M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.53M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.53M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 81.4k, False: 1.45M]
  ------------------
 6984|  81.4k|                return;
 6985|  81.4k|            }
 6986|  1.53M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.53M|    }
 6997|       |
 6998|  1.45M|    handler.on_literal_text(begin, end);
 6999|  1.45M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|  1.53M|{
 6903|  1.53M|    struct id_adapter {
 6904|  1.53M|        constexpr void operator()()
 6905|  1.53M|        {
 6906|  1.53M|            arg_id = handler.on_arg_id();
 6907|  1.53M|        }
 6908|  1.53M|        constexpr void operator()(std::size_t id)
 6909|  1.53M|        {
 6910|  1.53M|            arg_id = handler.on_arg_id(id);
 6911|  1.53M|        }
 6912|       |
 6913|  1.53M|        constexpr void on_error(const char* msg)
 6914|  1.53M|        {
 6915|  1.53M|            SCN_UNLIKELY_ATTR
 6916|  1.53M|            handler.on_error(msg);
 6917|  1.53M|        }
 6918|       |
 6919|  1.53M|        Handler& handler;
 6920|  1.53M|        std::size_t arg_id;
 6921|  1.53M|    };
 6922|       |
 6923|  1.53M|    ++begin;
 6924|  1.53M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.53M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.53M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.53M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.53M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.53M|    else {
 6936|  1.53M|        auto adapter = id_adapter{handler, 0};
 6937|  1.53M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.53M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.53M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.53M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.53M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.53M, False: 0]
  ------------------
 6948|  1.53M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.53M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.53M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  |  Branch (859:45): [True: 0, False: 1.53M]
  |  |  |  Branch (859:45): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.53M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.53M|    }
 6964|  1.53M|    return begin + 1;
 6965|  1.53M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|  3.08M|    {
 8000|  3.08M|        return m_args.get(id);
 8001|  3.08M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|  3.08M|    {
 8010|  3.08M|        return m_locale;
 8011|  3.08M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|  3.08M|    {
 5527|  3.08M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.08M]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  3.08M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  3.08M|        do_check_arg_id(id);
 5535|  3.08M|        return id;
 5536|  3.08M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|  3.08M|{
 6015|  3.08M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  3.08M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  3.08M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.53M|{
 6404|  1.53M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.53M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.53M, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.53M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.53M|    handler();
 6410|  1.53M|    return begin;
 6411|  1.53M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.53M|        {
 6906|  1.53M|            arg_id = handler.on_arg_id();
 6907|  1.53M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|  6.16M|    {
 5213|  6.16M|        return m_type;
 5214|  6.16M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|  3.08M|    {
 5522|  3.08M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  3.08M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|  6.16M|    {
 5511|  6.16M|        return m_format.data();
 5512|  6.16M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  1.53M|    {
 7083|  1.53M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.53M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|  1.53M|{
 6819|  1.53M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.53M|        if (*begin == CharT{'['}) {
 6821|  1.53M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.53M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.53M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.53M|                return begin;
 6827|  1.53M|            }
 6828|  1.53M|            handler.on_character_set_string(set);
 6829|  1.53M|            return begin;
 6830|  1.53M|        }
 6831|  1.53M|        if (*begin == CharT{'/'}) {
 6832|  1.53M|            return parse_presentation_regex(begin, end, handler);
 6833|  1.53M|        }
 6834|  1.53M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.53M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.53M|            handler.on_error("Invalid type specifier in format string");
 6837|  1.53M|            return begin;
 6838|  1.53M|        }
 6839|  1.53M|        handler.on_type(type);
 6840|  1.53M|        return begin;
 6841|  1.53M|    };
 6842|       |
 6843|  1.53M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.53M, False: 0]
  |  Branch (6843:28): [True: 1.53M, False: 0]
  ------------------
 6844|  1.53M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.53M, False: 0]
  |  Branch (6844:36): [True: 1.09M, False: 440k]
  ------------------
 6845|  1.09M|        return do_presentation();
 6846|  1.09M|    }
 6847|       |
 6848|   440k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|   440k|    begin = parse_align(begin, end, handler);
 6854|   440k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|   440k|    begin = parse_width(begin, end, handler);
 6860|   440k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|   440k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 440k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|   440k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 440k, False: 0]
  ------------------
 6879|   440k|        handler.on_localized();
 6880|   440k|        ++begin;
 6881|   440k|    }
 6882|   440k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|   440k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 440k, False: 0]
  |  Branch (6887:25): [True: 0, False: 440k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|   440k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|   440k|    return begin;
 6896|   440k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|  3.08M|{
 6468|  3.08M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 2.19M, False: 885k]
  |  Branch (6468:33): [True: 2.19M, False: 0]
  ------------------
 6469|  3.08M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 885k, False: 0]
  |  Branch (6469:33): [True: 885k, False: 0]
  ------------------
 6470|  3.08M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  1.09M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.09M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.09M]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.09M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.09M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.09M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.09M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.09M|        handler.on_type(type);
 6840|  1.09M|        return begin;
 6841|  1.09M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|  2.19M|{
 6416|  2.19M|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 2.19M]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 2.19M]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 2.19M]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 2.19M]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 2.19M]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 2.19M]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 2.19M]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 2.19M]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 2.19M]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 2.19M]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|   992k|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 992k, False: 1.20M]
  ------------------
 6435|   992k|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 2.19M]
  ------------------
 6436|   992k|            return presentation_type::float_hex;
 6437|  59.6k|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 59.6k, False: 2.13M]
  ------------------
 6438|  59.6k|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 2.19M]
  ------------------
 6439|  59.6k|            return presentation_type::float_scientific;
 6440|   393k|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 393k, False: 1.80M]
  ------------------
 6441|   393k|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 2.19M]
  ------------------
 6442|   393k|            return presentation_type::float_fixed;
 6443|   750k|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 750k, False: 1.44M]
  ------------------
 6444|   750k|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 2.19M]
  ------------------
 6445|   750k|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 2.19M]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 2.19M]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 2.19M]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 2.19M]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 2.19M]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.19M]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 2.19M]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|  2.19M|    }
 6463|  2.19M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|   440k|{
 6493|   440k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|   440k|    auto check_align = [](wchar_t ch) {
 6496|   440k|        switch (ch) {
 6497|   440k|            case L'<':
 6498|   440k|                return align_type::left;
 6499|   440k|            case L'>':
 6500|   440k|                return align_type::right;
 6501|   440k|            case L'^':
 6502|   440k|                return align_type::center;
 6503|   440k|            default:
 6504|   440k|                return align_type::none;
 6505|   440k|        }
 6506|   440k|    };
 6507|       |
 6508|   440k|    auto potential_fill_len = code_point_length(begin, end);
 6509|   440k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   880k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  |  Branch (859:45): [True: 0, False: 440k]
  |  |  |  Branch (859:45): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 6510|   440k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|   440k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|   440k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|   440k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|   440k|    const auto begin_before_fill = begin;
 6520|   440k|    begin += potential_fill_len;
 6521|       |
 6522|   440k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 440k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|   440k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|   440k|    const auto begin_after_fill = begin;
 6528|   440k|    ++begin;
 6529|       |
 6530|   440k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 440k, False: 0]
  ------------------
 6531|   440k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|   440k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 440k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|   440k|    }
 6539|       |
 6540|   440k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 440k, False: 0]
  ------------------
 6541|   440k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 440k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|   440k|        return begin_before_fill;
 6546|   440k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|   440k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|   885k|{
 6475|   885k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|   885k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|   885k|        return 1;
 6478|   885k|    }
 6479|   885k|    else {
 6480|   885k|        const auto lengths =
 6481|   885k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|   885k|            "\3\4";
 6483|   885k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|   885k|        return len;
 6485|   885k|    }
 6486|   885k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|   880k|    auto check_align = [](wchar_t ch) {
 6496|   880k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 880k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 880k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 880k]
  ------------------
 6502|      0|                return align_type::center;
 6503|   880k|            default:
  ------------------
  |  Branch (6503:13): [True: 880k, False: 0]
  ------------------
 6504|   880k|                return align_type::none;
 6505|   880k|        }
 6506|   880k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|   440k|{
 6558|   440k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|   440k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 440k, False: 0]
  |  Branch (6560:33): [True: 0, False: 440k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|   440k|    return begin;
 6571|   440k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|   440k|    {
 7088|   440k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|   440k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 440k, False: 0]
  ------------------
 7090|   440k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 440k, False: 0]
  ------------------
 7091|   440k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 440k]
  ------------------
 7092|   440k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|   440k|        Handler::on_localized();
 7100|   440k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.53M|{
 8378|  1.53M|#define SCN_VISIT(Type)                                         \
 8379|  1.53M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.53M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.53M|    }                                                           \
 8382|  1.53M|    else {                                                      \
 8383|  1.53M|        return vis(monostate_val);                              \
 8384|  1.53M|    }
 8385|       |
 8386|  1.53M|    monostate monostate_val{};
 8387|       |
 8388|  1.53M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.53M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.53M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.53M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.53M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.53M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.53M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.53M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.53M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.53M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.53M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.53M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.53M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.53M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.53M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.53M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   485k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 485k, False: 1.04M]
  ------------------
 8420|   485k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   485k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   485k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   485k|    }                                                           \
  |  | 8382|   485k|    else {                                                      \
  |  | 8383|   485k|        return vis(monostate_val);                              \
  |  | 8384|   485k|    }
  ------------------
 8421|   520k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 520k, False: 1.01M]
  ------------------
 8422|   520k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   520k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   520k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   520k|    }                                                           \
  |  | 8382|   520k|    else {                                                      \
  |  | 8383|   520k|        return vis(monostate_val);                              \
  |  | 8384|   520k|    }
  ------------------
 8423|   526k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 526k, False: 1.00M]
  ------------------
 8424|   526k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   526k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   526k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   526k|    }                                                           \
  |  | 8382|   526k|    else {                                                      \
  |  | 8383|   526k|        return vis(monostate_val);                              \
  |  | 8384|   526k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.53M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.53M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.53M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.53M]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.53M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.53M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.53M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.53M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.53M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.53M|            SCN_CLANG_POP
 8456|  1.53M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.54M|{
 7005|  1.54M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.54M|    handler.check_args_exhausted();
 7007|  1.54M|    return handler.get_error();
 7008|  1.54M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.54M|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.54M|    auto begin = format.data();
 6974|  1.54M|    auto it = begin;
 6975|  1.54M|    const auto end = format.data() + format.size();
 6976|       |
 6977|  3.01M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.54M, False: 1.46M]
  ------------------
 6978|  1.54M|        const auto ch = *it++;
 6979|  1.54M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.54M, False: 0]
  ------------------
 6980|  1.54M|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.54M|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.54M|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 81.4k, False: 1.46M]
  ------------------
 6984|  81.4k|                return;
 6985|  81.4k|            }
 6986|  1.54M|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.54M|    }
 6997|       |
 6998|  1.46M|    handler.on_literal_text(begin, end);
 6999|  1.46M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8135|  1.46M|    {
 8136|  1.46M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.46M|    static_cast<    \
  |  |  929|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.46M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6902|  1.54M|{
 6903|  1.54M|    struct id_adapter {
 6904|  1.54M|        constexpr void operator()()
 6905|  1.54M|        {
 6906|  1.54M|            arg_id = handler.on_arg_id();
 6907|  1.54M|        }
 6908|  1.54M|        constexpr void operator()(std::size_t id)
 6909|  1.54M|        {
 6910|  1.54M|            arg_id = handler.on_arg_id(id);
 6911|  1.54M|        }
 6912|       |
 6913|  1.54M|        constexpr void on_error(const char* msg)
 6914|  1.54M|        {
 6915|  1.54M|            SCN_UNLIKELY_ATTR
 6916|  1.54M|            handler.on_error(msg);
 6917|  1.54M|        }
 6918|       |
 6919|  1.54M|        Handler& handler;
 6920|  1.54M|        std::size_t arg_id;
 6921|  1.54M|    };
 6922|       |
 6923|  1.54M|    ++begin;
 6924|  1.54M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.54M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.54M]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.54M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.54M]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.54M|    else {
 6936|  1.54M|        auto adapter = id_adapter{handler, 0};
 6937|  1.54M|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.54M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.54M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.54M]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.54M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.54M, False: 0]
  ------------------
 6948|  1.54M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.54M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.54M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  |  Branch (859:45): [True: 0, False: 1.54M]
  |  |  |  Branch (859:45): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.54M|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.54M|    }
 6964|  1.54M|    return begin + 1;
 6965|  1.54M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.54M|{
 6404|  1.54M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.54M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.54M, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.54M]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.54M|    handler();
 6410|  1.54M|    return begin;
 6411|  1.54M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.54M|        {
 6906|  1.54M|            arg_id = handler.on_arg_id();
 6907|  1.54M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  1.54M|    {
 7083|  1.54M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.54M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6818|  1.54M|{
 6819|  1.54M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.54M|        if (*begin == CharT{'['}) {
 6821|  1.54M|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.54M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.54M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.54M|                return begin;
 6827|  1.54M|            }
 6828|  1.54M|            handler.on_character_set_string(set);
 6829|  1.54M|            return begin;
 6830|  1.54M|        }
 6831|  1.54M|        if (*begin == CharT{'/'}) {
 6832|  1.54M|            return parse_presentation_regex(begin, end, handler);
 6833|  1.54M|        }
 6834|  1.54M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.54M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.54M|            handler.on_error("Invalid type specifier in format string");
 6837|  1.54M|            return begin;
 6838|  1.54M|        }
 6839|  1.54M|        handler.on_type(type);
 6840|  1.54M|        return begin;
 6841|  1.54M|    };
 6842|       |
 6843|  1.54M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.54M, False: 0]
  |  Branch (6843:28): [True: 1.54M, False: 0]
  ------------------
 6844|  1.54M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.54M, False: 0]
  |  Branch (6844:36): [True: 1.10M, False: 445k]
  ------------------
 6845|  1.10M|        return do_presentation();
 6846|  1.10M|    }
 6847|       |
 6848|   445k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|   445k|    begin = parse_align(begin, end, handler);
 6854|   445k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|   445k|    begin = parse_width(begin, end, handler);
 6860|   445k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|   445k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 445k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|   445k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 445k, False: 0]
  ------------------
 6879|   445k|        handler.on_localized();
 6880|   445k|        ++begin;
 6881|   445k|    }
 6882|   445k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|   445k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 445k, False: 0]
  |  Branch (6887:25): [True: 0, False: 445k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|   445k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|   445k|    return begin;
 6896|   445k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  1.10M|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.10M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.10M]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.10M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.10M]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.10M|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.10M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.10M|        handler.on_type(type);
 6840|  1.10M|        return begin;
 6841|  1.10M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6492|   445k|{
 6493|   445k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|   445k|    auto check_align = [](wchar_t ch) {
 6496|   445k|        switch (ch) {
 6497|   445k|            case L'<':
 6498|   445k|                return align_type::left;
 6499|   445k|            case L'>':
 6500|   445k|                return align_type::right;
 6501|   445k|            case L'^':
 6502|   445k|                return align_type::center;
 6503|   445k|            default:
 6504|   445k|                return align_type::none;
 6505|   445k|        }
 6506|   445k|    };
 6507|       |
 6508|   445k|    auto potential_fill_len = code_point_length(begin, end);
 6509|   445k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   890k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  |  Branch (859:45): [True: 0, False: 445k]
  |  |  |  Branch (859:45): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 6510|   445k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|   445k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|   445k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|   445k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|   445k|    const auto begin_before_fill = begin;
 6520|   445k|    begin += potential_fill_len;
 6521|       |
 6522|   445k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 445k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|   445k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|   445k|    const auto begin_after_fill = begin;
 6528|   445k|    ++begin;
 6529|       |
 6530|   445k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 445k, False: 0]
  ------------------
 6531|   445k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|   445k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 445k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|   445k|    }
 6539|       |
 6540|   445k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 445k, False: 0]
  ------------------
 6541|   445k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 445k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|   445k|        return begin_before_fill;
 6546|   445k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|   445k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|   890k|    auto check_align = [](wchar_t ch) {
 6496|   890k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 890k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 890k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 890k]
  ------------------
 6502|      0|                return align_type::center;
 6503|   890k|            default:
  ------------------
  |  Branch (6503:13): [True: 890k, False: 0]
  ------------------
 6504|   890k|                return align_type::none;
 6505|   890k|        }
 6506|   890k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6557|   445k|{
 6558|   445k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|   445k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 445k, False: 0]
  |  Branch (6560:33): [True: 0, False: 445k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|   445k|    return begin;
 6571|   445k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7087|   445k|    {
 7088|   445k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|   445k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 445k, False: 0]
  ------------------
 7090|   445k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 445k, False: 0]
  ------------------
 7091|   445k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 445k]
  ------------------
 7092|   445k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|   445k|        Handler::on_localized();
 7100|   445k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.54M|{
 8378|  1.54M|#define SCN_VISIT(Type)                                         \
 8379|  1.54M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.54M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.54M|    }                                                           \
 8382|  1.54M|    else {                                                      \
 8383|  1.54M|        return vis(monostate_val);                              \
 8384|  1.54M|    }
 8385|       |
 8386|  1.54M|    monostate monostate_val{};
 8387|       |
 8388|  1.54M|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.54M]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.54M]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.54M]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.54M]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.54M]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.54M]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.54M]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.54M]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.54M]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.54M]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.54M]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.54M]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.54M]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.54M]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.54M]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|   490k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 490k, False: 1.05M]
  ------------------
 8420|   490k|            SCN_VISIT(float);
  ------------------
  |  | 8379|   490k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   490k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   490k|    }                                                           \
  |  | 8382|   490k|    else {                                                      \
  |  | 8383|   490k|        return vis(monostate_val);                              \
  |  | 8384|   490k|    }
  ------------------
 8421|   525k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 525k, False: 1.02M]
  ------------------
 8422|   525k|            SCN_VISIT(double);
  ------------------
  |  | 8379|   525k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   525k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   525k|    }                                                           \
  |  | 8382|   525k|    else {                                                      \
  |  | 8383|   525k|        return vis(monostate_val);                              \
  |  | 8384|   525k|    }
  ------------------
 8423|   532k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 532k, False: 1.01M]
  ------------------
 8424|   532k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|   532k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|   532k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|   532k|    }                                                           \
  |  | 8382|   532k|    else {                                                      \
  |  | 8383|   532k|        return vis(monostate_val);                              \
  |  | 8384|   532k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.54M]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.54M]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.54M]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.54M]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.54M]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.54M]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.54M]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.54M]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.54M]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.54M|            SCN_CLANG_POP
 8456|  1.54M|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4046|   105k|    {
 4047|   105k|        sync(0);
 4048|   105k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|   436k|    {
 5427|   436k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 436k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   436k|        return static_cast<std::size_t>(m_desc &
 5432|   436k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   436k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|   873k|    {
 5452|   873k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   873k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|   436k|    {
 5395|   436k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 436k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|   436k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 436k]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|   436k|        const auto t = type(id);
 5407|   436k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 436k]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|   436k|        basic_scan_arg<Context> arg;
 5412|   436k|        arg.m_type = t;
 5413|   436k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 436k, False: 0]
  ------------------
 5414|   436k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|   436k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|   436k|        return arg;
 5420|   436k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|   436k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|   436k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|   436k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|   436k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|   436k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|   436k|    {
 5456|   436k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|   436k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|   836k|    {
 5208|   836k|        return m_type != detail::arg_type::none_type;
 5209|   836k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  55.6k|{
 8378|  55.6k|#define SCN_VISIT(Type)                                         \
 8379|  55.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  55.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  55.6k|    }                                                           \
 8382|  55.6k|    else {                                                      \
 8383|  55.6k|        return vis(monostate_val);                              \
 8384|  55.6k|    }
 8385|       |
 8386|  55.6k|    monostate monostate_val{};
 8387|       |
 8388|  55.6k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 55.6k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 55.6k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 55.6k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 55.6k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 55.6k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 55.6k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 55.6k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 55.6k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 55.6k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 55.6k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 55.6k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 55.6k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 55.6k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 55.6k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 55.6k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  18.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 18.5k, False: 37.1k]
  ------------------
 8420|  18.5k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  18.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  18.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  18.5k|    }                                                           \
  |  | 8382|  18.5k|    else {                                                      \
  |  | 8383|  18.5k|        return vis(monostate_val);                              \
  |  | 8384|  18.5k|    }
  ------------------
 8421|  18.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 18.5k, False: 37.1k]
  ------------------
 8422|  18.5k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  18.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  18.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  18.5k|    }                                                           \
  |  | 8382|  18.5k|    else {                                                      \
  |  | 8383|  18.5k|        return vis(monostate_val);                              \
  |  | 8384|  18.5k|    }
  ------------------
 8423|  18.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 18.5k, False: 37.0k]
  ------------------
 8424|  18.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  18.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  18.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  18.5k|    }                                                           \
  |  | 8382|  18.5k|    else {                                                      \
  |  | 8383|  18.5k|        return vis(monostate_val);                              \
  |  | 8384|  18.5k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 55.6k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 55.6k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 55.6k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 55.6k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 55.6k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 55.6k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 55.6k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 55.6k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 55.6k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  55.6k|            SCN_CLANG_POP
 8456|  55.6k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|   362k|    {
 5506|   362k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|   181k|    {
 8099|   181k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|   362k|    {
 8017|   362k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   181k|{
 7005|   181k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   181k|    handler.check_args_exhausted();
 7007|   181k|    return handler.get_error();
 7008|   181k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   181k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   181k|    auto begin = format.data();
 6974|   181k|    auto it = begin;
 6975|   181k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   199k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 181k, False: 18.5k]
  ------------------
 6978|   181k|        const auto ch = *it++;
 6979|   181k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 181k, False: 0]
  ------------------
 6980|   181k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   181k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   181k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 162k, False: 18.5k]
  ------------------
 6984|   162k|                return;
 6985|   162k|            }
 6986|   181k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   181k|    }
 6997|       |
 6998|  18.5k|    handler.on_literal_text(begin, end);
 6999|  18.5k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|   181k|{
 6903|   181k|    struct id_adapter {
 6904|   181k|        constexpr void operator()()
 6905|   181k|        {
 6906|   181k|            arg_id = handler.on_arg_id();
 6907|   181k|        }
 6908|   181k|        constexpr void operator()(std::size_t id)
 6909|   181k|        {
 6910|   181k|            arg_id = handler.on_arg_id(id);
 6911|   181k|        }
 6912|       |
 6913|   181k|        constexpr void on_error(const char* msg)
 6914|   181k|        {
 6915|   181k|            SCN_UNLIKELY_ATTR
 6916|   181k|            handler.on_error(msg);
 6917|   181k|        }
 6918|       |
 6919|   181k|        Handler& handler;
 6920|   181k|        std::size_t arg_id;
 6921|   181k|    };
 6922|       |
 6923|   181k|    ++begin;
 6924|   181k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   181k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 181k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   181k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 181k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   181k|    else {
 6936|   181k|        auto adapter = id_adapter{handler, 0};
 6937|   181k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   181k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   181k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 181k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   181k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 181k, False: 0]
  ------------------
 6948|   181k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   181k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   181k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  |  Branch (859:45): [True: 0, False: 181k]
  |  |  |  Branch (859:45): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|   181k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   181k|    }
 6964|   181k|    return begin + 1;
 6965|   181k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|   362k|    {
 8000|   362k|        return m_args.get(id);
 8001|   362k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|   362k|    {
 8010|   362k|        return m_locale;
 8011|   362k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|   362k|    {
 5527|   362k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|   362k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|   362k|        do_check_arg_id(id);
 5535|   362k|        return id;
 5536|   362k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|   362k|{
 6015|   362k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|   362k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|   362k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   181k|{
 6404|   181k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   181k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 181k, False: 0]
  |  Branch (6405:26): [True: 0, False: 181k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   181k|    handler();
 6410|   181k|    return begin;
 6411|   181k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   181k|        {
 6906|   181k|            arg_id = handler.on_arg_id();
 6907|   181k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|   725k|    {
 5213|   725k|        return m_type;
 5214|   725k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|   362k|    {
 5522|   362k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|   362k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4314|   236k|{
 4315|   236k|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 236k]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|   236k|    return ranges::subrange{forward_iterator{this, 0},
 4320|   236k|                            ranges::default_sentinel};
 4321|   236k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4147|   236k|    {
 4148|   236k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|   236k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|   236k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|   725k|    {
 5511|   725k|        return m_format.data();
 5512|   725k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|   181k|    {
 7083|   181k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   181k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|   181k|{
 6819|   181k|    auto do_presentation = [&]() -> const CharT* {
 6820|   181k|        if (*begin == CharT{'['}) {
 6821|   181k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   181k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   181k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   181k|                return begin;
 6827|   181k|            }
 6828|   181k|            handler.on_character_set_string(set);
 6829|   181k|            return begin;
 6830|   181k|        }
 6831|   181k|        if (*begin == CharT{'/'}) {
 6832|   181k|            return parse_presentation_regex(begin, end, handler);
 6833|   181k|        }
 6834|   181k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   181k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   181k|            handler.on_error("Invalid type specifier in format string");
 6837|   181k|            return begin;
 6838|   181k|        }
 6839|   181k|        handler.on_type(type);
 6840|   181k|        return begin;
 6841|   181k|    };
 6842|       |
 6843|   181k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 181k, False: 0]
  |  Branch (6843:28): [True: 181k, False: 0]
  ------------------
 6844|   181k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 181k, False: 0]
  |  Branch (6844:36): [True: 144k, False: 37.1k]
  ------------------
 6845|   144k|        return do_presentation();
 6846|   144k|    }
 6847|       |
 6848|  37.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  37.1k|    begin = parse_align(begin, end, handler);
 6854|  37.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  37.1k|    begin = parse_width(begin, end, handler);
 6860|  37.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  37.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 37.1k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  37.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 37.1k, False: 0]
  ------------------
 6879|  37.1k|        handler.on_localized();
 6880|  37.1k|        ++begin;
 6881|  37.1k|    }
 6882|  37.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  37.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 37.1k, False: 0]
  |  Branch (6887:25): [True: 0, False: 37.1k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  37.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  37.1k|    return begin;
 6896|  37.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|   362k|{
 6468|   362k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 288k, False: 74.2k]
  |  Branch (6468:33): [True: 288k, False: 0]
  ------------------
 6469|   362k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 74.2k, False: 0]
  |  Branch (6469:33): [True: 74.2k, False: 0]
  ------------------
 6470|   362k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|   144k|    auto do_presentation = [&]() -> const CharT* {
 6820|   144k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 144k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|   144k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 144k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   144k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   144k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|   144k|        handler.on_type(type);
 6840|   144k|        return begin;
 6841|   144k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|   288k|{
 6416|   288k|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 288k]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 288k]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 288k]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 288k]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 288k]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 288k]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 288k]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 288k]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 288k]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 288k]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|  74.6k|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 74.6k, False: 213k]
  ------------------
 6435|  74.6k|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 288k]
  ------------------
 6436|  74.6k|            return presentation_type::float_hex;
 6437|  65.3k|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 65.3k, False: 223k]
  ------------------
 6438|  65.3k|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 288k]
  ------------------
 6439|  65.3k|            return presentation_type::float_scientific;
 6440|  74.3k|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 74.3k, False: 214k]
  ------------------
 6441|  74.3k|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 288k]
  ------------------
 6442|  74.3k|            return presentation_type::float_fixed;
 6443|  74.2k|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 74.2k, False: 214k]
  ------------------
 6444|  74.2k|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 288k]
  ------------------
 6445|  74.2k|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 288k]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 288k]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 288k]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 288k]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 288k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 288k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 288k]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|   288k|    }
 6463|   288k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  37.1k|{
 6493|  37.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  37.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  37.1k|    auto check_align = [](wchar_t ch) {
 6496|  37.1k|        switch (ch) {
 6497|  37.1k|            case L'<':
 6498|  37.1k|                return align_type::left;
 6499|  37.1k|            case L'>':
 6500|  37.1k|                return align_type::right;
 6501|  37.1k|            case L'^':
 6502|  37.1k|                return align_type::center;
 6503|  37.1k|            default:
 6504|  37.1k|                return align_type::none;
 6505|  37.1k|        }
 6506|  37.1k|    };
 6507|       |
 6508|  37.1k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  37.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  |  Branch (859:45): [True: 0, False: 37.1k]
  |  |  |  Branch (859:45): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6510|  37.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  37.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  37.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  37.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  37.1k|    const auto begin_before_fill = begin;
 6520|  37.1k|    begin += potential_fill_len;
 6521|       |
 6522|  37.1k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 37.1k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  37.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  37.1k|    const auto begin_after_fill = begin;
 6528|  37.1k|    ++begin;
 6529|       |
 6530|  37.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 37.1k, False: 0]
  ------------------
 6531|  37.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.1k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  37.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 37.1k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  37.1k|    }
 6539|       |
 6540|  37.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 37.1k, False: 0]
  ------------------
 6541|  37.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 37.1k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  37.1k|        return begin_before_fill;
 6546|  37.1k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  37.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  74.2k|{
 6475|  74.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  74.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  74.2k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  74.2k|        return 1;
 6478|  74.2k|    }
 6479|  74.2k|    else {
 6480|  74.2k|        const auto lengths =
 6481|  74.2k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  74.2k|            "\3\4";
 6483|  74.2k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  74.2k|        return len;
 6485|  74.2k|    }
 6486|  74.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  74.2k|    auto check_align = [](wchar_t ch) {
 6496|  74.2k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 74.2k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 74.2k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 74.2k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  74.2k|            default:
  ------------------
  |  Branch (6503:13): [True: 74.2k, False: 0]
  ------------------
 6504|  74.2k|                return align_type::none;
 6505|  74.2k|        }
 6506|  74.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  37.1k|{
 6558|  37.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  37.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  37.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 37.1k, False: 0]
  |  Branch (6560:33): [True: 0, False: 37.1k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  37.1k|    return begin;
 6571|  37.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|  37.1k|    {
 7088|  37.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  37.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 37.1k, False: 0]
  ------------------
 7090|  37.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 37.1k, False: 0]
  ------------------
 7091|  37.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 37.1k]
  ------------------
 7092|  37.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  37.1k|        Handler::on_localized();
 7100|  37.1k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   181k|{
 8378|   181k|#define SCN_VISIT(Type)                                         \
 8379|   181k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   181k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   181k|    }                                                           \
 8382|   181k|    else {                                                      \
 8383|   181k|        return vis(monostate_val);                              \
 8384|   181k|    }
 8385|       |
 8386|   181k|    monostate monostate_val{};
 8387|       |
 8388|   181k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 181k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 181k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 181k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 181k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 181k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 181k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 181k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 181k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 181k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 181k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 181k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 181k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 181k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 181k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 181k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  60.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 60.4k, False: 120k]
  ------------------
 8420|  60.4k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  60.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  60.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  60.4k|    }                                                           \
  |  | 8382|  60.4k|    else {                                                      \
  |  | 8383|  60.4k|        return vis(monostate_val);                              \
  |  | 8384|  60.4k|    }
  ------------------
 8421|  60.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 60.4k, False: 120k]
  ------------------
 8422|  60.4k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  60.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  60.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  60.4k|    }                                                           \
  |  | 8382|  60.4k|    else {                                                      \
  |  | 8383|  60.4k|        return vis(monostate_val);                              \
  |  | 8384|  60.4k|    }
  ------------------
 8423|  60.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 60.5k, False: 120k]
  ------------------
 8424|  60.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  60.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  60.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  60.5k|    }                                                           \
  |  | 8382|  60.5k|    else {                                                      \
  |  | 8383|  60.5k|        return vis(monostate_val);                              \
  |  | 8384|  60.5k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 181k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 181k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 181k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 181k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 181k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 181k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 181k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 181k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 181k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   181k|            SCN_CLANG_POP
 8456|   181k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  55.6k|{
 8378|  55.6k|#define SCN_VISIT(Type)                                         \
 8379|  55.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  55.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  55.6k|    }                                                           \
 8382|  55.6k|    else {                                                      \
 8383|  55.6k|        return vis(monostate_val);                              \
 8384|  55.6k|    }
 8385|       |
 8386|  55.6k|    monostate monostate_val{};
 8387|       |
 8388|  55.6k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 55.6k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 55.6k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 55.6k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 55.6k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 55.6k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 55.6k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 55.6k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 55.6k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 55.6k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 55.6k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 55.6k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 55.6k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 55.6k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 55.6k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 55.6k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  18.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 18.5k, False: 37.1k]
  ------------------
 8420|  18.5k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  18.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  18.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  18.5k|    }                                                           \
  |  | 8382|  18.5k|    else {                                                      \
  |  | 8383|  18.5k|        return vis(monostate_val);                              \
  |  | 8384|  18.5k|    }
  ------------------
 8421|  18.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 18.5k, False: 37.0k]
  ------------------
 8422|  18.5k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  18.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  18.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  18.5k|    }                                                           \
  |  | 8382|  18.5k|    else {                                                      \
  |  | 8383|  18.5k|        return vis(monostate_val);                              \
  |  | 8384|  18.5k|    }
  ------------------
 8423|  18.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 18.5k, False: 37.0k]
  ------------------
 8424|  18.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  18.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  18.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  18.5k|    }                                                           \
  |  | 8382|  18.5k|    else {                                                      \
  |  | 8383|  18.5k|        return vis(monostate_val);                              \
  |  | 8384|  18.5k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 55.6k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 55.6k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 55.6k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 55.6k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 55.6k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 55.6k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 55.6k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 55.6k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 55.6k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  55.6k|            SCN_CLANG_POP
 8456|  55.6k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   181k|{
 7005|   181k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   181k|    handler.check_args_exhausted();
 7007|   181k|    return handler.get_error();
 7008|   181k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   181k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   181k|    auto begin = format.data();
 6974|   181k|    auto it = begin;
 6975|   181k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   199k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 181k, False: 18.4k]
  ------------------
 6978|   181k|        const auto ch = *it++;
 6979|   181k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 181k, False: 0]
  ------------------
 6980|   181k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|   181k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|   181k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 162k, False: 18.4k]
  ------------------
 6984|   162k|                return;
 6985|   162k|            }
 6986|   181k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   181k|    }
 6997|       |
 6998|  18.4k|    handler.on_literal_text(begin, end);
 6999|  18.4k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8135|  18.4k|    {
 8136|  18.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  18.4k|    static_cast<    \
  |  |  929|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  18.4k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6902|   181k|{
 6903|   181k|    struct id_adapter {
 6904|   181k|        constexpr void operator()()
 6905|   181k|        {
 6906|   181k|            arg_id = handler.on_arg_id();
 6907|   181k|        }
 6908|   181k|        constexpr void operator()(std::size_t id)
 6909|   181k|        {
 6910|   181k|            arg_id = handler.on_arg_id(id);
 6911|   181k|        }
 6912|       |
 6913|   181k|        constexpr void on_error(const char* msg)
 6914|   181k|        {
 6915|   181k|            SCN_UNLIKELY_ATTR
 6916|   181k|            handler.on_error(msg);
 6917|   181k|        }
 6918|       |
 6919|   181k|        Handler& handler;
 6920|   181k|        std::size_t arg_id;
 6921|   181k|    };
 6922|       |
 6923|   181k|    ++begin;
 6924|   181k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|   181k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 181k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|   181k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 181k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|   181k|    else {
 6936|   181k|        auto adapter = id_adapter{handler, 0};
 6937|   181k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|   181k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|   181k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 181k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|   181k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 181k, False: 0]
  ------------------
 6948|   181k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|   181k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|   181k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  |  Branch (859:45): [True: 0, False: 181k]
  |  |  |  Branch (859:45): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|   181k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|   181k|    }
 6964|   181k|    return begin + 1;
 6965|   181k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|   181k|{
 6404|   181k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|   181k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 181k, False: 0]
  |  Branch (6405:26): [True: 0, False: 181k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|   181k|    handler();
 6410|   181k|    return begin;
 6411|   181k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|   181k|        {
 6906|   181k|            arg_id = handler.on_arg_id();
 6907|   181k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|   181k|    {
 7083|   181k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|   181k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6818|   181k|{
 6819|   181k|    auto do_presentation = [&]() -> const CharT* {
 6820|   181k|        if (*begin == CharT{'['}) {
 6821|   181k|            auto set = parse_presentation_set(begin, end, handler);
 6822|   181k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|   181k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|   181k|                return begin;
 6827|   181k|            }
 6828|   181k|            handler.on_character_set_string(set);
 6829|   181k|            return begin;
 6830|   181k|        }
 6831|   181k|        if (*begin == CharT{'/'}) {
 6832|   181k|            return parse_presentation_regex(begin, end, handler);
 6833|   181k|        }
 6834|   181k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   181k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|   181k|            handler.on_error("Invalid type specifier in format string");
 6837|   181k|            return begin;
 6838|   181k|        }
 6839|   181k|        handler.on_type(type);
 6840|   181k|        return begin;
 6841|   181k|    };
 6842|       |
 6843|   181k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 181k, False: 0]
  |  Branch (6843:28): [True: 181k, False: 0]
  ------------------
 6844|   181k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 181k, False: 0]
  |  Branch (6844:36): [True: 144k, False: 37.0k]
  ------------------
 6845|   144k|        return do_presentation();
 6846|   144k|    }
 6847|       |
 6848|  37.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  37.0k|    begin = parse_align(begin, end, handler);
 6854|  37.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  37.0k|    begin = parse_width(begin, end, handler);
 6860|  37.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  37.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 37.0k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  37.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 37.0k, False: 0]
  ------------------
 6879|  37.0k|        handler.on_localized();
 6880|  37.0k|        ++begin;
 6881|  37.0k|    }
 6882|  37.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  37.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 37.0k, False: 0]
  |  Branch (6887:25): [True: 0, False: 37.0k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  37.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  37.0k|    return begin;
 6896|  37.0k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|   144k|    auto do_presentation = [&]() -> const CharT* {
 6820|   144k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 144k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|   144k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 144k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|   144k|        presentation_type type = parse_presentation_type(*begin++);
 6835|   144k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|   144k|        handler.on_type(type);
 6840|   144k|        return begin;
 6841|   144k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6492|  37.0k|{
 6493|  37.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  37.0k|    auto check_align = [](wchar_t ch) {
 6496|  37.0k|        switch (ch) {
 6497|  37.0k|            case L'<':
 6498|  37.0k|                return align_type::left;
 6499|  37.0k|            case L'>':
 6500|  37.0k|                return align_type::right;
 6501|  37.0k|            case L'^':
 6502|  37.0k|                return align_type::center;
 6503|  37.0k|            default:
 6504|  37.0k|                return align_type::none;
 6505|  37.0k|        }
 6506|  37.0k|    };
 6507|       |
 6508|  37.0k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  37.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.0k]
  |  |  |  Branch (859:45): [True: 0, False: 37.0k]
  |  |  |  Branch (859:45): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 6510|  37.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  37.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  37.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  37.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  37.0k|    const auto begin_before_fill = begin;
 6520|  37.0k|    begin += potential_fill_len;
 6521|       |
 6522|  37.0k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 37.0k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  37.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  37.0k|    const auto begin_after_fill = begin;
 6528|  37.0k|    ++begin;
 6529|       |
 6530|  37.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 37.0k, False: 0]
  ------------------
 6531|  37.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.0k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  37.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 37.0k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  37.0k|    }
 6539|       |
 6540|  37.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 37.0k, False: 0]
  ------------------
 6541|  37.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 37.0k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  37.0k|        return begin_before_fill;
 6546|  37.0k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  37.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  74.1k|    auto check_align = [](wchar_t ch) {
 6496|  74.1k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 74.1k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 74.1k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 74.1k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  74.1k|            default:
  ------------------
  |  Branch (6503:13): [True: 74.1k, False: 0]
  ------------------
 6504|  74.1k|                return align_type::none;
 6505|  74.1k|        }
 6506|  74.1k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6557|  37.0k|{
 6558|  37.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  37.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 37.0k, False: 0]
  |  Branch (6560:33): [True: 0, False: 37.0k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  37.0k|    return begin;
 6571|  37.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7087|  37.0k|    {
 7088|  37.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  37.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 37.0k, False: 0]
  ------------------
 7090|  37.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 37.0k, False: 0]
  ------------------
 7091|  37.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 37.0k]
  ------------------
 7092|  37.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  37.0k|        Handler::on_localized();
 7100|  37.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|   181k|{
 8378|   181k|#define SCN_VISIT(Type)                                         \
 8379|   181k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|   181k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|   181k|    }                                                           \
 8382|   181k|    else {                                                      \
 8383|   181k|        return vis(monostate_val);                              \
 8384|   181k|    }
 8385|       |
 8386|   181k|    monostate monostate_val{};
 8387|       |
 8388|   181k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 181k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 181k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 181k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 181k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 181k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 181k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 181k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 181k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 181k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 181k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 181k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 181k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 181k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 181k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 181k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  60.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 60.3k, False: 120k]
  ------------------
 8420|  60.3k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  60.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  60.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  60.3k|    }                                                           \
  |  | 8382|  60.3k|    else {                                                      \
  |  | 8383|  60.3k|        return vis(monostate_val);                              \
  |  | 8384|  60.3k|    }
  ------------------
 8421|  60.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 60.4k, False: 120k]
  ------------------
 8422|  60.4k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  60.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  60.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  60.4k|    }                                                           \
  |  | 8382|  60.4k|    else {                                                      \
  |  | 8383|  60.4k|        return vis(monostate_val);                              \
  |  | 8384|  60.4k|    }
  ------------------
 8423|  60.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 60.5k, False: 120k]
  ------------------
 8424|  60.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  60.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  60.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  60.5k|    }                                                           \
  |  | 8382|  60.5k|    else {                                                      \
  |  | 8383|  60.5k|        return vis(monostate_val);                              \
  |  | 8384|  60.5k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 181k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 181k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 181k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 181k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 181k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 181k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 181k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 181k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 181k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|   181k|            SCN_CLANG_POP
 8456|   181k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4046|   211k|    {
 4047|   211k|        sync(0);
 4048|   211k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5380|   424k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5380|  37.1k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  36.3k|{
   89|  36.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  36.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  36.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   109k|{
   44|   109k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   109k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  36.3k|{
  127|  36.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  36.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  36.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  36.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   109k|{
   60|   109k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   109k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  6.17k|{
  163|  6.17k|    T value;
  164|  6.17k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.17k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.42k, False: 748]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.42k|    }                                                  \
  |  |  |  | 3642|  6.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    748|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|    748|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    748|    static_cast<    \
  |  |  929|    748|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    748|    static_cast<    \
  |  |  929|    748|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.17k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  18.5k|{
   72|  18.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  18.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  36.4k|{
   89|  36.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  36.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  36.4k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  36.4k|{
  127|  36.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  36.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  36.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  36.4k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  6.18k|{
  163|  6.18k|    T value;
  164|  6.18k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.18k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.42k, False: 756]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.42k|    }                                                  \
  |  |  |  | 3642|  6.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    756|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|    756|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    756|    static_cast<    \
  |  |  929|    756|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    756|    static_cast<    \
  |  |  929|    756|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.18k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  36.4k|{
   89|  36.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  36.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  36.4k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  36.4k|{
  127|  36.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  36.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  36.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  36.4k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  6.19k|{
  163|  6.19k|    T value;
  164|  6.19k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.42k, False: 770]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.42k|    }                                                  \
  |  |  |  | 3642|  6.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    770|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|    770|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    770|    static_cast<    \
  |  |  929|    770|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    770|    static_cast<    \
  |  |  929|    770|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.19k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  36.3k|{
   89|  36.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  36.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  36.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   109k|{
   44|   109k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   109k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  36.3k|{
  127|  36.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  36.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  36.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  36.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   109k|{
   60|   109k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   109k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  6.17k|{
  163|  6.17k|    T value;
  164|  6.17k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.17k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.42k, False: 744]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.42k|    }                                                  \
  |  |  |  | 3642|  6.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    744|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|    744|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    744|    static_cast<    \
  |  |  929|    744|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    744|    static_cast<    \
  |  |  929|    744|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.17k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  18.5k|{
   72|  18.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  18.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  36.3k|{
   89|  36.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  36.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  36.3k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  36.3k|{
  127|  36.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  36.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  36.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.3k|    static_cast<    \
  |  |  929|  36.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  36.3k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  6.18k|{
  163|  6.18k|    T value;
  164|  6.18k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.18k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.42k, False: 752]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.42k|    }                                                  \
  |  |  |  | 3642|  6.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    752|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|    752|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    752|    static_cast<    \
  |  |  929|    752|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    752|    static_cast<    \
  |  |  929|    752|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.18k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  36.4k|{
   89|  36.4k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  36.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  36.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  36.4k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  36.4k|{
  127|  36.4k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  36.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  36.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  36.4k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  6.19k|{
  163|  6.19k|    T value;
  164|  6.19k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  6.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  6.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.42k, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.42k|    }                                                  \
  |  |  |  | 3642|  6.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|    766|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    766|    static_cast<    \
  |  |  929|    766|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|    766|    static_cast<    \
  |  |  929|    766|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  6.19k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.18M|{
  653|  2.18M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.18M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   949k|{
  659|   949k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   949k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 474k, False: 474k]
  ------------------
  661|   949k|                    : std::locale{};
  662|   949k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.31M|{
 1221|  1.31M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.31M|                                  m_nan_payload_buffer, value);
 1223|  1.31M|    value = this->setsign(value);
 1224|  1.31M|    return n;
 1225|  1.31M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  54.5k|{
 1221|  54.5k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  54.5k|                                  m_nan_payload_buffer, value);
 1223|  54.5k|    value = this->setsign(value);
 1224|  54.5k|    return n;
 1225|  54.5k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.42M|{
 1221|  1.42M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.42M|                                  m_nan_payload_buffer, value);
 1223|  1.42M|    value = this->setsign(value);
 1224|  1.42M|    return n;
 1225|  1.42M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  54.5k|{
 1221|  54.5k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  54.5k|                                  m_nan_payload_buffer, value);
 1223|  54.5k|    value = this->setsign(value);
 1224|  54.5k|    return n;
 1225|  54.5k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.44M|{
 1221|  1.44M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.44M|                                  m_nan_payload_buffer, value);
 1223|  1.44M|    value = this->setsign(value);
 1224|  1.44M|    return n;
 1225|  1.44M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  54.6k|{
 1221|  54.6k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  54.6k|                                  m_nan_payload_buffer, value);
 1223|  54.6k|    value = this->setsign(value);
 1224|  54.6k|    return n;
 1225|  54.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|   986k|{
 2176|   986k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|   986k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   978k|{
 2184|   978k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   978k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   978k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 929k, False: 48.8k]
  |  |  ------------------
  ------------------
 2186|   929k|        source.sync(*n);
 2187|   929k|    }
 2188|  48.8k|    else {
 2189|  48.8k|        source.sync_all();
 2190|  48.8k|    }
 2191|   978k|    return n;
 2192|   978k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   109k|{
 2200|   109k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   109k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   109k|{
 2208|   109k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   109k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.5k, False: 97.7k]
  |  |  ------------------
  ------------------
 2210|  11.5k|        source.sync(*n);
 2211|  11.5k|    }
 2212|  97.7k|    else {
 2213|  97.7k|        source.sync_all();
 2214|  97.7k|    }
 2215|   109k|    return n;
 2216|   109k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  1.92M|{
  194|  1.92M|    return find_classic_impl(
  195|  1.92M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  1.92M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  1.92M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  4.34M|{
  202|  4.34M|    return find_classic_impl(
  203|  4.34M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  4.34M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  4.34M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|   986k|{
 2133|   986k|    return vscan_internal(source, format, args);
 2134|   986k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|   978k|{
 2139|   978k|    auto n = vscan_internal(source, format, args);
 2140|   978k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   978k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 929k, False: 48.8k]
  |  |  ------------------
  ------------------
 2141|   929k|        source.sync(*n);
 2142|   929k|    }
 2143|  48.8k|    else {
 2144|  48.8k|        source.sync_all();
 2145|  48.8k|    }
 2146|   978k|    return n;
 2147|   978k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   109k|{
 2153|   109k|    return vscan_internal(source, format, args);
 2154|   109k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   109k|{
 2159|   109k|    auto n = vscan_internal(source, format, args);
 2160|   109k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.5k, False: 97.7k]
  |  |  ------------------
  ------------------
 2161|  11.5k|        source.sync(*n);
 2162|  11.5k|    }
 2163|  97.7k|    else {
 2164|  97.7k|        source.sync_all();
 2165|  97.7k|    }
 2166|   109k|    return n;
 2167|   109k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   220k|{
 2243|   220k|    return vscan_value_internal(source, arg);
 2244|   220k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   203k|{
 2248|   203k|    auto n = vscan_value_internal(source, arg);
 2249|   203k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   203k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 195k, False: 8.14k]
  |  |  ------------------
  ------------------
 2250|   195k|        source.sync(*n);
 2251|   195k|    }
 2252|  8.14k|    else {
 2253|  8.14k|        source.sync_all();
 2254|  8.14k|    }
 2255|   203k|    return n;
 2256|   203k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  18.5k|{
 2262|  18.5k|    return vscan_value_internal(source, arg);
 2263|  18.5k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  18.5k|{
 2268|  18.5k|    auto n = vscan_value_internal(source, arg);
 2269|  18.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  18.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.26k, False: 16.2k]
  |  |  ------------------
  ------------------
 2270|  2.26k|        source.sync(*n);
 2271|  2.26k|    }
 2272|  16.2k|    else {
 2273|  16.2k|        source.sync_all();
 2274|  16.2k|    }
 2275|  18.5k|    return n;
 2276|  18.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  1.92M|{
  118|  1.92M|    auto it = source.begin();
  119|       |
  120|  7.92M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 6.76M, False: 1.16M]
  ------------------
  121|  6.76M|        auto sv =
  122|  6.76M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  6.76M|                .substr(0, 8);
  124|       |
  125|  6.76M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 6.61M, False: 149k]
  ------------------
  126|  6.61M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  6.61M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  6.61M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 704k, False: 5.90M]
  ------------------
  129|   704k|                break;
  130|   704k|            }
  131|  5.90M|            continue;
  132|  6.61M|        }
  133|       |
  134|   513k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 424k, False: 88.1k]
  ------------------
  135|   424k|            auto tmp =
  136|   424k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   424k|            auto res = get_next_code_point(tmp);
  138|   424k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 60.8k, False: 364k]
  ------------------
  139|  60.8k|                return it;
  140|  60.8k|            }
  141|   364k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   364k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   364k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   364k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   364k|        }
  145|   149k|    }
  146|       |
  147|  1.86M|    return detail::make_string_view_iterator(source, it);
  148|  1.92M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  9.56M|{
  105|  9.56M|    static_assert(sizeof(*source.data()) == 1);
  106|  9.56M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  9.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  9.56M|    uint64_t word{};
  108|  9.56M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  9.56M|    return has_byte_greater(word, 127) != 0;
  111|  9.56M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  43.7M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   424k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.34M|{
  118|  4.34M|    auto it = source.begin();
  119|       |
  120|  4.70M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.80M, False: 1.90M]
  ------------------
  121|  2.80M|        auto sv =
  122|  2.80M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.80M|                .substr(0, 8);
  124|       |
  125|  2.80M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.64M, False: 157k]
  ------------------
  126|  2.64M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.64M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.64M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.28M, False: 356k]
  ------------------
  129|  2.28M|                break;
  130|  2.28M|            }
  131|   356k|            continue;
  132|  2.64M|        }
  133|       |
  134|   300k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 288k, False: 11.4k]
  ------------------
  135|   288k|            auto tmp =
  136|   288k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   288k|            auto res = get_next_code_point(tmp);
  138|   288k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 146k, False: 142k]
  ------------------
  139|   146k|                return it;
  140|   146k|            }
  141|   142k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   142k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   142k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   142k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   142k|        }
  145|   157k|    }
  146|       |
  147|  4.19M|    return detail::make_string_view_iterator(source, it);
  148|  4.34M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.19M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   288k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.31M|{
 1138|  1.31M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 12.8k, False: 1.30M]
  ------------------
 1139|  12.8k|        value = std::numeric_limits<T>::infinity();
 1140|  12.8k|        return 3;
 1141|  12.8k|    }
 1142|  1.30M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 9.73k, False: 1.29M]
  ------------------
 1143|  9.73k|        value = std::numeric_limits<T>::infinity();
 1144|  9.73k|        return 8;
 1145|  9.73k|    }
 1146|  1.29M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 53.0k, False: 1.24M]
  ------------------
 1147|  53.0k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  53.0k|        return 3;
 1149|  53.0k|    }
 1150|  1.24M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.24M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.24M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.24M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 282k, False: 957k]
  ------------------
 1185|   282k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.54k, False: 280k]
  |  |  ------------------
  ------------------
 1186|  2.54k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.54k|                                         "Invalid floating-point digit");
 1188|  2.54k|        }
 1189|   282k|    }
 1190|  1.23M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 1.23M]
  |  |  ------------------
  ------------------
 1191|  6.88k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.88k|                                     "Invalid floating-point digit");
 1193|  6.88k|    }
 1194|       |
 1195|  1.23M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.23M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.23M|            double tmp{};
 1200|  1.23M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.23M|            value = tmp;
 1202|  1.23M|            return ret;
 1203|  1.23M|        }
 1204|  1.23M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.23M|            return fast_float_fallback(data, value);
 1208|  1.23M|        }
 1209|  1.23M|    }
 1210|  1.23M|    else {
 1211|       |        // Default to fast_float
 1212|  1.23M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.23M|    }
 1214|  1.23M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.23M|    {
 1078|  1.23M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  4.59M|    {
  712|  4.59M|        return {kind, options};
  713|  4.59M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.23M|    {
 1082|  1.23M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 279k, False: 951k]
  ------------------
 1083|  1.23M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 44.4k, False: 906k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   324k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   324k|                                              value);
 1087|   324k|        }
 1088|       |
 1089|   906k|        const auto flags = get_flags();
 1090|   906k|        const auto view = get_view();
 1091|   906k|        const auto result = fast_float::from_chars(
 1092|   906k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   906k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   906k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.84k, False: 897k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  8.84k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  8.84k|                                              value);
 1102|  8.84k|        }
 1103|       |
 1104|   897k|        return result.ptr - view.data();
 1105|   906k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   333k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   333k|    {
 1048|   333k|#if !SCN_DISABLE_STRTOD
 1049|   333k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   333k|    }
 1056|   333k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   333k|    {
  894|   333k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   336k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   333k|    {
  898|   333k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   333k|                           generic_strtod);
  900|   333k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   333k|    {
  732|   333k|        CharT* end{};
  733|   333k|        errno = 0;
  734|   333k|        value = strtod_cb(src, &end);
  735|   333k|        const auto saved_errno = errno;
  736|   333k|        auto chars_read = end - src;
  737|       |
  738|   333k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   333k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 322k]
  |  |  ------------------
  ------------------
  740|  10.4k|            return unexpected(e);
  741|  10.4k|        }
  742|       |
  743|   322k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 278k, False: 44.0k]
  ------------------
  744|   322k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 278k, False: 0]
  ------------------
  745|   278k|            chars_read -= 2;
  746|   278k|        }
  747|       |
  748|   322k|        return chars_read;
  749|   333k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   336k|    {
  778|   336k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 86.8k, False: 249k]
  |  Branch (778:37): [True: 0, False: 86.8k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   336k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 44.5k, False: 292k]
  ------------------
  785|   336k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 44.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   336k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 11.4k, False: 325k]
  |  Branch (791:34): [True: 1.53k, False: 9.90k]
  ------------------
  792|  1.53k|            SCN_UNLIKELY_ATTR
  793|  1.53k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.53k|        }
  795|       |
  796|   335k|        SCN_GCC_COMPAT_PUSH
  797|   335k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   335k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 335k, False: 0]
  ------------------
  800|   335k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 335k, False: 0]
  ------------------
  801|   335k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 9.26k, False: 326k]
  ------------------
  802|  9.26k|            SCN_UNLIKELY_ATTR
  803|  9.26k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  9.26k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   326k|            return {};
  809|   335k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   348k|{
  687|   348k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 88.4k, False: 259k]
  |  Branch (687:25): [True: 0, False: 259k]
  ------------------
  688|   348k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   333k|    {
  755|   333k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 326k, False: 6.28k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   326k|            auto first_space = read_until_classic_space(input.view());
  758|   326k|            input.assign(
  759|   326k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   326k|        }
  761|       |
  762|   333k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 279k, False: 53.2k]
  ------------------
  763|   279k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   279k|                input.get_allocated_string().insert(0, "0x");
  765|   279k|            }
  766|   279k|            else {
  767|   279k|                input.get_allocated_string().insert(0, L"0x");
  768|   279k|            }
  769|   279k|        }
  770|       |
  771|   333k|        return input.get_allocated_string().c_str();
  772|   333k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   333k|    {
  905|   333k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   333k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   333k|        }
  908|   333k|        else {
  909|   333k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   333k|        }
  911|   333k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   333k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   333k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   333k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   333k|            return std::strtof(str, str_end);
  839|   333k|        }
  840|   333k|        else if constexpr (std::is_same_v<T, double>) {
  841|   333k|            return std::strtod(str, str_end);
  842|   333k|        }
  843|   333k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   333k|            return std::strtold(str, str_end);
  845|   333k|        }
  846|   333k|#endif
  847|   333k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.92M|    {
 1061|  1.92M|        unsigned format_flags{};
 1062|  1.92M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.90M, False: 16.8k]
  ------------------
 1063|  1.90M|            format_flags |= fast_float::fixed;
 1064|  1.90M|        }
 1065|  1.92M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.68M, False: 236k]
  ------------------
 1066|  1.68M|            format_flags |= fast_float::scientific;
 1067|  1.68M|        }
 1068|       |
 1069|  1.92M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.92M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   906k|    {
 1110|   906k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   906k|            return m_input.view();
 1112|   906k|        }
 1113|   906k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   906k|            return std::u16string_view{
 1115|   906k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   906k|                m_input.view().size()};
 1117|   906k|        }
 1118|   906k|        else {
 1119|   906k|            return std::u32string_view{
 1120|   906k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   906k|                m_input.view().size()};
 1122|   906k|        }
 1123|   906k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  54.5k|{
 1138|  54.5k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 54.5k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  54.5k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 54.5k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  54.5k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 54.5k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  54.5k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 54.5k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  54.5k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  54.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  54.5k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 13.8k, False: 40.6k]
  ------------------
 1185|  13.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 3.16k]
  |  |  ------------------
  ------------------
 1186|  10.6k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.6k|                                         "Invalid floating-point digit");
 1188|  10.6k|        }
 1189|  13.8k|    }
 1190|  43.8k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 17.0k]
  |  |  ------------------
  ------------------
 1191|  26.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  26.7k|                                     "Invalid floating-point digit");
 1193|  26.7k|    }
 1194|       |
 1195|  17.0k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  17.0k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  17.0k|            double tmp{};
 1200|  17.0k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  17.0k|            value = tmp;
 1202|  17.0k|            return ret;
 1203|  17.0k|        }
 1204|  17.0k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  17.0k|            return fast_float_fallback(data, value);
 1208|  17.0k|        }
 1209|  17.0k|    }
 1210|  17.0k|    else {
 1211|       |        // Default to fast_float
 1212|  17.0k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  17.0k|    }
 1214|  17.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  17.0k|    {
 1078|  17.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  58.2k|    {
  712|  58.2k|        return {kind, options};
  713|  58.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  17.0k|    {
 1082|  17.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 3.14k, False: 13.9k]
  ------------------
 1083|  17.0k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 84, False: 13.8k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  3.22k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  3.22k|                                              value);
 1087|  3.22k|        }
 1088|       |
 1089|  13.8k|        const auto flags = get_flags();
 1090|  13.8k|        const auto view = get_view();
 1091|  13.8k|        const auto result = fast_float::from_chars(
 1092|  13.8k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  13.8k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  13.8k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 354, False: 13.4k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    354|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    354|                                              value);
 1102|    354|        }
 1103|       |
 1104|  13.4k|        return result.ptr - view.data();
 1105|  13.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  3.57k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  3.57k|    {
 1048|  3.57k|#if !SCN_DISABLE_STRTOD
 1049|  3.57k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  3.57k|    }
 1056|  3.57k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  3.57k|    {
  894|  3.57k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  3.57k|    {
  898|  3.57k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  3.57k|                           generic_strtod);
  900|  3.57k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  3.57k|    {
  732|  3.57k|        CharT* end{};
  733|  3.57k|        errno = 0;
  734|  3.57k|        value = strtod_cb(src, &end);
  735|  3.57k|        const auto saved_errno = errno;
  736|  3.57k|        auto chars_read = end - src;
  737|       |
  738|  3.57k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  3.57k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 358, False: 3.22k]
  |  |  ------------------
  ------------------
  740|    358|            return unexpected(e);
  741|    358|        }
  742|       |
  743|  3.22k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 3.13k, False: 84]
  ------------------
  744|  3.22k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 3.13k, False: 0]
  ------------------
  745|  3.13k|            chars_read -= 2;
  746|  3.13k|        }
  747|       |
  748|  3.22k|        return chars_read;
  749|  3.57k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  3.57k|    {
  755|  3.57k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 3.27k, False: 307]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  3.27k|            auto first_space = read_until_classic_space(input.view());
  758|  3.27k|            input.assign(
  759|  3.27k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  3.27k|        }
  761|       |
  762|  3.57k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 3.14k, False: 438]
  ------------------
  763|  3.14k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  3.14k|                input.get_allocated_string().insert(0, "0x");
  765|  3.14k|            }
  766|  3.14k|            else {
  767|  3.14k|                input.get_allocated_string().insert(0, L"0x");
  768|  3.14k|            }
  769|  3.14k|        }
  770|       |
  771|  3.57k|        return input.get_allocated_string().c_str();
  772|  3.57k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  3.57k|    {
  905|  3.57k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  3.57k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  3.57k|        }
  908|  3.57k|        else {
  909|  3.57k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  3.57k|        }
  911|  3.57k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  3.57k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  3.57k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  3.57k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  3.57k|            return std::wcstof(str, str_end);
  877|  3.57k|        }
  878|  3.57k|        else if constexpr (std::is_same_v<T, double>) {
  879|  3.57k|            return std::wcstod(str, str_end);
  880|  3.57k|        }
  881|  3.57k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  3.57k|            return std::wcstold(str, str_end);
  883|  3.57k|        }
  884|  3.57k|#endif
  885|  3.57k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  13.8k|    {
 1110|  13.8k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  13.8k|            return m_input.view();
 1112|  13.8k|        }
 1113|  13.8k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  13.8k|            return std::u16string_view{
 1115|  13.8k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  13.8k|                m_input.view().size()};
 1117|  13.8k|        }
 1118|  13.8k|        else {
 1119|  13.8k|            return std::u32string_view{
 1120|  13.8k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  13.8k|                m_input.view().size()};
 1122|  13.8k|        }
 1123|  13.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.42M|{
 1138|  1.42M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.0k, False: 1.41M]
  ------------------
 1139|  14.0k|        value = std::numeric_limits<T>::infinity();
 1140|  14.0k|        return 3;
 1141|  14.0k|    }
 1142|  1.41M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.2k, False: 1.40M]
  ------------------
 1143|  10.2k|        value = std::numeric_limits<T>::infinity();
 1144|  10.2k|        return 8;
 1145|  10.2k|    }
 1146|  1.40M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 54.8k, False: 1.34M]
  ------------------
 1147|  54.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  54.8k|        return 3;
 1149|  54.8k|    }
 1150|  1.34M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.34M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.34M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.34M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 294k, False: 1.05M]
  ------------------
 1185|   294k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 291k]
  |  |  ------------------
  ------------------
 1186|  2.77k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.77k|                                         "Invalid floating-point digit");
 1188|  2.77k|        }
 1189|   294k|    }
 1190|  1.34M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.02k, False: 1.33M]
  |  |  ------------------
  ------------------
 1191|  8.02k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.02k|                                     "Invalid floating-point digit");
 1193|  8.02k|    }
 1194|       |
 1195|  1.33M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.33M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.33M|            double tmp{};
 1200|  1.33M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.33M|            value = tmp;
 1202|  1.33M|            return ret;
 1203|  1.33M|        }
 1204|  1.33M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.33M|            return fast_float_fallback(data, value);
 1208|  1.33M|        }
 1209|  1.33M|    }
 1210|  1.33M|    else {
 1211|       |        // Default to fast_float
 1212|  1.33M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.33M|    }
 1214|  1.33M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.33M|    {
 1078|  1.33M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.33M|    {
 1082|  1.33M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 291k, False: 1.04M]
  ------------------
 1083|  1.33M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 52.9k, False: 991k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   344k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   344k|                                              value);
 1087|   344k|        }
 1088|       |
 1089|   991k|        const auto flags = get_flags();
 1090|   991k|        const auto view = get_view();
 1091|   991k|        const auto result = fast_float::from_chars(
 1092|   991k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   991k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   991k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 991k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   991k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   991k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.94k, False: 987k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  3.94k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  3.94k|                                              value);
 1102|  3.94k|        }
 1103|       |
 1104|   987k|        return result.ptr - view.data();
 1105|   991k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   348k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   348k|    {
 1048|   348k|#if !SCN_DISABLE_STRTOD
 1049|   348k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   348k|    }
 1056|   348k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   348k|    {
  894|   348k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   351k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   348k|    {
  898|   348k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   348k|                           generic_strtod);
  900|   348k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   348k|    {
  732|   348k|        CharT* end{};
  733|   348k|        errno = 0;
  734|   348k|        value = strtod_cb(src, &end);
  735|   348k|        const auto saved_errno = errno;
  736|   348k|        auto chars_read = end - src;
  737|       |
  738|   348k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   348k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 343k]
  |  |  ------------------
  ------------------
  740|  4.47k|            return unexpected(e);
  741|  4.47k|        }
  742|       |
  743|   343k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 291k, False: 52.8k]
  ------------------
  744|   343k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 291k, False: 0]
  ------------------
  745|   291k|            chars_read -= 2;
  746|   291k|        }
  747|       |
  748|   343k|        return chars_read;
  749|   348k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   351k|    {
  778|   351k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 88.7k, False: 263k]
  |  Branch (778:37): [True: 0, False: 88.7k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   351k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 52.9k, False: 298k]
  ------------------
  785|   351k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 52.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   351k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.69k, False: 347k]
  |  Branch (791:34): [True: 462, False: 4.23k]
  ------------------
  792|    462|            SCN_UNLIKELY_ATTR
  793|    462|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    462|        }
  795|       |
  796|   351k|        SCN_GCC_COMPAT_PUSH
  797|   351k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   351k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 351k, False: 0]
  ------------------
  800|   351k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 351k, False: 0]
  ------------------
  801|   351k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.23k, False: 347k]
  ------------------
  802|  4.23k|            SCN_UNLIKELY_ATTR
  803|  4.23k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.23k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   347k|            return {};
  809|   351k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   356k|{
  691|   356k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 89.1k, False: 267k]
  |  Branch (691:24): [True: 0, False: 267k]
  ------------------
  692|   356k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   348k|    {
  755|   348k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 343k, False: 4.46k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   343k|            auto first_space = read_until_classic_space(input.view());
  758|   343k|            input.assign(
  759|   343k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   343k|        }
  761|       |
  762|   348k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 291k, False: 56.8k]
  ------------------
  763|   291k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   291k|                input.get_allocated_string().insert(0, "0x");
  765|   291k|            }
  766|   291k|            else {
  767|   291k|                input.get_allocated_string().insert(0, L"0x");
  768|   291k|            }
  769|   291k|        }
  770|       |
  771|   348k|        return input.get_allocated_string().c_str();
  772|   348k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   348k|    {
  905|   348k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   348k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   348k|        }
  908|   348k|        else {
  909|   348k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   348k|        }
  911|   348k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   348k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   348k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   348k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   348k|            return std::strtof(str, str_end);
  839|   348k|        }
  840|   348k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   348k|            return std::strtod(str, str_end);
  842|   348k|        }
  843|   348k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   348k|            return std::strtold(str, str_end);
  845|   348k|        }
  846|   348k|#endif
  847|   348k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   991k|    {
 1110|   991k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   991k|            return m_input.view();
 1112|   991k|        }
 1113|   991k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   991k|            return std::u16string_view{
 1115|   991k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   991k|                m_input.view().size()};
 1117|   991k|        }
 1118|   991k|        else {
 1119|   991k|            return std::u32string_view{
 1120|   991k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   991k|                m_input.view().size()};
 1122|   991k|        }
 1123|   991k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  54.5k|{
 1138|  54.5k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 54.5k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  54.5k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 54.5k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  54.5k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 54.5k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  54.5k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 54.5k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  54.5k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  54.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  54.5k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 13.8k, False: 40.7k]
  ------------------
 1185|  13.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 3.16k]
  |  |  ------------------
  ------------------
 1186|  10.6k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.6k|                                         "Invalid floating-point digit");
 1188|  10.6k|        }
 1189|  13.8k|    }
 1190|  43.8k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.8k, False: 17.0k]
  |  |  ------------------
  ------------------
 1191|  26.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  26.8k|                                     "Invalid floating-point digit");
 1193|  26.8k|    }
 1194|       |
 1195|  17.0k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  17.0k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  17.0k|            double tmp{};
 1200|  17.0k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  17.0k|            value = tmp;
 1202|  17.0k|            return ret;
 1203|  17.0k|        }
 1204|  17.0k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  17.0k|            return fast_float_fallback(data, value);
 1208|  17.0k|        }
 1209|  17.0k|    }
 1210|  17.0k|    else {
 1211|       |        // Default to fast_float
 1212|  17.0k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  17.0k|    }
 1214|  17.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  17.0k|    {
 1078|  17.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  17.0k|    {
 1082|  17.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 3.14k, False: 13.9k]
  ------------------
 1083|  17.0k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 84, False: 13.8k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  3.22k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  3.22k|                                              value);
 1087|  3.22k|        }
 1088|       |
 1089|  13.8k|        const auto flags = get_flags();
 1090|  13.8k|        const auto view = get_view();
 1091|  13.8k|        const auto result = fast_float::from_chars(
 1092|  13.8k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  13.8k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  13.8k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214, False: 13.6k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    214|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    214|                                              value);
 1102|    214|        }
 1103|       |
 1104|  13.6k|        return result.ptr - view.data();
 1105|  13.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  3.43k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  3.43k|    {
 1048|  3.43k|#if !SCN_DISABLE_STRTOD
 1049|  3.43k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  3.43k|    }
 1056|  3.43k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  3.43k|    {
  894|  3.43k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  3.43k|    {
  898|  3.43k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  3.43k|                           generic_strtod);
  900|  3.43k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  3.43k|    {
  732|  3.43k|        CharT* end{};
  733|  3.43k|        errno = 0;
  734|  3.43k|        value = strtod_cb(src, &end);
  735|  3.43k|        const auto saved_errno = errno;
  736|  3.43k|        auto chars_read = end - src;
  737|       |
  738|  3.43k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  3.43k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 218, False: 3.22k]
  |  |  ------------------
  ------------------
  740|    218|            return unexpected(e);
  741|    218|        }
  742|       |
  743|  3.22k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 3.13k, False: 84]
  ------------------
  744|  3.22k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 3.13k, False: 0]
  ------------------
  745|  3.13k|            chars_read -= 2;
  746|  3.13k|        }
  747|       |
  748|  3.22k|        return chars_read;
  749|  3.43k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  3.43k|    {
  755|  3.43k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 3.20k, False: 237]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  3.20k|            auto first_space = read_until_classic_space(input.view());
  758|  3.20k|            input.assign(
  759|  3.20k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  3.20k|        }
  761|       |
  762|  3.43k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 3.14k, False: 298]
  ------------------
  763|  3.14k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  3.14k|                input.get_allocated_string().insert(0, "0x");
  765|  3.14k|            }
  766|  3.14k|            else {
  767|  3.14k|                input.get_allocated_string().insert(0, L"0x");
  768|  3.14k|            }
  769|  3.14k|        }
  770|       |
  771|  3.43k|        return input.get_allocated_string().c_str();
  772|  3.43k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  3.43k|    {
  905|  3.43k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  3.43k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  3.43k|        }
  908|  3.43k|        else {
  909|  3.43k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  3.43k|        }
  911|  3.43k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  3.43k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  3.43k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  3.43k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  3.43k|            return std::wcstof(str, str_end);
  877|  3.43k|        }
  878|  3.43k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  3.43k|            return std::wcstod(str, str_end);
  880|  3.43k|        }
  881|  3.43k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  3.43k|            return std::wcstold(str, str_end);
  883|  3.43k|        }
  884|  3.43k|#endif
  885|  3.43k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  13.8k|    {
 1110|  13.8k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  13.8k|            return m_input.view();
 1112|  13.8k|        }
 1113|  13.8k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  13.8k|            return std::u16string_view{
 1115|  13.8k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  13.8k|                m_input.view().size()};
 1117|  13.8k|        }
 1118|  13.8k|        else {
 1119|  13.8k|            return std::u32string_view{
 1120|  13.8k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  13.8k|                m_input.view().size()};
 1122|  13.8k|        }
 1123|  13.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.44M|{
 1138|  1.44M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 14.5k, False: 1.43M]
  ------------------
 1139|  14.5k|        value = std::numeric_limits<T>::infinity();
 1140|  14.5k|        return 3;
 1141|  14.5k|    }
 1142|  1.43M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.4k, False: 1.41M]
  ------------------
 1143|  10.4k|        value = std::numeric_limits<T>::infinity();
 1144|  10.4k|        return 8;
 1145|  10.4k|    }
 1146|  1.41M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 55.3k, False: 1.36M]
  ------------------
 1147|  55.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  55.3k|        return 3;
 1149|  55.3k|    }
 1150|  1.36M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.36M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.36M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.36M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 295k, False: 1.06M]
  ------------------
 1185|   295k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 292k]
  |  |  ------------------
  ------------------
 1186|  2.88k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.88k|                                         "Invalid floating-point digit");
 1188|  2.88k|        }
 1189|   295k|    }
 1190|  1.35M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.60k, False: 1.35M]
  |  |  ------------------
  ------------------
 1191|  8.60k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.60k|                                     "Invalid floating-point digit");
 1193|  8.60k|    }
 1194|       |
 1195|  1.35M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.35M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.35M|            double tmp{};
 1200|  1.35M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.35M|            value = tmp;
 1202|  1.35M|            return ret;
 1203|  1.35M|        }
 1204|  1.35M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.35M|            return fast_float_fallback(data, value);
 1208|  1.35M|        }
 1209|  1.35M|    }
 1210|  1.35M|    else {
 1211|       |        // Default to fast_float
 1212|  1.35M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.35M|    }
 1214|  1.35M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.35M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.35M|    {
 1048|  1.35M|#if !SCN_DISABLE_STRTOD
 1049|  1.35M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.35M|    }
 1056|  1.35M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.35M|    {
  894|  1.35M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.36M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.35M|    {
  898|  1.35M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.35M|                           generic_strtod);
  900|  1.35M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.35M|    {
  732|  1.35M|        CharT* end{};
  733|  1.35M|        errno = 0;
  734|  1.35M|        value = strtod_cb(src, &end);
  735|  1.35M|        const auto saved_errno = errno;
  736|  1.35M|        auto chars_read = end - src;
  737|       |
  738|  1.35M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.35M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.26k, False: 1.34M]
  |  |  ------------------
  ------------------
  740|  1.26k|            return unexpected(e);
  741|  1.26k|        }
  742|       |
  743|  1.34M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 291k, False: 1.05M]
  ------------------
  744|  1.34M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 291k, False: 0]
  ------------------
  745|   291k|            chars_read -= 2;
  746|   291k|        }
  747|       |
  748|  1.34M|        return chars_read;
  749|  1.35M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.36M|    {
  778|  1.36M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 375k, False: 992k]
  |  Branch (778:37): [True: 0, False: 375k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.36M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 53.0k, False: 1.31M]
  ------------------
  785|  1.36M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 53.0k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.36M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.28k, False: 1.36M]
  |  Branch (791:34): [True: 120, False: 1.16k]
  ------------------
  792|    120|            SCN_UNLIKELY_ATTR
  793|    120|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    120|        }
  795|       |
  796|  1.36M|        SCN_GCC_COMPAT_PUSH
  797|  1.36M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.36M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.36M, False: 0]
  ------------------
  800|  1.36M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.36M, False: 0]
  ------------------
  801|  1.36M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.16k, False: 1.36M]
  ------------------
  802|  1.16k|            SCN_UNLIKELY_ATTR
  803|  1.16k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.16k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.36M|            return {};
  809|  1.36M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.36M|{
  695|  1.36M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 375k, False: 993k]
  |  Branch (695:26): [True: 0, False: 993k]
  ------------------
  696|  1.36M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.35M|    {
  755|  1.35M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.25M, False: 94.7k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.25M|            auto first_space = read_until_classic_space(input.view());
  758|  1.25M|            input.assign(
  759|  1.25M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.25M|        }
  761|       |
  762|  1.35M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 291k, False: 1.05M]
  ------------------
  763|   291k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   291k|                input.get_allocated_string().insert(0, "0x");
  765|   291k|            }
  766|   291k|            else {
  767|   291k|                input.get_allocated_string().insert(0, L"0x");
  768|   291k|            }
  769|   291k|        }
  770|       |
  771|  1.35M|        return input.get_allocated_string().c_str();
  772|  1.35M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.35M|    {
  905|  1.35M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.35M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.35M|        }
  908|  1.35M|        else {
  909|  1.35M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.35M|        }
  911|  1.35M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.35M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.35M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.35M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.35M|            return std::strtof(str, str_end);
  839|  1.35M|        }
  840|  1.35M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.35M|            return std::strtod(str, str_end);
  842|  1.35M|        }
  843|  1.35M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.35M|            return std::strtold(str, str_end);
  845|  1.35M|        }
  846|  1.35M|#endif
  847|  1.35M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  54.6k|{
 1138|  54.6k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 54.6k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  54.6k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 54.6k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  54.6k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 54.6k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  54.6k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 54.6k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  54.6k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  54.6k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 13.8k, False: 40.7k]
  ------------------
 1185|  13.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 3.16k]
  |  |  ------------------
  ------------------
 1186|  10.6k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.6k|                                         "Invalid floating-point digit");
 1188|  10.6k|        }
 1189|  13.8k|    }
 1190|  43.9k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  43.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.8k, False: 17.0k]
  |  |  ------------------
  ------------------
 1191|  26.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  26.8k|                                     "Invalid floating-point digit");
 1193|  26.8k|    }
 1194|       |
 1195|  17.0k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  17.0k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  17.0k|            double tmp{};
 1200|  17.0k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  17.0k|            value = tmp;
 1202|  17.0k|            return ret;
 1203|  17.0k|        }
 1204|  17.0k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  17.0k|            return fast_float_fallback(data, value);
 1208|  17.0k|        }
 1209|  17.0k|    }
 1210|  17.0k|    else {
 1211|       |        // Default to fast_float
 1212|  17.0k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  17.0k|    }
 1214|  17.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  17.0k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  17.0k|    {
 1048|  17.0k|#if !SCN_DISABLE_STRTOD
 1049|  17.0k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  17.0k|    }
 1056|  17.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  17.0k|    {
  894|  17.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  17.0k|    {
  898|  17.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  17.0k|                           generic_strtod);
  900|  17.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  17.0k|    {
  732|  17.0k|        CharT* end{};
  733|  17.0k|        errno = 0;
  734|  17.0k|        value = strtod_cb(src, &end);
  735|  17.0k|        const auto saved_errno = errno;
  736|  17.0k|        auto chars_read = end - src;
  737|       |
  738|  17.0k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  17.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 17.0k]
  |  |  ------------------
  ------------------
  740|     18|            return unexpected(e);
  741|     18|        }
  742|       |
  743|  17.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 3.14k, False: 13.9k]
  ------------------
  744|  17.0k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 3.14k, False: 0]
  ------------------
  745|  3.14k|            chars_read -= 2;
  746|  3.14k|        }
  747|       |
  748|  17.0k|        return chars_read;
  749|  17.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  17.0k|    {
  755|  17.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 16.4k, False: 661]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  16.4k|            auto first_space = read_until_classic_space(input.view());
  758|  16.4k|            input.assign(
  759|  16.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  16.4k|        }
  761|       |
  762|  17.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 3.14k, False: 13.9k]
  ------------------
  763|  3.14k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  3.14k|                input.get_allocated_string().insert(0, "0x");
  765|  3.14k|            }
  766|  3.14k|            else {
  767|  3.14k|                input.get_allocated_string().insert(0, L"0x");
  768|  3.14k|            }
  769|  3.14k|        }
  770|       |
  771|  17.0k|        return input.get_allocated_string().c_str();
  772|  17.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  17.0k|    {
  905|  17.0k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  17.0k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  17.0k|        }
  908|  17.0k|        else {
  909|  17.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  17.0k|        }
  911|  17.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  17.0k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  17.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  17.0k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  17.0k|            return std::wcstof(str, str_end);
  877|  17.0k|        }
  878|  17.0k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  17.0k|            return std::wcstod(str, str_end);
  880|  17.0k|        }
  881|  17.0k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  17.0k|            return std::wcstold(str, str_end);
  883|  17.0k|        }
  884|  17.0k|#endif
  885|  17.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  1.95M|{
 2065|  1.95M|    const auto argcount = args.size();
 2066|  1.95M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 407k, False: 1.54M]
  |  Branch (2066:60): [True: 407k, False: 0]
  ------------------
 2067|   407k|        auto arg = args.get(0);
 2068|   407k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   407k|    static_cast<    \
  |  |  929|   407k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   407k|    }
 2070|       |
 2071|  1.54M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.54M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.54M|    SCN_UNLIKELY_ATTR
 2079|  1.54M|    {
 2080|  1.54M|        auto handler = format_handler<false, CharT>{
 2081|  1.54M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.54M|    static_cast<    \
  |  |  929|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.54M|    static_cast<    \
  |  |  929|  1.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.54M|        return vscan_parse_format_string(format, handler);
 2083|  1.54M|    }
 2084|  1.54M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  3.92M|{
 1625|  3.92M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.08M, False: 848k]
  ------------------
 1626|  3.08M|        return false;
 1627|  3.08M|    }
 1628|   848k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 848k, False: 0]
  |  Branch (1628:39): [True: 848k, False: 0]
  ------------------
 1629|  3.92M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   611k|{
 1658|   611k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   611k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   611k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   611k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   611k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   611k|    static_cast<    \
  |  |  929|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   611k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   611k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   611k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   611k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.4k, False: 587k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  24.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  24.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  24.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  24.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  24.4k|    }                                                  \
  |  |  |  | 3642|   611k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   587k|    return it.position();
 1675|   611k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.53M|    {
 1903|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  3.44M|    {
 1722|  3.44M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.44M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.53M|    {
 1853|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.53M|{
 2030|  1.53M|    const auto beg = handler.get_ctx().begin();
 2031|  1.53M|    detail::parse_format_string<false>(format, handler);
 2032|  1.53M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.4k, False: 1.45M]
  |  |  ------------------
  ------------------
 2033|  81.4k|        return unexpected(handler.error);
 2034|  81.4k|    }
 2035|  1.45M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.53M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  10.5M|    {
 2014|  10.5M|        return ctx.get();
 2015|  10.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  10.5M|    {
 1857|  10.5M|        return contiguous_ctx;
 1858|  10.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  2.98M|    {
 1907|  2.98M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.98M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  2.98M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.53M|{
 1681|  1.53M|    auto arg = ctx.arg(id);
 1682|  1.53M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.53M|    return arg;
 1686|  1.53M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.44M|    {
 1797|  3.44M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.44M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.44M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.44M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.44M|            visited_args_lower64 |= (1ull << id);
 1808|  3.44M|            return;
 1809|  3.44M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.44M|    {
 1782|  3.44M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.44M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.44M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.44M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.44M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.44M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.44M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   488k|    {
 1766|   488k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 488k, False: 0]
  |  |  ------------------
  ------------------
 1767|   488k|            error = err;
 1768|   488k|        }
 1769|   488k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.53M|    {
 1936|  1.53M|        return parse_ctx.next_arg_id();
 1937|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.53M|    {
 1977|  1.53M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.53M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.53M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.53M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.53M|        auto specs = detail::format_specs{};
 1990|  1.53M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.53M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.53M|            arg.type()};
 1993|       |
 1994|  1.53M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.53M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.53M]
  |  Branch (1995:29): [True: 0, False: 1.53M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.53M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.53M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.53M|        on_visit_scan_arg(
 2006|  1.53M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.53M|                                           get_ctx().locale()},
 2008|  1.53M|            arg);
 2009|  1.53M|        return parse_ctx.begin();
 2010|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.53M|    {
 1701|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.53M|    {
 1948|  1.53M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.53M]
  |  Branch (1948:23): [True: 0, False: 1.53M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.53M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.53M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.4k, False: 1.45M]
  |  |  ------------------
  ------------------
 1955|  81.4k|            on_error(r.error());
 1956|  81.4k|        }
 1957|  1.45M|        else {
 1958|  1.45M|            get_ctx().advance_to(*r);
 1959|  1.45M|        }
 1960|  1.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.44M|    {
 1729|  3.44M|        {
 1730|  3.44M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.44M]
  ------------------
 1731|  3.44M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.44M]
  ------------------
 1732|  3.44M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.44M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.44M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.44M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.44M|        }
 1739|       |
 1740|  3.44M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.44M, False: 0]
  ------------------
 1741|  3.44M|            return;
 1742|  3.44M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.44M|    {
 1777|  3.44M|        return error;
 1778|  3.44M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  10.3M|    {
 1773|  10.3M|        return static_cast<bool>(error);
 1774|  10.3M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.54M|    {
 1903|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.54M|    {
 1830|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.54M|{
 2030|  1.54M|    const auto beg = handler.get_ctx().begin();
 2031|  1.54M|    detail::parse_format_string<false>(format, handler);
 2032|  1.54M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.4k, False: 1.46M]
  |  |  ------------------
  ------------------
 2033|  81.4k|        return unexpected(handler.error);
 2034|  81.4k|    }
 2035|  1.46M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.54M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  10.6M|    {
 2014|  10.6M|        return ctx.get();
 2015|  10.6M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  10.6M|    {
 1834|  10.6M|        return ctx;
 1835|  10.6M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.01M|    {
 1907|  3.01M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.01M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.54M|{
 1681|  1.54M|    auto arg = ctx.arg(id);
 1682|  1.54M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.54M|    return arg;
 1686|  1.54M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.54M|    {
 1936|  1.54M|        return parse_ctx.next_arg_id();
 1937|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.54M|    {
 1977|  1.54M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.54M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.54M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.54M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.54M|        auto specs = detail::format_specs{};
 1990|  1.54M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.54M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.54M|            arg.type()};
 1993|       |
 1994|  1.54M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.54M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.54M]
  |  Branch (1995:29): [True: 0, False: 1.54M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.54M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.54M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.54M|        on_visit_scan_arg(
 2006|  1.54M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.54M|                                           get_ctx().locale()},
 2008|  1.54M|            arg);
 2009|  1.54M|        return parse_ctx.begin();
 2010|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.54M|    {
 1701|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.54M|    {
 1948|  1.54M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.54M]
  |  Branch (1948:23): [True: 0, False: 1.54M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.54M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.54M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.4k, False: 1.46M]
  |  |  ------------------
  ------------------
 1955|  81.4k|            on_error(r.error());
 1956|  81.4k|        }
 1957|  1.46M|        else {
 1958|  1.46M|            get_ctx().advance_to(*r);
 1959|  1.46M|        }
 1960|  1.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  1.97M|{
 2045|  1.97M|    const auto argcount = args.size();
 2046|  1.97M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 440k, False: 1.53M]
  |  Branch (2046:60): [True: 440k, False: 0]
  ------------------
 2047|   440k|        auto arg = args.get(0);
 2048|   440k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   440k|    static_cast<    \
  |  |  929|   440k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   440k|    }
 2050|       |
 2051|  1.53M|    auto handler = format_handler<true, CharT>{
 2052|  1.53M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.53M|                                       source.data() + source.size()},
 2054|  1.53M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.53M|    return vscan_parse_format_string(format, handler);
 2056|  1.97M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   660k|{
 1638|   660k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 660k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   660k|    auto reader =
 1644|   660k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   660k|            ranges::subrange<const CharT*>{source.data(),
 1646|   660k|                                           source.data() + source.size()},
 1647|   660k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   660k|    static_cast<    \
  |  |  929|   660k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   660k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|   660k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   660k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   660k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.4k, False: 636k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  24.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  24.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  24.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  24.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  24.4k|    }                                                  \
  |  |  |  | 3642|   660k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   636k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   636k|    return ranges::distance(source.data(), it);
 1650|   660k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   218k|{
 2045|   218k|    const auto argcount = args.size();
 2046|   218k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 37.1k, False: 181k]
  |  Branch (2046:60): [True: 37.1k, False: 0]
  ------------------
 2047|  37.1k|        auto arg = args.get(0);
 2048|  37.1k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  37.1k|    static_cast<    \
  |  |  929|  37.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  37.1k|    }
 2050|       |
 2051|   181k|    auto handler = format_handler<true, CharT>{
 2052|   181k|        ranges::subrange<const CharT*>{source.data(),
 2053|   181k|                                       source.data() + source.size()},
 2054|   181k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   181k|    return vscan_parse_format_string(format, handler);
 2056|   218k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   436k|{
 1625|   436k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 362k, False: 74.2k]
  ------------------
 1626|   362k|        return false;
 1627|   362k|    }
 1628|  74.2k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 74.2k, False: 0]
  |  Branch (1628:39): [True: 74.2k, False: 0]
  ------------------
 1629|   436k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  55.6k|{
 1638|  55.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.6k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  55.6k|    auto reader =
 1644|  55.6k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  55.6k|            ranges::subrange<const CharT*>{source.data(),
 1646|  55.6k|                                           source.data() + source.size()},
 1647|  55.6k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  55.6k|    static_cast<    \
  |  |  929|  55.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  55.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.8k, False: 6.82k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  48.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  48.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  48.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  48.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  48.8k|    }                                                  \
  |  |  |  | 3642|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  6.82k|    return ranges::distance(source.data(), it);
 1650|  55.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   181k|    {
 1903|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   181k|    {
 1853|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   181k|{
 2030|   181k|    const auto beg = handler.get_ctx().begin();
 2031|   181k|    detail::parse_format_string<false>(format, handler);
 2032|   181k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 18.5k]
  |  |  ------------------
  ------------------
 2033|   162k|        return unexpected(handler.error);
 2034|   162k|    }
 2035|  18.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   181k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   943k|    {
 2014|   943k|        return ctx.get();
 2015|   943k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   943k|    {
 1857|   943k|        return contiguous_ctx;
 1858|   943k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   199k|    {
 1907|   199k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 199k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   181k|{
 1681|   181k|    auto arg = ctx.arg(id);
 1682|   181k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   181k|    return arg;
 1686|   181k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   181k|    {
 1936|   181k|        return parse_ctx.next_arg_id();
 1937|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   181k|    {
 1977|   181k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   181k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   181k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 181k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   181k|        auto specs = detail::format_specs{};
 1990|   181k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   181k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   181k|            arg.type()};
 1993|       |
 1994|   181k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   181k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 181k]
  |  Branch (1995:29): [True: 0, False: 181k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   181k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   181k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   181k|        on_visit_scan_arg(
 2006|   181k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   181k|                                           get_ctx().locale()},
 2008|   181k|            arg);
 2009|   181k|        return parse_ctx.begin();
 2010|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   181k|    {
 1701|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   181k|    {
 1948|   181k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 181k]
  |  Branch (1948:23): [True: 0, False: 181k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   181k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   181k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 18.5k]
  |  |  ------------------
  ------------------
 1955|   162k|            on_error(r.error());
 1956|   162k|        }
 1957|  18.5k|        else {
 1958|  18.5k|            get_ctx().advance_to(*r);
 1959|  18.5k|        }
 1960|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   218k|{
 2065|   218k|    const auto argcount = args.size();
 2066|   218k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 37.0k, False: 181k]
  |  Branch (2066:60): [True: 37.0k, False: 0]
  ------------------
 2067|  37.0k|        auto arg = args.get(0);
 2068|  37.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  37.0k|    static_cast<    \
  |  |  929|  37.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  37.0k|    }
 2070|       |
 2071|   181k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 181k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   181k|    SCN_UNLIKELY_ATTR
 2079|   181k|    {
 2080|   181k|        auto handler = format_handler<false, CharT>{
 2081|   181k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   181k|        return vscan_parse_format_string(format, handler);
 2083|   181k|    }
 2084|   181k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  55.6k|{
 1658|  55.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.6k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  55.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  55.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 55.6k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  55.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  55.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  55.6k|    static_cast<    \
  |  |  929|  55.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  55.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.8k, False: 6.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  48.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  48.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  48.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  48.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  48.8k|    }                                                  \
  |  |  |  | 3642|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  6.78k|    return it.position();
 1675|  55.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   181k|    {
 1903|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   181k|    {
 1830|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   181k|{
 2030|   181k|    const auto beg = handler.get_ctx().begin();
 2031|   181k|    detail::parse_format_string<false>(format, handler);
 2032|   181k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 18.4k]
  |  |  ------------------
  ------------------
 2033|   162k|        return unexpected(handler.error);
 2034|   162k|    }
 2035|  18.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   181k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|   943k|    {
 2014|   943k|        return ctx.get();
 2015|   943k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|   943k|    {
 1834|   943k|        return ctx;
 1835|   943k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   199k|    {
 1907|   199k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 199k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   199k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   181k|{
 1681|   181k|    auto arg = ctx.arg(id);
 1682|   181k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   181k|    return arg;
 1686|   181k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   181k|    {
 1936|   181k|        return parse_ctx.next_arg_id();
 1937|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   181k|    {
 1977|   181k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   181k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   181k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 181k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   181k|        auto specs = detail::format_specs{};
 1990|   181k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   181k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   181k|            arg.type()};
 1993|       |
 1994|   181k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   181k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 181k]
  |  Branch (1995:29): [True: 0, False: 181k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   181k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   181k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   181k|        on_visit_scan_arg(
 2006|   181k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   181k|                                           get_ctx().locale()},
 2008|   181k|            arg);
 2009|   181k|        return parse_ctx.begin();
 2010|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   181k|    {
 1701|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   181k|    {
 1948|   181k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 181k]
  |  Branch (1948:23): [True: 0, False: 181k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   181k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   181k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 18.4k]
  |  |  ------------------
  ------------------
 1955|   162k|            on_error(r.error());
 1956|   162k|        }
 1957|  18.4k|        else {
 1958|  18.4k|            get_ctx().advance_to(*r);
 1959|  18.4k|        }
 1960|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   220k|{
 2091|   220k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   220k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   203k|{
 2091|   203k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   203k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  18.5k|{
 2091|  18.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  18.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  18.5k|{
 2091|  18.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  18.5k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.71k|{
 1363|  2.71k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.71k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.71k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.71k|            std::u32string tmp;
 1368|  2.71k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.71k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.71k|                std::u32string_view{tmp}, dest);
 1371|  2.71k|        }
 1372|  2.71k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.71k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.71k|        }
 1375|  2.71k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.71k|{
 1256|  2.71k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.71k|    auto it = src.begin();
 1259|   933k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 930k, False: 2.71k]
  ------------------
 1260|   930k|        auto res = get_next_code_point(
 1261|   930k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   930k|                                                                 src.end()));
 1263|   930k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40k, False: 929k]
  |  |  ------------------
  ------------------
 1264|  1.40k|            dest.push_back(DestCharT{0xfffd});
 1265|  1.40k|        }
 1266|   929k|        else {
 1267|   929k|            dest.push_back(res.value);
 1268|   929k|        }
 1269|   930k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   930k|    }
 1271|  2.71k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.64M|{
 1169|  1.64M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.64M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.64M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 1.62M]
  |  |  ------------------
  ------------------
 1173|  23.9k|        return {get_start_for_next_code_point(input),
 1174|  23.9k|                detail::invalid_code_point};
 1175|  23.9k|    }
 1176|  1.62M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.22k, False: 1.61M]
  |  |  ------------------
  ------------------
 1177|  5.22k|        return {input.end(), detail::invalid_code_point};
 1178|  5.22k|    }
 1179|       |
 1180|  1.61M|    return {input.begin() + len,
 1181|  1.61M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.62M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  23.9k|{
 1155|  23.9k|    auto it = input.begin();
 1156|   161k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 153k, False: 7.80k]
  ------------------
 1157|   153k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.1k, False: 137k]
  ------------------
 1158|  16.1k|            break;
 1159|  16.1k|        }
 1160|   153k|    }
 1161|  23.9k|    return it;
 1162|  23.9k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  36.3M|    {
  809|  36.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  36.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  36.3M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  13.5M|    {
  823|  13.5M|        return a.m_code == b.m_code;
  824|  13.5M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.05M|    {
 1728|  2.05M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.05M|        std::strcpy(m_locbuf, loc);
 1730|  2.05M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.05M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.05M|        std::setlocale(m_category, m_locbuf);
 1735|  2.05M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.05M|    {
 1757|  2.05M|        std::setlocale(cat, "C");
 1758|  2.05M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.44M|    {
 2936|  3.44M|        return m_msg == nullptr;
 2937|  3.44M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|  3.40M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  47.9M|{
  458|  47.9M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  47.9M|        static_cast<unsigned char>(ch))];
  460|  47.9M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  45.5k|{
  469|  45.5k|    return static_cast<unsigned char>(ch) <= 127;
  470|  45.5k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  9.56M|{
  539|  9.56M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  9.56M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  16.1M|{
  784|  16.1M|    return e != eof_error::good;
  785|  16.1M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  56.2k|{
  798|  56.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  56.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  56.2k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  56.2k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   231k|{
  845|   231k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   231k|    return parse_error::eof;
  847|   231k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.91M|{
  854|  4.91M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.91M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.91M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 82.9k, False: 4.83M]
  ------------------
  859|  82.9k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  82.9k|    }
  861|       |
  862|  4.83M|    return scan_error{code, msg};
  863|  4.91M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.91M|{
  868|  4.91M|    return [code, msg](parse_error err) {
  869|  4.91M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.91M|    };
  871|  4.91M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  4.81M|{
 1200|       |    // Pattern_White_Space property
 1201|  4.81M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 4.59M, False: 227k]
  |  Branch (1201:27): [True: 1.61M, False: 2.97M]
  ------------------
 1202|  4.81M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 121k, False: 3.08M]
  ------------------
 1203|  4.81M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 142k, False: 2.94M]
  ------------------
 1204|  4.81M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 4.65k, False: 2.93M]
  ------------------
 1205|  4.81M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 9.24k, False: 2.92M]
  ------------------
 1206|  4.81M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 41.1k, False: 2.88M]
  ------------------
 1207|  4.81M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 2.88M]
  ------------------
 1208|  4.81M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  5.77M|{
 2220|  5.77M|    unsigned char running_diff{0};
 2221|  21.6M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 15.9M, False: 5.77M]
  ------------------
 2222|  15.9M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  15.9M|    }
 2224|  5.77M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 183k, False: 5.58M]
  |  Branch (2224:33): [True: 30.3k, False: 5.55M]
  ------------------
 2225|  5.77M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  35.4M|{
 3123|  35.4M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  35.4M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|   592k|{
 3127|   592k|#if WCHAR_MIN < 0
 3128|   592k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 582k, False: 10.4k]
  |  Branch (3128:20): [True: 326k, False: 256k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   326k|        return char_to_int(static_cast<char>(ch));
 3133|   326k|    }
 3134|   266k|    return 255;
 3135|   592k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6008|  2.95M|{
 6009|  2.95M|    if (specs.width != 0) {
  ------------------
  |  Branch (6009:9): [True: 0, False: 2.95M]
  ------------------
 6010|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6010:13): [True: 0, False: 0]
  ------------------
 6011|      0|            return {scan_error::invalid_scanned_value,
 6012|      0|                    "Scanned value too narrow, width did not exceed what "
 6013|      0|                    "was specified in the format string"};
 6014|      0|        }
 6015|      0|    }
 6016|  2.95M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6016:9): [True: 0, False: 2.95M]
  ------------------
 6017|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6017:13): [True: 0, False: 0]
  ------------------
 6018|      0|            return {scan_error::invalid_scanned_value,
 6019|      0|                    "Scanned value too wide, width exceeded the specified "
 6020|      0|                    "precision"};
 6021|      0|        }
 6022|      0|    }
 6023|  2.95M|    return {};
 6024|  2.95M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.41M|    {
  304|  6.41M|        ranges::advance(x, n);
  305|  6.41M|        return x;
  306|  6.41M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.41M|    {
  268|  6.41M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.41M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.41M|    {
  151|  6.41M|        i += n;
  152|  6.41M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  7.59M|    {
  108|  7.59M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  7.59M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  7.59M|    {
   87|  7.59M|        return s - i;
   88|  7.59M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   578k|    {
  304|   578k|        ranges::advance(x, n);
  305|   578k|        return x;
  306|   578k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   578k|    {
  268|   578k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   578k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   578k|    {
  151|   578k|        i += n;
  152|   578k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  35.5k|    {
  108|  35.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  35.5k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  35.5k|    {
   87|  35.5k|        return s - i;
   88|  35.5k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.16M|{
  981|  2.16M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.16M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.16M|        return true;
  984|  2.16M|    }
  985|  2.16M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.16M|                           ranges::const_iterator_t<Range>,
  987|  2.16M|                           typename detail::basic_scan_buffer<
  988|  2.16M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.16M|        auto beg = r.begin();
  990|  2.16M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.16M, False: 0]
  ------------------
  991|  2.16M|            return false;
  992|  2.16M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.16M|    else {
 1006|  2.16M|        return false;
 1007|  2.16M|    }
 1008|  2.16M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|  1.54M|    {
 6038|  1.54M|        const bool need_skipped_width =
 6039|  1.54M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 1.54M]
  |  Branch (6039:33): [True: 0, False: 1.54M]
  ------------------
 6040|  1.54M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  1.54M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.54M]
  ------------------
 6044|  1.54M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.54M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  1.54M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 1.54M, False: 0]
  |  Branch (6048:56): [True: 1.54M, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  1.54M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 1.54M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  3.07M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.2k, False: 1.52M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  20.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  20.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  20.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  20.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  20.2k|    }                                                  \
  |  |  |  | 3642|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.07M|                            make_eof_scan_error));
 6059|       |
 6060|  3.07M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 1.52M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  1.52M|            return result_type{it, 0};
 6068|  3.07M|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|  1.54M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.19M|{
 1976|  4.19M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.19M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.19M|{
 1957|  4.19M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.19M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.19M|    }
 1960|  4.19M|    else {
 1961|  4.19M|        auto first = range.begin();
 1962|  23.3M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 23.2M, False: 36.7k]
  ------------------
 1963|  23.2M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.15M, False: 19.1M]
  ------------------
 1964|  4.15M|                return first;
 1965|  4.15M|            }
 1966|  23.2M|        }
 1967|  36.7k|        return first;
 1968|  4.19M|    }
 1969|  4.19M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  60.6M|    {
  763|  60.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  60.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  60.6M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  5.36M|    {
  754|  5.36M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  30.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.3M|              cvref<T> obj = *get<T>(fn);
  745|  30.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.3M|              }
  748|  30.3M|              else {
  749|  30.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.3M|              }
  751|  30.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  30.3M|    {
  684|  30.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.3M|            return static_cast<T*>(s.m_cp);
  686|  30.3M|        }
  687|  30.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.3M|            return static_cast<T*>(s.m_p);
  689|  30.3M|        }
  690|  30.3M|        else {
  691|  30.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.3M|        }
  693|  30.3M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  5.36M|        {
  662|  5.36M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.68M|    {
  108|  3.68M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.68M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.68M|    {
   94|  3.68M|        iter_difference_t<I> counter{0};
   95|  37.6M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 34.0M, False: 3.68M]
  ------------------
   96|  34.0M|            ++i;
   97|  34.0M|            ++counter;
   98|  34.0M|        }
   99|  3.68M|        return counter;
  100|  3.68M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  5.71M|{
 1857|  5.71M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.71M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.71M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.71M|        if (sz < count) {
 1862|  5.71M|            return unexpected(eof_error::eof);
 1863|  5.71M|        }
 1864|       |
 1865|  5.71M|        return ranges::next(range.begin(), count);
 1866|  5.71M|    }
 1867|  5.71M|    else {
 1868|  5.71M|        auto it = range.begin();
 1869|  5.71M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 3.51M, False: 2.19M]
  ------------------
 1870|  3.51M|            return ranges::next(it, count);
 1871|  3.51M|        }
 1872|       |
 1873|  8.76M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 6.61M, False: 2.14M]
  ------------------
 1874|  6.61M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 49.9k, False: 6.56M]
  ------------------
 1875|  49.9k|                return unexpected(eof_error::eof);
 1876|  49.9k|            }
 1877|  6.61M|        }
 1878|       |
 1879|  2.14M|        return it;
 1880|  2.19M|    }
 1881|  5.71M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  5.71M|{
 1095|  5.71M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  5.71M|        return r.size();
 1097|  5.71M|    }
 1098|  5.71M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  5.71M|                           ranges::const_iterator_t<Range>,
 1100|  5.71M|                           typename detail::basic_scan_buffer<
 1101|  5.71M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  5.71M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  5.71M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  5.71M|        }
 1105|  5.71M|        else {
 1106|  5.71M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 5.71M, False: 0]
  ------------------
 1107|  5.71M|                return static_cast<size_t>(
 1108|  5.71M|                    r.begin().parent()->chars_available() -
 1109|  5.71M|                    r.begin().position());
 1110|  5.71M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  5.71M|        }
 1113|  5.71M|    }
 1114|  5.71M|    else {
 1115|  5.71M|        return 0;
 1116|  5.71M|    }
 1117|  5.71M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  8.16M|    {
  763|  8.16M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.16M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.36M|    {
  754|  2.36M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  4.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.05M|              cvref<T> obj = *get<T>(fn);
  745|  4.05M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.05M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.05M|              }
  748|  4.05M|              else {
  749|  4.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.05M|              }
  751|  4.05M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.05M|    {
  684|  4.05M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.05M|            return static_cast<T*>(s.m_cp);
  686|  4.05M|        }
  687|  4.05M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.05M|            return static_cast<T*>(s.m_p);
  689|  4.05M|        }
  690|  4.05M|        else {
  691|  4.05M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.05M|        }
  693|  4.05M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.36M|        {
  662|  2.36M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.91M|    return [code, msg](parse_error err) {
  869|  4.91M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.91M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   875k|    {
 1780|   875k|        auto stdloc = loc.get<std::locale>();
 1781|   875k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   875k|        grouping = numpunct.grouping();
 1783|   875k|        thousands_sep =
 1784|   875k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 875k]
  ------------------
 1785|   875k|        decimal_point = numpunct.decimal_point();
 1786|   875k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   875k|{
 1717|   875k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 875k, False: 0]
  ------------------
 1718|   875k|        return std::use_facet<Facet>(stdloc);
 1719|   875k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   875k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  6.18M|{
 1846|  6.18M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.7k, False: 6.15M]
  |  |  ------------------
  ------------------
 1847|  27.7k|        return unexpected(e);
 1848|  27.7k|    }
 1849|       |
 1850|  6.15M|    return ranges::next(range.begin());
 1851|  6.18M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  8.94M|{
  950|  8.94M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  8.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.0k, False: 8.89M]
  |  |  ------------------
  ------------------
  951|  55.0k|        return eof_error::eof;
  952|  55.0k|    }
  953|  8.89M|    return eof_error::good;
  954|  8.94M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  12.4M|{
  944|  12.4M|    return is_range_eof(r.begin(), r.end());
  945|  12.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  12.4M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  12.4M|    {
  937|  12.4M|        return begin == end;
  938|  12.4M|    }
  939|  12.4M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  6.15M|    {
  296|  6.15M|        ++x;
  297|  6.15M|        return x;
  298|  6.15M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.35M|{
 3141|  2.35M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.35M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.67M, False: 680k]
  ------------------
 3143|  1.67M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.67M, False: 491]
  ------------------
 3144|  1.67M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.67M|        }
 3146|    491|        return unexpected(eof_error::eof);
 3147|  1.67M|    }
 3148|       |
 3149|   680k|    auto& it = *r;
 3150|   680k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 269k, False: 410k]
  ------------------
 3151|   269k|        return std::pair{it, sign_type::minus_sign};
 3152|   269k|    }
 3153|   410k|    return std::pair{it, sign_type::plus_sign};
 3154|   680k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  4.13M|{
 2272|  4.13M|    auto it = read_code_unit(range);
 2273|  4.13M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.1k, False: 4.11M]
  |  |  ------------------
  ------------------
 2274|  16.1k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  16.1k|    }
 2276|       |
 2277|  7.65M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.65M, False: 3.21M]
  ------------------
 2278|  7.65M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 900k, False: 6.75M]
  ------------------
 2279|   900k|            return *it;
 2280|   900k|        }
 2281|  7.65M|    }
 2282|       |
 2283|  3.21M|    return unexpected(parse_error::error);
 2284|  4.11M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  5.71M|{
 2231|  5.71M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  5.71M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  5.71M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  5.71M|        if (range.size() < str.size()) {
 2236|  5.71M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  5.71M|        }
 2238|  5.71M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  5.71M|            return unexpected(parse_error::error);
 2240|  5.71M|        }
 2241|  5.71M|        return ranges::next(range.begin(), str.size());
 2242|  5.71M|    }
 2243|  5.71M|    else {
 2244|  5.71M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  5.71M|            if (ch < 'A' || ch > 'Z') {
 2246|  5.71M|                return ch;
 2247|  5.71M|            }
 2248|  5.71M|            return static_cast<char_type>(ch +
 2249|  5.71M|                                          static_cast<char_type>('a' - 'A'));
 2250|  5.71M|        };
 2251|       |
 2252|  5.71M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  5.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.9k, False: 5.66M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  49.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  49.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  49.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  49.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  49.9k|    }                                                  \
  |  |  |  | 3642|  5.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  5.66M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  5.66M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  5.66M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  5.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.45M, False: 210k]
  |  |  ------------------
  ------------------
 2257|  5.66M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  5.66M|                    return ascii_tolower(a) ==
 2259|  5.66M|                           static_cast<detail::char_t<Range>>(b);
 2260|  5.66M|                }))) {
 2261|  5.45M|            return unexpected(parse_error::error);
 2262|  5.45M|        }
 2263|       |
 2264|   210k|        return it;
 2265|  5.66M|    }
 2266|  5.71M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  6.62M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.62M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 5.93M, False: 684k]
  |  Branch (2245:29): [True: 580k, False: 104k]
  ------------------
 2246|  6.52M|                return ch;
 2247|  6.52M|            }
 2248|   104k|            return static_cast<char_type>(ch +
 2249|   104k|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.62M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.04M|{
 2146|  2.04M|    auto it = read_code_unit(range);
 2147|  2.04M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 2.03M]
  |  |  ------------------
  ------------------
 2148|  11.6k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  11.6k|    }
 2150|       |
 2151|  2.03M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.71M, False: 320k]
  |  |  ------------------
  ------------------
 2152|  2.03M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.71M|        return unexpected(parse_error::error);
 2154|  1.71M|    }
 2155|       |
 2156|   320k|    return *it;
 2157|  2.03M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  4.18M|{
 1996|  4.18M|    auto it = read_while_code_unit(range, pred);
 1997|  4.18M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.75M, False: 2.43M]
  ------------------
 1998|  1.75M|        return unexpected(parse_error::error);
 1999|  1.75M|    }
 2000|  2.43M|    return it;
 2001|  4.18M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.94M|    {
 1621|  1.94M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.94M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.94M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.94M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.94M|            m_storage.reset();
 1627|  1.94M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.94M|        }
 1629|  1.94M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.94M|                                          std::basic_string<CharT>>) {
 1631|  1.94M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.94M|            m_view = string_view_type{*m_storage};
 1633|  1.94M|        }
 1634|  1.94M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.94M|                                          typename detail::basic_scan_buffer<
 1636|  1.94M|                                              value_t>::forward_iterator> &&
 1637|  1.94M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.94M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.94M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.94M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270k, False: 1.67M]
  |  |  ------------------
  ------------------
 1641|  1.94M|                             detail::to_address(end_seg.end()))) {
 1642|   270k|                auto& str = m_storage.emplace();
 1643|   270k|                str.reserve(range.end().position() - range.begin().position());
 1644|   270k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   270k|                m_view = string_view_type{str};
 1646|   270k|                return;
 1647|   270k|            }
 1648|       |
 1649|  1.67M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.67M|                                                            end_seg.data());
 1651|  1.67M|            m_storage.reset();
 1652|  1.67M|        }
 1653|  1.94M|        else {
 1654|  1.94M|            auto& str = m_storage.emplace();
 1655|  1.94M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.94M|                str.reserve(range.size());
 1657|  1.94M|            }
 1658|  1.94M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.94M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.94M|                          std::back_inserter(str));
 1661|  1.94M|            }
 1662|  1.94M|            else {
 1663|  1.94M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.94M|                     ++it) {
 1665|  1.94M|                    str.push_back(*it);
 1666|  1.94M|                }
 1667|  1.94M|            }
 1668|  1.94M|            m_view = string_view_type{str};
 1669|  1.94M|        }
 1670|  1.94M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  14.5M|    {
 1582|  14.5M|        return m_view;
 1583|  14.5M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  8.60M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  1.45M|    {
 6080|  1.45M|        const bool need_skipped_width =
 6081|  1.45M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 1.45M]
  |  Branch (6081:33): [True: 0, False: 1.45M]
  ------------------
 6082|  1.45M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  1.45M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.45M]
  ------------------
 6085|  1.45M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 1.45M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  1.45M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 1.45M, False: 0]
  ------------------
 6090|  1.45M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 1.45M]
  ------------------
 6091|  1.45M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  1.45M|        return result_type{rng.begin(), 0};
 6115|  1.45M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.22M|{
 1846|  3.22M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.80k, False: 3.21M]
  |  |  ------------------
  ------------------
 1847|  6.80k|        return unexpected(e);
 1848|  6.80k|    }
 1849|       |
 1850|  3.21M|    return ranges::next(range.begin());
 1851|  3.22M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  6.07M|{
  950|  6.07M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.8k, False: 6.04M]
  |  |  ------------------
  ------------------
  951|  31.8k|        return eof_error::eof;
  952|  31.8k|    }
  953|  6.04M|    return eof_error::good;
  954|  6.07M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  6.07M|{
  944|  6.07M|    return is_range_eof(r.begin(), r.end());
  945|  6.07M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  6.07M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.07M|    {
  937|  6.07M|        return begin == end;
  938|  6.07M|    }
  939|  6.07M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.21M|    {
  296|  3.21M|        ++x;
  297|  3.21M|        return x;
  298|  3.21M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.24M|{
 3141|  2.24M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.24M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.58M, False: 651k]
  ------------------
 3143|  1.58M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.58M, False: 156]
  ------------------
 3144|  1.58M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.58M|        }
 3146|    156|        return unexpected(eof_error::eof);
 3147|  1.58M|    }
 3148|       |
 3149|   651k|    auto& it = *r;
 3150|   651k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 261k, False: 390k]
  ------------------
 3151|   261k|        return std::pair{it, sign_type::minus_sign};
 3152|   261k|    }
 3153|   390k|    return std::pair{it, sign_type::plus_sign};
 3154|   651k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.60M|{
 2272|  2.60M|    auto it = read_code_unit(range);
 2273|  2.60M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.15k, False: 2.59M]
  |  |  ------------------
  ------------------
 2274|  3.15k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.15k|    }
 2276|       |
 2277|  4.75M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.75M, False: 1.87M]
  ------------------
 2278|  4.75M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 723k, False: 4.02M]
  ------------------
 2279|   723k|            return *it;
 2280|   723k|        }
 2281|  4.75M|    }
 2282|       |
 2283|  1.87M|    return unexpected(parse_error::error);
 2284|  2.59M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  5.82M|{
 2231|  5.82M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  5.82M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  5.82M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  5.82M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 54.3k, False: 5.77M]
  ------------------
 2236|  54.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  54.3k|        }
 2238|  5.77M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 5.55M, False: 214k]
  ------------------
 2239|  5.55M|            return unexpected(parse_error::error);
 2240|  5.55M|        }
 2241|   214k|        return ranges::next(range.begin(), str.size());
 2242|  5.77M|    }
 2243|  5.82M|    else {
 2244|  5.82M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  5.82M|            if (ch < 'A' || ch > 'Z') {
 2246|  5.82M|                return ch;
 2247|  5.82M|            }
 2248|  5.82M|            return static_cast<char_type>(ch +
 2249|  5.82M|                                          static_cast<char_type>('a' - 'A'));
 2250|  5.82M|        };
 2251|       |
 2252|  5.82M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  5.82M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  5.82M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  5.82M|        if (SCN_UNLIKELY(!std::equal(
 2257|  5.82M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  5.82M|                    return ascii_tolower(a) ==
 2259|  5.82M|                           static_cast<detail::char_t<Range>>(b);
 2260|  5.82M|                }))) {
 2261|  5.82M|            return unexpected(parse_error::error);
 2262|  5.82M|        }
 2263|       |
 2264|  5.82M|        return it;
 2265|  5.82M|    }
 2266|  5.82M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   623k|{
 2146|   623k|    auto it = read_code_unit(range);
 2147|   623k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.65k, False: 619k]
  |  |  ------------------
  ------------------
 2148|  3.65k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.65k|    }
 2150|       |
 2151|   619k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   619k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 515k, False: 104k]
  |  |  ------------------
  ------------------
 2152|   619k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   515k|        return unexpected(parse_error::error);
 2154|   515k|    }
 2155|       |
 2156|   104k|    return *it;
 2157|   619k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  8.23M|    {
 1503|  8.23M|        return sv;
 1504|  8.23M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.16M|{
 1976|  1.16M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.16M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.16M|{
 1957|  1.16M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.16M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.16M|    }
 1960|  1.16M|    else {
 1961|  1.16M|        auto first = range.begin();
 1962|  1.16M|        for (; first != range.end(); ++first) {
 1963|  1.16M|            if (pred(*first)) {
 1964|  1.16M|                return first;
 1965|  1.16M|            }
 1966|  1.16M|        }
 1967|  1.16M|        return first;
 1968|  1.16M|    }
 1969|  1.16M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.18M|{
 2951|  2.18M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.18M, False: 0]
  ------------------
 2952|  2.18M|        auto it = read_while_classic_space(range);
 2953|  2.18M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.18M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.1k, False: 2.16M]
  |  |  ------------------
  ------------------
 2955|  19.1k|            return unexpected(e);
 2956|  19.1k|        }
 2957|       |
 2958|  2.16M|        return it;
 2959|  2.18M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.18M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.18M|{
 2117|  2.18M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.18M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.18M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.18M|        auto buf = make_contiguous_buffer(range);
 2121|  2.18M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.18M|        return ranges::next(range.begin(),
 2123|  2.18M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.18M|    }
 2125|  2.18M|    else {
 2126|  2.18M|        auto it = range.begin();
 2127|       |
 2128|  2.18M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.18M|            auto seg = get_contiguous_beginning(range);
 2130|  2.18M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.18M|                seg_it != seg.end()) {
 2132|  2.18M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.18M|            }
 2134|  2.18M|            ranges::advance(it, seg.size());
 2135|  2.18M|        }
 2136|       |
 2137|  2.18M|        return read_while_code_point(
 2138|  2.18M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.18M|    }
 2140|  2.18M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.18M|{
 1683|  2.18M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.18M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.18M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.18M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.18M|    }
 1688|  2.18M|    else {
 1689|  2.18M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.18M|    }
 1691|  2.18M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.18M|    {
 1490|  2.18M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  5.84M|    {
  304|  5.84M|        ranges::advance(x, n);
  305|  5.84M|        return x;
  306|  5.84M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  7.72M|    {
  268|  7.72M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.72M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  7.72M|    {
  181|  37.1M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 29.4M, False: 7.72M]
  ------------------
  182|  29.4M|            ++i;
  183|  29.4M|        }
  184|  7.72M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   490k|    {
 6179|   490k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   490k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   490k|            auto rd = make_reader<T, char_type>();
 6184|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   490k|                return unexpected(e);
 6186|   490k|            }
 6187|       |
 6188|   490k|            return impl(rd, range, value);
 6189|   490k|        }
 6190|   490k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   490k|            auto rd = make_reader<T, char_type>();
 6192|   490k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 490k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   490k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 490k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   490k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   490k|                return impl(rd, range, value);
 6199|   490k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   490k|        else {
 6207|   490k|            SCN_EXPECT(false);
 6208|   490k|            SCN_UNREACHABLE;
 6209|   490k|        }
 6210|   490k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.08M|    {
 3040|  3.08M|        reader_error_handler eh{};
 3041|  3.08M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.08M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.08M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.08M|        return {};
 3046|  3.08M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.08M|    {
 3051|  3.08M|        return static_cast<Derived&>(*this);
 3052|  3.08M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|  3.08M|    {
 4146|  3.08M|        detail::check_float_type_specs(specs, eh);
 4147|  3.08M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   490k|    {
 6121|   490k|        const bool need_skipped_width =
 6122|   490k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 490k]
  |  Branch (6122:33): [True: 0, False: 490k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   490k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   490k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   490k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   490k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.13k, False: 483k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.13k|    }                                                  \
  |  |  |  | 3642|   490k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   483k|        auto [it, prefix_width] = prefix_result;
 6127|   483k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   483k|        std::ptrdiff_t value_width = 0;
 6131|   483k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 483k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   483k|        else {
 6147|   483k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   483k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   483k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.0k, False: 462k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  21.0k|    }                                                  \
  |  | 3642|   483k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   462k|                                             specs, value, loc));
 6149|       |
 6150|   462k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 462k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   462k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   462k|        std::ptrdiff_t postfix_width = 0;
 6159|   462k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 458k, False: 4.73k]
  ------------------
 6160|   458k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   458k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   458k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   458k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 458k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   458k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   458k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   458k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   458k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   458k|                                 value_width));
 6164|   458k|            std::tie(it, postfix_width) = postfix_result;
 6165|   458k|        }
 6166|       |
 6167|   462k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   462k|                                                 value_width, postfix_width);
 6169|   462k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 462k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   462k|        return it;
 6174|   462k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  7.24M|    {
 3035|  7.24M|        return true;
 3036|  7.24M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4217|  3.04M|    {
 4218|  3.04M|        unsigned options{};
 4219|  3.04M|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 875k, False: 2.16M]
  ------------------
 4220|   875k|            options |= float_reader_base::allow_thsep;
 4221|   875k|        }
 4222|       |
 4223|  3.04M|        SCN_GCC_COMPAT_PUSH
 4224|  3.04M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|  3.04M|        switch (specs.type) {
 4227|   388k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 388k, False: 2.65M]
  ------------------
 4228|   388k|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|  57.6k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 57.6k, False: 2.98M]
  ------------------
 4231|  57.6k|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|   979k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 979k, False: 2.06M]
  ------------------
 4234|   979k|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|   742k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 742k, False: 2.30M]
  ------------------
 4237|   742k|                return options | float_reader_base::allow_scientific |
 4238|   742k|                       float_reader_base::allow_fixed;
 4239|       |
 4240|   875k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 875k, False: 2.16M]
  ------------------
 4241|   875k|                return options | float_reader_base::allow_scientific |
 4242|   875k|                       float_reader_base::allow_fixed |
 4243|   875k|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 3.04M]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|  3.04M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|  3.04M|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|  3.04M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|  3.04M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  4.30M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  8.60M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|  1.31M|    {
 3692|  1.31M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.31M|        const std::ptrdiff_t sign_len =
 3695|  1.31M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 393k, False: 924k]
  ------------------
 3696|       |
 3697|  1.31M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.31M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.31M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.31M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 1.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  19.8k|    }                                                  \
  |  |  |  | 3642|  1.31M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.29M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.29M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.31M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|  4.19M|    {
 4058|  4.19M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 4.19M, False: 0]
  ------------------
 4059|  4.19M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 4.19M, False: 0]
  ------------------
 4060|  4.19M|            return;
 4061|  4.19M|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  4.92M|    {
 1587|  4.92M|        return m_storage.has_value();
 1588|  4.92M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.89M|    {
 1592|  2.89M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.89M|        return *m_storage;
 1594|  2.89M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   483k|    {
 4171|   483k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   483k|#if !SCN_DISABLE_LOCALE
 4174|   483k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 135k, False: 348k]
  ------------------
 4175|   135k|            return read_impl<Range>(
 4176|   135k|                range, rd,
 4177|   135k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   135k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   135k|                },
 4180|   135k|                value, loc);
 4181|   135k|        }
 4182|   348k|#endif
 4183|       |
 4184|   348k|        return read_impl<Range>(
 4185|   348k|            range, rd,
 4186|   348k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   348k|                return r.read_source(SCN_FWD(args)...);
 4188|   348k|            },
 4189|   348k|            value);
 4190|   483k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   670k|    {
 4207|   670k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   670k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.7k, False: 648k]
  |  |  ------------------
  ------------------
 4209|  21.7k|            return unexpected(r.error());
 4210|  21.7k|        }
 4211|       |
 4212|   648k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   648k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   648k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   648k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.33k, False: 643k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.33k|    }                                                  \
  |  |  |  | 3642|   648k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   643k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   643k|        return ranges::next(range.begin(), n);
 4214|   648k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.13M|    {
  763|  2.13M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.13M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   135k|    {
  754|   135k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   135k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   135k|              cvref<T> obj = *get<T>(fn);
  745|   135k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   135k|                  obj(static_cast<decltype(args)>(args)...);
  747|   135k|              }
  748|   135k|              else {
  749|   135k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   135k|              }
  751|   135k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   135k|    {
  684|   135k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   135k|            return static_cast<T*>(s.m_cp);
  686|   135k|        }
  687|   135k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   135k|            return static_cast<T*>(s.m_p);
  689|   135k|        }
  690|   135k|        else {
  691|   135k|            return reinterpret_cast<T*>(s.m_fp);
  692|   135k|        }
  693|   135k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   135k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   135k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   135k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|   439k|    {
 3680|   439k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|   439k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   439k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 439k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|   439k|        return read_source_impl(range);
 3686|   439k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|  2.13M|    {
 3706|  2.13M|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.13M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.13M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.13M|        auto it = sign_result.first;
 3709|  2.13M|        m_sign = sign_result.second;
 3710|       |
 3711|  2.13M|        auto digits_begin = it;
 3712|  2.13M|        auto r = ranges::subrange{it, range.end()};
 3713|  2.13M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.13M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.13M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|  2.13M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|  2.13M|                SCN_TRY_ASSIGN(
 3718|  2.13M|                    it,
 3719|  2.13M|                    do_read_source_impl(
 3720|  2.13M|                        r,
 3721|  2.13M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|  2.13M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|  2.13M|            }
 3724|  2.13M|            else {
 3725|  2.13M|                auto cb = [&](const auto& rr)
 3726|  2.13M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.13M|                    auto res = read_all(rr);
 3728|  2.13M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.13M|                        return unexpected_scan_error(
 3730|  2.13M|                            scan_error::invalid_scanned_value,
 3731|  2.13M|                            "Invalid float value");
 3732|  2.13M|                    }
 3733|  2.13M|                    return res;
 3734|  2.13M|                };
 3735|  2.13M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|  2.13M|            }
 3737|  2.13M|        }
 3738|  2.13M|        else {
 3739|  2.13M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|  2.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 70.1k, False: 2.06M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  70.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  70.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  70.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  70.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  70.1k|    }                                                  \
  |  | 3642|  2.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|  2.06M|                it,
 3741|  2.06M|                do_read_source_impl(
 3742|  2.06M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  2.06M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  2.06M|        }
 3745|       |
 3746|  2.06M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  2.06M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 2.04M, False: 20.7k]
  |  Branch (3748:48): [True: 2.02M, False: 15.2k]
  ------------------
 3749|  2.06M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 1.94M, False: 81.6k]
  ------------------
 3750|  2.06M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 1.94M, False: 2.66k]
  ------------------
 3751|  1.94M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  1.94M|        }
 3753|       |
 3754|  2.06M|        handle_separators();
 3755|       |
 3756|  2.06M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 2.06M]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  2.06M|        return it;
 3769|  2.06M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|  2.13M|    {
 4001|  2.13M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.13M|        const bool allowed_nonhex =
 4003|  2.13M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.13M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.13M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.09M, False: 35.9k]
  |  Branch (4006:45): [True: 0, False: 2.09M]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.13M|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 35.9k, False: 2.09M]
  ------------------
 4012|  35.9k|            return *r;
 4013|  35.9k|        }
 4014|       |
 4015|  2.09M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.01M, False: 84.3k]
  |  Branch (4015:45): [True: 1.11k, False: 2.01M]
  ------------------
 4016|  1.11k|            return unexpected(r.error());
 4017|  1.11k|        }
 4018|  2.09M|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 84.3k, False: 2.01M]
  ------------------
 4019|  84.3k|            return *r;
 4020|  84.3k|        }
 4021|       |
 4022|  2.01M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.44M, False: 563k]
  |  Branch (4022:28): [True: 464k, False: 982k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|   464k|            auto it = range.begin();
 4026|       |
 4027|   464k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 22.8k, False: 442k]
  ------------------
 4028|  22.8k|                m_kind = float_kind::hex_with_prefix;
 4029|  22.8k|                it = *r;
 4030|  22.8k|            }
 4031|   442k|            else {
 4032|   442k|                m_kind = float_kind::hex_without_prefix;
 4033|   442k|            }
 4034|       |
 4035|   464k|            return read_hex(ranges::subrange{it, range.end()});
 4036|   464k|        }
 4037|  1.54M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 563k, False: 982k]
  |  Branch (4037:29): [True: 563k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   563k|            m_kind = float_kind::generic;
 4041|   563k|            return read_regular_float(range);
 4042|   563k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|   982k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   982k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.0k, False: 931k]
  |  |  ------------------
  ------------------
 4048|  51.0k|            m_kind = float_kind::hex_with_prefix;
 4049|  51.0k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  51.0k|        }
 4051|       |
 4052|   931k|        m_kind = float_kind::generic;
 4053|   931k|        return read_regular(range);
 4054|   982k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|  2.13M|    {
 3812|  2.13M|        auto it = range.begin();
 3813|  2.13M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.09M, False: 35.9k]
  ------------------
 3814|  2.09M|            return unexpected(r.error());
 3815|  2.09M|        }
 3816|  35.9k|        else {
 3817|  35.9k|            it = *r;
 3818|  35.9k|        }
 3819|       |
 3820|  35.9k|        if (auto r = read_matching_string_classic_nocase(
 3821|  35.9k|                ranges::subrange{it, range.end()}, "inity");
 3822|  35.9k|            !r) {
  ------------------
  |  Branch (3822:13): [True: 20.7k, False: 15.2k]
  ------------------
 3823|  20.7k|            m_kind = float_kind::inf_short;
 3824|  20.7k|            return it;
 3825|  20.7k|        }
 3826|  15.2k|        else {
 3827|  15.2k|            m_kind = float_kind::inf_long;
 3828|  15.2k|            return *r;
 3829|  15.2k|        }
 3830|  35.9k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|  2.09M|    {
 3835|  2.09M|        auto it = range.begin();
 3836|  2.09M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.01M, False: 85.4k]
  ------------------
 3837|  2.01M|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.01M|                scan_error::invalid_scanned_value,
 3839|  2.01M|                "Invalid floating-point NaN value"));
 3840|  2.01M|        }
 3841|  85.4k|        else {
 3842|  85.4k|            it = *r;
 3843|  85.4k|        }
 3844|       |
 3845|  85.4k|        if (auto r =
 3846|  85.4k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  85.4k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 81.6k, False: 3.78k]
  ------------------
 3848|  81.6k|            m_kind = float_kind::nan_simple;
 3849|  81.6k|            return it;
 3850|  81.6k|        }
 3851|  3.78k|        else {
 3852|  3.78k|            it = *r;
 3853|  3.78k|        }
 3854|       |
 3855|  3.78k|        auto payload_beg_it = it;
 3856|  3.78k|        it = read_while_code_unit(
 3857|  3.78k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  3.78k|                return is_ascii_char(ch) &&
 3859|  3.78k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|  3.78k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|  3.78k|            });
 3862|  3.78k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|  3.78k|        m_kind = float_kind::nan_with_payload;
 3865|  3.78k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 2.66k, False: 1.11k]
  ------------------
 3866|  3.78k|                                             ')')) {
 3867|  2.66k|            return *r;
 3868|  2.66k|        }
 3869|  1.11k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|  1.11k|                                     "Invalid floating-point NaN payload");
 3871|  3.78k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.78k|    {
  754|  3.78k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  22.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.8k|              cvref<T> obj = *get<T>(fn);
  745|  22.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.8k|              }
  748|  22.8k|              else {
  749|  22.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.8k|              }
  751|  22.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  22.8k|    {
  684|  22.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.8k|            return static_cast<T*>(s.m_cp);
  686|  22.8k|        }
  687|  22.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.8k|            return static_cast<T*>(s.m_p);
  689|  22.8k|        }
  690|  22.8k|        else {
  691|  22.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.8k|        }
  693|  22.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3857|  22.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  22.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3858:24): [True: 22.6k, False: 163]
  ------------------
 3859|  22.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3859:26): [True: 19.8k, False: 2.76k]
  |  Branch (3859:39): [True: 12.1k, False: 7.77k]
  |  Branch (3859:54): [True: 2.53k, False: 8.00k]
  |  Branch (3859:67): [True: 2.45k, False: 83]
  ------------------
 3860|  22.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3860:26): [True: 5.32k, False: 2.76k]
  |  Branch (3860:39): [True: 2.51k, False: 2.80k]
  |  Branch (3860:53): [True: 2.72k, False: 2.85k]
  ------------------
 3861|  22.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.78k|        {
  662|  3.78k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|  1.44M|    {
 3805|  1.44M|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.44M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|   515k|    {
 3905|   515k|        auto it = range.begin();
 3906|       |
 3907|   515k|        std::ptrdiff_t digits_count = 0;
 3908|   515k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|   515k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   515k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.51k, False: 507k]
  |  |  ------------------
  ------------------
 3910|  8.51k|            return r.transform_error(map_parse_error_to_scan_error(
 3911|  8.51k|                scan_error::invalid_scanned_value,
 3912|  8.51k|                "Invalid hexadecimal floating-point value"));
 3913|  8.51k|        }
 3914|   507k|        else {
 3915|   507k|            digits_count += ranges::distance(it, *r);
 3916|   507k|            it = *r;
 3917|   507k|        }
 3918|       |
 3919|   507k|        m_integral_part_length = digits_count;
 3920|   507k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 67.5k, False: 439k]
  ------------------
 3921|   507k|                                             m_locale_options.decimal_point)) {
 3922|  67.5k|            it = *r;
 3923|  67.5k|        }
 3924|       |
 3925|   507k|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 53.4k, False: 453k]
  ------------------
 3926|   507k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|  53.4k|            digits_count += ranges::distance(it, *r);
 3928|  53.4k|            it = *r;
 3929|  53.4k|        }
 3930|       |
 3931|   507k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 507k]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|   507k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|   507k|        return it;
 3939|   507k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|  1.02M|    {
 3790|  1.02M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02M]
  |  |  |  Branch (859:45): [True: 0, False: 1.02M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|  1.02M|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|  1.02M|        return read_while1_code_unit(
 3799|  1.02M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|  1.02M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.02M|    {
  754|  1.02M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  5.32M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.32M|              cvref<T> obj = *get<T>(fn);
  745|  5.32M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.32M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.32M|              }
  748|  5.32M|              else {
  749|  5.32M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.32M|              }
  751|  5.32M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  5.32M|    {
  684|  5.32M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.32M|            return static_cast<T*>(s.m_cp);
  686|  5.32M|        }
  687|  5.32M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.32M|            return static_cast<T*>(s.m_p);
  689|  5.32M|        }
  690|  5.32M|        else {
  691|  5.32M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.32M|        }
  693|  5.32M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3799|  5.32M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.02M|        {
  662|  1.02M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3876|  1.78M|    {
 3877|  1.78M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 220k, False: 1.56M]
  ------------------
 3878|   220k|            auto beg_exp_it = range.begin();
 3879|   220k|            auto it = *r;
 3880|       |
 3881|   220k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 219k, False: 491]
  ------------------
 3882|   220k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|   219k|                it = r_sign->first;
 3884|   219k|            }
 3885|       |
 3886|   220k|            if (auto r_exp = read_while1_code_unit(
 3887|   220k|                    ranges::subrange{it, range.end()},
 3888|   220k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|   220k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.60k, False: 217k]
  |  |  ------------------
  ------------------
 3890|  2.60k|                it = beg_exp_it;
 3891|  2.60k|            }
 3892|   217k|            else {
 3893|   217k|                it = *r_exp;
 3894|   217k|            }
 3895|       |
 3896|   220k|            return it;
 3897|   220k|        }
 3898|  1.56M|        return range.begin();
 3899|  1.78M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   220k|    {
  754|   220k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   692k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   692k|              cvref<T> obj = *get<T>(fn);
  745|   692k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   692k|                  obj(static_cast<decltype(args)>(args)...);
  747|   692k|              }
  748|   692k|              else {
  749|   692k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   692k|              }
  751|   692k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   692k|    {
  684|   692k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   692k|            return static_cast<T*>(s.m_cp);
  686|   692k|        }
  687|   692k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   692k|            return static_cast<T*>(s.m_p);
  689|   692k|        }
  690|   692k|        else {
  691|   692k|            return reinterpret_cast<T*>(s.m_fp);
  692|   692k|        }
  693|   692k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3888|   692k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   220k|        {
  662|   220k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|  1.49M|    {
 3945|  1.49M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|  1.49M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 1.30M, False: 187k]
  |  Branch (3946:50): [True: 27.2k, False: 1.28M]
  ------------------
 3947|       |
 3948|  1.49M|        auto it = ranges::begin(range);
 3949|  1.49M|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|  1.49M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|  1.49M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.6k, False: 1.44M]
  |  |  ------------------
  ------------------
 3953|  46.6k|            return r.transform_error(
 3954|  46.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  46.6k|                                              "Invalid floating-point value"));
 3956|  46.6k|        }
 3957|  1.44M|        else {
 3958|  1.44M|            digits_count += ranges::distance(it, *r);
 3959|  1.44M|            it = *r;
 3960|  1.44M|        }
 3961|       |
 3962|  1.44M|        m_integral_part_length = digits_count;
 3963|  1.44M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 246k, False: 1.20M]
  ------------------
 3964|  1.44M|                                             m_locale_options.decimal_point)) {
 3965|   246k|            it = *r;
 3966|   246k|        }
 3967|       |
 3968|  1.44M|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 208k, False: 1.24M]
  ------------------
 3969|  1.44M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|   208k|            digits_count += ranges::distance(it, *r);
 3971|   208k|            it = *r;
 3972|   208k|        }
 3973|       |
 3974|  1.44M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.44M]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  1.44M|        auto beg_exp_it = it;
 3980|  1.44M|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 1.27M, False: 174k]
  ------------------
 3981|  1.27M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  1.27M|        }
 3983|  1.44M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 26.5k, False: 1.42M]
  |  Branch (3983:29): [True: 13.8k, False: 12.6k]
  ------------------
 3984|  13.8k|            return unexpected_scan_error(
 3985|  13.8k|                scan_error::invalid_scanned_value,
 3986|  13.8k|                "No exponent given to scientific float");
 3987|  13.8k|        }
 3988|       |
 3989|  1.43M|        m_kind =
 3990|  1.43M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 1.21M, False: 216k]
  ------------------
 3991|       |
 3992|  1.43M|        return it;
 3993|  1.44M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|  2.94M|    {
 3775|  2.94M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94M]
  |  |  |  Branch (859:45): [True: 0, False: 2.94M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  2.94M|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  2.94M|        return read_while1_code_unit(
 3784|  2.94M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  2.94M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  2.94M|    {
  754|  2.94M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  17.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.2M|              cvref<T> obj = *get<T>(fn);
  745|  17.2M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.2M|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.2M|              }
  748|  17.2M|              else {
  749|  17.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.2M|              }
  751|  17.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  17.2M|    {
  684|  17.2M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.2M|            return static_cast<T*>(s.m_cp);
  686|  17.2M|        }
  687|  17.2M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.2M|            return static_cast<T*>(s.m_p);
  689|  17.2M|        }
  690|  17.2M|        else {
  691|  17.2M|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.2M|        }
  693|  17.2M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3784|  17.2M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  2.94M|        {
  662|  2.94M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  1.94M|    {
 1577|  1.94M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.94M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   135k|        {
  662|   135k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   348k|    {
  754|   348k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   348k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   348k|              cvref<T> obj = *get<T>(fn);
  745|   348k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   348k|                  obj(static_cast<decltype(args)>(args)...);
  747|   348k|              }
  748|   348k|              else {
  749|   348k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   348k|              }
  751|   348k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   348k|    {
  684|   348k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   348k|            return static_cast<T*>(s.m_cp);
  686|   348k|        }
  687|   348k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   348k|            return static_cast<T*>(s.m_p);
  689|   348k|        }
  690|   348k|        else {
  691|   348k|            return reinterpret_cast<T*>(s.m_fp);
  692|   348k|        }
  693|   348k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   348k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   348k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   348k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|  1.69M|    {
 3666|  1.69M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.69M]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  1.69M|        return read_source_impl(range);
 3672|  1.69M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   348k|        {
  662|   348k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   480k|    {
 4171|   480k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   480k|#if !SCN_DISABLE_LOCALE
 4174|   480k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 134k, False: 345k]
  ------------------
 4175|   134k|            return read_impl<Range>(
 4176|   134k|                range, rd,
 4177|   134k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   134k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   134k|                },
 4180|   134k|                value, loc);
 4181|   134k|        }
 4182|   345k|#endif
 4183|       |
 4184|   345k|        return read_impl<Range>(
 4185|   345k|            range, rd,
 4186|   345k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   345k|                return r.read_source(SCN_FWD(args)...);
 4188|   345k|            },
 4189|   345k|            value);
 4190|   480k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   681k|    {
 4207|   681k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   681k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.1k, False: 668k]
  |  |  ------------------
  ------------------
 4209|  13.1k|            return unexpected(r.error());
 4210|  13.1k|        }
 4211|       |
 4212|   668k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   668k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   668k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   668k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   668k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.5k, False: 654k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  14.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  14.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  14.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  14.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  14.5k|    }                                                  \
  |  |  |  | 3642|   668k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   654k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   654k|        return ranges::next(range.begin(), n);
 4214|   668k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.16M|    {
  763|  2.16M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.16M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   134k|    {
  754|   134k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   134k|              cvref<T> obj = *get<T>(fn);
  745|   134k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   134k|                  obj(static_cast<decltype(args)>(args)...);
  747|   134k|              }
  748|   134k|              else {
  749|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   134k|              }
  751|   134k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   134k|    {
  684|   134k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   134k|            return static_cast<T*>(s.m_cp);
  686|   134k|        }
  687|   134k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   134k|            return static_cast<T*>(s.m_p);
  689|   134k|        }
  690|   134k|        else {
  691|   134k|            return reinterpret_cast<T*>(s.m_fp);
  692|   134k|        }
  693|   134k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   134k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   134k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   134k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|   435k|    {
 3680|   435k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|   435k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   435k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 435k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|   435k|        return read_source_impl(range);
 3686|   435k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|  2.16M|    {
 3706|  2.16M|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.16M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.16M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.16M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.16M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.16M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.16M|        auto it = sign_result.first;
 3709|  2.16M|        m_sign = sign_result.second;
 3710|       |
 3711|  2.16M|        auto digits_begin = it;
 3712|  2.16M|        auto r = ranges::subrange{it, range.end()};
 3713|  2.16M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.16M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.16M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.16M]
  |  |  |  Branch (859:45): [True: 0, False: 2.16M]
  |  |  |  Branch (859:45): [True: 0, False: 2.16M]
  |  |  ------------------
  ------------------
 3716|  2.16M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|  2.16M|            else {
 3725|  2.16M|                auto cb = [&](const auto& rr)
 3726|  2.16M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.16M|                    auto res = read_all(rr);
 3728|  2.16M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.16M|                        return unexpected_scan_error(
 3730|  2.16M|                            scan_error::invalid_scanned_value,
 3731|  2.16M|                            "Invalid float value");
 3732|  2.16M|                    }
 3733|  2.16M|                    return res;
 3734|  2.16M|                };
 3735|  2.16M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|  2.16M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.16M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.2k, False: 2.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  41.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  41.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  41.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  41.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  41.2k|    }                                                  \
  |  | 3642|  2.16M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|  2.12M|            }
 3737|  2.16M|        }
 3738|  2.12M|        else {
 3739|  2.12M|            SCN_TRY_ASSIGN(
 3740|  2.12M|                it,
 3741|  2.12M|                do_read_source_impl(
 3742|  2.12M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  2.12M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  2.12M|        }
 3745|       |
 3746|  2.12M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  2.12M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 2.10M, False: 20.6k]
  |  Branch (3748:48): [True: 2.09M, False: 15.2k]
  ------------------
 3749|  2.12M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 2.00M, False: 81.6k]
  ------------------
 3750|  2.12M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 2.00M, False: 2.65k]
  ------------------
 3751|  2.00M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  2.00M|        }
 3753|       |
 3754|  2.12M|        handle_separators();
 3755|       |
 3756|  2.12M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 2.12M]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  2.12M|        return it;
 3769|  2.12M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|  2.16M|    {
 3812|  2.16M|        auto it = range.begin();
 3813|  2.16M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.13M, False: 35.8k]
  ------------------
 3814|  2.13M|            return unexpected(r.error());
 3815|  2.13M|        }
 3816|  35.8k|        else {
 3817|  35.8k|            it = *r;
 3818|  35.8k|        }
 3819|       |
 3820|  35.8k|        if (auto r = read_matching_string_classic_nocase(
 3821|  35.8k|                ranges::subrange{it, range.end()}, "inity");
 3822|  35.8k|            !r) {
  ------------------
  |  Branch (3822:13): [True: 20.6k, False: 15.2k]
  ------------------
 3823|  20.6k|            m_kind = float_kind::inf_short;
 3824|  20.6k|            return it;
 3825|  20.6k|        }
 3826|  15.2k|        else {
 3827|  15.2k|            m_kind = float_kind::inf_long;
 3828|  15.2k|            return *r;
 3829|  15.2k|        }
 3830|  35.8k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|  2.13M|    {
 3835|  2.13M|        auto it = range.begin();
 3836|  2.13M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.04M, False: 85.3k]
  ------------------
 3837|  2.04M|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.04M|                scan_error::invalid_scanned_value,
 3839|  2.04M|                "Invalid floating-point NaN value"));
 3840|  2.04M|        }
 3841|  85.3k|        else {
 3842|  85.3k|            it = *r;
 3843|  85.3k|        }
 3844|       |
 3845|  85.3k|        if (auto r =
 3846|  85.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  85.3k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 81.6k, False: 3.76k]
  ------------------
 3848|  81.6k|            m_kind = float_kind::nan_simple;
 3849|  81.6k|            return it;
 3850|  81.6k|        }
 3851|  3.76k|        else {
 3852|  3.76k|            it = *r;
 3853|  3.76k|        }
 3854|       |
 3855|  3.76k|        auto payload_beg_it = it;
 3856|  3.76k|        it = read_while_code_unit(
 3857|  3.76k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  3.76k|                return is_ascii_char(ch) &&
 3859|  3.76k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|  3.76k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|  3.76k|            });
 3862|  3.76k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|  3.76k|        m_kind = float_kind::nan_with_payload;
 3865|  3.76k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 2.65k, False: 1.10k]
  ------------------
 3866|  3.76k|                                             ')')) {
 3867|  2.65k|            return *r;
 3868|  2.65k|        }
 3869|  1.10k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|  1.10k|                                     "Invalid floating-point NaN payload");
 3871|  3.76k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.76k|    {
  754|  3.76k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  22.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.7k|              cvref<T> obj = *get<T>(fn);
  745|  22.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.7k|              }
  748|  22.7k|              else {
  749|  22.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.7k|              }
  751|  22.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  22.7k|    {
  684|  22.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.7k|            return static_cast<T*>(s.m_cp);
  686|  22.7k|        }
  687|  22.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.7k|            return static_cast<T*>(s.m_p);
  689|  22.7k|        }
  690|  22.7k|        else {
  691|  22.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.7k|        }
  693|  22.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3857|  22.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|  22.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3858:24): [True: 22.6k, False: 149]
  ------------------
 3859|  22.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3859:26): [True: 19.8k, False: 2.76k]
  |  Branch (3859:39): [True: 12.1k, False: 7.76k]
  |  Branch (3859:54): [True: 2.52k, False: 8.00k]
  |  Branch (3859:67): [True: 2.44k, False: 83]
  ------------------
 3860|  22.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3860:26): [True: 5.32k, False: 2.76k]
  |  Branch (3860:39): [True: 2.51k, False: 2.80k]
  |  Branch (3860:53): [True: 2.72k, False: 2.84k]
  ------------------
 3861|  22.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.76k|        {
  662|  3.76k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  1.48M|    {
 3805|  1.48M|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.48M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.16M|{
 1996|  1.16M|    auto it = read_while_code_unit(range, pred);
 1997|  1.16M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 476k, False: 688k]
  ------------------
 1998|   476k|        return unexpected(parse_error::error);
 1999|   476k|    }
 2000|   688k|    return it;
 2001|  1.16M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3876|   361k|    {
 3877|   361k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 71.5k, False: 289k]
  ------------------
 3878|  71.5k|            auto beg_exp_it = range.begin();
 3879|  71.5k|            auto it = *r;
 3880|       |
 3881|  71.5k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 71.4k, False: 156]
  ------------------
 3882|  71.5k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  71.4k|                it = r_sign->first;
 3884|  71.4k|            }
 3885|       |
 3886|  71.5k|            if (auto r_exp = read_while1_code_unit(
 3887|  71.5k|                    ranges::subrange{it, range.end()},
 3888|  71.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  71.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  71.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 962, False: 70.6k]
  |  |  ------------------
  ------------------
 3890|    962|                it = beg_exp_it;
 3891|    962|            }
 3892|  70.6k|            else {
 3893|  70.6k|                it = *r_exp;
 3894|  70.6k|            }
 3895|       |
 3896|  71.5k|            return it;
 3897|  71.5k|        }
 3898|   289k|        return range.begin();
 3899|   361k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  71.5k|    {
  754|  71.5k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   223k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   223k|              cvref<T> obj = *get<T>(fn);
  745|   223k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   223k|                  obj(static_cast<decltype(args)>(args)...);
  747|   223k|              }
  748|   223k|              else {
  749|   223k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   223k|              }
  751|   223k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   223k|    {
  684|   223k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   223k|            return static_cast<T*>(s.m_cp);
  686|   223k|        }
  687|   223k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   223k|            return static_cast<T*>(s.m_p);
  689|   223k|        }
  690|   223k|        else {
  691|   223k|            return reinterpret_cast<T*>(s.m_fp);
  692|   223k|        }
  693|   223k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3888|   223k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  71.5k|        {
  662|  71.5k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|   559k|    {
 3945|   559k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   559k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 372k, False: 186k]
  |  Branch (3946:50): [True: 27.4k, False: 345k]
  ------------------
 3947|       |
 3948|   559k|        auto it = ranges::begin(range);
 3949|   559k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   559k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   559k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 534k]
  |  |  ------------------
  ------------------
 3953|  25.0k|            return r.transform_error(
 3954|  25.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  25.0k|                                              "Invalid floating-point value"));
 3956|  25.0k|        }
 3957|   534k|        else {
 3958|   534k|            digits_count += ranges::distance(it, *r);
 3959|   534k|            it = *r;
 3960|   534k|        }
 3961|       |
 3962|   534k|        m_integral_part_length = digits_count;
 3963|   534k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 97.6k, False: 436k]
  ------------------
 3964|   534k|                                             m_locale_options.decimal_point)) {
 3965|  97.6k|            it = *r;
 3966|  97.6k|        }
 3967|       |
 3968|   534k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 84.0k, False: 450k]
  ------------------
 3969|   534k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|  84.0k|            digits_count += ranges::distance(it, *r);
 3971|  84.0k|            it = *r;
 3972|  84.0k|        }
 3973|       |
 3974|   534k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 534k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|   534k|        auto beg_exp_it = it;
 3980|   534k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 361k, False: 172k]
  ------------------
 3981|   361k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|   361k|        }
 3983|   534k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 26.4k, False: 507k]
  |  Branch (3983:29): [True: 13.8k, False: 12.6k]
  ------------------
 3984|  13.8k|            return unexpected_scan_error(
 3985|  13.8k|                scan_error::invalid_scanned_value,
 3986|  13.8k|                "No exponent given to scientific float");
 3987|  13.8k|        }
 3988|       |
 3989|   520k|        m_kind =
 3990|   520k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 449k, False: 70.6k]
  ------------------
 3991|       |
 3992|   520k|        return it;
 3993|   534k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|  1.09M|    {
 3775|  1.09M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  |  Branch (859:45): [True: 0, False: 1.09M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  1.09M|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  1.09M|        return read_while1_code_unit(
 3784|  1.09M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  1.09M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.09M|    {
  754|  1.09M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  6.81M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.81M|              cvref<T> obj = *get<T>(fn);
  745|  6.81M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.81M|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.81M|              }
  748|  6.81M|              else {
  749|  6.81M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.81M|              }
  751|  6.81M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  6.81M|    {
  684|  6.81M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.81M|            return static_cast<T*>(s.m_cp);
  686|  6.81M|        }
  687|  6.81M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.81M|            return static_cast<T*>(s.m_p);
  689|  6.81M|        }
  690|  6.81M|        else {
  691|  6.81M|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.81M|        }
  693|  6.81M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|  6.81M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.09M|        {
  662|  1.09M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|  2.16M|    {
 4001|  2.16M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.16M|        const bool allowed_nonhex =
 4003|  2.16M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.16M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.16M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.13M, False: 35.8k]
  |  Branch (4006:45): [True: 0, False: 2.13M]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.16M|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 35.8k, False: 2.13M]
  ------------------
 4012|  35.8k|            return *r;
 4013|  35.8k|        }
 4014|       |
 4015|  2.13M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.04M, False: 84.2k]
  |  Branch (4015:45): [True: 1.10k, False: 2.04M]
  ------------------
 4016|  1.10k|            return unexpected(r.error());
 4017|  1.10k|        }
 4018|  2.13M|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 84.2k, False: 2.04M]
  ------------------
 4019|  84.2k|            return *r;
 4020|  84.2k|        }
 4021|       |
 4022|  2.04M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.48M, False: 559k]
  |  Branch (4022:28): [True: 460k, False: 1.02M]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|   460k|            auto it = range.begin();
 4026|       |
 4027|   460k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 22.4k, False: 437k]
  ------------------
 4028|  22.4k|                m_kind = float_kind::hex_with_prefix;
 4029|  22.4k|                it = *r;
 4030|  22.4k|            }
 4031|   437k|            else {
 4032|   437k|                m_kind = float_kind::hex_without_prefix;
 4033|   437k|            }
 4034|       |
 4035|   460k|            return read_hex(ranges::subrange{it, range.end()});
 4036|   460k|        }
 4037|  1.58M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 559k, False: 1.02M]
  |  Branch (4037:29): [True: 559k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   559k|            m_kind = float_kind::generic;
 4041|   559k|            return read_regular_float(range);
 4042|   559k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  1.02M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.1k, False: 972k]
  |  |  ------------------
  ------------------
 4048|  55.1k|            m_kind = float_kind::hex_with_prefix;
 4049|  55.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  55.1k|        }
 4051|       |
 4052|   972k|        m_kind = float_kind::generic;
 4053|   972k|        return read_regular(range);
 4054|  1.02M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  1.48M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  1.48M|                    auto res = read_all(rr);
 3728|  1.48M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.21k, False: 1.48M]
  |  |  ------------------
  ------------------
 3729|  1.21k|                        return unexpected_scan_error(
 3730|  1.21k|                            scan_error::invalid_scanned_value,
 3731|  1.21k|                            "Invalid float value");
 3732|  1.21k|                    }
 3733|  1.48M|                    return res;
 3734|  1.48M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.48M|{
 1839|  1.48M|    return ranges::next(range.begin(), range.end());
 1840|  1.48M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.48M|    {
  313|  1.48M|        ranges::advance(x, bound);
  314|  1.48M|        return x;
  315|  1.48M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.48M|    {
  275|  1.48M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.48M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.48M|    {
  190|  1.48M|        i = std::move(bound);
  191|  1.48M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.01M|    {
 1577|  2.01M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.01M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.01M|    {
 1621|  2.01M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.01M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.01M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.01M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.01M|            m_storage.reset();
 1627|  2.01M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.01M|        }
 1629|  2.01M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.01M|                                          std::basic_string<CharT>>) {
 1631|  2.01M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.01M|            m_view = string_view_type{*m_storage};
 1633|  2.01M|        }
 1634|  2.01M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.01M|                                          typename detail::basic_scan_buffer<
 1636|  2.01M|                                              value_t>::forward_iterator> &&
 1637|  2.01M|                           ranges::common_range<Range>) {
 1638|  2.01M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.01M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.01M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.01M|                             detail::to_address(end_seg.end()))) {
 1642|  2.01M|                auto& str = m_storage.emplace();
 1643|  2.01M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.01M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.01M|                m_view = string_view_type{str};
 1646|  2.01M|                return;
 1647|  2.01M|            }
 1648|       |
 1649|  2.01M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.01M|                                                            end_seg.data());
 1651|  2.01M|            m_storage.reset();
 1652|  2.01M|        }
 1653|  2.01M|        else {
 1654|  2.01M|            auto& str = m_storage.emplace();
 1655|  2.01M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.01M|                str.reserve(range.size());
 1657|  2.01M|            }
 1658|  2.01M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.01M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.01M|                          std::back_inserter(str));
 1661|  2.01M|            }
 1662|  2.01M|            else {
 1663|  2.01M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.01M|                     ++it) {
 1665|  2.01M|                    str.push_back(*it);
 1666|  2.01M|                }
 1667|  2.01M|            }
 1668|  2.01M|            m_view = string_view_type{str};
 1669|  2.01M|        }
 1670|  2.01M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   134k|        {
  662|   134k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   345k|    {
  754|   345k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   345k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   345k|              cvref<T> obj = *get<T>(fn);
  745|   345k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   345k|                  obj(static_cast<decltype(args)>(args)...);
  747|   345k|              }
  748|   345k|              else {
  749|   345k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   345k|              }
  751|   345k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   345k|    {
  684|   345k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   345k|            return static_cast<T*>(s.m_cp);
  686|   345k|        }
  687|   345k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   345k|            return static_cast<T*>(s.m_p);
  689|   345k|        }
  690|   345k|        else {
  691|   345k|            return reinterpret_cast<T*>(s.m_fp);
  692|   345k|        }
  693|   345k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   345k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   345k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   345k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   345k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|  1.73M|    {
 3666|  1.73M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.73M]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  1.73M|        return read_source_impl(range);
 3672|  1.73M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   345k|        {
  662|   345k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   525k|    {
 6179|   525k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   525k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   525k|            auto rd = make_reader<T, char_type>();
 6184|   525k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   525k|                return unexpected(e);
 6186|   525k|            }
 6187|       |
 6188|   525k|            return impl(rd, range, value);
 6189|   525k|        }
 6190|   525k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   525k|            auto rd = make_reader<T, char_type>();
 6192|   525k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 525k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   525k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 525k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   525k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   525k|                return impl(rd, range, value);
 6199|   525k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   525k|        else {
 6207|   525k|            SCN_EXPECT(false);
 6208|   525k|            SCN_UNREACHABLE;
 6209|   525k|        }
 6210|   525k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   525k|    {
 6121|   525k|        const bool need_skipped_width =
 6122|   525k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 525k]
  |  Branch (6122:33): [True: 0, False: 525k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   525k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   525k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   525k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   525k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.89k, False: 519k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.89k|    }                                                  \
  |  |  |  | 3642|   525k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   519k|        auto [it, prefix_width] = prefix_result;
 6127|   519k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   519k|        std::ptrdiff_t value_width = 0;
 6131|   519k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 519k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   519k|        else {
 6147|   519k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   519k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   519k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.2k, False: 498k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  20.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  20.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  20.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  20.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  20.2k|    }                                                  \
  |  | 3642|   519k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   498k|                                             specs, value, loc));
 6149|       |
 6150|   498k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 498k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   498k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   498k|        std::ptrdiff_t postfix_width = 0;
 6159|   498k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 493k, False: 5.32k]
  ------------------
 6160|   493k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   493k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   493k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   493k|                                 value_width));
 6164|   493k|            std::tie(it, postfix_width) = postfix_result;
 6165|   493k|        }
 6166|       |
 6167|   498k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   498k|                                                 value_width, postfix_width);
 6169|   498k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 498k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   498k|        return it;
 6174|   498k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  1.42M|    {
 3692|  1.42M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.42M|        const std::ptrdiff_t sign_len =
 3695|  1.42M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 423k, False: 1.00M]
  ------------------
 3696|       |
 3697|  1.42M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.42M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.42M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.42M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.2k, False: 1.41M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  15.2k|    }                                                  \
  |  |  |  | 3642|  1.42M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.41M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.42M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   519k|    {
 4171|   519k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   519k|#if !SCN_DISABLE_LOCALE
 4174|   519k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 150k, False: 368k]
  ------------------
 4175|   150k|            return read_impl<Range>(
 4176|   150k|                range, rd,
 4177|   150k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   150k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   150k|                },
 4180|   150k|                value, loc);
 4181|   150k|        }
 4182|   368k|#endif
 4183|       |
 4184|   368k|        return read_impl<Range>(
 4185|   368k|            range, rd,
 4186|   368k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   368k|                return r.read_source(SCN_FWD(args)...);
 4188|   368k|            },
 4189|   368k|            value);
 4190|   519k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   726k|    {
 4207|   726k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   726k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.6k, False: 703k]
  |  |  ------------------
  ------------------
 4209|  23.6k|            return unexpected(r.error());
 4210|  23.6k|        }
 4211|       |
 4212|   703k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   703k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   703k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   703k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.34k, False: 700k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.34k|    }                                                  \
  |  |  |  | 3642|   703k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   700k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   700k|        return ranges::next(range.begin(), n);
 4214|   703k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|   150k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   150k|                  obj(static_cast<decltype(args)>(args)...);
  747|   150k|              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   150k|    {
  684|   150k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   150k|            return static_cast<T*>(s.m_cp);
  686|   150k|        }
  687|   150k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   150k|            return static_cast<T*>(s.m_p);
  689|   150k|        }
  690|   150k|        else {
  691|   150k|            return reinterpret_cast<T*>(s.m_fp);
  692|   150k|        }
  693|   150k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   150k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   150k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   150k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   368k|    {
  754|   368k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   368k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   368k|              cvref<T> obj = *get<T>(fn);
  745|   368k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   368k|                  obj(static_cast<decltype(args)>(args)...);
  747|   368k|              }
  748|   368k|              else {
  749|   368k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   368k|              }
  751|   368k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   368k|    {
  684|   368k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   368k|            return static_cast<T*>(s.m_cp);
  686|   368k|        }
  687|   368k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   368k|            return static_cast<T*>(s.m_p);
  689|   368k|        }
  690|   368k|        else {
  691|   368k|            return reinterpret_cast<T*>(s.m_fp);
  692|   368k|        }
  693|   368k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   368k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   368k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   368k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   368k|        {
  662|   368k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   514k|    {
 4171|   514k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   514k|#if !SCN_DISABLE_LOCALE
 4174|   514k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 149k, False: 365k]
  ------------------
 4175|   149k|            return read_impl<Range>(
 4176|   149k|                range, rd,
 4177|   149k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   149k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   149k|                },
 4180|   149k|                value, loc);
 4181|   149k|        }
 4182|   365k|#endif
 4183|       |
 4184|   365k|        return read_impl<Range>(
 4185|   365k|            range, rd,
 4186|   365k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   365k|                return r.read_source(SCN_FWD(args)...);
 4188|   365k|            },
 4189|   365k|            value);
 4190|   514k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   738k|    {
 4207|   738k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   738k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.8k, False: 724k]
  |  |  ------------------
  ------------------
 4209|  13.8k|            return unexpected(r.error());
 4210|  13.8k|        }
 4211|       |
 4212|   724k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   724k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   724k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   724k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.9k, False: 711k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  12.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  12.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  12.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  12.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  12.9k|    }                                                  \
  |  |  |  | 3642|   724k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   711k|        return ranges::next(range.begin(), n);
 4214|   724k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   149k|    {
  754|   149k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   149k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   149k|              cvref<T> obj = *get<T>(fn);
  745|   149k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   149k|                  obj(static_cast<decltype(args)>(args)...);
  747|   149k|              }
  748|   149k|              else {
  749|   149k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   149k|              }
  751|   149k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   149k|    {
  684|   149k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   149k|            return static_cast<T*>(s.m_cp);
  686|   149k|        }
  687|   149k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   149k|            return static_cast<T*>(s.m_p);
  689|   149k|        }
  690|   149k|        else {
  691|   149k|            return reinterpret_cast<T*>(s.m_fp);
  692|   149k|        }
  693|   149k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   149k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   149k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   149k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   149k|        {
  662|   149k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   365k|    {
  754|   365k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   365k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   365k|              cvref<T> obj = *get<T>(fn);
  745|   365k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   365k|                  obj(static_cast<decltype(args)>(args)...);
  747|   365k|              }
  748|   365k|              else {
  749|   365k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   365k|              }
  751|   365k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   365k|    {
  684|   365k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   365k|            return static_cast<T*>(s.m_cp);
  686|   365k|        }
  687|   365k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   365k|            return static_cast<T*>(s.m_p);
  689|   365k|        }
  690|   365k|        else {
  691|   365k|            return reinterpret_cast<T*>(s.m_fp);
  692|   365k|        }
  693|   365k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   365k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   365k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   365k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   365k|        {
  662|   365k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6178|   532k|    {
 6179|   532k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   532k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|   532k|            auto rd = make_reader<T, char_type>();
 6184|   532k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|   532k|                return unexpected(e);
 6186|   532k|            }
 6187|       |
 6188|   532k|            return impl(rd, range, value);
 6189|   532k|        }
 6190|   532k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|   532k|            auto rd = make_reader<T, char_type>();
 6192|   532k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 532k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|   532k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 532k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|   532k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|   532k|                return impl(rd, range, value);
 6199|   532k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|   532k|        else {
 6207|   532k|            SCN_EXPECT(false);
 6208|   532k|            SCN_UNREACHABLE;
 6209|   532k|        }
 6210|   532k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|   532k|    {
 6121|   532k|        const bool need_skipped_width =
 6122|   532k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 532k]
  |  Branch (6122:33): [True: 0, False: 532k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   532k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   532k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   532k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   532k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.26k, False: 524k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  7.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  7.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  7.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  7.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  7.26k|    }                                                  \
  |  |  |  | 3642|   532k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   524k|        auto [it, prefix_width] = prefix_result;
 6127|   524k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   524k|        std::ptrdiff_t value_width = 0;
 6131|   524k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 524k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   524k|        else {
 6147|   524k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   524k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   524k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 19.8k, False: 505k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  19.8k|    }                                                  \
  |  | 3642|   524k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   524k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   505k|                                             specs, value, loc));
 6149|       |
 6150|   505k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 505k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   505k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   505k|        std::ptrdiff_t postfix_width = 0;
 6159|   505k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 499k, False: 5.64k]
  ------------------
 6160|   499k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   499k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   499k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   499k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 499k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   499k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   499k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   499k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   499k|                                 value_width));
 6164|   499k|            std::tie(it, postfix_width) = postfix_result;
 6165|   499k|        }
 6166|       |
 6167|   505k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   505k|                                                 value_width, postfix_width);
 6169|   505k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 505k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   505k|        return it;
 6174|   505k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|  1.44M|    {
 3692|  1.44M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.44M|        const std::ptrdiff_t sign_len =
 3695|  1.44M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 434k, False: 1.00M]
  ------------------
 3696|       |
 3697|  1.44M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.44M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.44M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.44M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.7k, False: 1.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  12.7k|    }                                                  \
  |  |  |  | 3642|  1.44M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  1.43M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.44M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|   524k|    {
 4171|   524k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   524k|#if !SCN_DISABLE_LOCALE
 4174|   524k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 153k, False: 371k]
  ------------------
 4175|   153k|            return read_impl<Range>(
 4176|   153k|                range, rd,
 4177|   153k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   153k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   153k|                },
 4180|   153k|                value, loc);
 4181|   153k|        }
 4182|   371k|#endif
 4183|       |
 4184|   371k|        return read_impl<Range>(
 4185|   371k|            range, rd,
 4186|   371k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   371k|                return r.read_source(SCN_FWD(args)...);
 4188|   371k|            },
 4189|   371k|            value);
 4190|   524k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|   735k|    {
 4207|   735k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   735k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.7k, False: 710k]
  |  |  ------------------
  ------------------
 4209|  24.7k|            return unexpected(r.error());
 4210|  24.7k|        }
 4211|       |
 4212|   710k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   710k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   710k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   710k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   710k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 750, False: 709k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    750|    }                                                  \
  |  |  |  | 3642|   710k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   709k|        return ranges::next(range.begin(), n);
 4214|   710k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   153k|    {
  754|   153k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   153k|              cvref<T> obj = *get<T>(fn);
  745|   153k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   153k|                  obj(static_cast<decltype(args)>(args)...);
  747|   153k|              }
  748|   153k|              else {
  749|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   153k|              }
  751|   153k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   153k|    {
  684|   153k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   153k|            return static_cast<T*>(s.m_cp);
  686|   153k|        }
  687|   153k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   153k|            return static_cast<T*>(s.m_p);
  689|   153k|        }
  690|   153k|        else {
  691|   153k|            return reinterpret_cast<T*>(s.m_fp);
  692|   153k|        }
  693|   153k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|   153k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   153k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   153k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   153k|        {
  662|   153k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   371k|    {
  754|   371k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   371k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   371k|              cvref<T> obj = *get<T>(fn);
  745|   371k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   371k|                  obj(static_cast<decltype(args)>(args)...);
  747|   371k|              }
  748|   371k|              else {
  749|   371k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   371k|              }
  751|   371k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   371k|    {
  684|   371k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   371k|            return static_cast<T*>(s.m_cp);
  686|   371k|        }
  687|   371k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   371k|            return static_cast<T*>(s.m_p);
  689|   371k|        }
  690|   371k|        else {
  691|   371k|            return reinterpret_cast<T*>(s.m_fp);
  692|   371k|        }
  693|   371k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|   371k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   371k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   371k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   371k|        {
  662|   371k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|   520k|    {
 4171|   520k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|   520k|#if !SCN_DISABLE_LOCALE
 4174|   520k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 151k, False: 368k]
  ------------------
 4175|   151k|            return read_impl<Range>(
 4176|   151k|                range, rd,
 4177|   151k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   151k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|   151k|                },
 4180|   151k|                value, loc);
 4181|   151k|        }
 4182|   368k|#endif
 4183|       |
 4184|   368k|        return read_impl<Range>(
 4185|   368k|            range, rd,
 4186|   368k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   368k|                return r.read_source(SCN_FWD(args)...);
 4188|   368k|            },
 4189|   368k|            value);
 4190|   520k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|   748k|    {
 4207|   748k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|   748k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 734k]
  |  |  ------------------
  ------------------
 4209|  14.2k|            return unexpected(r.error());
 4210|  14.2k|        }
 4211|       |
 4212|   734k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|   734k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   734k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   734k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.0k, False: 722k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  12.0k|    }                                                  \
  |  |  |  | 3642|   734k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|   722k|        return ranges::next(range.begin(), n);
 4214|   734k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   151k|    {
  754|   151k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   151k|              cvref<T> obj = *get<T>(fn);
  745|   151k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   151k|                  obj(static_cast<decltype(args)>(args)...);
  747|   151k|              }
  748|   151k|              else {
  749|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   151k|              }
  751|   151k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   151k|    {
  684|   151k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   151k|            return static_cast<T*>(s.m_cp);
  686|   151k|        }
  687|   151k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   151k|            return static_cast<T*>(s.m_p);
  689|   151k|        }
  690|   151k|        else {
  691|   151k|            return reinterpret_cast<T*>(s.m_fp);
  692|   151k|        }
  693|   151k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|   151k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|   151k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|   151k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   151k|        {
  662|   151k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   368k|    {
  754|   368k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   368k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   368k|              cvref<T> obj = *get<T>(fn);
  745|   368k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   368k|                  obj(static_cast<decltype(args)>(args)...);
  747|   368k|              }
  748|   368k|              else {
  749|   368k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   368k|              }
  751|   368k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   368k|    {
  684|   368k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   368k|            return static_cast<T*>(s.m_cp);
  686|   368k|        }
  687|   368k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   368k|            return static_cast<T*>(s.m_p);
  689|   368k|        }
  690|   368k|        else {
  691|   368k|            return reinterpret_cast<T*>(s.m_fp);
  692|   368k|        }
  693|   368k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|   368k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|   368k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|   368k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   368k|        {
  662|   368k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.15M|{
 1039|  2.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.15M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.15M|        return r;
 1042|  2.15M|    }
 1043|  2.15M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.15M|                           ranges::const_iterator_t<Range>,
 1045|  2.15M|                           typename detail::basic_scan_buffer<
 1046|  2.15M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.15M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.15M|            auto seg = r.begin().contiguous_segment();
 1049|  2.15M|            auto dist =
 1050|  2.15M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.15M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.15M|        }
 1053|  2.15M|        else {
 1054|  2.15M|            return r.begin().contiguous_segment();
 1055|  2.15M|        }
 1056|  2.15M|    }
 1057|  2.15M|    else {
 1058|  2.15M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.15M|    }
 1060|  2.15M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.88M|{
 2061|  1.88M|    auto it = range.begin();
 2062|  3.56M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.54M, False: 21.3k]
  ------------------
 2063|  3.54M|        const auto val =
 2064|  3.54M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.54M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.54M, False: 4.36k]
  |  |  ------------------
  ------------------
 2066|  3.54M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.54M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.54M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.86M, False: 1.67M]
  ------------------
 2069|  1.86M|                return it;
 2070|  1.86M|            }
 2071|  3.54M|        }
 2072|  1.67M|        it = val.iterator;
 2073|  1.67M|    }
 2074|       |
 2075|  21.3k|    return it;
 2076|  1.88M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  3.54M|{
 1899|  3.54M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.54M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.54M|    auto it = range.begin();
 1903|  3.54M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.54M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.36k, False: 3.54M]
  |  |  ------------------
  ------------------
 1906|  4.36k|        ++it;
 1907|  4.36k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.36k|        return {it, {}};
 1909|  4.36k|    }
 1910|       |
 1911|  3.54M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.49M, False: 47.6k]
  ------------------
 1912|  3.49M|        ++it;
 1913|  3.49M|        return {it, string_type(1, *range.begin())};
 1914|  3.49M|    }
 1915|       |
 1916|  47.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  47.6k|    return {it, string_type{range.begin(), it}};
 1918|  3.54M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  4.36k|{
 1155|  4.36k|    auto it = input.begin();
 1156|  34.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 33.3k, False: 1.50k]
  ------------------
 1157|  33.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.86k, False: 30.4k]
  ------------------
 1158|  2.86k|            break;
 1159|  2.86k|        }
 1160|  33.3k|    }
 1161|  4.36k|    return it;
 1162|  4.36k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  47.6k|    {
  283|  47.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  47.6k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  47.6k|    {
  252|  47.6k|        constexpr iter_difference_t<I> zero{0};
  253|  47.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|   145k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 98.7k, False: 46.6k]
  |  Branch (255:30): [True: 97.7k, False: 1.00k]
  ------------------
  256|  97.7k|            ++i;
  257|  97.7k|            ++counter;
  258|  97.7k|        }
  259|       |
  260|  47.6k|        return counter;
  261|  47.6k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  3.54M|    {
 1890|  3.54M|        return !codepoint.empty();
 1891|  3.54M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.88M|{
 2082|  1.88M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.88M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.15M|{
 2951|  2.15M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.15M, False: 0]
  ------------------
 2952|  2.15M|        auto it = read_while_classic_space(range);
 2953|  2.15M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.15M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 2.13M]
  |  |  ------------------
  ------------------
 2955|  21.3k|            return unexpected(e);
 2956|  21.3k|        }
 2957|       |
 2958|  2.13M|        return it;
 2959|  2.15M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.15M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.15M|{
 2117|  2.15M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.15M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.15M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.15M|        auto buf = make_contiguous_buffer(range);
 2121|  2.15M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.15M|        return ranges::next(range.begin(),
 2123|  2.15M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.15M|    }
 2125|  2.15M|    else {
 2126|  2.15M|        auto it = range.begin();
 2127|       |
 2128|  2.15M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.15M|            auto seg = get_contiguous_beginning(range);
 2130|  2.15M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.15M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 267k, False: 1.88M]
  ------------------
 2132|   267k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   267k|            }
 2134|  1.88M|            ranges::advance(it, seg.size());
 2135|  1.88M|        }
 2136|       |
 2137|  1.88M|        return read_while_code_point(
 2138|  1.88M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.15M|    }
 2140|  2.15M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.88M|    {
  754|  1.88M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.54M|              cvref<T> obj = *get<T>(fn);
  745|  3.54M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.54M|              }
  748|  3.54M|              else {
  749|  3.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.54M|              }
  751|  3.54M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.54M|    {
  684|  3.54M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.54M|            return static_cast<T*>(s.m_cp);
  686|  3.54M|        }
  687|  3.54M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.54M|            return static_cast<T*>(s.m_p);
  689|  3.54M|        }
  690|  3.54M|        else {
  691|  3.54M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.54M|        }
  693|  3.54M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.54M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.88M|        {
  662|  1.88M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   236k|{
  981|   236k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   236k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   236k|        return true;
  984|   236k|    }
  985|   236k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   236k|                           ranges::const_iterator_t<Range>,
  987|   236k|                           typename detail::basic_scan_buffer<
  988|   236k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   236k|        auto beg = r.begin();
  990|   236k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 236k, False: 0]
  ------------------
  991|   236k|            return false;
  992|   236k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   236k|    else {
 1006|   236k|        return false;
 1007|   236k|    }
 1008|   236k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6037|   181k|    {
 6038|   181k|        const bool need_skipped_width =
 6039|   181k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 181k]
  |  Branch (6039:33): [True: 0, False: 181k]
  ------------------
 6040|   181k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|   181k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 181k]
  ------------------
 6044|   181k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 181k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|   181k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 181k, False: 0]
  |  Branch (6048:56): [True: 181k, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|   181k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 181k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   361k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.47k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.47k|    }                                                  \
  |  |  |  | 3642|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   361k|                            make_eof_scan_error));
 6059|       |
 6060|   361k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 179k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|   179k|            return result_type{it, 0};
 6068|   361k|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|   181k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   262k|{
 1976|   262k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   262k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   262k|{
 1957|   262k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   262k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   262k|    }
 1960|   262k|    else {
 1961|   262k|        auto first = range.begin();
 1962|   292k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 291k, False: 906]
  ------------------
 1963|   291k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 262k, False: 29.7k]
  ------------------
 1964|   262k|                return first;
 1965|   262k|            }
 1966|   291k|        }
 1967|    906|        return first;
 1968|   262k|    }
 1969|   262k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   839k|    {
  763|   839k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   839k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   839k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   380k|    {
  754|   380k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   419k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   419k|              cvref<T> obj = *get<T>(fn);
  745|   419k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   419k|                  obj(static_cast<decltype(args)>(args)...);
  747|   419k|              }
  748|   419k|              else {
  749|   419k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   419k|              }
  751|   419k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   419k|    {
  684|   419k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   419k|            return static_cast<T*>(s.m_cp);
  686|   419k|        }
  687|   419k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   419k|            return static_cast<T*>(s.m_p);
  689|   419k|        }
  690|   419k|        else {
  691|   419k|            return reinterpret_cast<T*>(s.m_fp);
  692|   419k|        }
  693|   419k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   380k|        {
  662|   380k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  44.8k|    {
  108|  44.8k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  44.8k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  44.8k|    {
   94|  44.8k|        iter_difference_t<I> counter{0};
   95|   108k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 64.0k, False: 44.8k]
  ------------------
   96|  64.0k|            ++i;
   97|  64.0k|            ++counter;
   98|  64.0k|        }
   99|  44.8k|        return counter;
  100|  44.8k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   598k|{
 1857|   598k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   598k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   598k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   598k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   598k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   598k|        if (sz < count) {
 1862|   598k|            return unexpected(eof_error::eof);
 1863|   598k|        }
 1864|       |
 1865|   598k|        return ranges::next(range.begin(), count);
 1866|   598k|    }
 1867|   598k|    else {
 1868|   598k|        auto it = range.begin();
 1869|   598k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 337k, False: 261k]
  ------------------
 1870|   337k|            return ranges::next(it, count);
 1871|   337k|        }
 1872|       |
 1873|   969k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 753k, False: 215k]
  ------------------
 1874|   753k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 46.0k, False: 707k]
  ------------------
 1875|  46.0k|                return unexpected(eof_error::eof);
 1876|  46.0k|            }
 1877|   753k|        }
 1878|       |
 1879|   215k|        return it;
 1880|   261k|    }
 1881|   598k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   598k|{
 1095|   598k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   598k|        return r.size();
 1097|   598k|    }
 1098|   598k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   598k|                           ranges::const_iterator_t<Range>,
 1100|   598k|                           typename detail::basic_scan_buffer<
 1101|   598k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   598k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   598k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   598k|        }
 1105|   598k|        else {
 1106|   598k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 598k, False: 0]
  ------------------
 1107|   598k|                return static_cast<size_t>(
 1108|   598k|                    r.begin().parent()->chars_available() -
 1109|   598k|                    r.begin().position());
 1110|   598k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   598k|        }
 1113|   598k|    }
 1114|   598k|    else {
 1115|   598k|        return 0;
 1116|   598k|    }
 1117|   598k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|  73.5k|    {
 1780|  73.5k|        auto stdloc = loc.get<std::locale>();
 1781|  73.5k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  73.5k|        grouping = numpunct.grouping();
 1783|  73.5k|        thousands_sep =
 1784|  73.5k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 73.5k]
  ------------------
 1785|  73.5k|        decimal_point = numpunct.decimal_point();
 1786|  73.5k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|  73.5k|{
 1717|  73.5k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 73.5k, False: 0]
  ------------------
 1718|  73.5k|        return std::use_facet<Facet>(stdloc);
 1719|  73.5k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  73.5k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   284k|{
 1846|   284k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 660, False: 284k]
  |  |  ------------------
  ------------------
 1847|    660|        return unexpected(e);
 1848|    660|    }
 1849|       |
 1850|   284k|    return ranges::next(range.begin());
 1851|   284k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   577k|{
  950|   577k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.62k, False: 574k]
  |  |  ------------------
  ------------------
  951|  2.62k|        return eof_error::eof;
  952|  2.62k|    }
  953|   574k|    return eof_error::good;
  954|   577k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   836k|{
  944|   836k|    return is_range_eof(r.begin(), r.end());
  945|   836k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   836k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   836k|    {
  937|   836k|        return begin == end;
  938|   836k|    }
  939|   836k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   284k|    {
  296|   284k|        ++x;
  297|   284k|        return x;
  298|   284k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   236k|{
 3141|   236k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   236k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 236k, False: 249]
  ------------------
 3143|   236k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 236k, False: 0]
  ------------------
 3144|   236k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   236k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|   236k|    }
 3148|       |
 3149|    249|    auto& it = *r;
 3150|    249|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 210, False: 39]
  ------------------
 3151|    210|        return std::pair{it, sign_type::minus_sign};
 3152|    210|    }
 3153|     39|    return std::pair{it, sign_type::plus_sign};
 3154|    249|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   258k|{
 2272|   258k|    auto it = read_code_unit(range);
 2273|   258k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 306, False: 258k]
  |  |  ------------------
  ------------------
 2274|    306|        return unexpected(make_eof_parse_error(it.error()));
 2275|    306|    }
 2276|       |
 2277|   516k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 516k, False: 256k]
  ------------------
 2278|   516k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.83k, False: 514k]
  ------------------
 2279|  1.83k|            return *it;
 2280|  1.83k|        }
 2281|   516k|    }
 2282|       |
 2283|   256k|    return unexpected(parse_error::error);
 2284|   258k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   598k|{
 2231|   598k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   598k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   598k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   598k|        if (range.size() < str.size()) {
 2236|   598k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   598k|        }
 2238|   598k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   598k|            return unexpected(parse_error::error);
 2240|   598k|        }
 2241|   598k|        return ranges::next(range.begin(), str.size());
 2242|   598k|    }
 2243|   598k|    else {
 2244|   598k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   598k|            if (ch < 'A' || ch > 'Z') {
 2246|   598k|                return ch;
 2247|   598k|            }
 2248|   598k|            return static_cast<char_type>(ch +
 2249|   598k|                                          static_cast<char_type>('a' - 'A'));
 2250|   598k|        };
 2251|       |
 2252|   598k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|   598k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   598k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   598k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.0k, False: 552k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  46.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  46.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  46.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  46.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  46.0k|    }                                                  \
  |  |  |  | 3642|   598k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   552k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   552k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   552k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 552k, False: 168]
  |  |  ------------------
  ------------------
 2257|   552k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   552k|                    return ascii_tolower(a) ==
 2259|   552k|                           static_cast<detail::char_t<Range>>(b);
 2260|   552k|                }))) {
 2261|   552k|            return unexpected(parse_error::error);
 2262|   552k|        }
 2263|       |
 2264|    168|        return it;
 2265|   552k|    }
 2266|   598k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   567k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   567k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 341k, False: 226k]
  |  Branch (2245:29): [True: 222k, False: 3.34k]
  ------------------
 2246|   563k|                return ch;
 2247|   563k|            }
 2248|  3.34k|            return static_cast<char_type>(ch +
 2249|  3.34k|                                          static_cast<char_type>('a' - 'A'));
 2250|   567k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  26.4k|{
 2146|  26.4k|    auto it = read_code_unit(range);
 2147|  26.4k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 354, False: 26.0k]
  |  |  ------------------
  ------------------
 2148|    354|        return unexpected(make_eof_parse_error(it.error()));
 2149|    354|    }
 2150|       |
 2151|  26.0k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 0]
  |  |  ------------------
  ------------------
 2152|  26.0k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  26.0k|        return unexpected(parse_error::error);
 2154|  26.0k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  26.0k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   262k|{
 1996|   262k|    auto it = read_while_code_unit(range, pred);
 1997|   262k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 235k, False: 27.1k]
  ------------------
 1998|   235k|        return unexpected(parse_error::error);
 1999|   235k|    }
 2000|  27.1k|    return it;
 2001|   262k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  25.6k|    {
 1621|  25.6k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  25.6k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  25.6k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  25.6k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  25.6k|            m_storage.reset();
 1627|  25.6k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  25.6k|        }
 1629|  25.6k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  25.6k|                                          std::basic_string<CharT>>) {
 1631|  25.6k|            m_storage.emplace(SCN_FWD(range));
 1632|  25.6k|            m_view = string_view_type{*m_storage};
 1633|  25.6k|        }
 1634|  25.6k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  25.6k|                                          typename detail::basic_scan_buffer<
 1636|  25.6k|                                              value_t>::forward_iterator> &&
 1637|  25.6k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  25.6k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  25.6k|            auto end_seg = range.end().contiguous_segment();
 1640|  25.6k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  25.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.97k, False: 23.6k]
  |  |  ------------------
  ------------------
 1641|  25.6k|                             detail::to_address(end_seg.end()))) {
 1642|  1.97k|                auto& str = m_storage.emplace();
 1643|  1.97k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.97k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.97k|                m_view = string_view_type{str};
 1646|  1.97k|                return;
 1647|  1.97k|            }
 1648|       |
 1649|  23.6k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  23.6k|                                                            end_seg.data());
 1651|  23.6k|            m_storage.reset();
 1652|  23.6k|        }
 1653|  25.6k|        else {
 1654|  25.6k|            auto& str = m_storage.emplace();
 1655|  25.6k|            if constexpr (ranges::sized_range<Range>) {
 1656|  25.6k|                str.reserve(range.size());
 1657|  25.6k|            }
 1658|  25.6k|            if constexpr (ranges::common_range<Range>) {
 1659|  25.6k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  25.6k|                          std::back_inserter(str));
 1661|  25.6k|            }
 1662|  25.6k|            else {
 1663|  25.6k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  25.6k|                     ++it) {
 1665|  25.6k|                    str.push_back(*it);
 1666|  25.6k|                }
 1667|  25.6k|            }
 1668|  25.6k|            m_view = string_view_type{str};
 1669|  25.6k|        }
 1670|  25.6k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|   438k|    {
 1582|   438k|        return m_view;
 1583|   438k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|   940k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6079|  18.2k|    {
 6080|  18.2k|        const bool need_skipped_width =
 6081|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 18.2k]
  |  Branch (6081:33): [True: 0, False: 18.2k]
  ------------------
 6082|  18.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  18.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 18.2k]
  ------------------
 6085|  18.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 18.2k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  18.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 18.2k, False: 0]
  ------------------
 6090|  18.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 18.2k]
  ------------------
 6091|  18.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  18.2k|        return result_type{rng.begin(), 0};
 6115|  18.2k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   598k|{
 1857|   598k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   598k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   598k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   598k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   598k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   598k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 46.0k, False: 552k]
  ------------------
 1862|  46.0k|            return unexpected(eof_error::eof);
 1863|  46.0k|        }
 1864|       |
 1865|   552k|        return ranges::next(range.begin(), count);
 1866|   598k|    }
 1867|   598k|    else {
 1868|   598k|        auto it = range.begin();
 1869|   598k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   598k|            return ranges::next(it, count);
 1871|   598k|        }
 1872|       |
 1873|   598k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   598k|            if (it == range.end()) {
 1875|   598k|                return unexpected(eof_error::eof);
 1876|   598k|            }
 1877|   598k|        }
 1878|       |
 1879|   598k|        return it;
 1880|   598k|    }
 1881|   598k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   306k|{
 1899|   306k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   306k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   306k|    auto it = range.begin();
 1903|   306k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   306k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   306k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 306k, False: 0]
  ------------------
 1912|   306k|        ++it;
 1913|   306k|        return {it, string_type(1, *range.begin())};
 1914|   306k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   306k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   851k|{
  944|   851k|    return is_range_eof(r.begin(), r.end());
  945|   851k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   851k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   851k|    {
  937|   851k|        return begin == end;
  938|   851k|    }
  939|   851k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   128k|    {
  190|   128k|        i = std::move(bound);
  191|   128k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   306k|    {
 1890|   306k|        return !codepoint.empty();
 1891|   306k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   544k|{
  950|   544k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   544k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.19k, False: 541k]
  |  |  ------------------
  ------------------
  951|  2.19k|        return eof_error::eof;
  952|  2.19k|    }
  953|   541k|    return eof_error::good;
  954|   544k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   251k|{
 1846|   251k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 228, False: 251k]
  |  |  ------------------
  ------------------
 1847|    228|        return unexpected(e);
 1848|    228|    }
 1849|       |
 1850|   251k|    return ranges::next(range.begin());
 1851|   251k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   251k|    {
  296|   251k|        ++x;
  297|   251k|        return x;
  298|   251k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   235k|{
 3141|   235k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   235k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 235k, False: 189]
  ------------------
 3143|   235k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 235k, False: 0]
  ------------------
 3144|   235k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   235k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|   235k|    }
 3148|       |
 3149|    189|    auto& it = *r;
 3150|    189|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 150, False: 39]
  ------------------
 3151|    150|        return std::pair{it, sign_type::minus_sign};
 3152|    150|    }
 3153|     39|    return std::pair{it, sign_type::plus_sign};
 3154|    189|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   241k|{
 2272|   241k|    auto it = read_code_unit(range);
 2273|   241k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 241k]
  |  |  ------------------
  ------------------
 2274|     90|        return unexpected(make_eof_parse_error(it.error()));
 2275|     90|    }
 2276|       |
 2277|   482k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 482k, False: 240k]
  ------------------
 2278|   482k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 863, False: 481k]
  ------------------
 2279|    863|            return *it;
 2280|    863|        }
 2281|   482k|    }
 2282|       |
 2283|   240k|    return unexpected(parse_error::error);
 2284|   241k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   598k|{
 2231|   598k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   598k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   598k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   598k|        if (range.size() < str.size()) {
 2236|   598k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   598k|        }
 2238|   598k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   598k|            return unexpected(parse_error::error);
 2240|   598k|        }
 2241|   598k|        return ranges::next(range.begin(), str.size());
 2242|   598k|    }
 2243|   598k|    else {
 2244|   598k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   598k|            if (ch < 'A' || ch > 'Z') {
 2246|   598k|                return ch;
 2247|   598k|            }
 2248|   598k|            return static_cast<char_type>(ch +
 2249|   598k|                                          static_cast<char_type>('a' - 'A'));
 2250|   598k|        };
 2251|       |
 2252|   598k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|   598k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   598k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   598k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.0k, False: 552k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  46.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  46.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  46.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  46.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  46.0k|    }                                                  \
  |  |  |  | 3642|   598k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   552k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   552k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   552k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 552k, False: 168]
  |  |  ------------------
  ------------------
 2257|   552k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   552k|                    return ascii_tolower(a) ==
 2259|   552k|                           static_cast<detail::char_t<Range>>(b);
 2260|   552k|                }))) {
 2261|   552k|            return unexpected(parse_error::error);
 2262|   552k|        }
 2263|       |
 2264|    168|        return it;
 2265|   552k|    }
 2266|   598k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   567k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   567k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 341k, False: 226k]
  |  Branch (2245:29): [True: 223k, False: 3.34k]
  ------------------
 2246|   564k|                return ch;
 2247|   564k|            }
 2248|  3.34k|            return static_cast<char_type>(ch +
 2249|  3.34k|                                          static_cast<char_type>('a' - 'A'));
 2250|   567k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  10.1k|{
 2146|  10.1k|    auto it = read_code_unit(range);
 2147|  10.1k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 10.0k]
  |  |  ------------------
  ------------------
 2148|    138|        return unexpected(make_eof_parse_error(it.error()));
 2149|    138|    }
 2150|       |
 2151|  10.0k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.0k, False: 0]
  |  |  ------------------
  ------------------
 2152|  10.0k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  10.0k|        return unexpected(parse_error::error);
 2154|  10.0k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  10.0k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   117k|{
 1976|   117k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   117k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   117k|{
 1957|   117k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   117k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   117k|    }
 1960|   117k|    else {
 1961|   117k|        auto first = range.begin();
 1962|   117k|        for (; first != range.end(); ++first) {
 1963|   117k|            if (pred(*first)) {
 1964|   117k|                return first;
 1965|   117k|            }
 1966|   117k|        }
 1967|   117k|        return first;
 1968|   117k|    }
 1969|   117k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   236k|{
 2951|   236k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 236k, False: 0]
  ------------------
 2952|   236k|        auto it = read_while_classic_space(range);
 2953|   236k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   236k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 235k]
  |  |  ------------------
  ------------------
 2955|  1.86k|            return unexpected(e);
 2956|  1.86k|        }
 2957|       |
 2958|   235k|        return it;
 2959|   236k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   236k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   236k|{
 2117|   236k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   236k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   236k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   236k|        auto buf = make_contiguous_buffer(range);
 2121|   236k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   236k|        return ranges::next(range.begin(),
 2123|   236k|                            ranges::distance(buf.view().begin(), it));
 2124|   236k|    }
 2125|   236k|    else {
 2126|   236k|        auto it = range.begin();
 2127|       |
 2128|   236k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   236k|            auto seg = get_contiguous_beginning(range);
 2130|   236k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   236k|                seg_it != seg.end()) {
 2132|   236k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   236k|            }
 2134|   236k|            ranges::advance(it, seg.size());
 2135|   236k|        }
 2136|       |
 2137|   236k|        return read_while_code_point(
 2138|   236k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   236k|    }
 2140|   236k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   236k|{
 2082|   236k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   236k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   259k|{
 2061|   259k|    auto it = range.begin();
 2062|   323k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 306k, False: 16.6k]
  ------------------
 2063|   306k|        const auto val =
 2064|   306k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   306k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   306k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 306k, False: 0]
  |  |  ------------------
  ------------------
 2066|   306k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   306k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   306k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 243k, False: 63.7k]
  ------------------
 2069|   243k|                return it;
 2070|   243k|            }
 2071|   306k|        }
 2072|  63.7k|        it = val.iterator;
 2073|  63.7k|    }
 2074|       |
 2075|  16.6k|    return it;
 2076|   259k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   236k|    {
  754|   236k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   258k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   258k|              cvref<T> obj = *get<T>(fn);
  745|   258k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   258k|                  obj(static_cast<decltype(args)>(args)...);
  747|   258k|              }
  748|   258k|              else {
  749|   258k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   258k|              }
  751|   258k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   258k|    {
  684|   258k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   258k|            return static_cast<T*>(s.m_cp);
  686|   258k|        }
  687|   258k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   258k|            return static_cast<T*>(s.m_p);
  689|   258k|        }
  690|   258k|        else {
  691|   258k|            return reinterpret_cast<T*>(s.m_fp);
  692|   258k|        }
  693|   258k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   258k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   236k|        {
  662|   236k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   362k|    {
  304|   362k|        ranges::advance(x, n);
  305|   362k|        return x;
  306|   362k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   362k|    {
  268|   362k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   362k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   362k|    {
  181|  1.28M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 918k, False: 362k]
  ------------------
  182|   918k|            ++i;
  183|   918k|        }
  184|   362k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  60.3k|    {
 6179|  60.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  60.3k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  60.3k|            auto rd = make_reader<T, char_type>();
 6184|  60.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  60.3k|                return unexpected(e);
 6186|  60.3k|            }
 6187|       |
 6188|  60.3k|            return impl(rd, range, value);
 6189|  60.3k|        }
 6190|  60.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  60.3k|            auto rd = make_reader<T, char_type>();
 6192|  60.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.3k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  60.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 60.3k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  60.3k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  60.3k|                return impl(rd, range, value);
 6199|  60.3k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  60.3k|        else {
 6207|  60.3k|            SCN_EXPECT(false);
 6208|  60.3k|            SCN_UNREACHABLE;
 6209|  60.3k|        }
 6210|  60.3k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   362k|    {
 3040|   362k|        reader_error_handler eh{};
 3041|   362k|        get_derived().check_specs_impl(specs, eh);
 3042|   362k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   362k|        return {};
 3046|   362k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   362k|    {
 3051|   362k|        return static_cast<Derived&>(*this);
 3052|   362k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|   362k|    {
 4146|   362k|        detail::check_float_type_specs(specs, eh);
 4147|   362k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  60.3k|    {
 6121|  60.3k|        const bool need_skipped_width =
 6122|  60.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 60.3k]
  |  Branch (6122:33): [True: 0, False: 60.3k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  60.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  60.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 476, False: 59.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    476|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    476|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    476|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    476|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    476|    }                                                  \
  |  |  |  | 3642|  60.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  59.9k|        auto [it, prefix_width] = prefix_result;
 6127|  59.9k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  59.9k|        std::ptrdiff_t value_width = 0;
 6131|  59.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 59.9k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  59.9k|        else {
 6147|  59.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.8k, False: 6.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  53.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  53.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  53.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  53.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  53.8k|    }                                                  \
  |  | 3642|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  6.10k|                                             specs, value, loc));
 6149|       |
 6150|  6.10k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 6.10k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  6.10k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  6.10k|        std::ptrdiff_t postfix_width = 0;
 6159|  6.10k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 6.02k, False: 84]
  ------------------
 6160|  6.02k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  6.02k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  6.02k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  6.02k|                                 value_width));
 6164|  6.02k|            std::tie(it, postfix_width) = postfix_result;
 6165|  6.02k|        }
 6166|       |
 6167|  6.10k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  6.10k|                                                 value_width, postfix_width);
 6169|  6.10k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 6.10k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  6.10k|        return it;
 6174|  6.10k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   510k|    {
 3035|   510k|        return true;
 3036|   510k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4217|   359k|    {
 4218|   359k|        unsigned options{};
 4219|   359k|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 73.5k, False: 286k]
  ------------------
 4220|  73.5k|            options |= float_reader_base::allow_thsep;
 4221|  73.5k|        }
 4222|       |
 4223|   359k|        SCN_GCC_COMPAT_PUSH
 4224|   359k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|   359k|        switch (specs.type) {
 4227|  73.7k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 73.7k, False: 285k]
  ------------------
 4228|  73.7k|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|  65.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 65.1k, False: 294k]
  ------------------
 4231|  65.1k|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|  73.7k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 73.7k, False: 286k]
  ------------------
 4234|  73.7k|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|  73.6k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 73.6k, False: 286k]
  ------------------
 4237|  73.6k|                return options | float_reader_base::allow_scientific |
 4238|  73.6k|                       float_reader_base::allow_fixed;
 4239|       |
 4240|  73.5k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 73.5k, False: 286k]
  ------------------
 4241|  73.5k|                return options | float_reader_base::allow_scientific |
 4242|  73.5k|                       float_reader_base::allow_fixed |
 4243|  73.5k|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 359k]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|   359k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|   359k|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|   359k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|   359k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   470k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|   940k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|  54.5k|    {
 3692|  54.5k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  54.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  54.5k|        const std::ptrdiff_t sign_len =
 3695|  54.5k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 14, False: 54.5k]
  ------------------
 3696|       |
 3697|  54.5k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.8k, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  37.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  37.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  37.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  37.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  37.8k|    }                                                  \
  |  |  |  | 3642|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  16.7k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  54.5k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|   163k|    {
 4058|   163k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 163k, False: 0]
  ------------------
 4059|   163k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 163k, False: 0]
  ------------------
 4060|   163k|            return;
 4061|   163k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  57.6k|    {
 1587|  57.6k|        return m_storage.has_value();
 1588|  57.6k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  33.5k|    {
 1592|  33.5k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  33.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  33.5k|        return *m_storage;
 1594|  33.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  59.9k|    {
 4171|  59.9k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  59.9k|#if !SCN_DISABLE_LOCALE
 4174|  59.9k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 12.2k, False: 47.6k]
  ------------------
 4175|  12.2k|            return read_impl<Range>(
 4176|  12.2k|                range, rd,
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  12.2k|                },
 4180|  12.2k|                value, loc);
 4181|  12.2k|        }
 4182|  47.6k|#endif
 4183|       |
 4184|  47.6k|        return read_impl<Range>(
 4185|  47.6k|            range, rd,
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
 4188|  47.6k|            },
 4189|  47.6k|            value);
 4190|  59.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  78.2k|    {
 4207|  78.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  78.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.7k, False: 8.52k]
  |  |  ------------------
  ------------------
 4209|  69.7k|            return unexpected(r.error());
 4210|  69.7k|        }
 4211|       |
 4212|  8.52k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  8.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 193, False: 8.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    193|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    193|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    193|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    193|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    193|    }                                                  \
  |  |  |  | 3642|  8.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  8.33k|        return ranges::next(range.begin(), n);
 4214|  8.52k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   234k|    {
  763|   234k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   234k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  12.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.2k|              cvref<T> obj = *get<T>(fn);
  745|  12.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.2k|              }
  748|  12.2k|              else {
  749|  12.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.2k|              }
  751|  12.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  12.2k|    {
  684|  12.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.2k|            return static_cast<T*>(s.m_cp);
  686|  12.2k|        }
  687|  12.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.2k|            return static_cast<T*>(s.m_p);
  689|  12.2k|        }
  690|  12.2k|        else {
  691|  12.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.2k|        }
  693|  12.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  12.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|  36.7k|    {
 3680|  36.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  36.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  36.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 36.7k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  36.7k|        return read_source_impl(range);
 3686|  36.7k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|   234k|    {
 3706|   234k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   234k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   234k|        auto it = sign_result.first;
 3709|   234k|        m_sign = sign_result.second;
 3710|       |
 3711|   234k|        auto digits_begin = it;
 3712|   234k|        auto r = ranges::subrange{it, range.end()};
 3713|   234k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   234k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   234k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|   234k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|   234k|                SCN_TRY_ASSIGN(
 3718|   234k|                    it,
 3719|   234k|                    do_read_source_impl(
 3720|   234k|                        r,
 3721|   234k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|   234k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|   234k|            }
 3724|   234k|            else {
 3725|   234k|                auto cb = [&](const auto& rr)
 3726|   234k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   234k|                    auto res = read_all(rr);
 3728|   234k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   234k|                        return unexpected_scan_error(
 3730|   234k|                            scan_error::invalid_scanned_value,
 3731|   234k|                            "Invalid float value");
 3732|   234k|                    }
 3733|   234k|                    return res;
 3734|   234k|                };
 3735|   234k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|   234k|            }
 3737|   234k|        }
 3738|   234k|        else {
 3739|   234k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 209k, False: 25.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|   209k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|   209k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|   209k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|   209k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|   209k|    }                                                  \
  |  | 3642|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|  25.6k|                it,
 3741|  25.6k|                do_read_source_impl(
 3742|  25.6k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  25.6k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  25.6k|        }
 3745|       |
 3746|  25.6k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  25.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  25.6k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 25.6k, False: 0]
  |  Branch (3748:48): [True: 25.6k, False: 0]
  ------------------
 3749|  25.6k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 25.6k, False: 0]
  ------------------
 3750|  25.6k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 25.6k, False: 0]
  ------------------
 3751|  25.6k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  25.6k|        }
 3753|       |
 3754|  25.6k|        handle_separators();
 3755|       |
 3756|  25.6k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 25.6k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  25.6k|        return it;
 3769|  25.6k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|   234k|    {
 4001|   234k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   234k|        const bool allowed_nonhex =
 4003|   234k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   234k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   234k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 234k, False: 0]
  |  Branch (4006:45): [True: 0, False: 234k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   234k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 234k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|   234k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 234k, False: 0]
  |  Branch (4015:45): [True: 0, False: 234k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   234k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 234k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|   234k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 128k, False: 106k]
  |  Branch (4022:28): [True: 36.8k, False: 91.9k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  36.8k|            auto it = range.begin();
 4026|       |
 4027|  36.8k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 48, False: 36.7k]
  ------------------
 4028|     48|                m_kind = float_kind::hex_with_prefix;
 4029|     48|                it = *r;
 4030|     48|            }
 4031|  36.7k|            else {
 4032|  36.7k|                m_kind = float_kind::hex_without_prefix;
 4033|  36.7k|            }
 4034|       |
 4035|  36.8k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  36.8k|        }
 4037|   198k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 106k, False: 91.9k]
  |  Branch (4037:29): [True: 106k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   106k|            m_kind = float_kind::generic;
 4041|   106k|            return read_regular_float(range);
 4042|   106k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  91.9k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 91.8k]
  |  |  ------------------
  ------------------
 4048|    120|            m_kind = float_kind::hex_with_prefix;
 4049|    120|            return read_hex(ranges::subrange{*r, range.end()});
 4050|    120|        }
 4051|       |
 4052|  91.8k|        m_kind = float_kind::generic;
 4053|  91.8k|        return read_regular(range);
 4054|  91.9k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|   234k|    {
 3812|   234k|        auto it = range.begin();
 3813|   234k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 234k, False: 0]
  ------------------
 3814|   234k|            return unexpected(r.error());
 3815|   234k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|   234k|    {
 3835|   234k|        auto it = range.begin();
 3836|   234k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 234k, False: 0]
  ------------------
 3837|   234k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   234k|                scan_error::invalid_scanned_value,
 3839|   234k|                "Invalid floating-point NaN value"));
 3840|   234k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|   128k|    {
 3805|   128k|        return read_matching_string_classic_nocase(range, "0x");
 3806|   128k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|  36.9k|    {
 3905|  36.9k|        auto it = range.begin();
 3906|       |
 3907|  36.9k|        std::ptrdiff_t digits_count = 0;
 3908|  36.9k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|  36.9k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  36.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.1k, False: 4.83k]
  |  |  ------------------
  ------------------
 3910|  32.1k|            return r.transform_error(map_parse_error_to_scan_error(
 3911|  32.1k|                scan_error::invalid_scanned_value,
 3912|  32.1k|                "Invalid hexadecimal floating-point value"));
 3913|  32.1k|        }
 3914|  4.83k|        else {
 3915|  4.83k|            digits_count += ranges::distance(it, *r);
 3916|  4.83k|            it = *r;
 3917|  4.83k|        }
 3918|       |
 3919|  4.83k|        m_integral_part_length = digits_count;
 3920|  4.83k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 0, False: 4.83k]
  ------------------
 3921|  4.83k|                                             m_locale_options.decimal_point)) {
 3922|      0|            it = *r;
 3923|      0|        }
 3924|       |
 3925|  4.83k|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 0, False: 4.83k]
  ------------------
 3926|  4.83k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|      0|            digits_count += ranges::distance(it, *r);
 3928|      0|            it = *r;
 3929|      0|        }
 3930|       |
 3931|  4.83k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|  4.83k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|  4.83k|        return it;
 3939|  4.83k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|  41.8k|    {
 3790|  41.8k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  41.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.8k]
  |  |  |  Branch (859:45): [True: 0, False: 41.8k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|  41.8k|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|  41.8k|        return read_while1_code_unit(
 3799|  41.8k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|  41.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  41.8k|    {
  754|  41.8k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  47.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.3k|              cvref<T> obj = *get<T>(fn);
  745|  47.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.3k|              }
  748|  47.3k|              else {
  749|  47.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.3k|              }
  751|  47.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  47.3k|    {
  684|  47.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.3k|            return static_cast<T*>(s.m_cp);
  686|  47.3k|        }
  687|  47.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.3k|            return static_cast<T*>(s.m_p);
  689|  47.3k|        }
  690|  47.3k|        else {
  691|  47.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.3k|        }
  693|  47.3k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3799|  47.3k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  41.8k|        {
  662|  41.8k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3876|  21.8k|    {
 3877|  21.8k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 1.58k, False: 20.2k]
  ------------------
 3878|  1.58k|            auto beg_exp_it = range.begin();
 3879|  1.58k|            auto it = *r;
 3880|       |
 3881|  1.58k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 1.58k, False: 0]
  ------------------
 3882|  1.58k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  1.58k|                it = r_sign->first;
 3884|  1.58k|            }
 3885|       |
 3886|  1.58k|            if (auto r_exp = read_while1_code_unit(
 3887|  1.58k|                    ranges::subrange{it, range.end()},
 3888|  1.58k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  1.58k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 811, False: 774]
  |  |  ------------------
  ------------------
 3890|    811|                it = beg_exp_it;
 3891|    811|            }
 3892|    774|            else {
 3893|    774|                it = *r_exp;
 3894|    774|            }
 3895|       |
 3896|  1.58k|            return it;
 3897|  1.58k|        }
 3898|  20.2k|        return range.begin();
 3899|  21.8k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  1.58k|    {
  754|  1.58k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  3.19k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.19k|              cvref<T> obj = *get<T>(fn);
  745|  3.19k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.19k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.19k|              }
  748|  3.19k|              else {
  749|  3.19k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.19k|              }
  751|  3.19k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  3.19k|    {
  684|  3.19k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.19k|            return static_cast<T*>(s.m_cp);
  686|  3.19k|        }
  687|  3.19k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.19k|            return static_cast<T*>(s.m_p);
  689|  3.19k|        }
  690|  3.19k|        else {
  691|  3.19k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.19k|        }
  693|  3.19k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3888|  3.19k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  1.58k|        {
  662|  1.58k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|   198k|    {
 3945|   198k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   198k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 161k, False: 36.8k]
  |  Branch (3946:50): [True: 32.5k, False: 128k]
  ------------------
 3947|       |
 3948|   198k|        auto it = ranges::begin(range);
 3949|   198k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   198k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   198k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 176k, False: 21.5k]
  |  |  ------------------
  ------------------
 3953|   176k|            return r.transform_error(
 3954|   176k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|   176k|                                              "Invalid floating-point value"));
 3956|   176k|        }
 3957|  21.5k|        else {
 3958|  21.5k|            digits_count += ranges::distance(it, *r);
 3959|  21.5k|            it = *r;
 3960|  21.5k|        }
 3961|       |
 3962|  21.5k|        m_integral_part_length = digits_count;
 3963|  21.5k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 21.5k]
  ------------------
 3964|  21.5k|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|  21.5k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 21.5k]
  ------------------
 3969|  21.5k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|  21.5k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  21.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  21.5k|        auto beg_exp_it = it;
 3980|  21.5k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 17.0k, False: 4.58k]
  ------------------
 3981|  17.0k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  17.0k|        }
 3983|  21.5k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 960, False: 20.6k]
  |  Branch (3983:29): [True: 822, False: 138]
  ------------------
 3984|    822|            return unexpected_scan_error(
 3985|    822|                scan_error::invalid_scanned_value,
 3986|    822|                "No exponent given to scientific float");
 3987|    822|        }
 3988|       |
 3989|  20.7k|        m_kind =
 3990|  20.7k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 19.9k, False: 768]
  ------------------
 3991|       |
 3992|  20.7k|        return it;
 3993|  21.5k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|   219k|    {
 3775|   219k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 219k]
  |  |  |  Branch (859:45): [True: 0, False: 219k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|   219k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|   219k|        return read_while1_code_unit(
 3784|   219k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|   219k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   219k|    {
  754|   219k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   241k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   241k|              cvref<T> obj = *get<T>(fn);
  745|   241k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   241k|                  obj(static_cast<decltype(args)>(args)...);
  747|   241k|              }
  748|   241k|              else {
  749|   241k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   241k|              }
  751|   241k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   241k|    {
  684|   241k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   241k|            return static_cast<T*>(s.m_cp);
  686|   241k|        }
  687|   241k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   241k|            return static_cast<T*>(s.m_p);
  689|   241k|        }
  690|   241k|        else {
  691|   241k|            return reinterpret_cast<T*>(s.m_fp);
  692|   241k|        }
  693|   241k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3784|   241k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   219k|        {
  662|   219k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  25.6k|    {
 1577|  25.6k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  25.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  25.6k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  47.6k|    {
  754|  47.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  47.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.6k|              cvref<T> obj = *get<T>(fn);
  745|  47.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.6k|              }
  748|  47.6k|              else {
  749|  47.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.6k|              }
  751|  47.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  47.6k|    {
  684|  47.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.6k|            return static_cast<T*>(s.m_cp);
  686|  47.6k|        }
  687|  47.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.6k|            return static_cast<T*>(s.m_p);
  689|  47.6k|        }
  690|  47.6k|        else {
  691|  47.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.6k|        }
  693|  47.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  47.6k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|   198k|    {
 3666|   198k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|   198k|        return read_source_impl(range);
 3672|   198k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  47.6k|        {
  662|  47.6k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  59.9k|    {
 4171|  59.9k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  59.9k|#if !SCN_DISABLE_LOCALE
 4174|  59.9k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 12.2k, False: 47.6k]
  ------------------
 4175|  12.2k|            return read_impl<Range>(
 4176|  12.2k|                range, rd,
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  12.2k|                },
 4180|  12.2k|                value, loc);
 4181|  12.2k|        }
 4182|  47.6k|#endif
 4183|       |
 4184|  47.6k|        return read_impl<Range>(
 4185|  47.6k|            range, rd,
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
 4188|  47.6k|            },
 4189|  47.6k|            value);
 4190|  59.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  78.2k|    {
 4207|  78.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  78.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.2k, False: 46.0k]
  |  |  ------------------
  ------------------
 4209|  32.2k|            return unexpected(r.error());
 4210|  32.2k|        }
 4211|       |
 4212|  46.0k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  46.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  46.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  46.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.6k, False: 8.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  37.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  37.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  37.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  37.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  37.6k|    }                                                  \
  |  |  |  | 3642|  46.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  8.36k|        return ranges::next(range.begin(), n);
 4214|  46.0k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   235k|    {
  763|   235k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   235k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  12.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.2k|              cvref<T> obj = *get<T>(fn);
  745|  12.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.2k|              }
  748|  12.2k|              else {
  749|  12.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.2k|              }
  751|  12.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  12.2k|    {
  684|  12.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.2k|            return static_cast<T*>(s.m_cp);
  686|  12.2k|        }
  687|  12.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.2k|            return static_cast<T*>(s.m_p);
  689|  12.2k|        }
  690|  12.2k|        else {
  691|  12.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.2k|        }
  693|  12.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  12.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|  36.7k|    {
 3680|  36.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  36.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  36.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 36.7k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  36.7k|        return read_source_impl(range);
 3686|  36.7k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|   235k|    {
 3706|   235k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   235k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   235k|        auto it = sign_result.first;
 3709|   235k|        m_sign = sign_result.second;
 3710|       |
 3711|   235k|        auto digits_begin = it;
 3712|   235k|        auto r = ranges::subrange{it, range.end()};
 3713|   235k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   235k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   235k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  |  Branch (859:45): [True: 0, False: 235k]
  |  |  |  Branch (859:45): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 3716|   235k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|   235k|            else {
 3725|   235k|                auto cb = [&](const auto& rr)
 3726|   235k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   235k|                    auto res = read_all(rr);
 3728|   235k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   235k|                        return unexpected_scan_error(
 3730|   235k|                            scan_error::invalid_scanned_value,
 3731|   235k|                            "Invalid float value");
 3732|   235k|                    }
 3733|   235k|                    return res;
 3734|   235k|                };
 3735|   235k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 96.9k, False: 138k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  96.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  96.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  96.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  96.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  96.9k|    }                                                  \
  |  | 3642|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|   138k|            }
 3737|   235k|        }
 3738|   138k|        else {
 3739|   138k|            SCN_TRY_ASSIGN(
 3740|   138k|                it,
 3741|   138k|                do_read_source_impl(
 3742|   138k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|   138k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|   138k|        }
 3745|       |
 3746|   138k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|   138k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 138k, False: 0]
  |  Branch (3748:48): [True: 138k, False: 0]
  ------------------
 3749|   138k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 138k, False: 0]
  ------------------
 3750|   138k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 138k, False: 0]
  ------------------
 3751|   138k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|   138k|        }
 3753|       |
 3754|   138k|        handle_separators();
 3755|       |
 3756|   138k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 138k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|   138k|        return it;
 3769|   138k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|   235k|    {
 3812|   235k|        auto it = range.begin();
 3813|   235k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 235k, False: 0]
  ------------------
 3814|   235k|            return unexpected(r.error());
 3815|   235k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|   235k|    {
 3835|   235k|        auto it = range.begin();
 3836|   235k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 235k, False: 0]
  ------------------
 3837|   235k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   235k|                scan_error::invalid_scanned_value,
 3839|   235k|                "Invalid floating-point NaN value"));
 3840|   235k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|   128k|    {
 3805|   128k|        return read_matching_string_classic_nocase(range, "0x");
 3806|   128k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   117k|{
 1996|   117k|    auto it = read_while_code_unit(range, pred);
 1997|   117k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 106k, False: 10.4k]
  ------------------
 1998|   106k|        return unexpected(parse_error::error);
 1999|   106k|    }
 2000|  10.4k|    return it;
 2001|   117k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3876|  5.57k|    {
 3877|  5.57k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 674, False: 4.90k]
  ------------------
 3878|    674|            auto beg_exp_it = range.begin();
 3879|    674|            auto it = *r;
 3880|       |
 3881|    674|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 674, False: 0]
  ------------------
 3882|    674|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|    674|                it = r_sign->first;
 3884|    674|            }
 3885|       |
 3886|    674|            if (auto r_exp = read_while1_code_unit(
 3887|    674|                    ranges::subrange{it, range.end()},
 3888|    674|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|    674|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 356, False: 318]
  |  |  ------------------
  ------------------
 3890|    356|                it = beg_exp_it;
 3891|    356|            }
 3892|    318|            else {
 3893|    318|                it = *r_exp;
 3894|    318|            }
 3895|       |
 3896|    674|            return it;
 3897|    674|        }
 3898|  4.90k|        return range.begin();
 3899|  5.57k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|    674|    {
  754|    674|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  1.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.31k|              cvref<T> obj = *get<T>(fn);
  745|  1.31k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.31k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.31k|              }
  748|  1.31k|              else {
  749|  1.31k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.31k|              }
  751|  1.31k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  1.31k|    {
  684|  1.31k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.31k|            return static_cast<T*>(s.m_cp);
  686|  1.31k|        }
  687|  1.31k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.31k|            return static_cast<T*>(s.m_p);
  689|  1.31k|        }
  690|  1.31k|        else {
  691|  1.31k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.31k|        }
  693|  1.31k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3888|  1.31k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|    674|        {
  662|    674|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|   106k|    {
 3945|   106k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|   106k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 69.3k, False: 36.8k]
  |  Branch (3946:50): [True: 32.5k, False: 36.8k]
  ------------------
 3947|       |
 3948|   106k|        auto it = ranges::begin(range);
 3949|   106k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|   106k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|   106k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96.0k, False: 10.1k]
  |  |  ------------------
  ------------------
 3953|  96.0k|            return r.transform_error(
 3954|  96.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  96.0k|                                              "Invalid floating-point value"));
 3956|  96.0k|        }
 3957|  10.1k|        else {
 3958|  10.1k|            digits_count += ranges::distance(it, *r);
 3959|  10.1k|            it = *r;
 3960|  10.1k|        }
 3961|       |
 3962|  10.1k|        m_integral_part_length = digits_count;
 3963|  10.1k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 10.1k]
  ------------------
 3964|  10.1k|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|  10.1k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 10.1k]
  ------------------
 3969|  10.1k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|  10.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.1k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  10.1k|        auto beg_exp_it = it;
 3980|  10.1k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 5.57k, False: 4.58k]
  ------------------
 3981|  5.57k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  5.57k|        }
 3983|  10.1k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 960, False: 9.20k]
  |  Branch (3983:29): [True: 822, False: 138]
  ------------------
 3984|    822|            return unexpected_scan_error(
 3985|    822|                scan_error::invalid_scanned_value,
 3986|    822|                "No exponent given to scientific float");
 3987|    822|        }
 3988|       |
 3989|  9.34k|        m_kind =
 3990|  9.34k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 9.02k, False: 318]
  ------------------
 3991|       |
 3992|  9.34k|        return it;
 3993|  10.1k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|   116k|    {
 3775|   116k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|   116k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|   116k|        return read_while1_code_unit(
 3784|   116k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|   116k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   126k|              cvref<T> obj = *get<T>(fn);
  745|   126k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   126k|                  obj(static_cast<decltype(args)>(args)...);
  747|   126k|              }
  748|   126k|              else {
  749|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   126k|              }
  751|   126k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   126k|    {
  684|   126k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   126k|            return static_cast<T*>(s.m_cp);
  686|   126k|        }
  687|   126k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   126k|            return static_cast<T*>(s.m_p);
  689|   126k|        }
  690|   126k|        else {
  691|   126k|            return reinterpret_cast<T*>(s.m_fp);
  692|   126k|        }
  693|   126k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3784|   126k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|   235k|    {
 4001|   235k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   235k|        const bool allowed_nonhex =
 4003|   235k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   235k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   235k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 235k, False: 0]
  |  Branch (4006:45): [True: 0, False: 235k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   235k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 235k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|   235k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 235k, False: 0]
  |  Branch (4015:45): [True: 0, False: 235k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   235k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 235k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|   235k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 128k, False: 106k]
  |  Branch (4022:28): [True: 36.8k, False: 91.9k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  36.8k|            auto it = range.begin();
 4026|       |
 4027|  36.8k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 48, False: 36.8k]
  ------------------
 4028|     48|                m_kind = float_kind::hex_with_prefix;
 4029|     48|                it = *r;
 4030|     48|            }
 4031|  36.8k|            else {
 4032|  36.8k|                m_kind = float_kind::hex_without_prefix;
 4033|  36.8k|            }
 4034|       |
 4035|  36.8k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  36.8k|        }
 4037|   198k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 106k, False: 91.9k]
  |  Branch (4037:29): [True: 106k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|   106k|            m_kind = float_kind::generic;
 4041|   106k|            return read_regular_float(range);
 4042|   106k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  91.9k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 91.8k]
  |  |  ------------------
  ------------------
 4048|    120|            m_kind = float_kind::hex_with_prefix;
 4049|    120|            return read_hex(ranges::subrange{*r, range.end()});
 4050|    120|        }
 4051|       |
 4052|  91.8k|        m_kind = float_kind::generic;
 4053|  91.8k|        return read_regular(range);
 4054|  91.9k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|   128k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   128k|                    auto res = read_all(rr);
 3728|   128k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 128k]
  |  |  ------------------
  ------------------
 3729|     63|                        return unexpected_scan_error(
 3730|     63|                            scan_error::invalid_scanned_value,
 3731|     63|                            "Invalid float value");
 3732|     63|                    }
 3733|   128k|                    return res;
 3734|   128k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   128k|{
 1839|   128k|    return ranges::next(range.begin(), range.end());
 1840|   128k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   128k|    {
  313|   128k|        ranges::advance(x, bound);
  314|   128k|        return x;
  315|   128k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   128k|    {
  275|   128k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   128k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   138k|    {
 1577|   138k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   138k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   138k|    {
 1621|   138k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   138k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   138k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   138k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   138k|            m_storage.reset();
 1627|   138k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   138k|        }
 1629|   138k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   138k|                                          std::basic_string<CharT>>) {
 1631|   138k|            m_storage.emplace(SCN_FWD(range));
 1632|   138k|            m_view = string_view_type{*m_storage};
 1633|   138k|        }
 1634|   138k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   138k|                                          typename detail::basic_scan_buffer<
 1636|   138k|                                              value_t>::forward_iterator> &&
 1637|   138k|                           ranges::common_range<Range>) {
 1638|   138k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   138k|            auto end_seg = range.end().contiguous_segment();
 1640|   138k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   138k|                             detail::to_address(end_seg.end()))) {
 1642|   138k|                auto& str = m_storage.emplace();
 1643|   138k|                str.reserve(range.end().position() - range.begin().position());
 1644|   138k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   138k|                m_view = string_view_type{str};
 1646|   138k|                return;
 1647|   138k|            }
 1648|       |
 1649|   138k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   138k|                                                            end_seg.data());
 1651|   138k|            m_storage.reset();
 1652|   138k|        }
 1653|   138k|        else {
 1654|   138k|            auto& str = m_storage.emplace();
 1655|   138k|            if constexpr (ranges::sized_range<Range>) {
 1656|   138k|                str.reserve(range.size());
 1657|   138k|            }
 1658|   138k|            if constexpr (ranges::common_range<Range>) {
 1659|   138k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   138k|                          std::back_inserter(str));
 1661|   138k|            }
 1662|   138k|            else {
 1663|   138k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   138k|                     ++it) {
 1665|   138k|                    str.push_back(*it);
 1666|   138k|                }
 1667|   138k|            }
 1668|   138k|            m_view = string_view_type{str};
 1669|   138k|        }
 1670|   138k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  47.6k|    {
  754|  47.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  47.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.6k|              cvref<T> obj = *get<T>(fn);
  745|  47.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.6k|              }
  748|  47.6k|              else {
  749|  47.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.6k|              }
  751|  47.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  47.6k|    {
  684|  47.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.6k|            return static_cast<T*>(s.m_cp);
  686|  47.6k|        }
  687|  47.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.6k|            return static_cast<T*>(s.m_p);
  689|  47.6k|        }
  690|  47.6k|        else {
  691|  47.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.6k|        }
  693|  47.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  47.6k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|   198k|    {
 3666|   198k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|   198k|        return read_source_impl(range);
 3672|   198k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  47.6k|        {
  662|  47.6k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  60.4k|    {
 6179|  60.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  60.4k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  60.4k|            auto rd = make_reader<T, char_type>();
 6184|  60.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  60.4k|                return unexpected(e);
 6186|  60.4k|            }
 6187|       |
 6188|  60.4k|            return impl(rd, range, value);
 6189|  60.4k|        }
 6190|  60.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  60.4k|            auto rd = make_reader<T, char_type>();
 6192|  60.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  60.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 60.4k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  60.4k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  60.4k|                return impl(rd, range, value);
 6199|  60.4k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  60.4k|        else {
 6207|  60.4k|            SCN_EXPECT(false);
 6208|  60.4k|            SCN_UNREACHABLE;
 6209|  60.4k|        }
 6210|  60.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  60.4k|    {
 6121|  60.4k|        const bool need_skipped_width =
 6122|  60.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 60.4k]
  |  Branch (6122:33): [True: 0, False: 60.4k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  60.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  60.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 498, False: 59.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    498|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    498|    }                                                  \
  |  |  |  | 3642|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  59.9k|        auto [it, prefix_width] = prefix_result;
 6127|  59.9k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  59.9k|        std::ptrdiff_t value_width = 0;
 6131|  59.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 59.9k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  59.9k|        else {
 6147|  59.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 6.15k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  53.7k|    }                                                  \
  |  | 3642|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  6.15k|                                             specs, value, loc));
 6149|       |
 6150|  6.15k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 6.15k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  6.15k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  6.15k|        std::ptrdiff_t postfix_width = 0;
 6159|  6.15k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 6.06k, False: 90]
  ------------------
 6160|  6.06k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  6.06k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  6.06k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  6.06k|                                 value_width));
 6164|  6.06k|            std::tie(it, postfix_width) = postfix_result;
 6165|  6.06k|        }
 6166|       |
 6167|  6.15k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  6.15k|                                                 value_width, postfix_width);
 6169|  6.15k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 6.15k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  6.15k|        return it;
 6174|  6.15k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  54.5k|    {
 3692|  54.5k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  54.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  54.5k|        const std::ptrdiff_t sign_len =
 3695|  54.5k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 14, False: 54.5k]
  ------------------
 3696|       |
 3697|  54.5k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.7k, False: 16.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  37.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  37.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  37.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  37.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  37.7k|    }                                                  \
  |  |  |  | 3642|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  16.8k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  54.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  59.9k|    {
 4171|  59.9k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  59.9k|#if !SCN_DISABLE_LOCALE
 4174|  59.9k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 12.2k, False: 47.6k]
  ------------------
 4175|  12.2k|            return read_impl<Range>(
 4176|  12.2k|                range, rd,
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  12.2k|                },
 4180|  12.2k|                value, loc);
 4181|  12.2k|        }
 4182|  47.6k|#endif
 4183|       |
 4184|  47.6k|        return read_impl<Range>(
 4185|  47.6k|            range, rd,
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
 4188|  47.6k|            },
 4189|  47.6k|            value);
 4190|  59.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  78.3k|    {
 4207|  78.3k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  78.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.7k, False: 8.52k]
  |  |  ------------------
  ------------------
 4209|  69.7k|            return unexpected(r.error());
 4210|  69.7k|        }
 4211|       |
 4212|  8.52k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  8.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 123, False: 8.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    123|    }                                                  \
  |  |  |  | 3642|  8.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  8.40k|        return ranges::next(range.begin(), n);
 4214|  8.52k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  12.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.2k|              cvref<T> obj = *get<T>(fn);
  745|  12.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.2k|              }
  748|  12.2k|              else {
  749|  12.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.2k|              }
  751|  12.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  12.2k|    {
  684|  12.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.2k|            return static_cast<T*>(s.m_cp);
  686|  12.2k|        }
  687|  12.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.2k|            return static_cast<T*>(s.m_p);
  689|  12.2k|        }
  690|  12.2k|        else {
  691|  12.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.2k|        }
  693|  12.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  12.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  47.6k|    {
  754|  47.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  47.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.6k|              cvref<T> obj = *get<T>(fn);
  745|  47.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.6k|              }
  748|  47.6k|              else {
  749|  47.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.6k|              }
  751|  47.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  47.6k|    {
  684|  47.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.6k|            return static_cast<T*>(s.m_cp);
  686|  47.6k|        }
  687|  47.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.6k|            return static_cast<T*>(s.m_p);
  689|  47.6k|        }
  690|  47.6k|        else {
  691|  47.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.6k|        }
  693|  47.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  47.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  47.6k|        {
  662|  47.6k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  59.9k|    {
 4171|  59.9k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  59.9k|#if !SCN_DISABLE_LOCALE
 4174|  59.9k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 12.2k, False: 47.6k]
  ------------------
 4175|  12.2k|            return read_impl<Range>(
 4176|  12.2k|                range, rd,
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  12.2k|                },
 4180|  12.2k|                value, loc);
 4181|  12.2k|        }
 4182|  47.6k|#endif
 4183|       |
 4184|  47.6k|        return read_impl<Range>(
 4185|  47.6k|            range, rd,
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
 4188|  47.6k|            },
 4189|  47.6k|            value);
 4190|  59.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  78.3k|    {
 4207|  78.3k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  78.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  78.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.3k, False: 46.0k]
  |  |  ------------------
  ------------------
 4209|  32.3k|            return unexpected(r.error());
 4210|  32.3k|        }
 4211|       |
 4212|  46.0k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  46.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  46.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  46.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.5k, False: 8.43k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  37.5k|    }                                                  \
  |  |  |  | 3642|  46.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  8.43k|        return ranges::next(range.begin(), n);
 4214|  46.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  12.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.2k|              cvref<T> obj = *get<T>(fn);
  745|  12.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.2k|              }
  748|  12.2k|              else {
  749|  12.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.2k|              }
  751|  12.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  12.2k|    {
  684|  12.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.2k|            return static_cast<T*>(s.m_cp);
  686|  12.2k|        }
  687|  12.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.2k|            return static_cast<T*>(s.m_p);
  689|  12.2k|        }
  690|  12.2k|        else {
  691|  12.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.2k|        }
  693|  12.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  12.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  47.6k|    {
  754|  47.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  47.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.6k|              cvref<T> obj = *get<T>(fn);
  745|  47.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.6k|              }
  748|  47.6k|              else {
  749|  47.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.6k|              }
  751|  47.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  47.6k|    {
  684|  47.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.6k|            return static_cast<T*>(s.m_cp);
  686|  47.6k|        }
  687|  47.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.6k|            return static_cast<T*>(s.m_p);
  689|  47.6k|        }
  690|  47.6k|        else {
  691|  47.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.6k|        }
  693|  47.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  47.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  47.6k|        {
  662|  47.6k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6178|  60.5k|    {
 6179|  60.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  60.5k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|      0|                          basic_contiguous_scan_context<char_type>>) {
 6183|  60.5k|            auto rd = make_reader<T, char_type>();
 6184|  60.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6185|  60.5k|                return unexpected(e);
 6186|  60.5k|            }
 6187|       |
 6188|  60.5k|            return impl(rd, range, value);
 6189|  60.5k|        }
 6190|  60.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6190:28): [Folded - Ignored]
  ------------------
 6191|  60.5k|            auto rd = make_reader<T, char_type>();
 6192|  60.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
 6193|      0|                return unexpected(e);
 6194|      0|            }
 6195|       |
 6196|  60.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6196:17): [True: 60.5k, False: 0]
  |  Branch (6196:50): [True: 0, False: 0]
  ------------------
 6197|  60.5k|                specs.width != 0) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|  60.5k|                return impl(rd, range, value);
 6199|  60.5k|            }
 6200|       |
 6201|      0|            auto crange = get_as_contiguous(range);
 6202|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6203|      0|            return ranges::next(range.begin(),
 6204|      0|                                ranges::distance(crange.begin(), it));
 6205|      0|        }
 6206|  60.5k|        else {
 6207|  60.5k|            SCN_EXPECT(false);
 6208|  60.5k|            SCN_UNREACHABLE;
 6209|  60.5k|        }
 6210|  60.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6120|  60.5k|    {
 6121|  60.5k|        const bool need_skipped_width =
 6122|  60.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 60.5k]
  |  Branch (6122:33): [True: 0, False: 60.5k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  60.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 504, False: 59.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    504|    }                                                  \
  |  |  |  | 3642|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  59.9k|        auto [it, prefix_width] = prefix_result;
 6127|  59.9k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  59.9k|        std::ptrdiff_t value_width = 0;
 6131|  59.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 59.9k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  59.9k|        else {
 6147|  59.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 6.22k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  53.7k|    }                                                  \
  |  | 3642|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  6.22k|                                             specs, value, loc));
 6149|       |
 6150|  6.22k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 6.22k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  6.22k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  6.22k|        std::ptrdiff_t postfix_width = 0;
 6159|  6.22k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 6.13k, False: 90]
  ------------------
 6160|  6.13k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  6.13k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  6.13k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  6.13k|                                 value_width));
 6164|  6.13k|            std::tie(it, postfix_width) = postfix_result;
 6165|  6.13k|        }
 6166|       |
 6167|  6.22k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  6.22k|                                                 value_width, postfix_width);
 6169|  6.22k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 6.22k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  6.22k|        return it;
 6174|  6.22k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|  54.6k|    {
 3692|  54.6k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  54.6k|        const std::ptrdiff_t sign_len =
 3695|  54.6k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 14, False: 54.6k]
  ------------------
 3696|       |
 3697|  54.6k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.5k, False: 17.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  37.5k|    }                                                  \
  |  |  |  | 3642|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  17.0k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  54.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4170|  59.9k|    {
 4171|  59.9k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  59.9k|#if !SCN_DISABLE_LOCALE
 4174|  59.9k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 12.2k, False: 47.7k]
  ------------------
 4175|  12.2k|            return read_impl<Range>(
 4176|  12.2k|                range, rd,
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  12.2k|                },
 4180|  12.2k|                value, loc);
 4181|  12.2k|        }
 4182|  47.7k|#endif
 4183|       |
 4184|  47.7k|        return read_impl<Range>(
 4185|  47.7k|            range, rd,
 4186|  47.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.7k|                return r.read_source(SCN_FWD(args)...);
 4188|  47.7k|            },
 4189|  47.7k|            value);
 4190|  59.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|  78.4k|    {
 4207|  78.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  78.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.8k, False: 8.54k]
  |  |  ------------------
  ------------------
 4209|  69.8k|            return unexpected(r.error());
 4210|  69.8k|        }
 4211|       |
 4212|  8.54k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  8.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  8.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  8.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23, False: 8.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     23|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     23|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     23|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     23|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     23|    }                                                  \
  |  |  |  | 3642|  8.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  8.52k|        return ranges::next(range.begin(), n);
 4214|  8.54k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  12.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.2k|              cvref<T> obj = *get<T>(fn);
  745|  12.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.2k|              }
  748|  12.2k|              else {
  749|  12.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.2k|              }
  751|  12.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  12.2k|    {
  684|  12.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.2k|            return static_cast<T*>(s.m_cp);
  686|  12.2k|        }
  687|  12.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.2k|            return static_cast<T*>(s.m_p);
  689|  12.2k|        }
  690|  12.2k|        else {
  691|  12.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.2k|        }
  693|  12.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  12.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  47.7k|    {
  754|  47.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  47.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.7k|              cvref<T> obj = *get<T>(fn);
  745|  47.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.7k|              }
  748|  47.7k|              else {
  749|  47.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.7k|              }
  751|  47.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  47.7k|    {
  684|  47.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.7k|            return static_cast<T*>(s.m_cp);
  686|  47.7k|        }
  687|  47.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.7k|            return static_cast<T*>(s.m_p);
  689|  47.7k|        }
  690|  47.7k|        else {
  691|  47.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.7k|        }
  693|  47.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4186|  47.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  47.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  47.7k|        {
  662|  47.7k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|  60.0k|    {
 4171|  60.0k|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|  60.0k|#if !SCN_DISABLE_LOCALE
 4174|  60.0k|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 12.2k, False: 47.7k]
  ------------------
 4175|  12.2k|            return read_impl<Range>(
 4176|  12.2k|                range, rd,
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|  12.2k|                },
 4180|  12.2k|                value, loc);
 4181|  12.2k|        }
 4182|  47.7k|#endif
 4183|       |
 4184|  47.7k|        return read_impl<Range>(
 4185|  47.7k|            range, rd,
 4186|  47.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.7k|                return r.read_source(SCN_FWD(args)...);
 4188|  47.7k|            },
 4189|  47.7k|            value);
 4190|  60.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|  78.4k|    {
 4207|  78.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|  78.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.3k, False: 46.0k]
  |  |  ------------------
  ------------------
 4209|  32.3k|            return unexpected(r.error());
 4210|  32.3k|        }
 4211|       |
 4212|  46.0k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  46.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  46.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  46.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.5k, False: 8.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  37.5k|    }                                                  \
  |  |  |  | 3642|  46.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  8.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|  8.54k|        return ranges::next(range.begin(), n);
 4214|  46.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  12.2k|    {
  754|  12.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  12.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.2k|              cvref<T> obj = *get<T>(fn);
  745|  12.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.2k|              }
  748|  12.2k|              else {
  749|  12.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.2k|              }
  751|  12.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  12.2k|    {
  684|  12.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.2k|            return static_cast<T*>(s.m_cp);
  686|  12.2k|        }
  687|  12.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.2k|            return static_cast<T*>(s.m_p);
  689|  12.2k|        }
  690|  12.2k|        else {
  691|  12.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.2k|        }
  693|  12.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|  12.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4178|  12.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|  12.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  12.2k|        {
  662|  12.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  47.7k|    {
  754|  47.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  47.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.7k|              cvref<T> obj = *get<T>(fn);
  745|  47.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.7k|              }
  748|  47.7k|              else {
  749|  47.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.7k|              }
  751|  47.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  47.7k|    {
  684|  47.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.7k|            return static_cast<T*>(s.m_cp);
  686|  47.7k|        }
  687|  47.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.7k|            return static_cast<T*>(s.m_p);
  689|  47.7k|        }
  690|  47.7k|        else {
  691|  47.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.7k|        }
  693|  47.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|  47.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4187|  47.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  47.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|  47.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  47.7k|        {
  662|  47.7k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   236k|{
 2061|   236k|    auto it = range.begin();
 2062|   260k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 258k, False: 1.86k]
  ------------------
 2063|   258k|        const auto val =
 2064|   258k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   258k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   258k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 258k, False: 0]
  |  |  ------------------
  ------------------
 2066|   258k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   258k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   258k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 234k, False: 23.8k]
  ------------------
 2069|   234k|                return it;
 2070|   234k|            }
 2071|   258k|        }
 2072|  23.8k|        it = val.iterator;
 2073|  23.8k|    }
 2074|       |
 2075|  1.86k|    return it;
 2076|   236k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   258k|{
 1899|   258k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   258k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   258k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   258k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   258k|    auto it = range.begin();
 1903|   258k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   258k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 258k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   258k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 258k, False: 0]
  ------------------
 1912|   258k|        ++it;
 1913|   258k|        return {it, string_type(1, *range.begin())};
 1914|   258k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   258k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   258k|    {
 1890|   258k|        return !codepoint.empty();
 1891|   258k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   236k|{
 2082|   236k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   236k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   236k|{
 2951|   236k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 236k, False: 0]
  ------------------
 2952|   236k|        auto it = read_while_classic_space(range);
 2953|   236k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   236k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.86k, False: 234k]
  |  |  ------------------
  ------------------
 2955|  1.86k|            return unexpected(e);
 2956|  1.86k|        }
 2957|       |
 2958|   234k|        return it;
 2959|   236k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   236k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   236k|{
 2117|   236k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   236k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   236k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   236k|        auto buf = make_contiguous_buffer(range);
 2121|   236k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   236k|        return ranges::next(range.begin(),
 2123|   236k|                            ranges::distance(buf.view().begin(), it));
 2124|   236k|    }
 2125|   236k|    else {
 2126|   236k|        auto it = range.begin();
 2127|       |
 2128|   236k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   236k|            auto seg = get_contiguous_beginning(range);
 2130|   236k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   236k|                seg_it != seg.end()) {
 2132|   236k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   236k|            }
 2134|   236k|            ranges::advance(it, seg.size());
 2135|   236k|        }
 2136|       |
 2137|   236k|        return read_while_code_point(
 2138|   236k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   236k|    }
 2140|   236k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   236k|    {
  754|   236k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   258k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   258k|              cvref<T> obj = *get<T>(fn);
  745|   258k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   258k|                  obj(static_cast<decltype(args)>(args)...);
  747|   258k|              }
  748|   258k|              else {
  749|   258k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   258k|              }
  751|   258k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   258k|    {
  684|   258k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   258k|            return static_cast<T*>(s.m_cp);
  686|   258k|        }
  687|   258k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   258k|            return static_cast<T*>(s.m_p);
  689|   258k|        }
  690|   258k|        else {
  691|   258k|            return reinterpret_cast<T*>(s.m_fp);
  692|   258k|        }
  693|   258k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   258k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   236k|        {
  662|   236k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  1.92M|{
 2088|  1.92M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.92M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.92M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.92M|        auto buf = make_contiguous_buffer(range);
 2092|  1.92M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.92M|        return ranges::next(range.begin(),
 2094|  1.92M|                            ranges::distance(buf.view().begin(), it));
 2095|  1.92M|    }
 2096|  1.92M|    else {
 2097|  1.92M|        auto it = range.begin();
 2098|       |
 2099|  1.92M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  1.92M|            auto seg = get_contiguous_beginning(range);
 2101|  1.92M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.92M|                seg_it != seg.end()) {
 2103|  1.92M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  1.92M|            }
 2105|  1.92M|            ranges::advance(it, seg.size());
 2106|  1.92M|        }
 2107|       |
 2108|  1.92M|        return read_until_code_point(
 2109|  1.92M|            ranges::subrange{it, range.end()},
 2110|  1.92M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.92M|    }
 2112|  1.92M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  1.92M|{
 1683|  1.92M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.92M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.92M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.92M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.92M|    }
 1688|  1.92M|    else {
 1689|  1.92M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.92M|    }
 1691|  1.92M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  1.92M|    {
 1490|  1.92M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  1.92M|    {
 1577|  1.92M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.92M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  1.92M|    {
 1621|  1.92M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.92M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.92M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.92M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.92M|            m_storage.reset();
 1627|  1.92M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.92M|        }
 1629|  1.92M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.92M|                                          std::basic_string<CharT>>) {
 1631|  1.92M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  1.92M|            m_view = string_view_type{*m_storage};
 1633|  1.92M|        }
 1634|  1.92M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.92M|                                          typename detail::basic_scan_buffer<
 1636|  1.92M|                                              value_t>::forward_iterator> &&
 1637|  1.92M|                           ranges::common_range<Range>) {
 1638|  1.92M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.92M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.92M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.92M|                             detail::to_address(end_seg.end()))) {
 1642|  1.92M|                auto& str = m_storage.emplace();
 1643|  1.92M|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.92M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.92M|                m_view = string_view_type{str};
 1646|  1.92M|                return;
 1647|  1.92M|            }
 1648|       |
 1649|  1.92M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.92M|                                                            end_seg.data());
 1651|  1.92M|            m_storage.reset();
 1652|  1.92M|        }
 1653|  1.92M|        else {
 1654|  1.92M|            auto& str = m_storage.emplace();
 1655|  1.92M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.92M|                str.reserve(range.size());
 1657|  1.92M|            }
 1658|  1.92M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.92M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.92M|                          std::back_inserter(str));
 1661|  1.92M|            }
 1662|  1.92M|            else {
 1663|  1.92M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.92M|                     ++it) {
 1665|  1.92M|                    str.push_back(*it);
 1666|  1.92M|                }
 1667|  1.92M|            }
 1668|  1.92M|            m_view = string_view_type{str};
 1669|  1.92M|        }
 1670|  1.92M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4100|  1.31M|    {
 4101|  1.31M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 158k, False: 1.15M]
  ------------------
 4102|   158k|            return std::copysign(value, T{-1.0});
 4103|   158k|        }
 4104|  1.15M|        return std::copysign(value, T{1.0});
 4105|  1.31M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  22.8k|{
 2088|  22.8k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  22.8k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  22.8k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  22.8k|        auto buf = make_contiguous_buffer(range);
 2092|  22.8k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  22.8k|        return ranges::next(range.begin(),
 2094|  22.8k|                            ranges::distance(buf.view().begin(), it));
 2095|  22.8k|    }
 2096|  22.8k|    else {
 2097|  22.8k|        auto it = range.begin();
 2098|       |
 2099|  22.8k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  22.8k|            auto seg = get_contiguous_beginning(range);
 2101|  22.8k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  22.8k|                seg_it != seg.end()) {
 2103|  22.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  22.8k|            }
 2105|  22.8k|            ranges::advance(it, seg.size());
 2106|  22.8k|        }
 2107|       |
 2108|  22.8k|        return read_until_code_point(
 2109|  22.8k|            ranges::subrange{it, range.end()},
 2110|  22.8k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  22.8k|    }
 2112|  22.8k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  22.8k|    {
  754|  22.8k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  47.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.9k|              cvref<T> obj = *get<T>(fn);
  745|  47.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.9k|              }
  748|  47.9k|              else {
  749|  47.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.9k|              }
  751|  47.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  47.9k|    {
  684|  47.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.9k|            return static_cast<T*>(s.m_cp);
  686|  47.9k|        }
  687|  47.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.9k|            return static_cast<T*>(s.m_p);
  689|  47.9k|        }
  690|  47.9k|        else {
  691|  47.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.9k|        }
  693|  47.9k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|  47.9k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  22.8k|        {
  662|  22.8k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  22.8k|    {
 1577|  22.8k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  22.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  22.8k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  22.8k|    {
 1621|  22.8k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  22.8k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  22.8k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  22.8k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  22.8k|            m_storage.reset();
 1627|  22.8k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  22.8k|        }
 1629|  22.8k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  22.8k|                                          std::basic_string<CharT>>) {
 1631|  22.8k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  22.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  22.8k|            m_view = string_view_type{*m_storage};
 1633|  22.8k|        }
 1634|  22.8k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  22.8k|                                          typename detail::basic_scan_buffer<
 1636|  22.8k|                                              value_t>::forward_iterator> &&
 1637|  22.8k|                           ranges::common_range<Range>) {
 1638|  22.8k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  22.8k|            auto end_seg = range.end().contiguous_segment();
 1640|  22.8k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  22.8k|                             detail::to_address(end_seg.end()))) {
 1642|  22.8k|                auto& str = m_storage.emplace();
 1643|  22.8k|                str.reserve(range.end().position() - range.begin().position());
 1644|  22.8k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  22.8k|                m_view = string_view_type{str};
 1646|  22.8k|                return;
 1647|  22.8k|            }
 1648|       |
 1649|  22.8k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  22.8k|                                                            end_seg.data());
 1651|  22.8k|            m_storage.reset();
 1652|  22.8k|        }
 1653|  22.8k|        else {
 1654|  22.8k|            auto& str = m_storage.emplace();
 1655|  22.8k|            if constexpr (ranges::sized_range<Range>) {
 1656|  22.8k|                str.reserve(range.size());
 1657|  22.8k|            }
 1658|  22.8k|            if constexpr (ranges::common_range<Range>) {
 1659|  22.8k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  22.8k|                          std::back_inserter(str));
 1661|  22.8k|            }
 1662|  22.8k|            else {
 1663|  22.8k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  22.8k|                     ++it) {
 1665|  22.8k|                    str.push_back(*it);
 1666|  22.8k|                }
 1667|  22.8k|            }
 1668|  22.8k|            m_view = string_view_type{str};
 1669|  22.8k|        }
 1670|  22.8k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4100|  54.5k|    {
 4101|  54.5k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 14, False: 54.5k]
  ------------------
 4102|     14|            return std::copysign(value, T{-1.0});
 4103|     14|        }
 4104|  54.5k|        return std::copysign(value, T{1.0});
 4105|  54.5k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|  1.42M|    {
 4101|  1.42M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 170k, False: 1.25M]
  ------------------
 4102|   170k|            return std::copysign(value, T{-1.0});
 4103|   170k|        }
 4104|  1.25M|        return std::copysign(value, T{1.0});
 4105|  1.42M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|  54.5k|    {
 4101|  54.5k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 14, False: 54.5k]
  ------------------
 4102|     14|            return std::copysign(value, T{-1.0});
 4103|     14|        }
 4104|  54.5k|        return std::copysign(value, T{1.0});
 4105|  54.5k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4100|  1.44M|    {
 4101|  1.44M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 175k, False: 1.26M]
  ------------------
 4102|   175k|            return std::copysign(value, T{-1.0});
 4103|   175k|        }
 4104|  1.26M|        return std::copysign(value, T{1.0});
 4105|  1.44M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4100|  54.6k|    {
 4101|  54.6k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 14, False: 54.6k]
  ------------------
 4102|     14|            return std::copysign(value, T{-1.0});
 4103|     14|        }
 4104|  54.6k|        return std::copysign(value, T{1.0});
 4105|  54.6k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|   660k|{
 5796|   660k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.94k, False: 654k]
  |  |  ------------------
  ------------------
 5797|  5.94k|        return unexpected(e);
 5798|  5.94k|    }
 5799|       |
 5800|   654k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 654k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|   654k|    return skip_classic_whitespace(range);
 5805|   654k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5871|   204k|    {
 5872|   204k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   204k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   204k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   204k|            auto rd = make_reader<T, char_type>();
 5877|   204k|            return impl(rd, range, value);
 5878|   204k|        }
 5879|   204k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   204k|            auto rd = make_reader<T, char_type>();
 5881|   204k|            if (!is_segment_contiguous(range)) {
 5882|   204k|                return impl(rd, range, value);
 5883|   204k|            }
 5884|   204k|            auto crange = get_as_contiguous(range);
 5885|   204k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   204k|            return ranges::next(range.begin(),
 5887|   204k|                                ranges::distance(crange.begin(), it));
 5888|   204k|        }
 5889|   204k|        else {
 5890|   204k|            SCN_EXPECT(false);
 5891|   204k|            SCN_UNREACHABLE;
 5892|   204k|        }
 5893|   204k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   204k|    {
 5864|   204k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   204k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   204k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   204k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.09k|    }                                                  \
  |  |  |  | 3642|   204k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   201k|                        .transform_error(make_eof_scan_error));
 5866|   201k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   204k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   201k|    {
 4153|   201k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   201k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   201k|        float_reader<CharT> rd{};
 4156|   201k|        return read_impl<Range>(
 4157|   201k|            range, rd,
 4158|   201k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   201k|                return r.read_source(SCN_FWD(args)...);
 4160|   201k|            },
 4161|   201k|            value);
 4162|   201k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|  1.25M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  1.36M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   201k|    {
  754|   201k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   201k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   201k|              cvref<T> obj = *get<T>(fn);
  745|   201k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   201k|                  obj(static_cast<decltype(args)>(args)...);
  747|   201k|              }
  748|   201k|              else {
  749|   201k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   201k|              }
  751|   201k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   201k|    {
  684|   201k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   201k|            return static_cast<T*>(s.m_cp);
  686|   201k|        }
  687|   201k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   201k|            return static_cast<T*>(s.m_p);
  689|   201k|        }
  690|   201k|        else {
  691|   201k|            return reinterpret_cast<T*>(s.m_fp);
  692|   201k|        }
  693|   201k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   201k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   201k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   201k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   201k|        {
  662|   201k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5871|   226k|    {
 5872|   226k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   226k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   226k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   226k|            auto rd = make_reader<T, char_type>();
 5877|   226k|            return impl(rd, range, value);
 5878|   226k|        }
 5879|   226k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   226k|            auto rd = make_reader<T, char_type>();
 5881|   226k|            if (!is_segment_contiguous(range)) {
 5882|   226k|                return impl(rd, range, value);
 5883|   226k|            }
 5884|   226k|            auto crange = get_as_contiguous(range);
 5885|   226k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   226k|            return ranges::next(range.begin(),
 5887|   226k|                                ranges::distance(crange.begin(), it));
 5888|   226k|        }
 5889|   226k|        else {
 5890|   226k|            SCN_EXPECT(false);
 5891|   226k|            SCN_UNREACHABLE;
 5892|   226k|        }
 5893|   226k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   226k|    {
 5864|   226k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.40k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.40k|    }                                                  \
  |  |  |  | 3642|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   223k|                        .transform_error(make_eof_scan_error));
 5866|   223k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   226k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   223k|    {
 4153|   223k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   223k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   223k|        float_reader<CharT> rd{};
 4156|   223k|        return read_impl<Range>(
 4157|   223k|            range, rd,
 4158|   223k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   223k|                return r.read_source(SCN_FWD(args)...);
 4160|   223k|            },
 4161|   223k|            value);
 4162|   223k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   223k|    {
  754|   223k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   223k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   223k|              cvref<T> obj = *get<T>(fn);
  745|   223k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   223k|                  obj(static_cast<decltype(args)>(args)...);
  747|   223k|              }
  748|   223k|              else {
  749|   223k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   223k|              }
  751|   223k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   223k|    {
  684|   223k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   223k|            return static_cast<T*>(s.m_cp);
  686|   223k|        }
  687|   223k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   223k|            return static_cast<T*>(s.m_p);
  689|   223k|        }
  690|   223k|        else {
  691|   223k|            return reinterpret_cast<T*>(s.m_fp);
  692|   223k|        }
  693|   223k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   223k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   223k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   223k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   223k|        {
  662|   223k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5871|   230k|    {
 5872|   230k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   230k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|   230k|                          basic_contiguous_scan_context<char_type>>) {
 5876|   230k|            auto rd = make_reader<T, char_type>();
 5877|   230k|            return impl(rd, range, value);
 5878|   230k|        }
 5879|   230k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|   230k|            auto rd = make_reader<T, char_type>();
 5881|   230k|            if (!is_segment_contiguous(range)) {
 5882|   230k|                return impl(rd, range, value);
 5883|   230k|            }
 5884|   230k|            auto crange = get_as_contiguous(range);
 5885|   230k|            SCN_TRY(it, impl(rd, crange, value));
 5886|   230k|            return ranges::next(range.begin(),
 5887|   230k|                                ranges::distance(crange.begin(), it));
 5888|   230k|        }
 5889|   230k|        else {
 5890|   230k|            SCN_EXPECT(false);
 5891|   230k|            SCN_UNREACHABLE;
 5892|   230k|        }
 5893|   230k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|   230k|    {
 5864|   230k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.57k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.57k|    }                                                  \
  |  |  |  | 3642|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   227k|                        .transform_error(make_eof_scan_error));
 5866|   227k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   230k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|   227k|    {
 4153|   227k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   227k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   227k|        float_reader<CharT> rd{};
 4156|   227k|        return read_impl<Range>(
 4157|   227k|            range, rd,
 4158|   227k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   227k|                return r.read_source(SCN_FWD(args)...);
 4160|   227k|            },
 4161|   227k|            value);
 4162|   227k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   227k|    {
  754|   227k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   227k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   227k|              cvref<T> obj = *get<T>(fn);
  745|   227k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   227k|                  obj(static_cast<decltype(args)>(args)...);
  747|   227k|              }
  748|   227k|              else {
  749|   227k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   227k|              }
  751|   227k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   227k|    {
  684|   227k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   227k|            return static_cast<T*>(s.m_cp);
  686|   227k|        }
  687|   227k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   227k|            return static_cast<T*>(s.m_p);
  689|   227k|        }
  690|   227k|        else {
  691|   227k|            return reinterpret_cast<T*>(s.m_fp);
  692|   227k|        }
  693|   227k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|   227k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   227k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   227k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   227k|        {
  662|   227k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|   611k|{
 5796|   611k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.90k, False: 605k]
  |  |  ------------------
  ------------------
 5797|  5.90k|        return unexpected(e);
 5798|  5.90k|    }
 5799|       |
 5800|   605k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 605k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|   605k|    return skip_classic_whitespace(range);
 5805|   605k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   188k|    {
 5872|   188k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   188k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   188k|            auto rd = make_reader<T, char_type>();
 5877|   188k|            return impl(rd, range, value);
 5878|   188k|        }
 5879|   188k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   188k|            auto rd = make_reader<T, char_type>();
 5881|   188k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 188k, False: 0]
  ------------------
 5882|   188k|                return impl(rd, range, value);
 5883|   188k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   188k|        else {
 5890|   188k|            SCN_EXPECT(false);
 5891|   188k|            SCN_UNREACHABLE;
 5892|   188k|        }
 5893|   188k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   188k|    {
 5864|   188k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.06k|    }                                                  \
  |  |  |  | 3642|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   186k|                        .transform_error(make_eof_scan_error));
 5866|   186k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   188k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   186k|    {
 4153|   186k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   186k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   186k|        float_reader<CharT> rd{};
 4156|   186k|        return read_impl<Range>(
 4157|   186k|            range, rd,
 4158|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   186k|                return r.read_source(SCN_FWD(args)...);
 4160|   186k|            },
 4161|   186k|            value);
 4162|   186k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   186k|    {
  754|   186k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|   186k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   186k|                  obj(static_cast<decltype(args)>(args)...);
  747|   186k|              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   186k|    {
  684|   186k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   186k|            return static_cast<T*>(s.m_cp);
  686|   186k|        }
  687|   186k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   186k|            return static_cast<T*>(s.m_p);
  689|   186k|        }
  690|   186k|        else {
  691|   186k|            return reinterpret_cast<T*>(s.m_fp);
  692|   186k|        }
  693|   186k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   186k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   186k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   186k|        {
  662|   186k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   210k|    {
 5872|   210k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   210k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   210k|            auto rd = make_reader<T, char_type>();
 5877|   210k|            return impl(rd, range, value);
 5878|   210k|        }
 5879|   210k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   210k|            auto rd = make_reader<T, char_type>();
 5881|   210k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 210k, False: 0]
  ------------------
 5882|   210k|                return impl(rd, range, value);
 5883|   210k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   210k|        else {
 5890|   210k|            SCN_EXPECT(false);
 5891|   210k|            SCN_UNREACHABLE;
 5892|   210k|        }
 5893|   210k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   210k|    {
 5864|   210k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   210k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   210k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   210k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.37k, False: 207k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.37k|    }                                                  \
  |  |  |  | 3642|   210k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   207k|                        .transform_error(make_eof_scan_error));
 5866|   207k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   210k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   207k|    {
 4153|   207k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   207k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   207k|        float_reader<CharT> rd{};
 4156|   207k|        return read_impl<Range>(
 4157|   207k|            range, rd,
 4158|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   207k|                return r.read_source(SCN_FWD(args)...);
 4160|   207k|            },
 4161|   207k|            value);
 4162|   207k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   207k|    {
  754|   207k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   207k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   207k|              cvref<T> obj = *get<T>(fn);
  745|   207k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   207k|                  obj(static_cast<decltype(args)>(args)...);
  747|   207k|              }
  748|   207k|              else {
  749|   207k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   207k|              }
  751|   207k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   207k|    {
  684|   207k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   207k|            return static_cast<T*>(s.m_cp);
  686|   207k|        }
  687|   207k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   207k|            return static_cast<T*>(s.m_p);
  689|   207k|        }
  690|   207k|        else {
  691|   207k|            return reinterpret_cast<T*>(s.m_fp);
  692|   207k|        }
  693|   207k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   207k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   207k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   207k|        {
  662|   207k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5871|   213k|    {
 5872|   213k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|   213k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|   213k|            auto rd = make_reader<T, char_type>();
 5877|   213k|            return impl(rd, range, value);
 5878|   213k|        }
 5879|   213k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|   213k|            auto rd = make_reader<T, char_type>();
 5881|   213k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 213k, False: 0]
  ------------------
 5882|   213k|                return impl(rd, range, value);
 5883|   213k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|   213k|        else {
 5890|   213k|            SCN_EXPECT(false);
 5891|   213k|            SCN_UNREACHABLE;
 5892|   213k|        }
 5893|   213k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|   213k|    {
 5864|   213k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.52k, False: 210k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.52k|    }                                                  \
  |  |  |  | 3642|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|   210k|                        .transform_error(make_eof_scan_error));
 5866|   210k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|   213k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|   210k|    {
 4153|   210k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   210k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|   210k|        float_reader<CharT> rd{};
 4156|   210k|        return read_impl<Range>(
 4157|   210k|            range, rd,
 4158|   210k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   210k|                return r.read_source(SCN_FWD(args)...);
 4160|   210k|            },
 4161|   210k|            value);
 4162|   210k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   210k|    {
  754|   210k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   210k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   210k|              cvref<T> obj = *get<T>(fn);
  745|   210k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   210k|                  obj(static_cast<decltype(args)>(args)...);
  747|   210k|              }
  748|   210k|              else {
  749|   210k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   210k|              }
  751|   210k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   210k|    {
  684|   210k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   210k|            return static_cast<T*>(s.m_cp);
  686|   210k|        }
  687|   210k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   210k|            return static_cast<T*>(s.m_p);
  689|   210k|        }
  690|   210k|        else {
  691|   210k|            return reinterpret_cast<T*>(s.m_fp);
  692|   210k|        }
  693|   210k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|   210k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|   210k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|   210k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   210k|        {
  662|   210k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.53M|    {
 2879|  1.53M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  4.51M|    {
 2883|  4.51M|        return m_current;
 2884|  4.51M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  2.98M|    {
 2888|  2.98M|        return m_range.end();
 2889|  2.98M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.45M|    {
 2903|  1.45M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.45M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.45M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.45M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.45M|        }
 2909|  1.45M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.45M|    static_cast<    \
  |  |  929|  1.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.45M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.53M|    {
 2893|  1.53M|        return ranges::subrange{begin(), end()};
 2894|  1.53M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  1.53M|    {
 6038|  1.53M|        const bool need_skipped_width =
 6039|  1.53M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 1.53M]
  |  Branch (6039:33): [True: 0, False: 1.53M]
  ------------------
 6040|  1.53M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  1.53M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.53M]
  ------------------
 6044|  1.53M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.53M]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|  1.53M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 1.53M, False: 0]
  |  Branch (6048:56): [True: 1.53M, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  1.53M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 1.53M]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  3.04M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.0k, False: 1.51M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  18.0k|    }                                                  \
  |  |  |  | 3642|  1.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.04M|                            make_eof_scan_error));
 6059|       |
 6060|  3.04M|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 1.51M]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|  1.51M|            return result_type{it, 0};
 6068|  3.04M|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|  1.53M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  1.43M|    {
 6080|  1.43M|        const bool need_skipped_width =
 6081|  1.43M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 1.43M]
  |  Branch (6081:33): [True: 0, False: 1.43M]
  ------------------
 6082|  1.43M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  1.43M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.43M]
  ------------------
 6085|  1.43M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 1.43M]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  1.43M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 1.43M, False: 0]
  ------------------
 6090|  1.43M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 1.43M]
  ------------------
 6091|  1.43M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  1.43M|        return result_type{rng.begin(), 0};
 6115|  1.43M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6178|   485k|    {
 6179|   485k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   485k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   485k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   485k|            auto rd = make_reader<T, char_type>();
 6184|   485k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 485k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   485k|            return impl(rd, range, value);
 6189|   485k|        }
 6190|   485k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   485k|            auto rd = make_reader<T, char_type>();
 6192|   485k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   485k|                return unexpected(e);
 6194|   485k|            }
 6195|       |
 6196|   485k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   485k|                specs.width != 0) {
 6198|   485k|                return impl(rd, range, value);
 6199|   485k|            }
 6200|       |
 6201|   485k|            auto crange = get_as_contiguous(range);
 6202|   485k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   485k|            return ranges::next(range.begin(),
 6204|   485k|                                ranges::distance(crange.begin(), it));
 6205|   485k|        }
 6206|   485k|        else {
 6207|   485k|            SCN_EXPECT(false);
 6208|   485k|            SCN_UNREACHABLE;
 6209|   485k|        }
 6210|   485k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   485k|    {
 6121|   485k|        const bool need_skipped_width =
 6122|   485k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 485k]
  |  Branch (6122:33): [True: 0, False: 485k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   485k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   485k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   485k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   485k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.47k, False: 480k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  5.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  5.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  5.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  5.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  5.47k|    }                                                  \
  |  |  |  | 3642|   485k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   480k|        auto [it, prefix_width] = prefix_result;
 6127|   480k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   480k|        std::ptrdiff_t value_width = 0;
 6131|   480k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 480k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   480k|        else {
 6147|   480k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   480k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   480k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.6k, False: 458k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  21.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  21.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  21.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  21.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  21.6k|    }                                                  \
  |  | 3642|   480k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   458k|                                             specs, value, loc));
 6149|       |
 6150|   458k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 458k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   458k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   458k|        std::ptrdiff_t postfix_width = 0;
 6159|   458k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 453k, False: 4.56k]
  ------------------
 6160|   453k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   453k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   453k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   453k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   453k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   453k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   453k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   453k|                                 value_width));
 6164|   453k|            std::tie(it, postfix_width) = postfix_result;
 6165|   453k|        }
 6166|       |
 6167|   458k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   458k|                                                 value_width, postfix_width);
 6169|   458k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 458k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   458k|        return it;
 6174|   458k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6178|   520k|    {
 6179|   520k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   520k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   520k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   520k|            auto rd = make_reader<T, char_type>();
 6184|   520k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 520k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   520k|            return impl(rd, range, value);
 6189|   520k|        }
 6190|   520k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   520k|            auto rd = make_reader<T, char_type>();
 6192|   520k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   520k|                return unexpected(e);
 6194|   520k|            }
 6195|       |
 6196|   520k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   520k|                specs.width != 0) {
 6198|   520k|                return impl(rd, range, value);
 6199|   520k|            }
 6200|       |
 6201|   520k|            auto crange = get_as_contiguous(range);
 6202|   520k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   520k|            return ranges::next(range.begin(),
 6204|   520k|                                ranges::distance(crange.begin(), it));
 6205|   520k|        }
 6206|   520k|        else {
 6207|   520k|            SCN_EXPECT(false);
 6208|   520k|            SCN_UNREACHABLE;
 6209|   520k|        }
 6210|   520k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   520k|    {
 6121|   520k|        const bool need_skipped_width =
 6122|   520k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 520k]
  |  Branch (6122:33): [True: 0, False: 520k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   520k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   520k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   520k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   520k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.09k, False: 514k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.09k|    }                                                  \
  |  |  |  | 3642|   520k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   514k|        auto [it, prefix_width] = prefix_result;
 6127|   514k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   514k|        std::ptrdiff_t value_width = 0;
 6131|   514k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 514k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   514k|        else {
 6147|   514k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   514k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   514k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   514k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.0k, False: 493k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  21.0k|    }                                                  \
  |  | 3642|   514k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   514k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   493k|                                             specs, value, loc));
 6149|       |
 6150|   493k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 493k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   493k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   493k|        std::ptrdiff_t postfix_width = 0;
 6159|   493k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 488k, False: 5.10k]
  ------------------
 6160|   488k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   488k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   488k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   488k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 488k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   488k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   488k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   488k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   488k|                                 value_width));
 6164|   488k|            std::tie(it, postfix_width) = postfix_result;
 6165|   488k|        }
 6166|       |
 6167|   493k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   493k|                                                 value_width, postfix_width);
 6169|   493k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 493k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   493k|        return it;
 6174|   493k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6178|   526k|    {
 6179|   526k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|   526k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|   526k|                          basic_contiguous_scan_context<char_type>>) {
 6183|   526k|            auto rd = make_reader<T, char_type>();
 6184|   526k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 526k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|   526k|            return impl(rd, range, value);
 6189|   526k|        }
 6190|   526k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|   526k|            auto rd = make_reader<T, char_type>();
 6192|   526k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|   526k|                return unexpected(e);
 6194|   526k|            }
 6195|       |
 6196|   526k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|   526k|                specs.width != 0) {
 6198|   526k|                return impl(rd, range, value);
 6199|   526k|            }
 6200|       |
 6201|   526k|            auto crange = get_as_contiguous(range);
 6202|   526k|            SCN_TRY(it, impl(rd, crange, value));
 6203|   526k|            return ranges::next(range.begin(),
 6204|   526k|                                ranges::distance(crange.begin(), it));
 6205|   526k|        }
 6206|   526k|        else {
 6207|   526k|            SCN_EXPECT(false);
 6208|   526k|            SCN_UNREACHABLE;
 6209|   526k|        }
 6210|   526k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|   526k|    {
 6121|   526k|        const bool need_skipped_width =
 6122|   526k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 526k]
  |  Branch (6122:33): [True: 0, False: 526k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|   526k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|   526k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   526k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   526k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.44k, False: 520k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  6.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  6.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  6.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  6.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  6.44k|    }                                                  \
  |  |  |  | 3642|   526k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   520k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|   520k|        auto [it, prefix_width] = prefix_result;
 6127|   520k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|   520k|        std::ptrdiff_t value_width = 0;
 6131|   520k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 520k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|   520k|        else {
 6147|   520k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|   520k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   520k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20.6k, False: 499k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  20.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  20.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  20.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  20.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  20.6k|    }                                                  \
  |  | 3642|   520k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   520k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|   499k|                                             specs, value, loc));
 6149|       |
 6150|   499k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 499k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|   499k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|   499k|        std::ptrdiff_t postfix_width = 0;
 6159|   499k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 494k, False: 5.41k]
  ------------------
 6160|   494k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|   494k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   494k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   494k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 494k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   494k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|   494k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|   494k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|   494k|                                 value_width));
 6164|   494k|            std::tie(it, postfix_width) = postfix_result;
 6165|   494k|        }
 6166|       |
 6167|   499k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|   499k|                                                 value_width, postfix_width);
 6169|   499k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 499k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|   499k|        return it;
 6174|   499k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  55.6k|{
 5796|  55.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 55.5k]
  |  |  ------------------
  ------------------
 5797|     96|        return unexpected(e);
 5798|     96|    }
 5799|       |
 5800|  55.5k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 55.5k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  55.5k|    return skip_classic_whitespace(range);
 5805|  55.5k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5871|  18.5k|    {
 5872|  18.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  18.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  18.5k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  18.5k|            auto rd = make_reader<T, char_type>();
 5877|  18.5k|            return impl(rd, range, value);
 5878|  18.5k|        }
 5879|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  18.5k|            auto rd = make_reader<T, char_type>();
 5881|  18.5k|            if (!is_segment_contiguous(range)) {
 5882|  18.5k|                return impl(rd, range, value);
 5883|  18.5k|            }
 5884|  18.5k|            auto crange = get_as_contiguous(range);
 5885|  18.5k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  18.5k|            return ranges::next(range.begin(),
 5887|  18.5k|                                ranges::distance(crange.begin(), it));
 5888|  18.5k|        }
 5889|  18.5k|        else {
 5890|  18.5k|            SCN_EXPECT(false);
 5891|  18.5k|            SCN_UNREACHABLE;
 5892|  18.5k|        }
 5893|  18.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  18.5k|    {
 5864|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 153, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    153|    }                                                  \
  |  |  |  | 3642|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  18.3k|                        .transform_error(make_eof_scan_error));
 5866|  18.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  18.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  18.3k|    {
 4153|  18.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  18.3k|        float_reader<CharT> rd{};
 4156|  18.3k|        return read_impl<Range>(
 4157|  18.3k|            range, rd,
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
 4160|  18.3k|            },
 4161|  18.3k|            value);
 4162|  18.3k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|   110k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  18.3k|    {
  754|  18.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  18.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.3k|              cvref<T> obj = *get<T>(fn);
  745|  18.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.3k|              }
  748|  18.3k|              else {
  749|  18.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.3k|              }
  751|  18.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  18.3k|    {
  684|  18.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.3k|            return static_cast<T*>(s.m_cp);
  686|  18.3k|        }
  687|  18.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.3k|            return static_cast<T*>(s.m_p);
  689|  18.3k|        }
  690|  18.3k|        else {
  691|  18.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.3k|        }
  693|  18.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  18.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  18.3k|        {
  662|  18.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5871|  18.5k|    {
 5872|  18.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  18.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  18.5k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  18.5k|            auto rd = make_reader<T, char_type>();
 5877|  18.5k|            return impl(rd, range, value);
 5878|  18.5k|        }
 5879|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  18.5k|            auto rd = make_reader<T, char_type>();
 5881|  18.5k|            if (!is_segment_contiguous(range)) {
 5882|  18.5k|                return impl(rd, range, value);
 5883|  18.5k|            }
 5884|  18.5k|            auto crange = get_as_contiguous(range);
 5885|  18.5k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  18.5k|            return ranges::next(range.begin(),
 5887|  18.5k|                                ranges::distance(crange.begin(), it));
 5888|  18.5k|        }
 5889|  18.5k|        else {
 5890|  18.5k|            SCN_EXPECT(false);
 5891|  18.5k|            SCN_UNREACHABLE;
 5892|  18.5k|        }
 5893|  18.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  18.5k|    {
 5864|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 165, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    165|    }                                                  \
  |  |  |  | 3642|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  18.3k|                        .transform_error(make_eof_scan_error));
 5866|  18.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  18.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  18.3k|    {
 4153|  18.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  18.3k|        float_reader<CharT> rd{};
 4156|  18.3k|        return read_impl<Range>(
 4157|  18.3k|            range, rd,
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
 4160|  18.3k|            },
 4161|  18.3k|            value);
 4162|  18.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  18.3k|    {
  754|  18.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  18.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.3k|              cvref<T> obj = *get<T>(fn);
  745|  18.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.3k|              }
  748|  18.3k|              else {
  749|  18.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.3k|              }
  751|  18.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  18.3k|    {
  684|  18.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.3k|            return static_cast<T*>(s.m_cp);
  686|  18.3k|        }
  687|  18.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.3k|            return static_cast<T*>(s.m_p);
  689|  18.3k|        }
  690|  18.3k|        else {
  691|  18.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.3k|        }
  693|  18.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  18.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  18.3k|        {
  662|  18.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5871|  18.5k|    {
 5872|  18.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  18.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|  18.5k|                          basic_contiguous_scan_context<char_type>>) {
 5876|  18.5k|            auto rd = make_reader<T, char_type>();
 5877|  18.5k|            return impl(rd, range, value);
 5878|  18.5k|        }
 5879|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|  18.5k|            auto rd = make_reader<T, char_type>();
 5881|  18.5k|            if (!is_segment_contiguous(range)) {
 5882|  18.5k|                return impl(rd, range, value);
 5883|  18.5k|            }
 5884|  18.5k|            auto crange = get_as_contiguous(range);
 5885|  18.5k|            SCN_TRY(it, impl(rd, crange, value));
 5886|  18.5k|            return ranges::next(range.begin(),
 5887|  18.5k|                                ranges::distance(crange.begin(), it));
 5888|  18.5k|        }
 5889|  18.5k|        else {
 5890|  18.5k|            SCN_EXPECT(false);
 5891|  18.5k|            SCN_UNREACHABLE;
 5892|  18.5k|        }
 5893|  18.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|  18.5k|    {
 5864|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    168|    }                                                  \
  |  |  |  | 3642|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  18.4k|                        .transform_error(make_eof_scan_error));
 5866|  18.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  18.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|  18.4k|    {
 4153|  18.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  18.4k|        float_reader<CharT> rd{};
 4156|  18.4k|        return read_impl<Range>(
 4157|  18.4k|            range, rd,
 4158|  18.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.4k|                return r.read_source(SCN_FWD(args)...);
 4160|  18.4k|            },
 4161|  18.4k|            value);
 4162|  18.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  18.4k|    {
  754|  18.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  18.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.4k|              cvref<T> obj = *get<T>(fn);
  745|  18.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.4k|              }
  748|  18.4k|              else {
  749|  18.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.4k|              }
  751|  18.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  18.4k|    {
  684|  18.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.4k|            return static_cast<T*>(s.m_cp);
  686|  18.4k|        }
  687|  18.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.4k|            return static_cast<T*>(s.m_p);
  689|  18.4k|        }
  690|  18.4k|        else {
  691|  18.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.4k|        }
  693|  18.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|  18.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  18.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  18.4k|        {
  662|  18.4k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   181k|    {
 2879|   181k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   381k|    {
 2883|   381k|        return m_current;
 2884|   381k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   199k|    {
 2888|   199k|        return m_range.end();
 2889|   199k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  18.5k|    {
 2903|  18.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  18.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  18.5k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 18.5k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  18.5k|        }
 2909|  18.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  18.5k|    static_cast<    \
  |  |  929|  18.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  18.5k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   181k|    {
 2893|   181k|        return ranges::subrange{begin(), end()};
 2894|   181k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|   181k|    {
 6038|   181k|        const bool need_skipped_width =
 6039|   181k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 0, False: 181k]
  |  Branch (6039:33): [True: 0, False: 181k]
  ------------------
 6040|   181k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|   181k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 0, False: 181k]
  ------------------
 6044|   181k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 0, False: 181k]
  ------------------
 6045|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6046|      0|                             need_skipped_width);
 6047|      0|        }
 6048|   181k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 181k, False: 0]
  |  Branch (6048:56): [True: 181k, False: 0]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|   181k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 181k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|   361k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|   181k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   181k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   181k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.47k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.47k|    }                                                  \
  |  |  |  | 3642|   181k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|   361k|                            make_eof_scan_error));
 6059|       |
 6060|   361k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 0, False: 179k]
  ------------------
 6061|      0|                return result_type{
 6062|      0|                    it,
 6063|      0|                    calculate_text_width(make_contiguous_buffer(
 6064|      0|                                             ranges::subrange{rng.begin(), it})
 6065|      0|                                             .view())};
 6066|      0|            }
 6067|   179k|            return result_type{it, 0};
 6068|   361k|        }
 6069|       |
 6070|      0|        return result_type{rng.begin(), 0};
 6071|   181k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  18.2k|    {
 6080|  18.2k|        const bool need_skipped_width =
 6081|  18.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 0, False: 18.2k]
  |  Branch (6081:33): [True: 0, False: 18.2k]
  ------------------
 6082|  18.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  18.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 0, False: 18.2k]
  ------------------
 6085|  18.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 0, False: 18.2k]
  ------------------
 6086|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|      0|                             specs.fill, need_skipped_width);
 6088|      0|        }
 6089|  18.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 18.2k, False: 0]
  ------------------
 6090|  18.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 0, False: 18.2k]
  ------------------
 6091|  18.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  |  Branch (6091:35): [True: 0, False: 0]
  ------------------
 6092|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 0]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|      0|                            make_eof_scan_error));
 6104|       |
 6105|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 0, False: 0]
  ------------------
 6106|      0|                return result_type{
 6107|      0|                    it,
 6108|      0|                    calculate_text_width(make_contiguous_buffer(
 6109|      0|                                             ranges::subrange{rng.begin(), it})
 6110|      0|                                             .view())};
 6111|      0|            }
 6112|      0|            return result_type{it, 0};
 6113|      0|        }
 6114|  18.2k|        return result_type{rng.begin(), 0};
 6115|  18.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6178|  60.4k|    {
 6179|  60.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  60.4k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  60.4k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  60.4k|            auto rd = make_reader<T, char_type>();
 6184|  60.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  60.4k|            return impl(rd, range, value);
 6189|  60.4k|        }
 6190|  60.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  60.4k|            auto rd = make_reader<T, char_type>();
 6192|  60.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  60.4k|                return unexpected(e);
 6194|  60.4k|            }
 6195|       |
 6196|  60.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  60.4k|                specs.width != 0) {
 6198|  60.4k|                return impl(rd, range, value);
 6199|  60.4k|            }
 6200|       |
 6201|  60.4k|            auto crange = get_as_contiguous(range);
 6202|  60.4k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  60.4k|            return ranges::next(range.begin(),
 6204|  60.4k|                                ranges::distance(crange.begin(), it));
 6205|  60.4k|        }
 6206|  60.4k|        else {
 6207|  60.4k|            SCN_EXPECT(false);
 6208|  60.4k|            SCN_UNREACHABLE;
 6209|  60.4k|        }
 6210|  60.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  60.4k|    {
 6121|  60.4k|        const bool need_skipped_width =
 6122|  60.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 60.4k]
  |  Branch (6122:33): [True: 0, False: 60.4k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  60.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  60.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 476, False: 59.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    476|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    476|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    476|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    476|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    476|    }                                                  \
  |  |  |  | 3642|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  59.9k|        auto [it, prefix_width] = prefix_result;
 6127|  59.9k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  59.9k|        std::ptrdiff_t value_width = 0;
 6131|  59.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 59.9k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  59.9k|        else {
 6147|  59.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.8k, False: 6.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  53.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  53.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  53.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  53.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  53.8k|    }                                                  \
  |  | 3642|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  6.12k|                                             specs, value, loc));
 6149|       |
 6150|  6.12k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 6.12k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  6.12k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  6.12k|        std::ptrdiff_t postfix_width = 0;
 6159|  6.12k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 6.03k, False: 84]
  ------------------
 6160|  6.03k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  6.03k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  6.03k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  6.03k|                                 value_width));
 6164|  6.03k|            std::tie(it, postfix_width) = postfix_result;
 6165|  6.03k|        }
 6166|       |
 6167|  6.12k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  6.12k|                                                 value_width, postfix_width);
 6169|  6.12k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 6.12k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  6.12k|        return it;
 6174|  6.12k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6178|  60.4k|    {
 6179|  60.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  60.4k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  60.4k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  60.4k|            auto rd = make_reader<T, char_type>();
 6184|  60.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  60.4k|            return impl(rd, range, value);
 6189|  60.4k|        }
 6190|  60.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  60.4k|            auto rd = make_reader<T, char_type>();
 6192|  60.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  60.4k|                return unexpected(e);
 6194|  60.4k|            }
 6195|       |
 6196|  60.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  60.4k|                specs.width != 0) {
 6198|  60.4k|                return impl(rd, range, value);
 6199|  60.4k|            }
 6200|       |
 6201|  60.4k|            auto crange = get_as_contiguous(range);
 6202|  60.4k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  60.4k|            return ranges::next(range.begin(),
 6204|  60.4k|                                ranges::distance(crange.begin(), it));
 6205|  60.4k|        }
 6206|  60.4k|        else {
 6207|  60.4k|            SCN_EXPECT(false);
 6208|  60.4k|            SCN_UNREACHABLE;
 6209|  60.4k|        }
 6210|  60.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  60.4k|    {
 6121|  60.4k|        const bool need_skipped_width =
 6122|  60.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 60.4k]
  |  Branch (6122:33): [True: 0, False: 60.4k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  60.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  60.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 498, False: 59.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    498|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    498|    }                                                  \
  |  |  |  | 3642|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  59.9k|        auto [it, prefix_width] = prefix_result;
 6127|  59.9k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  59.9k|        std::ptrdiff_t value_width = 0;
 6131|  59.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 59.9k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  59.9k|        else {
 6147|  59.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 6.16k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  53.7k|    }                                                  \
  |  | 3642|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  6.16k|                                             specs, value, loc));
 6149|       |
 6150|  6.16k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 6.16k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  6.16k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  6.16k|        std::ptrdiff_t postfix_width = 0;
 6159|  6.16k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 6.07k, False: 90]
  ------------------
 6160|  6.07k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  6.07k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  6.07k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  6.07k|                                 value_width));
 6164|  6.07k|            std::tie(it, postfix_width) = postfix_result;
 6165|  6.07k|        }
 6166|       |
 6167|  6.16k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  6.16k|                                                 value_width, postfix_width);
 6169|  6.16k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 6.16k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  6.16k|        return it;
 6174|  6.16k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6178|  60.5k|    {
 6179|  60.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  60.5k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  60.5k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  60.5k|            auto rd = make_reader<T, char_type>();
 6184|  60.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
 6185|      0|                return unexpected(e);
 6186|      0|            }
 6187|       |
 6188|  60.5k|            return impl(rd, range, value);
 6189|  60.5k|        }
 6190|  60.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  60.5k|            auto rd = make_reader<T, char_type>();
 6192|  60.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  60.5k|                return unexpected(e);
 6194|  60.5k|            }
 6195|       |
 6196|  60.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  60.5k|                specs.width != 0) {
 6198|  60.5k|                return impl(rd, range, value);
 6199|  60.5k|            }
 6200|       |
 6201|  60.5k|            auto crange = get_as_contiguous(range);
 6202|  60.5k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  60.5k|            return ranges::next(range.begin(),
 6204|  60.5k|                                ranges::distance(crange.begin(), it));
 6205|  60.5k|        }
 6206|  60.5k|        else {
 6207|  60.5k|            SCN_EXPECT(false);
 6208|  60.5k|            SCN_UNREACHABLE;
 6209|  60.5k|        }
 6210|  60.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|  60.5k|    {
 6121|  60.5k|        const bool need_skipped_width =
 6122|  60.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 0, False: 60.5k]
  |  Branch (6122:33): [True: 0, False: 60.5k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  60.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 504, False: 60.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    504|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    504|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    504|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    504|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    504|    }                                                  \
  |  |  |  | 3642|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  60.0k|        auto [it, prefix_width] = prefix_result;
 6127|  60.0k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  60.0k|        std::ptrdiff_t value_width = 0;
 6131|  60.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 60.0k]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|  60.0k|        else {
 6147|  60.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  60.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  60.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 6.23k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  53.7k|    }                                                  \
  |  | 3642|  60.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  6.23k|                                             specs, value, loc));
 6149|       |
 6150|  6.23k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 6.23k]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|  6.23k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  6.23k|        std::ptrdiff_t postfix_width = 0;
 6159|  6.23k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 6.14k, False: 90]
  ------------------
 6160|  6.14k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  6.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  6.14k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  6.14k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  6.14k|                                 value_width));
 6164|  6.14k|            std::tie(it, postfix_width) = postfix_result;
 6165|  6.14k|        }
 6166|       |
 6167|  6.23k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  6.23k|                                                 value_width, postfix_width);
 6169|  6.23k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 6.23k]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|  6.23k|        return it;
 6174|  6.23k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5795|  55.6k|{
 5796|  55.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 55.5k]
  |  |  ------------------
  ------------------
 5797|     96|        return unexpected(e);
 5798|     96|    }
 5799|       |
 5800|  55.5k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 0, False: 55.5k]
  ------------------
 5801|      0|        return range.begin();
 5802|      0|    }
 5803|       |
 5804|  55.5k|    return skip_classic_whitespace(range);
 5805|  55.5k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  18.5k|    {
 5872|  18.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  18.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  18.5k|            auto rd = make_reader<T, char_type>();
 5877|  18.5k|            return impl(rd, range, value);
 5878|  18.5k|        }
 5879|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  18.5k|            auto rd = make_reader<T, char_type>();
 5881|  18.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 18.5k, False: 0]
  ------------------
 5882|  18.5k|                return impl(rd, range, value);
 5883|  18.5k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  18.5k|        else {
 5890|  18.5k|            SCN_EXPECT(false);
 5891|  18.5k|            SCN_UNREACHABLE;
 5892|  18.5k|        }
 5893|  18.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  18.5k|    {
 5864|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 153, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    153|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    153|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    153|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    153|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    153|    }                                                  \
  |  |  |  | 3642|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  18.3k|                        .transform_error(make_eof_scan_error));
 5866|  18.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  18.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  18.3k|    {
 4153|  18.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  18.3k|        float_reader<CharT> rd{};
 4156|  18.3k|        return read_impl<Range>(
 4157|  18.3k|            range, rd,
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
 4160|  18.3k|            },
 4161|  18.3k|            value);
 4162|  18.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  18.3k|    {
  754|  18.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  18.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.3k|              cvref<T> obj = *get<T>(fn);
  745|  18.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.3k|              }
  748|  18.3k|              else {
  749|  18.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.3k|              }
  751|  18.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  18.3k|    {
  684|  18.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.3k|            return static_cast<T*>(s.m_cp);
  686|  18.3k|        }
  687|  18.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.3k|            return static_cast<T*>(s.m_p);
  689|  18.3k|        }
  690|  18.3k|        else {
  691|  18.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.3k|        }
  693|  18.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  18.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  18.3k|        {
  662|  18.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  18.5k|    {
 5872|  18.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  18.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  18.5k|            auto rd = make_reader<T, char_type>();
 5877|  18.5k|            return impl(rd, range, value);
 5878|  18.5k|        }
 5879|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  18.5k|            auto rd = make_reader<T, char_type>();
 5881|  18.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 18.5k, False: 0]
  ------------------
 5882|  18.5k|                return impl(rd, range, value);
 5883|  18.5k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  18.5k|        else {
 5890|  18.5k|            SCN_EXPECT(false);
 5891|  18.5k|            SCN_UNREACHABLE;
 5892|  18.5k|        }
 5893|  18.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  18.5k|    {
 5864|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 165, False: 18.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    165|    }                                                  \
  |  |  |  | 3642|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  18.3k|                        .transform_error(make_eof_scan_error));
 5866|  18.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  18.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  18.3k|    {
 4153|  18.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  18.3k|        float_reader<CharT> rd{};
 4156|  18.3k|        return read_impl<Range>(
 4157|  18.3k|            range, rd,
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
 4160|  18.3k|            },
 4161|  18.3k|            value);
 4162|  18.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  18.3k|    {
  754|  18.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  18.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.3k|              cvref<T> obj = *get<T>(fn);
  745|  18.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.3k|              }
  748|  18.3k|              else {
  749|  18.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.3k|              }
  751|  18.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  18.3k|    {
  684|  18.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.3k|            return static_cast<T*>(s.m_cp);
  686|  18.3k|        }
  687|  18.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.3k|            return static_cast<T*>(s.m_p);
  689|  18.3k|        }
  690|  18.3k|        else {
  691|  18.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.3k|        }
  693|  18.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  18.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  18.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  18.3k|        {
  662|  18.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5871|  18.5k|    {
 5872|  18.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|  18.5k|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|      0|                          basic_contiguous_scan_context<char_type>>) {
 5876|  18.5k|            auto rd = make_reader<T, char_type>();
 5877|  18.5k|            return impl(rd, range, value);
 5878|  18.5k|        }
 5879|  18.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5879:28): [Folded - Ignored]
  ------------------
 5880|  18.5k|            auto rd = make_reader<T, char_type>();
 5881|  18.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5881:17): [True: 18.5k, False: 0]
  ------------------
 5882|  18.5k|                return impl(rd, range, value);
 5883|  18.5k|            }
 5884|      0|            auto crange = get_as_contiguous(range);
 5885|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5886|      0|            return ranges::next(range.begin(),
 5887|      0|                                ranges::distance(crange.begin(), it));
 5888|      0|        }
 5889|  18.5k|        else {
 5890|  18.5k|            SCN_EXPECT(false);
 5891|  18.5k|            SCN_UNREACHABLE;
 5892|  18.5k|        }
 5893|  18.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5863|  18.5k|    {
 5864|  18.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  18.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  18.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  18.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    168|    }                                                  \
  |  |  |  | 3642|  18.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|  18.4k|                        .transform_error(make_eof_scan_error));
 5866|  18.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|  18.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4152|  18.4k|    {
 4153|  18.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  18.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|  18.4k|        float_reader<CharT> rd{};
 4156|  18.4k|        return read_impl<Range>(
 4157|  18.4k|            range, rd,
 4158|  18.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.4k|                return r.read_source(SCN_FWD(args)...);
 4160|  18.4k|            },
 4161|  18.4k|            value);
 4162|  18.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  18.4k|    {
  754|  18.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  18.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.4k|              cvref<T> obj = *get<T>(fn);
  745|  18.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.4k|              }
  748|  18.4k|              else {
  749|  18.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.4k|              }
  751|  18.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  18.4k|    {
  684|  18.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.4k|            return static_cast<T*>(s.m_cp);
  686|  18.4k|        }
  687|  18.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.4k|            return static_cast<T*>(s.m_p);
  689|  18.4k|        }
  690|  18.4k|        else {
  691|  18.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.4k|        }
  693|  18.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4158|  18.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4159|  18.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|  18.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  18.4k|        {
  662|  18.4k|        }

LLVMFuzzerTestOneInput:
   54|  2.71k|{
   55|  2.71k|    scn::fuzz::run(data, size);
   56|  2.71k|    return 0;
   57|  2.71k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.71k|{
   33|  2.71k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.71k]
  |  Branch (33:35): [True: 0, False: 2.71k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.71k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.71k|    const auto& f =
   40|  2.71k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.71k|    do_basic_run(sv, f);
   42|       |
   43|  2.71k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.71k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.71k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.71k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.71k, False: 0]
  ------------------
   47|  2.71k|        do_basic_run(wsv_transcode, wf);
   48|  2.71k|    }
   49|  2.71k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.71k|{
   25|  2.71k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.71k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.71k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.71k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.71k|{
   25|  2.71k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.71k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.71k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.71k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  5.42k|{
   25|  5.42k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.42k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.42k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.42k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  5.42k|{
   25|  5.42k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.42k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.42k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.42k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.71k|{
   52|  2.71k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.71k|    string_buffer.resize(size);
   56|  2.71k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.71k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.71k|    const auto wsv_reinterpret_size =
   61|  2.71k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 66, False: 2.64k]
  ------------------
   62|  2.71k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.71k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.71k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.71k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.71k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.71k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.71k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.71k|{
  122|  2.71k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.71k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.71k|    buf.resize(sizeof...(Args));
  125|  2.71k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.71k|    return buf;
  127|  2.71k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.71k|{
  108|  2.71k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.71k|        return format_string_view_buffer;
  110|  2.71k|    }
  111|  2.71k|    else {
  112|  2.71k|        return wformat_string_view_buffer;
  113|  2.71k|    }
  114|  2.71k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  2.71k|{
  182|  2.71k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  2.71k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  2.71k|                                   format_strings);
  185|  2.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.71k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.71k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   310k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   310k|            auto result = scn::scan<T>(
  138|   310k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   310k|                scn::runtime_format(f));
  140|   310k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 16.2k, False: 294k]
  ------------------
  141|  16.2k|                break;
  142|  16.2k|            }
  143|   294k|            it = result->begin();
  144|   294k|        }
  145|  16.2k|    }
  146|       |
  147|       |    // scan localized
  148|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 16.2k, False: 2.71k]
  ------------------
  149|  16.2k|        auto it = scn::ranges::begin(source);
  150|   310k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   310k|            auto result = scn::scan<T>(
  152|   310k|                global_locale,
  153|   310k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   310k|                scn::runtime_format(f));
  155|   310k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 16.2k, False: 294k]
  ------------------
  156|  16.2k|                break;
  157|  16.2k|            }
  158|   294k|            it = result->begin();
  159|   294k|        }
  160|  16.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.71k|    {
  164|  2.71k|        auto it = scn::ranges::begin(source);
  165|  68.0k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  68.0k|            auto result = scn::scan_value<T>(
  167|  68.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  68.0k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.71k, False: 65.3k]
  ------------------
  169|  2.71k|                break;
  170|  2.71k|            }
  171|  65.3k|            it = result->begin();
  172|  65.3k|        }
  173|  2.71k|    }
  174|  2.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.71k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.71k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   335k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   335k|            auto result = scn::scan<T>(
  138|   335k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   335k|                scn::runtime_format(f));
  140|   335k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 16.2k, False: 319k]
  ------------------
  141|  16.2k|                break;
  142|  16.2k|            }
  143|   319k|            it = result->begin();
  144|   319k|        }
  145|  16.2k|    }
  146|       |
  147|       |    // scan localized
  148|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 16.2k, False: 2.71k]
  ------------------
  149|  16.2k|        auto it = scn::ranges::begin(source);
  150|   335k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   335k|            auto result = scn::scan<T>(
  152|   335k|                global_locale,
  153|   335k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   335k|                scn::runtime_format(f));
  155|   335k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 16.2k, False: 319k]
  ------------------
  156|  16.2k|                break;
  157|  16.2k|            }
  158|   319k|            it = result->begin();
  159|   319k|        }
  160|  16.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.71k|    {
  164|  2.71k|        auto it = scn::ranges::begin(source);
  165|  75.3k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  75.3k|            auto result = scn::scan_value<T>(
  167|  75.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  75.3k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.71k, False: 72.6k]
  ------------------
  169|  2.71k|                break;
  170|  2.71k|            }
  171|  72.6k|            it = result->begin();
  172|  72.6k|        }
  173|  2.71k|    }
  174|  2.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.71k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.71k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   340k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   340k|            auto result = scn::scan<T>(
  138|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   340k|                scn::runtime_format(f));
  140|   340k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 16.2k, False: 323k]
  ------------------
  141|  16.2k|                break;
  142|  16.2k|            }
  143|   323k|            it = result->begin();
  144|   323k|        }
  145|  16.2k|    }
  146|       |
  147|       |    // scan localized
  148|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 16.2k, False: 2.71k]
  ------------------
  149|  16.2k|        auto it = scn::ranges::begin(source);
  150|   340k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   340k|            auto result = scn::scan<T>(
  152|   340k|                global_locale,
  153|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   340k|                scn::runtime_format(f));
  155|   340k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 16.2k, False: 323k]
  ------------------
  156|  16.2k|                break;
  157|  16.2k|            }
  158|   323k|            it = result->begin();
  159|   323k|        }
  160|  16.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.71k|    {
  164|  2.71k|        auto it = scn::ranges::begin(source);
  165|  76.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  76.8k|            auto result = scn::scan_value<T>(
  167|  76.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  76.8k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.71k, False: 74.1k]
  ------------------
  169|  2.71k|                break;
  170|  2.71k|            }
  171|  74.1k|            it = result->begin();
  172|  74.1k|        }
  173|  2.71k|    }
  174|  2.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.71k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.71k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   307k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   307k|            auto result = scn::scan<T>(
  138|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   307k|                scn::runtime_format(f));
  140|   307k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 16.2k, False: 291k]
  ------------------
  141|  16.2k|                break;
  142|  16.2k|            }
  143|   291k|            it = result->begin();
  144|   291k|        }
  145|  16.2k|    }
  146|       |
  147|       |    // scan localized
  148|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 16.2k, False: 2.71k]
  ------------------
  149|  16.2k|        auto it = scn::ranges::begin(source);
  150|   307k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   307k|            auto result = scn::scan<T>(
  152|   307k|                global_locale,
  153|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   307k|                scn::runtime_format(f));
  155|   307k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 16.2k, False: 291k]
  ------------------
  156|  16.2k|                break;
  157|  16.2k|            }
  158|   291k|            it = result->begin();
  159|   291k|        }
  160|  16.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.71k|    {
  164|  2.71k|        auto it = scn::ranges::begin(source);
  165|  62.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  62.9k|            auto result = scn::scan_value<T>(
  167|  62.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  62.9k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.71k, False: 60.2k]
  ------------------
  169|  2.71k|                break;
  170|  2.71k|            }
  171|  60.2k|            it = result->begin();
  172|  60.2k|        }
  173|  2.71k|    }
  174|  2.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.71k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.71k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   332k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   332k|            auto result = scn::scan<T>(
  138|   332k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   332k|                scn::runtime_format(f));
  140|   332k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 16.2k, False: 316k]
  ------------------
  141|  16.2k|                break;
  142|  16.2k|            }
  143|   316k|            it = result->begin();
  144|   316k|        }
  145|  16.2k|    }
  146|       |
  147|       |    // scan localized
  148|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 16.2k, False: 2.71k]
  ------------------
  149|  16.2k|        auto it = scn::ranges::begin(source);
  150|   332k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   332k|            auto result = scn::scan<T>(
  152|   332k|                global_locale,
  153|   332k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   332k|                scn::runtime_format(f));
  155|   332k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 16.2k, False: 316k]
  ------------------
  156|  16.2k|                break;
  157|  16.2k|            }
  158|   316k|            it = result->begin();
  159|   316k|        }
  160|  16.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.71k|    {
  164|  2.71k|        auto it = scn::ranges::begin(source);
  165|  70.0k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  70.0k|            auto result = scn::scan_value<T>(
  167|  70.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  70.0k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.71k, False: 67.2k]
  ------------------
  169|  2.71k|                break;
  170|  2.71k|            }
  171|  67.2k|            it = result->begin();
  172|  67.2k|        }
  173|  2.71k|    }
  174|  2.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.71k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.71k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   337k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   337k|            auto result = scn::scan<T>(
  138|   337k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|   337k|                scn::runtime_format(f));
  140|   337k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 16.2k, False: 320k]
  ------------------
  141|  16.2k|                break;
  142|  16.2k|            }
  143|   320k|            it = result->begin();
  144|   320k|        }
  145|  16.2k|    }
  146|       |
  147|       |    // scan localized
  148|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 16.2k, False: 2.71k]
  ------------------
  149|  16.2k|        auto it = scn::ranges::begin(source);
  150|   337k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|   337k|            auto result = scn::scan<T>(
  152|   337k|                global_locale,
  153|   337k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|   337k|                scn::runtime_format(f));
  155|   337k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 16.2k, False: 320k]
  ------------------
  156|  16.2k|                break;
  157|  16.2k|            }
  158|   320k|            it = result->begin();
  159|   320k|        }
  160|  16.2k|    }
  161|       |
  162|       |    // scan_value
  163|  2.71k|    {
  164|  2.71k|        auto it = scn::ranges::begin(source);
  165|  71.0k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  71.0k|            auto result = scn::scan_value<T>(
  167|  71.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  71.0k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 2.71k, False: 68.2k]
  ------------------
  169|  2.71k|                break;
  170|  2.71k|            }
  171|  68.2k|            it = result->begin();
  172|  68.2k|        }
  173|  2.71k|    }
  174|  2.71k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.71k|{
   90|  2.71k|    using char_type = ranges::range_value_t<Source>;
   91|  2.71k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.71k|    deque.clear();
   93|  2.71k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.71k|              std::back_inserter(deque));
   95|  2.71k|    return deque;
   96|  2.71k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.71k|{
   79|  2.71k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.71k|        return noncontiguous_buffer;
   81|  2.71k|    }
   82|  2.71k|    else {
   83|  2.71k|        return wnoncontiguous_buffer;
   84|  2.71k|    }
   85|  2.71k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.71k|{
  122|  2.71k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.71k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.71k|    buf.resize(sizeof...(Args));
  125|  2.71k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.71k|    return buf;
  127|  2.71k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.71k|{
  108|  2.71k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.71k|        return format_string_view_buffer;
  110|  2.71k|    }
  111|  2.71k|    else {
  112|  2.71k|        return wformat_string_view_buffer;
  113|  2.71k|    }
  114|  2.71k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|  5.42k|{
  182|  5.42k|    do_basic_run_for_source<CharT>(data, format_strings);
  183|  5.42k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|  5.42k|                                   format_strings);
  185|  5.42k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.42k|{
  133|       |    // Regular scan
  134|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.5k, False: 5.42k]
  ------------------
  135|  32.5k|        auto it = scn::ranges::begin(source);
  136|  36.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  36.3k|            auto result = scn::scan<T>(
  138|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  36.3k|                scn::runtime_format(f));
  140|  36.3k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 32.5k, False: 3.80k]
  ------------------
  141|  32.5k|                break;
  142|  32.5k|            }
  143|  3.80k|            it = result->begin();
  144|  3.80k|        }
  145|  32.5k|    }
  146|       |
  147|       |    // scan localized
  148|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 32.5k, False: 5.42k]
  ------------------
  149|  32.5k|        auto it = scn::ranges::begin(source);
  150|  36.3k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  36.3k|            auto result = scn::scan<T>(
  152|  36.3k|                global_locale,
  153|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  36.3k|                scn::runtime_format(f));
  155|  36.3k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 32.5k, False: 3.80k]
  ------------------
  156|  32.5k|                break;
  157|  32.5k|            }
  158|  3.80k|            it = result->begin();
  159|  3.80k|        }
  160|  32.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.42k|    {
  164|  5.42k|        auto it = scn::ranges::begin(source);
  165|  6.17k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.17k|            auto result = scn::scan_value<T>(
  167|  6.17k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.17k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.42k, False: 748]
  ------------------
  169|  5.42k|                break;
  170|  5.42k|            }
  171|    748|            it = result->begin();
  172|    748|        }
  173|  5.42k|    }
  174|  5.42k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.42k|{
  133|       |    // Regular scan
  134|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.5k, False: 5.42k]
  ------------------
  135|  32.5k|        auto it = scn::ranges::begin(source);
  136|  36.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  36.4k|            auto result = scn::scan<T>(
  138|  36.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  36.4k|                scn::runtime_format(f));
  140|  36.4k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 32.5k, False: 3.83k]
  ------------------
  141|  32.5k|                break;
  142|  32.5k|            }
  143|  3.83k|            it = result->begin();
  144|  3.83k|        }
  145|  32.5k|    }
  146|       |
  147|       |    // scan localized
  148|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 32.5k, False: 5.42k]
  ------------------
  149|  32.5k|        auto it = scn::ranges::begin(source);
  150|  36.4k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  36.4k|            auto result = scn::scan<T>(
  152|  36.4k|                global_locale,
  153|  36.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  36.4k|                scn::runtime_format(f));
  155|  36.4k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 32.5k, False: 3.83k]
  ------------------
  156|  32.5k|                break;
  157|  32.5k|            }
  158|  3.83k|            it = result->begin();
  159|  3.83k|        }
  160|  32.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.42k|    {
  164|  5.42k|        auto it = scn::ranges::begin(source);
  165|  6.18k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.18k|            auto result = scn::scan_value<T>(
  167|  6.18k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.18k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.42k, False: 756]
  ------------------
  169|  5.42k|                break;
  170|  5.42k|            }
  171|    756|            it = result->begin();
  172|    756|        }
  173|  5.42k|    }
  174|  5.42k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.42k|{
  133|       |    // Regular scan
  134|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.5k, False: 5.42k]
  ------------------
  135|  32.5k|        auto it = scn::ranges::begin(source);
  136|  36.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  36.4k|            auto result = scn::scan<T>(
  138|  36.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  36.4k|                scn::runtime_format(f));
  140|  36.4k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 32.5k, False: 3.88k]
  ------------------
  141|  32.5k|                break;
  142|  32.5k|            }
  143|  3.88k|            it = result->begin();
  144|  3.88k|        }
  145|  32.5k|    }
  146|       |
  147|       |    // scan localized
  148|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 32.5k, False: 5.42k]
  ------------------
  149|  32.5k|        auto it = scn::ranges::begin(source);
  150|  36.4k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  36.4k|            auto result = scn::scan<T>(
  152|  36.4k|                global_locale,
  153|  36.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  36.4k|                scn::runtime_format(f));
  155|  36.4k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 32.5k, False: 3.88k]
  ------------------
  156|  32.5k|                break;
  157|  32.5k|            }
  158|  3.88k|            it = result->begin();
  159|  3.88k|        }
  160|  32.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.42k|    {
  164|  5.42k|        auto it = scn::ranges::begin(source);
  165|  6.19k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.19k|            auto result = scn::scan_value<T>(
  167|  6.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.19k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.42k, False: 770]
  ------------------
  169|  5.42k|                break;
  170|  5.42k|            }
  171|    770|            it = result->begin();
  172|    770|        }
  173|  5.42k|    }
  174|  5.42k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.42k|{
  133|       |    // Regular scan
  134|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.5k, False: 5.42k]
  ------------------
  135|  32.5k|        auto it = scn::ranges::begin(source);
  136|  36.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  36.3k|            auto result = scn::scan<T>(
  138|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  36.3k|                scn::runtime_format(f));
  140|  36.3k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 32.5k, False: 3.79k]
  ------------------
  141|  32.5k|                break;
  142|  32.5k|            }
  143|  3.79k|            it = result->begin();
  144|  3.79k|        }
  145|  32.5k|    }
  146|       |
  147|       |    // scan localized
  148|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 32.5k, False: 5.42k]
  ------------------
  149|  32.5k|        auto it = scn::ranges::begin(source);
  150|  36.3k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  36.3k|            auto result = scn::scan<T>(
  152|  36.3k|                global_locale,
  153|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  36.3k|                scn::runtime_format(f));
  155|  36.3k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 32.5k, False: 3.79k]
  ------------------
  156|  32.5k|                break;
  157|  32.5k|            }
  158|  3.79k|            it = result->begin();
  159|  3.79k|        }
  160|  32.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.42k|    {
  164|  5.42k|        auto it = scn::ranges::begin(source);
  165|  6.17k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.17k|            auto result = scn::scan_value<T>(
  167|  6.17k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.17k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.42k, False: 744]
  ------------------
  169|  5.42k|                break;
  170|  5.42k|            }
  171|    744|            it = result->begin();
  172|    744|        }
  173|  5.42k|    }
  174|  5.42k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.42k|{
  133|       |    // Regular scan
  134|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.5k, False: 5.42k]
  ------------------
  135|  32.5k|        auto it = scn::ranges::begin(source);
  136|  36.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  36.3k|            auto result = scn::scan<T>(
  138|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  36.3k|                scn::runtime_format(f));
  140|  36.3k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 32.5k, False: 3.82k]
  ------------------
  141|  32.5k|                break;
  142|  32.5k|            }
  143|  3.82k|            it = result->begin();
  144|  3.82k|        }
  145|  32.5k|    }
  146|       |
  147|       |    // scan localized
  148|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 32.5k, False: 5.42k]
  ------------------
  149|  32.5k|        auto it = scn::ranges::begin(source);
  150|  36.3k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  36.3k|            auto result = scn::scan<T>(
  152|  36.3k|                global_locale,
  153|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  36.3k|                scn::runtime_format(f));
  155|  36.3k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 32.5k, False: 3.82k]
  ------------------
  156|  32.5k|                break;
  157|  32.5k|            }
  158|  3.82k|            it = result->begin();
  159|  3.82k|        }
  160|  32.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.42k|    {
  164|  5.42k|        auto it = scn::ranges::begin(source);
  165|  6.18k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.18k|            auto result = scn::scan_value<T>(
  167|  6.18k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.18k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.42k, False: 752]
  ------------------
  169|  5.42k|                break;
  170|  5.42k|            }
  171|    752|            it = result->begin();
  172|    752|        }
  173|  5.42k|    }
  174|  5.42k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.42k|{
  133|       |    // Regular scan
  134|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.5k, False: 5.42k]
  ------------------
  135|  32.5k|        auto it = scn::ranges::begin(source);
  136|  36.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  36.4k|            auto result = scn::scan<T>(
  138|  36.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  36.4k|                scn::runtime_format(f));
  140|  36.4k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 32.5k, False: 3.87k]
  ------------------
  141|  32.5k|                break;
  142|  32.5k|            }
  143|  3.87k|            it = result->begin();
  144|  3.87k|        }
  145|  32.5k|    }
  146|       |
  147|       |    // scan localized
  148|  32.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 32.5k, False: 5.42k]
  ------------------
  149|  32.5k|        auto it = scn::ranges::begin(source);
  150|  36.4k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  36.4k|            auto result = scn::scan<T>(
  152|  36.4k|                global_locale,
  153|  36.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  36.4k|                scn::runtime_format(f));
  155|  36.4k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 32.5k, False: 3.87k]
  ------------------
  156|  32.5k|                break;
  157|  32.5k|            }
  158|  3.87k|            it = result->begin();
  159|  3.87k|        }
  160|  32.5k|    }
  161|       |
  162|       |    // scan_value
  163|  5.42k|    {
  164|  5.42k|        auto it = scn::ranges::begin(source);
  165|  6.19k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  6.19k|            auto result = scn::scan_value<T>(
  167|  6.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  6.19k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 5.42k, False: 766]
  ------------------
  169|  5.42k|                break;
  170|  5.42k|            }
  171|    766|            it = result->begin();
  172|    766|        }
  173|  5.42k|    }
  174|  5.42k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  5.42k|{
   90|  5.42k|    using char_type = ranges::range_value_t<Source>;
   91|  5.42k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  5.42k|    deque.clear();
   93|  5.42k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  5.42k|              std::back_inserter(deque));
   95|  5.42k|    return deque;
   96|  5.42k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  5.42k|{
   79|  5.42k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  5.42k|        return noncontiguous_buffer;
   81|  5.42k|    }
   82|  5.42k|    else {
   83|  5.42k|        return wnoncontiguous_buffer;
   84|  5.42k|    }
   85|  5.42k|}

